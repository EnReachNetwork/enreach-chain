"use strict";
// Generated by Ignite ignite.com/cli
Object.defineProperty(exports, "__esModule", { value: true });
exports.queryClient = exports.txClient = exports.registry = exports.QueryAllMinerResponse = exports.MsgUpdateParams = exports.QueryGetMinerResponse = exports.QueryGetMinerRequest = exports.MsgDeleteMinerResponse = exports.MsgDeleteMiner = exports.MsgCreateMiner = exports.Params = exports.QueryParamsRequest = exports.MsgUpdateMinerResponse = exports.MsgCreateMinerResponse = exports.GenesisState = exports.QueryAllMinerRequest = exports.QueryParamsResponse = exports.Miner = exports.MsgUpdateParamsResponse = exports.MsgUpdateMiner = void 0;
const stargate_1 = require("@cosmjs/stargate");
const proto_signing_1 = require("@cosmjs/proto-signing");
const registry_1 = require("./registry");
const rest_1 = require("./rest");
const tx_1 = require("./types/enreach/miner/tx");
Object.defineProperty(exports, "MsgUpdateMiner", { enumerable: true, get: function () { return tx_1.MsgUpdateMiner; } });
const tx_2 = require("./types/enreach/miner/tx");
Object.defineProperty(exports, "MsgUpdateParamsResponse", { enumerable: true, get: function () { return tx_2.MsgUpdateParamsResponse; } });
const miner_1 = require("./types/enreach/miner/miner");
Object.defineProperty(exports, "Miner", { enumerable: true, get: function () { return miner_1.Miner; } });
const query_1 = require("./types/enreach/miner/query");
Object.defineProperty(exports, "QueryParamsResponse", { enumerable: true, get: function () { return query_1.QueryParamsResponse; } });
const query_2 = require("./types/enreach/miner/query");
Object.defineProperty(exports, "QueryAllMinerRequest", { enumerable: true, get: function () { return query_2.QueryAllMinerRequest; } });
const genesis_1 = require("./types/enreach/miner/genesis");
Object.defineProperty(exports, "GenesisState", { enumerable: true, get: function () { return genesis_1.GenesisState; } });
const tx_3 = require("./types/enreach/miner/tx");
Object.defineProperty(exports, "MsgCreateMinerResponse", { enumerable: true, get: function () { return tx_3.MsgCreateMinerResponse; } });
const tx_4 = require("./types/enreach/miner/tx");
Object.defineProperty(exports, "MsgUpdateMinerResponse", { enumerable: true, get: function () { return tx_4.MsgUpdateMinerResponse; } });
const query_3 = require("./types/enreach/miner/query");
Object.defineProperty(exports, "QueryParamsRequest", { enumerable: true, get: function () { return query_3.QueryParamsRequest; } });
const params_1 = require("./types/enreach/miner/params");
Object.defineProperty(exports, "Params", { enumerable: true, get: function () { return params_1.Params; } });
const tx_5 = require("./types/enreach/miner/tx");
Object.defineProperty(exports, "MsgCreateMiner", { enumerable: true, get: function () { return tx_5.MsgCreateMiner; } });
const tx_6 = require("./types/enreach/miner/tx");
Object.defineProperty(exports, "MsgDeleteMiner", { enumerable: true, get: function () { return tx_6.MsgDeleteMiner; } });
const tx_7 = require("./types/enreach/miner/tx");
Object.defineProperty(exports, "MsgDeleteMinerResponse", { enumerable: true, get: function () { return tx_7.MsgDeleteMinerResponse; } });
const query_4 = require("./types/enreach/miner/query");
Object.defineProperty(exports, "QueryGetMinerRequest", { enumerable: true, get: function () { return query_4.QueryGetMinerRequest; } });
const query_5 = require("./types/enreach/miner/query");
Object.defineProperty(exports, "QueryGetMinerResponse", { enumerable: true, get: function () { return query_5.QueryGetMinerResponse; } });
const tx_8 = require("./types/enreach/miner/tx");
Object.defineProperty(exports, "MsgUpdateParams", { enumerable: true, get: function () { return tx_8.MsgUpdateParams; } });
const query_6 = require("./types/enreach/miner/query");
Object.defineProperty(exports, "QueryAllMinerResponse", { enumerable: true, get: function () { return query_6.QueryAllMinerResponse; } });
exports.registry = new proto_signing_1.Registry(registry_1.msgTypes);
function getStructure(template) {
    const structure = { fields: [] };
    for (let [key, value] of Object.entries(template)) {
        let field = { name: key, type: typeof value };
        structure.fields.push(field);
    }
    return structure;
}
const defaultFee = {
    amount: [],
    gas: "200000",
};
const txClient = ({ signer, prefix, addr } = { addr: "http://localhost:26657", prefix: "cosmos" }) => {
    return {
        async sendMsgUpdateMiner({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateMiner: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgUpdateMiner({ value: tx_1.MsgUpdateMiner.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateMiner: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateParamsResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateParamsResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgUpdateParamsResponse({ value: tx_2.MsgUpdateParamsResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateParamsResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMiner({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMiner: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.miner({ value: miner_1.Miner.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMiner: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryParamsResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryParamsResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryParamsResponse({ value: query_1.QueryParamsResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryParamsResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryAllMinerRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryAllMinerRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryAllMinerRequest({ value: query_2.QueryAllMinerRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryAllMinerRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendGenesisState({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendGenesisState: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.genesisState({ value: genesis_1.GenesisState.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendGenesisState: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgCreateMinerResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgCreateMinerResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgCreateMinerResponse({ value: tx_3.MsgCreateMinerResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgCreateMinerResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateMinerResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateMinerResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgUpdateMinerResponse({ value: tx_4.MsgUpdateMinerResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateMinerResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryParamsRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryParamsRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryParamsRequest({ value: query_3.QueryParamsRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryParamsRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendParams({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendParams: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.params({ value: params_1.Params.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendParams: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgCreateMiner({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgCreateMiner: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgCreateMiner({ value: tx_5.MsgCreateMiner.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgCreateMiner: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgDeleteMiner({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgDeleteMiner: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgDeleteMiner({ value: tx_6.MsgDeleteMiner.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgDeleteMiner: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgDeleteMinerResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgDeleteMinerResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgDeleteMinerResponse({ value: tx_7.MsgDeleteMinerResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgDeleteMinerResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetMinerRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetMinerRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetMinerRequest({ value: query_4.QueryGetMinerRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetMinerRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetMinerResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetMinerResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetMinerResponse({ value: query_5.QueryGetMinerResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetMinerResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateParams({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateParams: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgUpdateParams({ value: tx_8.MsgUpdateParams.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateParams: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryAllMinerResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryAllMinerResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryAllMinerResponse({ value: query_6.QueryAllMinerResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryAllMinerResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        msgUpdateMiner({ value }) {
            try {
                return { typeUrl: "/enreach.miner.MsgUpdateMiner", value: tx_1.MsgUpdateMiner.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateMiner: Could not create message: ' + e.message);
            }
        },
        msgUpdateParamsResponse({ value }) {
            try {
                return { typeUrl: "/enreach.miner.MsgUpdateParamsResponse", value: tx_2.MsgUpdateParamsResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateParamsResponse: Could not create message: ' + e.message);
            }
        },
        miner({ value }) {
            try {
                return { typeUrl: "/enreach.miner.Miner", value: miner_1.Miner.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:Miner: Could not create message: ' + e.message);
            }
        },
        queryParamsResponse({ value }) {
            try {
                return { typeUrl: "/enreach.miner.QueryParamsResponse", value: query_1.QueryParamsResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryParamsResponse: Could not create message: ' + e.message);
            }
        },
        queryAllMinerRequest({ value }) {
            try {
                return { typeUrl: "/enreach.miner.QueryAllMinerRequest", value: query_2.QueryAllMinerRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryAllMinerRequest: Could not create message: ' + e.message);
            }
        },
        genesisState({ value }) {
            try {
                return { typeUrl: "/enreach.miner.GenesisState", value: genesis_1.GenesisState.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:GenesisState: Could not create message: ' + e.message);
            }
        },
        msgCreateMinerResponse({ value }) {
            try {
                return { typeUrl: "/enreach.miner.MsgCreateMinerResponse", value: tx_3.MsgCreateMinerResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgCreateMinerResponse: Could not create message: ' + e.message);
            }
        },
        msgUpdateMinerResponse({ value }) {
            try {
                return { typeUrl: "/enreach.miner.MsgUpdateMinerResponse", value: tx_4.MsgUpdateMinerResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateMinerResponse: Could not create message: ' + e.message);
            }
        },
        queryParamsRequest({ value }) {
            try {
                return { typeUrl: "/enreach.miner.QueryParamsRequest", value: query_3.QueryParamsRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryParamsRequest: Could not create message: ' + e.message);
            }
        },
        params({ value }) {
            try {
                return { typeUrl: "/enreach.miner.Params", value: params_1.Params.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:Params: Could not create message: ' + e.message);
            }
        },
        msgCreateMiner({ value }) {
            try {
                return { typeUrl: "/enreach.miner.MsgCreateMiner", value: tx_5.MsgCreateMiner.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgCreateMiner: Could not create message: ' + e.message);
            }
        },
        msgDeleteMiner({ value }) {
            try {
                return { typeUrl: "/enreach.miner.MsgDeleteMiner", value: tx_6.MsgDeleteMiner.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgDeleteMiner: Could not create message: ' + e.message);
            }
        },
        msgDeleteMinerResponse({ value }) {
            try {
                return { typeUrl: "/enreach.miner.MsgDeleteMinerResponse", value: tx_7.MsgDeleteMinerResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgDeleteMinerResponse: Could not create message: ' + e.message);
            }
        },
        queryGetMinerRequest({ value }) {
            try {
                return { typeUrl: "/enreach.miner.QueryGetMinerRequest", value: query_4.QueryGetMinerRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetMinerRequest: Could not create message: ' + e.message);
            }
        },
        queryGetMinerResponse({ value }) {
            try {
                return { typeUrl: "/enreach.miner.QueryGetMinerResponse", value: query_5.QueryGetMinerResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetMinerResponse: Could not create message: ' + e.message);
            }
        },
        msgUpdateParams({ value }) {
            try {
                return { typeUrl: "/enreach.miner.MsgUpdateParams", value: tx_8.MsgUpdateParams.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateParams: Could not create message: ' + e.message);
            }
        },
        queryAllMinerResponse({ value }) {
            try {
                return { typeUrl: "/enreach.miner.QueryAllMinerResponse", value: query_6.QueryAllMinerResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryAllMinerResponse: Could not create message: ' + e.message);
            }
        },
    };
};
exports.txClient = txClient;
const queryClient = ({ addr: addr } = { addr: "http://localhost:1317" }) => {
    return new rest_1.Api({ baseURL: addr });
};
exports.queryClient = queryClient;
class SDKModule {
    constructor(client) {
        this.registry = [];
        this.query = (0, exports.queryClient)({ addr: client.env.apiURL });
        this.updateTX(client);
        this.structure = {};
        client.on('signer-changed', (signer) => {
            this.updateTX(client);
        });
    }
    updateTX(client) {
        const methods = (0, exports.txClient)({
            signer: client.signer,
            addr: client.env.rpcURL,
            prefix: client.env.prefix ?? "cosmos",
        });
        this.tx = methods;
        for (let m in methods) {
            this.tx[m] = methods[m].bind(this.tx);
        }
    }
}
;
const IgntModule = (test) => {
    return {
        module: {
            EnreachMiner: new SDKModule(test)
        },
        registry: registry_1.msgTypes
    };
};
exports.default = IgntModule;
