"use strict";
// Generated by Ignite ignite.com/cli
Object.defineProperty(exports, "__esModule", { value: true });
exports.queryClient = exports.txClient = exports.registry = exports.MsgUpdateRegionResponse = exports.QueryGetSuperiorRequest = exports.MsgUpdateSuperior = exports.MsgCreateSuperior = exports.Superior = exports.MsgUpdateRegion = exports.MsgCreateRegion = exports.QueryGetRegionResponse = exports.MsgCreateRegionResponse = exports.MsgDeleteRegion = exports.Params = exports.MsgUpdateParams = exports.Region = exports.QueryAllRegionResponse = exports.QueryGetRegionRequest = exports.GenesisState = exports.MsgCreateSuperiorResponse = exports.MsgDeleteRegionResponse = exports.MsgUpdateParamsResponse = exports.QueryAllRegionRequest = exports.MsgUpdateSuperiorResponse = exports.QueryGetSuperiorResponse = exports.QueryParamsResponse = exports.QueryParamsRequest = void 0;
const stargate_1 = require("@cosmjs/stargate");
const proto_signing_1 = require("@cosmjs/proto-signing");
const registry_1 = require("./registry");
const rest_1 = require("./rest");
const query_1 = require("./types/enreach/registry/query");
Object.defineProperty(exports, "QueryParamsRequest", { enumerable: true, get: function () { return query_1.QueryParamsRequest; } });
const query_2 = require("./types/enreach/registry/query");
Object.defineProperty(exports, "QueryParamsResponse", { enumerable: true, get: function () { return query_2.QueryParamsResponse; } });
const query_3 = require("./types/enreach/registry/query");
Object.defineProperty(exports, "QueryGetSuperiorResponse", { enumerable: true, get: function () { return query_3.QueryGetSuperiorResponse; } });
const tx_1 = require("./types/enreach/registry/tx");
Object.defineProperty(exports, "MsgUpdateSuperiorResponse", { enumerable: true, get: function () { return tx_1.MsgUpdateSuperiorResponse; } });
const query_4 = require("./types/enreach/registry/query");
Object.defineProperty(exports, "QueryAllRegionRequest", { enumerable: true, get: function () { return query_4.QueryAllRegionRequest; } });
const tx_2 = require("./types/enreach/registry/tx");
Object.defineProperty(exports, "MsgUpdateParamsResponse", { enumerable: true, get: function () { return tx_2.MsgUpdateParamsResponse; } });
const tx_3 = require("./types/enreach/registry/tx");
Object.defineProperty(exports, "MsgDeleteRegionResponse", { enumerable: true, get: function () { return tx_3.MsgDeleteRegionResponse; } });
const tx_4 = require("./types/enreach/registry/tx");
Object.defineProperty(exports, "MsgCreateSuperiorResponse", { enumerable: true, get: function () { return tx_4.MsgCreateSuperiorResponse; } });
const genesis_1 = require("./types/enreach/registry/genesis");
Object.defineProperty(exports, "GenesisState", { enumerable: true, get: function () { return genesis_1.GenesisState; } });
const query_5 = require("./types/enreach/registry/query");
Object.defineProperty(exports, "QueryGetRegionRequest", { enumerable: true, get: function () { return query_5.QueryGetRegionRequest; } });
const query_6 = require("./types/enreach/registry/query");
Object.defineProperty(exports, "QueryAllRegionResponse", { enumerable: true, get: function () { return query_6.QueryAllRegionResponse; } });
const region_1 = require("./types/enreach/registry/region");
Object.defineProperty(exports, "Region", { enumerable: true, get: function () { return region_1.Region; } });
const tx_5 = require("./types/enreach/registry/tx");
Object.defineProperty(exports, "MsgUpdateParams", { enumerable: true, get: function () { return tx_5.MsgUpdateParams; } });
const params_1 = require("./types/enreach/registry/params");
Object.defineProperty(exports, "Params", { enumerable: true, get: function () { return params_1.Params; } });
const tx_6 = require("./types/enreach/registry/tx");
Object.defineProperty(exports, "MsgDeleteRegion", { enumerable: true, get: function () { return tx_6.MsgDeleteRegion; } });
const tx_7 = require("./types/enreach/registry/tx");
Object.defineProperty(exports, "MsgCreateRegionResponse", { enumerable: true, get: function () { return tx_7.MsgCreateRegionResponse; } });
const query_7 = require("./types/enreach/registry/query");
Object.defineProperty(exports, "QueryGetRegionResponse", { enumerable: true, get: function () { return query_7.QueryGetRegionResponse; } });
const tx_8 = require("./types/enreach/registry/tx");
Object.defineProperty(exports, "MsgCreateRegion", { enumerable: true, get: function () { return tx_8.MsgCreateRegion; } });
const tx_9 = require("./types/enreach/registry/tx");
Object.defineProperty(exports, "MsgUpdateRegion", { enumerable: true, get: function () { return tx_9.MsgUpdateRegion; } });
const superior_1 = require("./types/enreach/registry/superior");
Object.defineProperty(exports, "Superior", { enumerable: true, get: function () { return superior_1.Superior; } });
const tx_10 = require("./types/enreach/registry/tx");
Object.defineProperty(exports, "MsgCreateSuperior", { enumerable: true, get: function () { return tx_10.MsgCreateSuperior; } });
const tx_11 = require("./types/enreach/registry/tx");
Object.defineProperty(exports, "MsgUpdateSuperior", { enumerable: true, get: function () { return tx_11.MsgUpdateSuperior; } });
const query_8 = require("./types/enreach/registry/query");
Object.defineProperty(exports, "QueryGetSuperiorRequest", { enumerable: true, get: function () { return query_8.QueryGetSuperiorRequest; } });
const tx_12 = require("./types/enreach/registry/tx");
Object.defineProperty(exports, "MsgUpdateRegionResponse", { enumerable: true, get: function () { return tx_12.MsgUpdateRegionResponse; } });
exports.registry = new proto_signing_1.Registry(registry_1.msgTypes);
function getStructure(template) {
    const structure = { fields: [] };
    for (let [key, value] of Object.entries(template)) {
        let field = { name: key, type: typeof value };
        structure.fields.push(field);
    }
    return structure;
}
const defaultFee = {
    amount: [],
    gas: "200000",
};
const txClient = ({ signer, prefix, addr } = { addr: "http://localhost:26657", prefix: "cosmos" }) => {
    return {
        async sendQueryParamsRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryParamsRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryParamsRequest({ value: query_1.QueryParamsRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryParamsRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryParamsResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryParamsResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryParamsResponse({ value: query_2.QueryParamsResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryParamsResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetSuperiorResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetSuperiorResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetSuperiorResponse({ value: query_3.QueryGetSuperiorResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetSuperiorResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateSuperiorResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateSuperiorResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgUpdateSuperiorResponse({ value: tx_1.MsgUpdateSuperiorResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateSuperiorResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryAllRegionRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryAllRegionRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryAllRegionRequest({ value: query_4.QueryAllRegionRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryAllRegionRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateParamsResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateParamsResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgUpdateParamsResponse({ value: tx_2.MsgUpdateParamsResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateParamsResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgDeleteRegionResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgDeleteRegionResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgDeleteRegionResponse({ value: tx_3.MsgDeleteRegionResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgDeleteRegionResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgCreateSuperiorResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgCreateSuperiorResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgCreateSuperiorResponse({ value: tx_4.MsgCreateSuperiorResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgCreateSuperiorResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendGenesisState({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendGenesisState: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.genesisState({ value: genesis_1.GenesisState.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendGenesisState: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetRegionRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetRegionRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetRegionRequest({ value: query_5.QueryGetRegionRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetRegionRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryAllRegionResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryAllRegionResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryAllRegionResponse({ value: query_6.QueryAllRegionResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryAllRegionResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendRegion({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendRegion: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.region({ value: region_1.Region.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendRegion: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateParams({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateParams: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgUpdateParams({ value: tx_5.MsgUpdateParams.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateParams: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendParams({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendParams: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.params({ value: params_1.Params.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendParams: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgDeleteRegion({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgDeleteRegion: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgDeleteRegion({ value: tx_6.MsgDeleteRegion.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgDeleteRegion: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgCreateRegionResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgCreateRegionResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgCreateRegionResponse({ value: tx_7.MsgCreateRegionResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgCreateRegionResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetRegionResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetRegionResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetRegionResponse({ value: query_7.QueryGetRegionResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetRegionResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgCreateRegion({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgCreateRegion: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgCreateRegion({ value: tx_8.MsgCreateRegion.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgCreateRegion: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateRegion({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateRegion: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgUpdateRegion({ value: tx_9.MsgUpdateRegion.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateRegion: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendSuperior({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendSuperior: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.superior({ value: superior_1.Superior.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendSuperior: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgCreateSuperior({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgCreateSuperior: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgCreateSuperior({ value: tx_10.MsgCreateSuperior.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgCreateSuperior: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateSuperior({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateSuperior: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgUpdateSuperior({ value: tx_11.MsgUpdateSuperior.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateSuperior: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetSuperiorRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetSuperiorRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetSuperiorRequest({ value: query_8.QueryGetSuperiorRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetSuperiorRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateRegionResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateRegionResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgUpdateRegionResponse({ value: tx_12.MsgUpdateRegionResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateRegionResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        queryParamsRequest({ value }) {
            try {
                return { typeUrl: "/enreach.registry.QueryParamsRequest", value: query_1.QueryParamsRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryParamsRequest: Could not create message: ' + e.message);
            }
        },
        queryParamsResponse({ value }) {
            try {
                return { typeUrl: "/enreach.registry.QueryParamsResponse", value: query_2.QueryParamsResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryParamsResponse: Could not create message: ' + e.message);
            }
        },
        queryGetSuperiorResponse({ value }) {
            try {
                return { typeUrl: "/enreach.registry.QueryGetSuperiorResponse", value: query_3.QueryGetSuperiorResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetSuperiorResponse: Could not create message: ' + e.message);
            }
        },
        msgUpdateSuperiorResponse({ value }) {
            try {
                return { typeUrl: "/enreach.registry.MsgUpdateSuperiorResponse", value: tx_1.MsgUpdateSuperiorResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateSuperiorResponse: Could not create message: ' + e.message);
            }
        },
        queryAllRegionRequest({ value }) {
            try {
                return { typeUrl: "/enreach.registry.QueryAllRegionRequest", value: query_4.QueryAllRegionRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryAllRegionRequest: Could not create message: ' + e.message);
            }
        },
        msgUpdateParamsResponse({ value }) {
            try {
                return { typeUrl: "/enreach.registry.MsgUpdateParamsResponse", value: tx_2.MsgUpdateParamsResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateParamsResponse: Could not create message: ' + e.message);
            }
        },
        msgDeleteRegionResponse({ value }) {
            try {
                return { typeUrl: "/enreach.registry.MsgDeleteRegionResponse", value: tx_3.MsgDeleteRegionResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgDeleteRegionResponse: Could not create message: ' + e.message);
            }
        },
        msgCreateSuperiorResponse({ value }) {
            try {
                return { typeUrl: "/enreach.registry.MsgCreateSuperiorResponse", value: tx_4.MsgCreateSuperiorResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgCreateSuperiorResponse: Could not create message: ' + e.message);
            }
        },
        genesisState({ value }) {
            try {
                return { typeUrl: "/enreach.registry.GenesisState", value: genesis_1.GenesisState.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:GenesisState: Could not create message: ' + e.message);
            }
        },
        queryGetRegionRequest({ value }) {
            try {
                return { typeUrl: "/enreach.registry.QueryGetRegionRequest", value: query_5.QueryGetRegionRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetRegionRequest: Could not create message: ' + e.message);
            }
        },
        queryAllRegionResponse({ value }) {
            try {
                return { typeUrl: "/enreach.registry.QueryAllRegionResponse", value: query_6.QueryAllRegionResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryAllRegionResponse: Could not create message: ' + e.message);
            }
        },
        region({ value }) {
            try {
                return { typeUrl: "/enreach.registry.Region", value: region_1.Region.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:Region: Could not create message: ' + e.message);
            }
        },
        msgUpdateParams({ value }) {
            try {
                return { typeUrl: "/enreach.registry.MsgUpdateParams", value: tx_5.MsgUpdateParams.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateParams: Could not create message: ' + e.message);
            }
        },
        params({ value }) {
            try {
                return { typeUrl: "/enreach.registry.Params", value: params_1.Params.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:Params: Could not create message: ' + e.message);
            }
        },
        msgDeleteRegion({ value }) {
            try {
                return { typeUrl: "/enreach.registry.MsgDeleteRegion", value: tx_6.MsgDeleteRegion.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgDeleteRegion: Could not create message: ' + e.message);
            }
        },
        msgCreateRegionResponse({ value }) {
            try {
                return { typeUrl: "/enreach.registry.MsgCreateRegionResponse", value: tx_7.MsgCreateRegionResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgCreateRegionResponse: Could not create message: ' + e.message);
            }
        },
        queryGetRegionResponse({ value }) {
            try {
                return { typeUrl: "/enreach.registry.QueryGetRegionResponse", value: query_7.QueryGetRegionResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetRegionResponse: Could not create message: ' + e.message);
            }
        },
        msgCreateRegion({ value }) {
            try {
                return { typeUrl: "/enreach.registry.MsgCreateRegion", value: tx_8.MsgCreateRegion.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgCreateRegion: Could not create message: ' + e.message);
            }
        },
        msgUpdateRegion({ value }) {
            try {
                return { typeUrl: "/enreach.registry.MsgUpdateRegion", value: tx_9.MsgUpdateRegion.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateRegion: Could not create message: ' + e.message);
            }
        },
        superior({ value }) {
            try {
                return { typeUrl: "/enreach.registry.Superior", value: superior_1.Superior.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:Superior: Could not create message: ' + e.message);
            }
        },
        msgCreateSuperior({ value }) {
            try {
                return { typeUrl: "/enreach.registry.MsgCreateSuperior", value: tx_10.MsgCreateSuperior.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgCreateSuperior: Could not create message: ' + e.message);
            }
        },
        msgUpdateSuperior({ value }) {
            try {
                return { typeUrl: "/enreach.registry.MsgUpdateSuperior", value: tx_11.MsgUpdateSuperior.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateSuperior: Could not create message: ' + e.message);
            }
        },
        queryGetSuperiorRequest({ value }) {
            try {
                return { typeUrl: "/enreach.registry.QueryGetSuperiorRequest", value: query_8.QueryGetSuperiorRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetSuperiorRequest: Could not create message: ' + e.message);
            }
        },
        msgUpdateRegionResponse({ value }) {
            try {
                return { typeUrl: "/enreach.registry.MsgUpdateRegionResponse", value: tx_12.MsgUpdateRegionResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateRegionResponse: Could not create message: ' + e.message);
            }
        },
    };
};
exports.txClient = txClient;
const queryClient = ({ addr: addr } = { addr: "http://localhost:1317" }) => {
    return new rest_1.Api({ baseURL: addr });
};
exports.queryClient = queryClient;
class SDKModule {
    constructor(client) {
        this.registry = [];
        this.query = (0, exports.queryClient)({ addr: client.env.apiURL });
        this.updateTX(client);
        this.structure = {};
        client.on('signer-changed', (signer) => {
            this.updateTX(client);
        });
    }
    updateTX(client) {
        const methods = (0, exports.txClient)({
            signer: client.signer,
            addr: client.env.rpcURL,
            prefix: client.env.prefix ?? "cosmos",
        });
        this.tx = methods;
        for (let m in methods) {
            this.tx[m] = methods[m].bind(this.tx);
        }
    }
}
;
const IgntModule = (test) => {
    return {
        module: {
            EnreachRegistry: new SDKModule(test)
        },
        registry: registry_1.msgTypes
    };
};
exports.default = IgntModule;
