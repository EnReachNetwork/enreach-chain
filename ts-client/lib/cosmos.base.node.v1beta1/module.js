"use strict";
// Generated by Ignite ignite.com/cli
Object.defineProperty(exports, "__esModule", { value: true });
exports.queryClient = exports.txClient = exports.registry = exports.StatusResponse = exports.StatusRequest = exports.ConfigResponse = exports.ConfigRequest = void 0;
const stargate_1 = require("@cosmjs/stargate");
const proto_signing_1 = require("@cosmjs/proto-signing");
const registry_1 = require("./registry");
const rest_1 = require("./rest");
const query_1 = require("./types/cosmos/base/node/v1beta1/query");
Object.defineProperty(exports, "ConfigRequest", { enumerable: true, get: function () { return query_1.ConfigRequest; } });
const query_2 = require("./types/cosmos/base/node/v1beta1/query");
Object.defineProperty(exports, "ConfigResponse", { enumerable: true, get: function () { return query_2.ConfigResponse; } });
const query_3 = require("./types/cosmos/base/node/v1beta1/query");
Object.defineProperty(exports, "StatusRequest", { enumerable: true, get: function () { return query_3.StatusRequest; } });
const query_4 = require("./types/cosmos/base/node/v1beta1/query");
Object.defineProperty(exports, "StatusResponse", { enumerable: true, get: function () { return query_4.StatusResponse; } });
exports.registry = new proto_signing_1.Registry(registry_1.msgTypes);
function getStructure(template) {
    const structure = { fields: [] };
    for (let [key, value] of Object.entries(template)) {
        let field = { name: key, type: typeof value };
        structure.fields.push(field);
    }
    return structure;
}
const defaultFee = {
    amount: [],
    gas: "200000",
};
const txClient = ({ signer, prefix, addr } = { addr: "http://localhost:26657", prefix: "cosmos" }) => {
    return {
        async sendConfigRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendConfigRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.configRequest({ value: query_1.ConfigRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendConfigRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendConfigResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendConfigResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.configResponse({ value: query_2.ConfigResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendConfigResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendStatusRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendStatusRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.statusRequest({ value: query_3.StatusRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendStatusRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendStatusResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendStatusResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.statusResponse({ value: query_4.StatusResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendStatusResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        configRequest({ value }) {
            try {
                return { typeUrl: "/cosmos.base.node.v1beta1.ConfigRequest", value: query_1.ConfigRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:ConfigRequest: Could not create message: ' + e.message);
            }
        },
        configResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.base.node.v1beta1.ConfigResponse", value: query_2.ConfigResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:ConfigResponse: Could not create message: ' + e.message);
            }
        },
        statusRequest({ value }) {
            try {
                return { typeUrl: "/cosmos.base.node.v1beta1.StatusRequest", value: query_3.StatusRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:StatusRequest: Could not create message: ' + e.message);
            }
        },
        statusResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.base.node.v1beta1.StatusResponse", value: query_4.StatusResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:StatusResponse: Could not create message: ' + e.message);
            }
        },
    };
};
exports.txClient = txClient;
const queryClient = ({ addr: addr } = { addr: "http://localhost:1317" }) => {
    return new rest_1.Api({ baseURL: addr });
};
exports.queryClient = queryClient;
class SDKModule {
    constructor(client) {
        this.registry = [];
        this.query = (0, exports.queryClient)({ addr: client.env.apiURL });
        this.updateTX(client);
        this.structure = {};
        client.on('signer-changed', (signer) => {
            this.updateTX(client);
        });
    }
    updateTX(client) {
        const methods = (0, exports.txClient)({
            signer: client.signer,
            addr: client.env.rpcURL,
            prefix: client.env.prefix ?? "cosmos",
        });
        this.tx = methods;
        for (let m in methods) {
            this.tx[m] = methods[m].bind(this.tx);
        }
    }
}
;
const IgntModule = (test) => {
    return {
        module: {
            CosmosBaseNodeV1Beta1: new SDKModule(test)
        },
        registry: registry_1.msgTypes
    };
};
exports.default = IgntModule;
