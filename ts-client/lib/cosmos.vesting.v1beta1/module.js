"use strict";
// Generated by Ignite ignite.com/cli
Object.defineProperty(exports, "__esModule", { value: true });
exports.queryClient = exports.txClient = exports.registry = exports.MsgCreatePermanentLockedAccountResponse = exports.MsgCreateVestingAccountResponse = exports.PermanentLockedAccount = exports.ContinuousVestingAccount = exports.BaseVestingAccount = exports.MsgCreatePeriodicVestingAccount = exports.MsgCreateVestingAccount = exports.Period = exports.MsgCreatePermanentLockedAccount = exports.MsgCreatePeriodicVestingAccountResponse = exports.PeriodicVestingAccount = exports.DelayedVestingAccount = void 0;
const stargate_1 = require("@cosmjs/stargate");
const proto_signing_1 = require("@cosmjs/proto-signing");
const registry_1 = require("./registry");
const rest_1 = require("./rest");
const vesting_1 = require("./types/cosmos/vesting/v1beta1/vesting");
Object.defineProperty(exports, "DelayedVestingAccount", { enumerable: true, get: function () { return vesting_1.DelayedVestingAccount; } });
const vesting_2 = require("./types/cosmos/vesting/v1beta1/vesting");
Object.defineProperty(exports, "PeriodicVestingAccount", { enumerable: true, get: function () { return vesting_2.PeriodicVestingAccount; } });
const tx_1 = require("./types/cosmos/vesting/v1beta1/tx");
Object.defineProperty(exports, "MsgCreatePeriodicVestingAccountResponse", { enumerable: true, get: function () { return tx_1.MsgCreatePeriodicVestingAccountResponse; } });
const tx_2 = require("./types/cosmos/vesting/v1beta1/tx");
Object.defineProperty(exports, "MsgCreatePermanentLockedAccount", { enumerable: true, get: function () { return tx_2.MsgCreatePermanentLockedAccount; } });
const vesting_3 = require("./types/cosmos/vesting/v1beta1/vesting");
Object.defineProperty(exports, "Period", { enumerable: true, get: function () { return vesting_3.Period; } });
const tx_3 = require("./types/cosmos/vesting/v1beta1/tx");
Object.defineProperty(exports, "MsgCreateVestingAccount", { enumerable: true, get: function () { return tx_3.MsgCreateVestingAccount; } });
const tx_4 = require("./types/cosmos/vesting/v1beta1/tx");
Object.defineProperty(exports, "MsgCreatePeriodicVestingAccount", { enumerable: true, get: function () { return tx_4.MsgCreatePeriodicVestingAccount; } });
const vesting_4 = require("./types/cosmos/vesting/v1beta1/vesting");
Object.defineProperty(exports, "BaseVestingAccount", { enumerable: true, get: function () { return vesting_4.BaseVestingAccount; } });
const vesting_5 = require("./types/cosmos/vesting/v1beta1/vesting");
Object.defineProperty(exports, "ContinuousVestingAccount", { enumerable: true, get: function () { return vesting_5.ContinuousVestingAccount; } });
const vesting_6 = require("./types/cosmos/vesting/v1beta1/vesting");
Object.defineProperty(exports, "PermanentLockedAccount", { enumerable: true, get: function () { return vesting_6.PermanentLockedAccount; } });
const tx_5 = require("./types/cosmos/vesting/v1beta1/tx");
Object.defineProperty(exports, "MsgCreateVestingAccountResponse", { enumerable: true, get: function () { return tx_5.MsgCreateVestingAccountResponse; } });
const tx_6 = require("./types/cosmos/vesting/v1beta1/tx");
Object.defineProperty(exports, "MsgCreatePermanentLockedAccountResponse", { enumerable: true, get: function () { return tx_6.MsgCreatePermanentLockedAccountResponse; } });
exports.registry = new proto_signing_1.Registry(registry_1.msgTypes);
function getStructure(template) {
    const structure = { fields: [] };
    for (let [key, value] of Object.entries(template)) {
        let field = { name: key, type: typeof value };
        structure.fields.push(field);
    }
    return structure;
}
const defaultFee = {
    amount: [],
    gas: "200000",
};
const txClient = ({ signer, prefix, addr } = { addr: "http://localhost:26657", prefix: "cosmos" }) => {
    return {
        async sendDelayedVestingAccount({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendDelayedVestingAccount: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.delayedVestingAccount({ value: vesting_1.DelayedVestingAccount.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendDelayedVestingAccount: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendPeriodicVestingAccount({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendPeriodicVestingAccount: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.periodicVestingAccount({ value: vesting_2.PeriodicVestingAccount.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendPeriodicVestingAccount: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgCreatePeriodicVestingAccountResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgCreatePeriodicVestingAccountResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgCreatePeriodicVestingAccountResponse({ value: tx_1.MsgCreatePeriodicVestingAccountResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgCreatePeriodicVestingAccountResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgCreatePermanentLockedAccount({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgCreatePermanentLockedAccount: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgCreatePermanentLockedAccount({ value: tx_2.MsgCreatePermanentLockedAccount.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgCreatePermanentLockedAccount: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendPeriod({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendPeriod: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.period({ value: vesting_3.Period.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendPeriod: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgCreateVestingAccount({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgCreateVestingAccount: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgCreateVestingAccount({ value: tx_3.MsgCreateVestingAccount.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgCreateVestingAccount: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgCreatePeriodicVestingAccount({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgCreatePeriodicVestingAccount: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgCreatePeriodicVestingAccount({ value: tx_4.MsgCreatePeriodicVestingAccount.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgCreatePeriodicVestingAccount: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendBaseVestingAccount({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendBaseVestingAccount: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.baseVestingAccount({ value: vesting_4.BaseVestingAccount.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendBaseVestingAccount: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendContinuousVestingAccount({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendContinuousVestingAccount: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.continuousVestingAccount({ value: vesting_5.ContinuousVestingAccount.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendContinuousVestingAccount: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendPermanentLockedAccount({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendPermanentLockedAccount: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.permanentLockedAccount({ value: vesting_6.PermanentLockedAccount.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendPermanentLockedAccount: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgCreateVestingAccountResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgCreateVestingAccountResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgCreateVestingAccountResponse({ value: tx_5.MsgCreateVestingAccountResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgCreateVestingAccountResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgCreatePermanentLockedAccountResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgCreatePermanentLockedAccountResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgCreatePermanentLockedAccountResponse({ value: tx_6.MsgCreatePermanentLockedAccountResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgCreatePermanentLockedAccountResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        delayedVestingAccount({ value }) {
            try {
                return { typeUrl: "/cosmos.vesting.v1beta1.DelayedVestingAccount", value: vesting_1.DelayedVestingAccount.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:DelayedVestingAccount: Could not create message: ' + e.message);
            }
        },
        periodicVestingAccount({ value }) {
            try {
                return { typeUrl: "/cosmos.vesting.v1beta1.PeriodicVestingAccount", value: vesting_2.PeriodicVestingAccount.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:PeriodicVestingAccount: Could not create message: ' + e.message);
            }
        },
        msgCreatePeriodicVestingAccountResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.vesting.v1beta1.MsgCreatePeriodicVestingAccountResponse", value: tx_1.MsgCreatePeriodicVestingAccountResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgCreatePeriodicVestingAccountResponse: Could not create message: ' + e.message);
            }
        },
        msgCreatePermanentLockedAccount({ value }) {
            try {
                return { typeUrl: "/cosmos.vesting.v1beta1.MsgCreatePermanentLockedAccount", value: tx_2.MsgCreatePermanentLockedAccount.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgCreatePermanentLockedAccount: Could not create message: ' + e.message);
            }
        },
        period({ value }) {
            try {
                return { typeUrl: "/cosmos.vesting.v1beta1.Period", value: vesting_3.Period.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:Period: Could not create message: ' + e.message);
            }
        },
        msgCreateVestingAccount({ value }) {
            try {
                return { typeUrl: "/cosmos.vesting.v1beta1.MsgCreateVestingAccount", value: tx_3.MsgCreateVestingAccount.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgCreateVestingAccount: Could not create message: ' + e.message);
            }
        },
        msgCreatePeriodicVestingAccount({ value }) {
            try {
                return { typeUrl: "/cosmos.vesting.v1beta1.MsgCreatePeriodicVestingAccount", value: tx_4.MsgCreatePeriodicVestingAccount.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgCreatePeriodicVestingAccount: Could not create message: ' + e.message);
            }
        },
        baseVestingAccount({ value }) {
            try {
                return { typeUrl: "/cosmos.vesting.v1beta1.BaseVestingAccount", value: vesting_4.BaseVestingAccount.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:BaseVestingAccount: Could not create message: ' + e.message);
            }
        },
        continuousVestingAccount({ value }) {
            try {
                return { typeUrl: "/cosmos.vesting.v1beta1.ContinuousVestingAccount", value: vesting_5.ContinuousVestingAccount.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:ContinuousVestingAccount: Could not create message: ' + e.message);
            }
        },
        permanentLockedAccount({ value }) {
            try {
                return { typeUrl: "/cosmos.vesting.v1beta1.PermanentLockedAccount", value: vesting_6.PermanentLockedAccount.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:PermanentLockedAccount: Could not create message: ' + e.message);
            }
        },
        msgCreateVestingAccountResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.vesting.v1beta1.MsgCreateVestingAccountResponse", value: tx_5.MsgCreateVestingAccountResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgCreateVestingAccountResponse: Could not create message: ' + e.message);
            }
        },
        msgCreatePermanentLockedAccountResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.vesting.v1beta1.MsgCreatePermanentLockedAccountResponse", value: tx_6.MsgCreatePermanentLockedAccountResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgCreatePermanentLockedAccountResponse: Could not create message: ' + e.message);
            }
        },
    };
};
exports.txClient = txClient;
const queryClient = ({ addr: addr } = { addr: "http://localhost:1317" }) => {
    return new rest_1.Api({ baseURL: addr });
};
exports.queryClient = queryClient;
class SDKModule {
    constructor(client) {
        this.registry = [];
        this.query = (0, exports.queryClient)({ addr: client.env.apiURL });
        this.updateTX(client);
        this.structure = {};
        client.on('signer-changed', (signer) => {
            this.updateTX(client);
        });
    }
    updateTX(client) {
        const methods = (0, exports.txClient)({
            signer: client.signer,
            addr: client.env.rpcURL,
            prefix: client.env.prefix ?? "cosmos",
        });
        this.tx = methods;
        for (let m in methods) {
            this.tx[m] = methods[m].bind(this.tx);
        }
    }
}
;
const IgntModule = (test) => {
    return {
        module: {
            CosmosVestingV1Beta1: new SDKModule(test)
        },
        registry: registry_1.msgTypes
    };
};
exports.default = IgntModule;
