"use strict";
// Generated by Ignite ignite.com/cli
Object.defineProperty(exports, "__esModule", { value: true });
exports.queryClient = exports.txClient = exports.registry = exports.GenesisState = exports.QueryAllowancesRequest = exports.QueryAllowancesByGranterRequest = exports.QueryAllowanceResponse = exports.AllowedMsgAllowance = exports.MsgGrantAllowance = exports.MsgRevokeAllowance = exports.Grant = exports.BasicAllowance = exports.MsgPruneAllowancesResponse = exports.PeriodicAllowance = exports.QueryAllowancesByGranterResponse = exports.QueryAllowancesResponse = exports.MsgPruneAllowances = exports.MsgRevokeAllowanceResponse = exports.MsgGrantAllowanceResponse = exports.QueryAllowanceRequest = void 0;
const stargate_1 = require("@cosmjs/stargate");
const proto_signing_1 = require("@cosmjs/proto-signing");
const registry_1 = require("./registry");
const rest_1 = require("./rest");
const query_1 = require("./types/cosmos/feegrant/v1beta1/query");
Object.defineProperty(exports, "QueryAllowanceRequest", { enumerable: true, get: function () { return query_1.QueryAllowanceRequest; } });
const tx_1 = require("./types/cosmos/feegrant/v1beta1/tx");
Object.defineProperty(exports, "MsgGrantAllowanceResponse", { enumerable: true, get: function () { return tx_1.MsgGrantAllowanceResponse; } });
const tx_2 = require("./types/cosmos/feegrant/v1beta1/tx");
Object.defineProperty(exports, "MsgRevokeAllowanceResponse", { enumerable: true, get: function () { return tx_2.MsgRevokeAllowanceResponse; } });
const tx_3 = require("./types/cosmos/feegrant/v1beta1/tx");
Object.defineProperty(exports, "MsgPruneAllowances", { enumerable: true, get: function () { return tx_3.MsgPruneAllowances; } });
const query_2 = require("./types/cosmos/feegrant/v1beta1/query");
Object.defineProperty(exports, "QueryAllowancesResponse", { enumerable: true, get: function () { return query_2.QueryAllowancesResponse; } });
const query_3 = require("./types/cosmos/feegrant/v1beta1/query");
Object.defineProperty(exports, "QueryAllowancesByGranterResponse", { enumerable: true, get: function () { return query_3.QueryAllowancesByGranterResponse; } });
const feegrant_1 = require("./types/cosmos/feegrant/v1beta1/feegrant");
Object.defineProperty(exports, "PeriodicAllowance", { enumerable: true, get: function () { return feegrant_1.PeriodicAllowance; } });
const tx_4 = require("./types/cosmos/feegrant/v1beta1/tx");
Object.defineProperty(exports, "MsgPruneAllowancesResponse", { enumerable: true, get: function () { return tx_4.MsgPruneAllowancesResponse; } });
const feegrant_2 = require("./types/cosmos/feegrant/v1beta1/feegrant");
Object.defineProperty(exports, "BasicAllowance", { enumerable: true, get: function () { return feegrant_2.BasicAllowance; } });
const feegrant_3 = require("./types/cosmos/feegrant/v1beta1/feegrant");
Object.defineProperty(exports, "Grant", { enumerable: true, get: function () { return feegrant_3.Grant; } });
const tx_5 = require("./types/cosmos/feegrant/v1beta1/tx");
Object.defineProperty(exports, "MsgRevokeAllowance", { enumerable: true, get: function () { return tx_5.MsgRevokeAllowance; } });
const tx_6 = require("./types/cosmos/feegrant/v1beta1/tx");
Object.defineProperty(exports, "MsgGrantAllowance", { enumerable: true, get: function () { return tx_6.MsgGrantAllowance; } });
const feegrant_4 = require("./types/cosmos/feegrant/v1beta1/feegrant");
Object.defineProperty(exports, "AllowedMsgAllowance", { enumerable: true, get: function () { return feegrant_4.AllowedMsgAllowance; } });
const query_4 = require("./types/cosmos/feegrant/v1beta1/query");
Object.defineProperty(exports, "QueryAllowanceResponse", { enumerable: true, get: function () { return query_4.QueryAllowanceResponse; } });
const query_5 = require("./types/cosmos/feegrant/v1beta1/query");
Object.defineProperty(exports, "QueryAllowancesByGranterRequest", { enumerable: true, get: function () { return query_5.QueryAllowancesByGranterRequest; } });
const query_6 = require("./types/cosmos/feegrant/v1beta1/query");
Object.defineProperty(exports, "QueryAllowancesRequest", { enumerable: true, get: function () { return query_6.QueryAllowancesRequest; } });
const genesis_1 = require("./types/cosmos/feegrant/v1beta1/genesis");
Object.defineProperty(exports, "GenesisState", { enumerable: true, get: function () { return genesis_1.GenesisState; } });
exports.registry = new proto_signing_1.Registry(registry_1.msgTypes);
function getStructure(template) {
    const structure = { fields: [] };
    for (let [key, value] of Object.entries(template)) {
        let field = { name: key, type: typeof value };
        structure.fields.push(field);
    }
    return structure;
}
const defaultFee = {
    amount: [],
    gas: "200000",
};
const txClient = ({ signer, prefix, addr } = { addr: "http://localhost:26657", prefix: "cosmos" }) => {
    return {
        async sendQueryAllowanceRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryAllowanceRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryAllowanceRequest({ value: query_1.QueryAllowanceRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryAllowanceRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgGrantAllowanceResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgGrantAllowanceResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgGrantAllowanceResponse({ value: tx_1.MsgGrantAllowanceResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgGrantAllowanceResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgRevokeAllowanceResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgRevokeAllowanceResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgRevokeAllowanceResponse({ value: tx_2.MsgRevokeAllowanceResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgRevokeAllowanceResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgPruneAllowances({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgPruneAllowances: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgPruneAllowances({ value: tx_3.MsgPruneAllowances.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgPruneAllowances: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryAllowancesResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryAllowancesResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryAllowancesResponse({ value: query_2.QueryAllowancesResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryAllowancesResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryAllowancesByGranterResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryAllowancesByGranterResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryAllowancesByGranterResponse({ value: query_3.QueryAllowancesByGranterResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryAllowancesByGranterResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendPeriodicAllowance({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendPeriodicAllowance: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.periodicAllowance({ value: feegrant_1.PeriodicAllowance.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendPeriodicAllowance: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgPruneAllowancesResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgPruneAllowancesResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgPruneAllowancesResponse({ value: tx_4.MsgPruneAllowancesResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgPruneAllowancesResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendBasicAllowance({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendBasicAllowance: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.basicAllowance({ value: feegrant_2.BasicAllowance.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendBasicAllowance: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendGrant({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendGrant: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.grant({ value: feegrant_3.Grant.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendGrant: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgRevokeAllowance({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgRevokeAllowance: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgRevokeAllowance({ value: tx_5.MsgRevokeAllowance.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgRevokeAllowance: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgGrantAllowance({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgGrantAllowance: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgGrantAllowance({ value: tx_6.MsgGrantAllowance.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgGrantAllowance: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendAllowedMsgAllowance({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendAllowedMsgAllowance: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.allowedMsgAllowance({ value: feegrant_4.AllowedMsgAllowance.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendAllowedMsgAllowance: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryAllowanceResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryAllowanceResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryAllowanceResponse({ value: query_4.QueryAllowanceResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryAllowanceResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryAllowancesByGranterRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryAllowancesByGranterRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryAllowancesByGranterRequest({ value: query_5.QueryAllowancesByGranterRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryAllowancesByGranterRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryAllowancesRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryAllowancesRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryAllowancesRequest({ value: query_6.QueryAllowancesRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryAllowancesRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendGenesisState({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendGenesisState: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.genesisState({ value: genesis_1.GenesisState.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendGenesisState: Could not broadcast Tx: ' + e.message);
            }
        },
        queryAllowanceRequest({ value }) {
            try {
                return { typeUrl: "/cosmos.feegrant.v1beta1.QueryAllowanceRequest", value: query_1.QueryAllowanceRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryAllowanceRequest: Could not create message: ' + e.message);
            }
        },
        msgGrantAllowanceResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.feegrant.v1beta1.MsgGrantAllowanceResponse", value: tx_1.MsgGrantAllowanceResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgGrantAllowanceResponse: Could not create message: ' + e.message);
            }
        },
        msgRevokeAllowanceResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.feegrant.v1beta1.MsgRevokeAllowanceResponse", value: tx_2.MsgRevokeAllowanceResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgRevokeAllowanceResponse: Could not create message: ' + e.message);
            }
        },
        msgPruneAllowances({ value }) {
            try {
                return { typeUrl: "/cosmos.feegrant.v1beta1.MsgPruneAllowances", value: tx_3.MsgPruneAllowances.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgPruneAllowances: Could not create message: ' + e.message);
            }
        },
        queryAllowancesResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.feegrant.v1beta1.QueryAllowancesResponse", value: query_2.QueryAllowancesResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryAllowancesResponse: Could not create message: ' + e.message);
            }
        },
        queryAllowancesByGranterResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.feegrant.v1beta1.QueryAllowancesByGranterResponse", value: query_3.QueryAllowancesByGranterResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryAllowancesByGranterResponse: Could not create message: ' + e.message);
            }
        },
        periodicAllowance({ value }) {
            try {
                return { typeUrl: "/cosmos.feegrant.v1beta1.PeriodicAllowance", value: feegrant_1.PeriodicAllowance.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:PeriodicAllowance: Could not create message: ' + e.message);
            }
        },
        msgPruneAllowancesResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.feegrant.v1beta1.MsgPruneAllowancesResponse", value: tx_4.MsgPruneAllowancesResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgPruneAllowancesResponse: Could not create message: ' + e.message);
            }
        },
        basicAllowance({ value }) {
            try {
                return { typeUrl: "/cosmos.feegrant.v1beta1.BasicAllowance", value: feegrant_2.BasicAllowance.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:BasicAllowance: Could not create message: ' + e.message);
            }
        },
        grant({ value }) {
            try {
                return { typeUrl: "/cosmos.feegrant.v1beta1.Grant", value: feegrant_3.Grant.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:Grant: Could not create message: ' + e.message);
            }
        },
        msgRevokeAllowance({ value }) {
            try {
                return { typeUrl: "/cosmos.feegrant.v1beta1.MsgRevokeAllowance", value: tx_5.MsgRevokeAllowance.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgRevokeAllowance: Could not create message: ' + e.message);
            }
        },
        msgGrantAllowance({ value }) {
            try {
                return { typeUrl: "/cosmos.feegrant.v1beta1.MsgGrantAllowance", value: tx_6.MsgGrantAllowance.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgGrantAllowance: Could not create message: ' + e.message);
            }
        },
        allowedMsgAllowance({ value }) {
            try {
                return { typeUrl: "/cosmos.feegrant.v1beta1.AllowedMsgAllowance", value: feegrant_4.AllowedMsgAllowance.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:AllowedMsgAllowance: Could not create message: ' + e.message);
            }
        },
        queryAllowanceResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.feegrant.v1beta1.QueryAllowanceResponse", value: query_4.QueryAllowanceResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryAllowanceResponse: Could not create message: ' + e.message);
            }
        },
        queryAllowancesByGranterRequest({ value }) {
            try {
                return { typeUrl: "/cosmos.feegrant.v1beta1.QueryAllowancesByGranterRequest", value: query_5.QueryAllowancesByGranterRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryAllowancesByGranterRequest: Could not create message: ' + e.message);
            }
        },
        queryAllowancesRequest({ value }) {
            try {
                return { typeUrl: "/cosmos.feegrant.v1beta1.QueryAllowancesRequest", value: query_6.QueryAllowancesRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryAllowancesRequest: Could not create message: ' + e.message);
            }
        },
        genesisState({ value }) {
            try {
                return { typeUrl: "/cosmos.feegrant.v1beta1.GenesisState", value: genesis_1.GenesisState.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:GenesisState: Could not create message: ' + e.message);
            }
        },
    };
};
exports.txClient = txClient;
const queryClient = ({ addr: addr } = { addr: "http://localhost:1317" }) => {
    return new rest_1.Api({ baseURL: addr });
};
exports.queryClient = queryClient;
class SDKModule {
    constructor(client) {
        this.registry = [];
        this.query = (0, exports.queryClient)({ addr: client.env.apiURL });
        this.updateTX(client);
        this.structure = {};
        client.on('signer-changed', (signer) => {
            this.updateTX(client);
        });
    }
    updateTX(client) {
        const methods = (0, exports.txClient)({
            signer: client.signer,
            addr: client.env.rpcURL,
            prefix: client.env.prefix ?? "cosmos",
        });
        this.tx = methods;
        for (let m in methods) {
            this.tx[m] = methods[m].bind(this.tx);
        }
    }
}
;
const IgntModule = (test) => {
    return {
        module: {
            CosmosFeegrantV1Beta1: new SDKModule(test)
        },
        registry: registry_1.msgTypes
    };
};
exports.default = IgntModule;
