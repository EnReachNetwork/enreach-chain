"use strict";
// Generated by Ignite ignite.com/cli
Object.defineProperty(exports, "__esModule", { value: true });
exports.queryClient = exports.txClient = exports.registry = exports.MsgRegisterPayeeResponse = exports.PacketFee = exports.QueryTotalTimeoutFeesResponse = exports.QueryIncentivizedPacketsResponse = exports.MsgPayPacketFee = exports.RegisteredPayee = exports.QueryFeeEnabledChannelResponse = exports.QueryFeeEnabledChannelRequest = exports.Metadata = exports.Fee = exports.QueryCounterpartyPayeeResponse = exports.QueryTotalTimeoutFeesRequest = exports.QueryTotalAckFeesRequest = exports.QueryTotalRecvFeesRequest = exports.QueryIncentivizedPacketsForChannelRequest = exports.QueryIncentivizedPacketResponse = exports.QueryIncentivizedPacketRequest = exports.IdentifiedPacketFees = exports.PacketFees = exports.RegisteredCounterpartyPayee = exports.QueryFeeEnabledChannelsResponse = exports.QueryFeeEnabledChannelsRequest = exports.QueryPayeeRequest = exports.QueryTotalRecvFeesResponse = exports.GenesisState = exports.MsgPayPacketFeeAsync = exports.MsgRegisterCounterpartyPayee = exports.IncentivizedAcknowledgement = exports.ForwardRelayerAddress = exports.QueryCounterpartyPayeeRequest = exports.QueryTotalAckFeesResponse = exports.MsgPayPacketFeeAsyncResponse = exports.FeeEnabledChannel = exports.QueryPayeeResponse = exports.QueryIncentivizedPacketsForChannelResponse = exports.QueryIncentivizedPacketsRequest = exports.MsgPayPacketFeeResponse = exports.MsgRegisterCounterpartyPayeeResponse = exports.MsgRegisterPayee = void 0;
const stargate_1 = require("@cosmjs/stargate");
const proto_signing_1 = require("@cosmjs/proto-signing");
const registry_1 = require("./registry");
const rest_1 = require("./rest");
const tx_1 = require("./types/ibc/applications/fee/v1/tx");
Object.defineProperty(exports, "MsgRegisterPayee", { enumerable: true, get: function () { return tx_1.MsgRegisterPayee; } });
const tx_2 = require("./types/ibc/applications/fee/v1/tx");
Object.defineProperty(exports, "MsgRegisterCounterpartyPayeeResponse", { enumerable: true, get: function () { return tx_2.MsgRegisterCounterpartyPayeeResponse; } });
const tx_3 = require("./types/ibc/applications/fee/v1/tx");
Object.defineProperty(exports, "MsgPayPacketFeeResponse", { enumerable: true, get: function () { return tx_3.MsgPayPacketFeeResponse; } });
const query_1 = require("./types/ibc/applications/fee/v1/query");
Object.defineProperty(exports, "QueryIncentivizedPacketsRequest", { enumerable: true, get: function () { return query_1.QueryIncentivizedPacketsRequest; } });
const query_2 = require("./types/ibc/applications/fee/v1/query");
Object.defineProperty(exports, "QueryIncentivizedPacketsForChannelResponse", { enumerable: true, get: function () { return query_2.QueryIncentivizedPacketsForChannelResponse; } });
const query_3 = require("./types/ibc/applications/fee/v1/query");
Object.defineProperty(exports, "QueryPayeeResponse", { enumerable: true, get: function () { return query_3.QueryPayeeResponse; } });
const genesis_1 = require("./types/ibc/applications/fee/v1/genesis");
Object.defineProperty(exports, "FeeEnabledChannel", { enumerable: true, get: function () { return genesis_1.FeeEnabledChannel; } });
const tx_4 = require("./types/ibc/applications/fee/v1/tx");
Object.defineProperty(exports, "MsgPayPacketFeeAsyncResponse", { enumerable: true, get: function () { return tx_4.MsgPayPacketFeeAsyncResponse; } });
const query_4 = require("./types/ibc/applications/fee/v1/query");
Object.defineProperty(exports, "QueryTotalAckFeesResponse", { enumerable: true, get: function () { return query_4.QueryTotalAckFeesResponse; } });
const query_5 = require("./types/ibc/applications/fee/v1/query");
Object.defineProperty(exports, "QueryCounterpartyPayeeRequest", { enumerable: true, get: function () { return query_5.QueryCounterpartyPayeeRequest; } });
const genesis_2 = require("./types/ibc/applications/fee/v1/genesis");
Object.defineProperty(exports, "ForwardRelayerAddress", { enumerable: true, get: function () { return genesis_2.ForwardRelayerAddress; } });
const ack_1 = require("./types/ibc/applications/fee/v1/ack");
Object.defineProperty(exports, "IncentivizedAcknowledgement", { enumerable: true, get: function () { return ack_1.IncentivizedAcknowledgement; } });
const tx_5 = require("./types/ibc/applications/fee/v1/tx");
Object.defineProperty(exports, "MsgRegisterCounterpartyPayee", { enumerable: true, get: function () { return tx_5.MsgRegisterCounterpartyPayee; } });
const tx_6 = require("./types/ibc/applications/fee/v1/tx");
Object.defineProperty(exports, "MsgPayPacketFeeAsync", { enumerable: true, get: function () { return tx_6.MsgPayPacketFeeAsync; } });
const genesis_3 = require("./types/ibc/applications/fee/v1/genesis");
Object.defineProperty(exports, "GenesisState", { enumerable: true, get: function () { return genesis_3.GenesisState; } });
const query_6 = require("./types/ibc/applications/fee/v1/query");
Object.defineProperty(exports, "QueryTotalRecvFeesResponse", { enumerable: true, get: function () { return query_6.QueryTotalRecvFeesResponse; } });
const query_7 = require("./types/ibc/applications/fee/v1/query");
Object.defineProperty(exports, "QueryPayeeRequest", { enumerable: true, get: function () { return query_7.QueryPayeeRequest; } });
const query_8 = require("./types/ibc/applications/fee/v1/query");
Object.defineProperty(exports, "QueryFeeEnabledChannelsRequest", { enumerable: true, get: function () { return query_8.QueryFeeEnabledChannelsRequest; } });
const query_9 = require("./types/ibc/applications/fee/v1/query");
Object.defineProperty(exports, "QueryFeeEnabledChannelsResponse", { enumerable: true, get: function () { return query_9.QueryFeeEnabledChannelsResponse; } });
const genesis_4 = require("./types/ibc/applications/fee/v1/genesis");
Object.defineProperty(exports, "RegisteredCounterpartyPayee", { enumerable: true, get: function () { return genesis_4.RegisteredCounterpartyPayee; } });
const fee_1 = require("./types/ibc/applications/fee/v1/fee");
Object.defineProperty(exports, "PacketFees", { enumerable: true, get: function () { return fee_1.PacketFees; } });
const fee_2 = require("./types/ibc/applications/fee/v1/fee");
Object.defineProperty(exports, "IdentifiedPacketFees", { enumerable: true, get: function () { return fee_2.IdentifiedPacketFees; } });
const query_10 = require("./types/ibc/applications/fee/v1/query");
Object.defineProperty(exports, "QueryIncentivizedPacketRequest", { enumerable: true, get: function () { return query_10.QueryIncentivizedPacketRequest; } });
const query_11 = require("./types/ibc/applications/fee/v1/query");
Object.defineProperty(exports, "QueryIncentivizedPacketResponse", { enumerable: true, get: function () { return query_11.QueryIncentivizedPacketResponse; } });
const query_12 = require("./types/ibc/applications/fee/v1/query");
Object.defineProperty(exports, "QueryIncentivizedPacketsForChannelRequest", { enumerable: true, get: function () { return query_12.QueryIncentivizedPacketsForChannelRequest; } });
const query_13 = require("./types/ibc/applications/fee/v1/query");
Object.defineProperty(exports, "QueryTotalRecvFeesRequest", { enumerable: true, get: function () { return query_13.QueryTotalRecvFeesRequest; } });
const query_14 = require("./types/ibc/applications/fee/v1/query");
Object.defineProperty(exports, "QueryTotalAckFeesRequest", { enumerable: true, get: function () { return query_14.QueryTotalAckFeesRequest; } });
const query_15 = require("./types/ibc/applications/fee/v1/query");
Object.defineProperty(exports, "QueryTotalTimeoutFeesRequest", { enumerable: true, get: function () { return query_15.QueryTotalTimeoutFeesRequest; } });
const query_16 = require("./types/ibc/applications/fee/v1/query");
Object.defineProperty(exports, "QueryCounterpartyPayeeResponse", { enumerable: true, get: function () { return query_16.QueryCounterpartyPayeeResponse; } });
const fee_3 = require("./types/ibc/applications/fee/v1/fee");
Object.defineProperty(exports, "Fee", { enumerable: true, get: function () { return fee_3.Fee; } });
const metadata_1 = require("./types/ibc/applications/fee/v1/metadata");
Object.defineProperty(exports, "Metadata", { enumerable: true, get: function () { return metadata_1.Metadata; } });
const query_17 = require("./types/ibc/applications/fee/v1/query");
Object.defineProperty(exports, "QueryFeeEnabledChannelRequest", { enumerable: true, get: function () { return query_17.QueryFeeEnabledChannelRequest; } });
const query_18 = require("./types/ibc/applications/fee/v1/query");
Object.defineProperty(exports, "QueryFeeEnabledChannelResponse", { enumerable: true, get: function () { return query_18.QueryFeeEnabledChannelResponse; } });
const genesis_5 = require("./types/ibc/applications/fee/v1/genesis");
Object.defineProperty(exports, "RegisteredPayee", { enumerable: true, get: function () { return genesis_5.RegisteredPayee; } });
const tx_7 = require("./types/ibc/applications/fee/v1/tx");
Object.defineProperty(exports, "MsgPayPacketFee", { enumerable: true, get: function () { return tx_7.MsgPayPacketFee; } });
const query_19 = require("./types/ibc/applications/fee/v1/query");
Object.defineProperty(exports, "QueryIncentivizedPacketsResponse", { enumerable: true, get: function () { return query_19.QueryIncentivizedPacketsResponse; } });
const query_20 = require("./types/ibc/applications/fee/v1/query");
Object.defineProperty(exports, "QueryTotalTimeoutFeesResponse", { enumerable: true, get: function () { return query_20.QueryTotalTimeoutFeesResponse; } });
const fee_4 = require("./types/ibc/applications/fee/v1/fee");
Object.defineProperty(exports, "PacketFee", { enumerable: true, get: function () { return fee_4.PacketFee; } });
const tx_8 = require("./types/ibc/applications/fee/v1/tx");
Object.defineProperty(exports, "MsgRegisterPayeeResponse", { enumerable: true, get: function () { return tx_8.MsgRegisterPayeeResponse; } });
exports.registry = new proto_signing_1.Registry(registry_1.msgTypes);
function getStructure(template) {
    const structure = { fields: [] };
    for (let [key, value] of Object.entries(template)) {
        let field = { name: key, type: typeof value };
        structure.fields.push(field);
    }
    return structure;
}
const defaultFee = {
    amount: [],
    gas: "200000",
};
const txClient = ({ signer, prefix, addr } = { addr: "http://localhost:26657", prefix: "cosmos" }) => {
    return {
        async sendMsgRegisterPayee({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgRegisterPayee: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgRegisterPayee({ value: tx_1.MsgRegisterPayee.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgRegisterPayee: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgRegisterCounterpartyPayeeResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgRegisterCounterpartyPayeeResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgRegisterCounterpartyPayeeResponse({ value: tx_2.MsgRegisterCounterpartyPayeeResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgRegisterCounterpartyPayeeResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgPayPacketFeeResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgPayPacketFeeResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgPayPacketFeeResponse({ value: tx_3.MsgPayPacketFeeResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgPayPacketFeeResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryIncentivizedPacketsRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryIncentivizedPacketsRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryIncentivizedPacketsRequest({ value: query_1.QueryIncentivizedPacketsRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryIncentivizedPacketsRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryIncentivizedPacketsForChannelResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryIncentivizedPacketsForChannelResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryIncentivizedPacketsForChannelResponse({ value: query_2.QueryIncentivizedPacketsForChannelResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryIncentivizedPacketsForChannelResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryPayeeResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryPayeeResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryPayeeResponse({ value: query_3.QueryPayeeResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryPayeeResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendFeeEnabledChannel({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendFeeEnabledChannel: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.feeEnabledChannel({ value: genesis_1.FeeEnabledChannel.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendFeeEnabledChannel: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgPayPacketFeeAsyncResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgPayPacketFeeAsyncResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgPayPacketFeeAsyncResponse({ value: tx_4.MsgPayPacketFeeAsyncResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgPayPacketFeeAsyncResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryTotalAckFeesResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryTotalAckFeesResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryTotalAckFeesResponse({ value: query_4.QueryTotalAckFeesResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryTotalAckFeesResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryCounterpartyPayeeRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryCounterpartyPayeeRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryCounterpartyPayeeRequest({ value: query_5.QueryCounterpartyPayeeRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryCounterpartyPayeeRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendForwardRelayerAddress({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendForwardRelayerAddress: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.forwardRelayerAddress({ value: genesis_2.ForwardRelayerAddress.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendForwardRelayerAddress: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendIncentivizedAcknowledgement({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendIncentivizedAcknowledgement: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.incentivizedAcknowledgement({ value: ack_1.IncentivizedAcknowledgement.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendIncentivizedAcknowledgement: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgRegisterCounterpartyPayee({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgRegisterCounterpartyPayee: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgRegisterCounterpartyPayee({ value: tx_5.MsgRegisterCounterpartyPayee.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgRegisterCounterpartyPayee: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgPayPacketFeeAsync({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgPayPacketFeeAsync: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgPayPacketFeeAsync({ value: tx_6.MsgPayPacketFeeAsync.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgPayPacketFeeAsync: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendGenesisState({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendGenesisState: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.genesisState({ value: genesis_3.GenesisState.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendGenesisState: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryTotalRecvFeesResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryTotalRecvFeesResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryTotalRecvFeesResponse({ value: query_6.QueryTotalRecvFeesResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryTotalRecvFeesResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryPayeeRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryPayeeRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryPayeeRequest({ value: query_7.QueryPayeeRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryPayeeRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryFeeEnabledChannelsRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryFeeEnabledChannelsRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryFeeEnabledChannelsRequest({ value: query_8.QueryFeeEnabledChannelsRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryFeeEnabledChannelsRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryFeeEnabledChannelsResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryFeeEnabledChannelsResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryFeeEnabledChannelsResponse({ value: query_9.QueryFeeEnabledChannelsResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryFeeEnabledChannelsResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendRegisteredCounterpartyPayee({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendRegisteredCounterpartyPayee: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.registeredCounterpartyPayee({ value: genesis_4.RegisteredCounterpartyPayee.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendRegisteredCounterpartyPayee: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendPacketFees({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendPacketFees: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.packetFees({ value: fee_1.PacketFees.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendPacketFees: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendIdentifiedPacketFees({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendIdentifiedPacketFees: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.identifiedPacketFees({ value: fee_2.IdentifiedPacketFees.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendIdentifiedPacketFees: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryIncentivizedPacketRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryIncentivizedPacketRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryIncentivizedPacketRequest({ value: query_10.QueryIncentivizedPacketRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryIncentivizedPacketRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryIncentivizedPacketResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryIncentivizedPacketResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryIncentivizedPacketResponse({ value: query_11.QueryIncentivizedPacketResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryIncentivizedPacketResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryIncentivizedPacketsForChannelRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryIncentivizedPacketsForChannelRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryIncentivizedPacketsForChannelRequest({ value: query_12.QueryIncentivizedPacketsForChannelRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryIncentivizedPacketsForChannelRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryTotalRecvFeesRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryTotalRecvFeesRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryTotalRecvFeesRequest({ value: query_13.QueryTotalRecvFeesRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryTotalRecvFeesRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryTotalAckFeesRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryTotalAckFeesRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryTotalAckFeesRequest({ value: query_14.QueryTotalAckFeesRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryTotalAckFeesRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryTotalTimeoutFeesRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryTotalTimeoutFeesRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryTotalTimeoutFeesRequest({ value: query_15.QueryTotalTimeoutFeesRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryTotalTimeoutFeesRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryCounterpartyPayeeResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryCounterpartyPayeeResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryCounterpartyPayeeResponse({ value: query_16.QueryCounterpartyPayeeResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryCounterpartyPayeeResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendFee({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendFee: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.fee({ value: fee_3.Fee.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendFee: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMetadata({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMetadata: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.metadata({ value: metadata_1.Metadata.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMetadata: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryFeeEnabledChannelRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryFeeEnabledChannelRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryFeeEnabledChannelRequest({ value: query_17.QueryFeeEnabledChannelRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryFeeEnabledChannelRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryFeeEnabledChannelResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryFeeEnabledChannelResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryFeeEnabledChannelResponse({ value: query_18.QueryFeeEnabledChannelResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryFeeEnabledChannelResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendRegisteredPayee({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendRegisteredPayee: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.registeredPayee({ value: genesis_5.RegisteredPayee.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendRegisteredPayee: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgPayPacketFee({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgPayPacketFee: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgPayPacketFee({ value: tx_7.MsgPayPacketFee.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgPayPacketFee: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryIncentivizedPacketsResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryIncentivizedPacketsResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryIncentivizedPacketsResponse({ value: query_19.QueryIncentivizedPacketsResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryIncentivizedPacketsResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryTotalTimeoutFeesResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryTotalTimeoutFeesResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryTotalTimeoutFeesResponse({ value: query_20.QueryTotalTimeoutFeesResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryTotalTimeoutFeesResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendPacketFee({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendPacketFee: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.packetFee({ value: fee_4.PacketFee.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendPacketFee: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgRegisterPayeeResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgRegisterPayeeResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgRegisterPayeeResponse({ value: tx_8.MsgRegisterPayeeResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgRegisterPayeeResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        msgRegisterPayee({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.MsgRegisterPayee", value: tx_1.MsgRegisterPayee.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgRegisterPayee: Could not create message: ' + e.message);
            }
        },
        msgRegisterCounterpartyPayeeResponse({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.MsgRegisterCounterpartyPayeeResponse", value: tx_2.MsgRegisterCounterpartyPayeeResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgRegisterCounterpartyPayeeResponse: Could not create message: ' + e.message);
            }
        },
        msgPayPacketFeeResponse({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.MsgPayPacketFeeResponse", value: tx_3.MsgPayPacketFeeResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgPayPacketFeeResponse: Could not create message: ' + e.message);
            }
        },
        queryIncentivizedPacketsRequest({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.QueryIncentivizedPacketsRequest", value: query_1.QueryIncentivizedPacketsRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryIncentivizedPacketsRequest: Could not create message: ' + e.message);
            }
        },
        queryIncentivizedPacketsForChannelResponse({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelResponse", value: query_2.QueryIncentivizedPacketsForChannelResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryIncentivizedPacketsForChannelResponse: Could not create message: ' + e.message);
            }
        },
        queryPayeeResponse({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.QueryPayeeResponse", value: query_3.QueryPayeeResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryPayeeResponse: Could not create message: ' + e.message);
            }
        },
        feeEnabledChannel({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.FeeEnabledChannel", value: genesis_1.FeeEnabledChannel.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:FeeEnabledChannel: Could not create message: ' + e.message);
            }
        },
        msgPayPacketFeeAsyncResponse({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.MsgPayPacketFeeAsyncResponse", value: tx_4.MsgPayPacketFeeAsyncResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgPayPacketFeeAsyncResponse: Could not create message: ' + e.message);
            }
        },
        queryTotalAckFeesResponse({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.QueryTotalAckFeesResponse", value: query_4.QueryTotalAckFeesResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryTotalAckFeesResponse: Could not create message: ' + e.message);
            }
        },
        queryCounterpartyPayeeRequest({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.QueryCounterpartyPayeeRequest", value: query_5.QueryCounterpartyPayeeRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryCounterpartyPayeeRequest: Could not create message: ' + e.message);
            }
        },
        forwardRelayerAddress({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.ForwardRelayerAddress", value: genesis_2.ForwardRelayerAddress.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:ForwardRelayerAddress: Could not create message: ' + e.message);
            }
        },
        incentivizedAcknowledgement({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.IncentivizedAcknowledgement", value: ack_1.IncentivizedAcknowledgement.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:IncentivizedAcknowledgement: Could not create message: ' + e.message);
            }
        },
        msgRegisterCounterpartyPayee({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.MsgRegisterCounterpartyPayee", value: tx_5.MsgRegisterCounterpartyPayee.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgRegisterCounterpartyPayee: Could not create message: ' + e.message);
            }
        },
        msgPayPacketFeeAsync({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.MsgPayPacketFeeAsync", value: tx_6.MsgPayPacketFeeAsync.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgPayPacketFeeAsync: Could not create message: ' + e.message);
            }
        },
        genesisState({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.GenesisState", value: genesis_3.GenesisState.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:GenesisState: Could not create message: ' + e.message);
            }
        },
        queryTotalRecvFeesResponse({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.QueryTotalRecvFeesResponse", value: query_6.QueryTotalRecvFeesResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryTotalRecvFeesResponse: Could not create message: ' + e.message);
            }
        },
        queryPayeeRequest({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.QueryPayeeRequest", value: query_7.QueryPayeeRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryPayeeRequest: Could not create message: ' + e.message);
            }
        },
        queryFeeEnabledChannelsRequest({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.QueryFeeEnabledChannelsRequest", value: query_8.QueryFeeEnabledChannelsRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryFeeEnabledChannelsRequest: Could not create message: ' + e.message);
            }
        },
        queryFeeEnabledChannelsResponse({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.QueryFeeEnabledChannelsResponse", value: query_9.QueryFeeEnabledChannelsResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryFeeEnabledChannelsResponse: Could not create message: ' + e.message);
            }
        },
        registeredCounterpartyPayee({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.RegisteredCounterpartyPayee", value: genesis_4.RegisteredCounterpartyPayee.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:RegisteredCounterpartyPayee: Could not create message: ' + e.message);
            }
        },
        packetFees({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.PacketFees", value: fee_1.PacketFees.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:PacketFees: Could not create message: ' + e.message);
            }
        },
        identifiedPacketFees({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.IdentifiedPacketFees", value: fee_2.IdentifiedPacketFees.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:IdentifiedPacketFees: Could not create message: ' + e.message);
            }
        },
        queryIncentivizedPacketRequest({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.QueryIncentivizedPacketRequest", value: query_10.QueryIncentivizedPacketRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryIncentivizedPacketRequest: Could not create message: ' + e.message);
            }
        },
        queryIncentivizedPacketResponse({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.QueryIncentivizedPacketResponse", value: query_11.QueryIncentivizedPacketResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryIncentivizedPacketResponse: Could not create message: ' + e.message);
            }
        },
        queryIncentivizedPacketsForChannelRequest({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelRequest", value: query_12.QueryIncentivizedPacketsForChannelRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryIncentivizedPacketsForChannelRequest: Could not create message: ' + e.message);
            }
        },
        queryTotalRecvFeesRequest({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.QueryTotalRecvFeesRequest", value: query_13.QueryTotalRecvFeesRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryTotalRecvFeesRequest: Could not create message: ' + e.message);
            }
        },
        queryTotalAckFeesRequest({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.QueryTotalAckFeesRequest", value: query_14.QueryTotalAckFeesRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryTotalAckFeesRequest: Could not create message: ' + e.message);
            }
        },
        queryTotalTimeoutFeesRequest({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.QueryTotalTimeoutFeesRequest", value: query_15.QueryTotalTimeoutFeesRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryTotalTimeoutFeesRequest: Could not create message: ' + e.message);
            }
        },
        queryCounterpartyPayeeResponse({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.QueryCounterpartyPayeeResponse", value: query_16.QueryCounterpartyPayeeResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryCounterpartyPayeeResponse: Could not create message: ' + e.message);
            }
        },
        fee({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.Fee", value: fee_3.Fee.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:Fee: Could not create message: ' + e.message);
            }
        },
        metadata({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.Metadata", value: metadata_1.Metadata.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:Metadata: Could not create message: ' + e.message);
            }
        },
        queryFeeEnabledChannelRequest({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.QueryFeeEnabledChannelRequest", value: query_17.QueryFeeEnabledChannelRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryFeeEnabledChannelRequest: Could not create message: ' + e.message);
            }
        },
        queryFeeEnabledChannelResponse({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.QueryFeeEnabledChannelResponse", value: query_18.QueryFeeEnabledChannelResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryFeeEnabledChannelResponse: Could not create message: ' + e.message);
            }
        },
        registeredPayee({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.RegisteredPayee", value: genesis_5.RegisteredPayee.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:RegisteredPayee: Could not create message: ' + e.message);
            }
        },
        msgPayPacketFee({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.MsgPayPacketFee", value: tx_7.MsgPayPacketFee.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgPayPacketFee: Could not create message: ' + e.message);
            }
        },
        queryIncentivizedPacketsResponse({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.QueryIncentivizedPacketsResponse", value: query_19.QueryIncentivizedPacketsResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryIncentivizedPacketsResponse: Could not create message: ' + e.message);
            }
        },
        queryTotalTimeoutFeesResponse({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.QueryTotalTimeoutFeesResponse", value: query_20.QueryTotalTimeoutFeesResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryTotalTimeoutFeesResponse: Could not create message: ' + e.message);
            }
        },
        packetFee({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.PacketFee", value: fee_4.PacketFee.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:PacketFee: Could not create message: ' + e.message);
            }
        },
        msgRegisterPayeeResponse({ value }) {
            try {
                return { typeUrl: "/ibc.applications.fee.v1.MsgRegisterPayeeResponse", value: tx_8.MsgRegisterPayeeResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgRegisterPayeeResponse: Could not create message: ' + e.message);
            }
        },
    };
};
exports.txClient = txClient;
const queryClient = ({ addr: addr } = { addr: "http://localhost:1317" }) => {
    return new rest_1.Api({ baseURL: addr });
};
exports.queryClient = queryClient;
class SDKModule {
    constructor(client) {
        this.registry = [];
        this.query = (0, exports.queryClient)({ addr: client.env.apiURL });
        this.updateTX(client);
        this.structure = {};
        client.on('signer-changed', (signer) => {
            this.updateTX(client);
        });
    }
    updateTX(client) {
        const methods = (0, exports.txClient)({
            signer: client.signer,
            addr: client.env.rpcURL,
            prefix: client.env.prefix ?? "cosmos",
        });
        this.tx = methods;
        for (let m in methods) {
            this.tx[m] = methods[m].bind(this.tx);
        }
    }
}
;
const IgntModule = (test) => {
    return {
        module: {
            IbcApplicationsFeeV1: new SDKModule(test)
        },
        registry: registry_1.msgTypes
    };
};
exports.default = IgntModule;
