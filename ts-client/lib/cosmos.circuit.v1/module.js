"use strict";
// Generated by Ignite ignite.com/cli
Object.defineProperty(exports, "__esModule", { value: true });
exports.queryClient = exports.txClient = exports.registry = exports.MsgResetCircuitBreaker = exports.DisabledListResponse = exports.AccountResponse = exports.Permissions = exports.MsgTripCircuitBreakerResponse = exports.MsgAuthorizeCircuitBreakerResponse = exports.QueryDisabledListRequest = exports.GenesisAccountPermissions = exports.MsgResetCircuitBreakerResponse = exports.MsgTripCircuitBreaker = exports.MsgAuthorizeCircuitBreaker = exports.QueryAccountsRequest = exports.QueryAccountRequest = exports.GenesisState = exports.AccountsResponse = void 0;
const stargate_1 = require("@cosmjs/stargate");
const proto_signing_1 = require("@cosmjs/proto-signing");
const registry_1 = require("./registry");
const rest_1 = require("./rest");
const query_1 = require("./types/cosmos/circuit/v1/query");
Object.defineProperty(exports, "AccountsResponse", { enumerable: true, get: function () { return query_1.AccountsResponse; } });
const types_1 = require("./types/cosmos/circuit/v1/types");
Object.defineProperty(exports, "GenesisState", { enumerable: true, get: function () { return types_1.GenesisState; } });
const query_2 = require("./types/cosmos/circuit/v1/query");
Object.defineProperty(exports, "QueryAccountRequest", { enumerable: true, get: function () { return query_2.QueryAccountRequest; } });
const query_3 = require("./types/cosmos/circuit/v1/query");
Object.defineProperty(exports, "QueryAccountsRequest", { enumerable: true, get: function () { return query_3.QueryAccountsRequest; } });
const tx_1 = require("./types/cosmos/circuit/v1/tx");
Object.defineProperty(exports, "MsgAuthorizeCircuitBreaker", { enumerable: true, get: function () { return tx_1.MsgAuthorizeCircuitBreaker; } });
const tx_2 = require("./types/cosmos/circuit/v1/tx");
Object.defineProperty(exports, "MsgTripCircuitBreaker", { enumerable: true, get: function () { return tx_2.MsgTripCircuitBreaker; } });
const tx_3 = require("./types/cosmos/circuit/v1/tx");
Object.defineProperty(exports, "MsgResetCircuitBreakerResponse", { enumerable: true, get: function () { return tx_3.MsgResetCircuitBreakerResponse; } });
const types_2 = require("./types/cosmos/circuit/v1/types");
Object.defineProperty(exports, "GenesisAccountPermissions", { enumerable: true, get: function () { return types_2.GenesisAccountPermissions; } });
const query_4 = require("./types/cosmos/circuit/v1/query");
Object.defineProperty(exports, "QueryDisabledListRequest", { enumerable: true, get: function () { return query_4.QueryDisabledListRequest; } });
const tx_4 = require("./types/cosmos/circuit/v1/tx");
Object.defineProperty(exports, "MsgAuthorizeCircuitBreakerResponse", { enumerable: true, get: function () { return tx_4.MsgAuthorizeCircuitBreakerResponse; } });
const tx_5 = require("./types/cosmos/circuit/v1/tx");
Object.defineProperty(exports, "MsgTripCircuitBreakerResponse", { enumerable: true, get: function () { return tx_5.MsgTripCircuitBreakerResponse; } });
const types_3 = require("./types/cosmos/circuit/v1/types");
Object.defineProperty(exports, "Permissions", { enumerable: true, get: function () { return types_3.Permissions; } });
const query_5 = require("./types/cosmos/circuit/v1/query");
Object.defineProperty(exports, "AccountResponse", { enumerable: true, get: function () { return query_5.AccountResponse; } });
const query_6 = require("./types/cosmos/circuit/v1/query");
Object.defineProperty(exports, "DisabledListResponse", { enumerable: true, get: function () { return query_6.DisabledListResponse; } });
const tx_6 = require("./types/cosmos/circuit/v1/tx");
Object.defineProperty(exports, "MsgResetCircuitBreaker", { enumerable: true, get: function () { return tx_6.MsgResetCircuitBreaker; } });
exports.registry = new proto_signing_1.Registry(registry_1.msgTypes);
function getStructure(template) {
    const structure = { fields: [] };
    for (let [key, value] of Object.entries(template)) {
        let field = { name: key, type: typeof value };
        structure.fields.push(field);
    }
    return structure;
}
const defaultFee = {
    amount: [],
    gas: "200000",
};
const txClient = ({ signer, prefix, addr } = { addr: "http://localhost:26657", prefix: "cosmos" }) => {
    return {
        async sendAccountsResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendAccountsResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.accountsResponse({ value: query_1.AccountsResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendAccountsResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendGenesisState({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendGenesisState: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.genesisState({ value: types_1.GenesisState.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendGenesisState: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryAccountRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryAccountRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryAccountRequest({ value: query_2.QueryAccountRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryAccountRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryAccountsRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryAccountsRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryAccountsRequest({ value: query_3.QueryAccountsRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryAccountsRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgAuthorizeCircuitBreaker({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgAuthorizeCircuitBreaker: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgAuthorizeCircuitBreaker({ value: tx_1.MsgAuthorizeCircuitBreaker.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgAuthorizeCircuitBreaker: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgTripCircuitBreaker({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgTripCircuitBreaker: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgTripCircuitBreaker({ value: tx_2.MsgTripCircuitBreaker.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgTripCircuitBreaker: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgResetCircuitBreakerResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgResetCircuitBreakerResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgResetCircuitBreakerResponse({ value: tx_3.MsgResetCircuitBreakerResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgResetCircuitBreakerResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendGenesisAccountPermissions({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendGenesisAccountPermissions: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.genesisAccountPermissions({ value: types_2.GenesisAccountPermissions.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendGenesisAccountPermissions: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryDisabledListRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryDisabledListRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryDisabledListRequest({ value: query_4.QueryDisabledListRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryDisabledListRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgAuthorizeCircuitBreakerResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgAuthorizeCircuitBreakerResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgAuthorizeCircuitBreakerResponse({ value: tx_4.MsgAuthorizeCircuitBreakerResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgAuthorizeCircuitBreakerResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgTripCircuitBreakerResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgTripCircuitBreakerResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgTripCircuitBreakerResponse({ value: tx_5.MsgTripCircuitBreakerResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgTripCircuitBreakerResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendPermissions({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendPermissions: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.permissions({ value: types_3.Permissions.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendPermissions: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendAccountResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendAccountResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.accountResponse({ value: query_5.AccountResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendAccountResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendDisabledListResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendDisabledListResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.disabledListResponse({ value: query_6.DisabledListResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendDisabledListResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgResetCircuitBreaker({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgResetCircuitBreaker: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgResetCircuitBreaker({ value: tx_6.MsgResetCircuitBreaker.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgResetCircuitBreaker: Could not broadcast Tx: ' + e.message);
            }
        },
        accountsResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.circuit.v1.AccountsResponse", value: query_1.AccountsResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:AccountsResponse: Could not create message: ' + e.message);
            }
        },
        genesisState({ value }) {
            try {
                return { typeUrl: "/cosmos.circuit.v1.GenesisState", value: types_1.GenesisState.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:GenesisState: Could not create message: ' + e.message);
            }
        },
        queryAccountRequest({ value }) {
            try {
                return { typeUrl: "/cosmos.circuit.v1.QueryAccountRequest", value: query_2.QueryAccountRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryAccountRequest: Could not create message: ' + e.message);
            }
        },
        queryAccountsRequest({ value }) {
            try {
                return { typeUrl: "/cosmos.circuit.v1.QueryAccountsRequest", value: query_3.QueryAccountsRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryAccountsRequest: Could not create message: ' + e.message);
            }
        },
        msgAuthorizeCircuitBreaker({ value }) {
            try {
                return { typeUrl: "/cosmos.circuit.v1.MsgAuthorizeCircuitBreaker", value: tx_1.MsgAuthorizeCircuitBreaker.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgAuthorizeCircuitBreaker: Could not create message: ' + e.message);
            }
        },
        msgTripCircuitBreaker({ value }) {
            try {
                return { typeUrl: "/cosmos.circuit.v1.MsgTripCircuitBreaker", value: tx_2.MsgTripCircuitBreaker.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgTripCircuitBreaker: Could not create message: ' + e.message);
            }
        },
        msgResetCircuitBreakerResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.circuit.v1.MsgResetCircuitBreakerResponse", value: tx_3.MsgResetCircuitBreakerResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgResetCircuitBreakerResponse: Could not create message: ' + e.message);
            }
        },
        genesisAccountPermissions({ value }) {
            try {
                return { typeUrl: "/cosmos.circuit.v1.GenesisAccountPermissions", value: types_2.GenesisAccountPermissions.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:GenesisAccountPermissions: Could not create message: ' + e.message);
            }
        },
        queryDisabledListRequest({ value }) {
            try {
                return { typeUrl: "/cosmos.circuit.v1.QueryDisabledListRequest", value: query_4.QueryDisabledListRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryDisabledListRequest: Could not create message: ' + e.message);
            }
        },
        msgAuthorizeCircuitBreakerResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.circuit.v1.MsgAuthorizeCircuitBreakerResponse", value: tx_4.MsgAuthorizeCircuitBreakerResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgAuthorizeCircuitBreakerResponse: Could not create message: ' + e.message);
            }
        },
        msgTripCircuitBreakerResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.circuit.v1.MsgTripCircuitBreakerResponse", value: tx_5.MsgTripCircuitBreakerResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgTripCircuitBreakerResponse: Could not create message: ' + e.message);
            }
        },
        permissions({ value }) {
            try {
                return { typeUrl: "/cosmos.circuit.v1.Permissions", value: types_3.Permissions.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:Permissions: Could not create message: ' + e.message);
            }
        },
        accountResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.circuit.v1.AccountResponse", value: query_5.AccountResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:AccountResponse: Could not create message: ' + e.message);
            }
        },
        disabledListResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.circuit.v1.DisabledListResponse", value: query_6.DisabledListResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:DisabledListResponse: Could not create message: ' + e.message);
            }
        },
        msgResetCircuitBreaker({ value }) {
            try {
                return { typeUrl: "/cosmos.circuit.v1.MsgResetCircuitBreaker", value: tx_6.MsgResetCircuitBreaker.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgResetCircuitBreaker: Could not create message: ' + e.message);
            }
        },
    };
};
exports.txClient = txClient;
const queryClient = ({ addr: addr } = { addr: "http://localhost:1317" }) => {
    return new rest_1.Api({ baseURL: addr });
};
exports.queryClient = queryClient;
class SDKModule {
    constructor(client) {
        this.registry = [];
        this.query = (0, exports.queryClient)({ addr: client.env.apiURL });
        this.updateTX(client);
        this.structure = {};
        client.on('signer-changed', (signer) => {
            this.updateTX(client);
        });
    }
    updateTX(client) {
        const methods = (0, exports.txClient)({
            signer: client.signer,
            addr: client.env.rpcURL,
            prefix: client.env.prefix ?? "cosmos",
        });
        this.tx = methods;
        for (let m in methods) {
            this.tx[m] = methods[m].bind(this.tx);
        }
    }
}
;
const IgntModule = (test) => {
    return {
        module: {
            CosmosCircuitV1: new SDKModule(test)
        },
        registry: registry_1.msgTypes
    };
};
exports.default = IgntModule;
