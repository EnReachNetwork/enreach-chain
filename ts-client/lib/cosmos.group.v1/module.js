"use strict";
// Generated by Ignite ignite.com/cli
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgVoteResponse = exports.MsgUpdateGroupPolicyMetadataResponse = exports.MsgCreateGroupWithPolicy = exports.DecisionPolicyWindows = exports.QueryProposalsByGroupPolicyRequest = exports.EventExec = exports.MsgLeaveGroupResponse = exports.MsgUpdateGroupMembersResponse = exports.PercentageDecisionPolicy = exports.QueryGroupPoliciesByAdminResponse = exports.MsgUpdateGroupPolicyMetadata = exports.QueryVotesByVoterResponse = exports.QueryVoteByProposalVoterResponse = exports.QueryGroupPoliciesByAdminRequest = exports.QueryGroupPolicyInfoResponse = exports.EventVote = exports.EventUpdateGroup = exports.Member = exports.QueryGroupPoliciesByGroupRequest = exports.MsgUpdateGroupAdminResponse = exports.MsgCreateGroupPolicy = exports.MsgUpdateGroupAdmin = exports.TallyResult = exports.GroupInfo = exports.QueryProposalResponse = exports.EventProposalPruned = exports.MsgExecResponse = exports.MsgWithdrawProposalResponse = exports.MsgUpdateGroupPolicyAdmin = exports.QueryVotesByProposalRequest = exports.QueryProposalsByGroupPolicyResponse = exports.EventUpdateGroupPolicy = exports.MsgVote = exports.GenesisState = exports.QueryTallyResultRequest = exports.QueryGroupInfoResponse = exports.MsgLeaveGroup = exports.MsgSubmitProposalResponse = exports.MsgUpdateGroupMembers = exports.GroupPolicyInfo = exports.QueryVotesByVoterRequest = exports.QueryGroupMembersResponse = exports.MsgUpdateGroupMetadataResponse = exports.QueryProposalRequest = exports.QueryGroupInfoRequest = exports.EventWithdrawProposal = exports.MsgUpdateGroupPolicyDecisionPolicyResponse = exports.ThresholdDecisionPolicy = exports.QueryGroupsResponse = exports.QueryGroupsRequest = void 0;
exports.queryClient = exports.txClient = exports.registry = exports.MsgUpdateGroupPolicyAdminResponse = exports.MsgCreateGroupPolicyResponse = exports.QueryGroupsByMemberResponse = exports.QueryGroupMembersRequest = exports.MsgWithdrawProposal = exports.MsgCreateGroupWithPolicyResponse = exports.QueryVoteByProposalVoterRequest = exports.MsgCreateGroupResponse = exports.Proposal = exports.QueryGroupsByMemberRequest = exports.QueryVotesByProposalResponse = exports.QueryGroupPoliciesByGroupResponse = exports.MsgExec = exports.MsgUpdateGroupMetadata = exports.GroupMember = exports.QueryTallyResultResponse = exports.QueryGroupsByAdminRequest = exports.MsgSubmitProposal = exports.MsgUpdateGroupPolicyDecisionPolicy = exports.Vote = exports.QueryGroupPolicyInfoRequest = exports.EventSubmitProposal = exports.EventCreateGroup = exports.MsgCreateGroup = exports.MemberRequest = exports.QueryGroupsByAdminResponse = exports.EventLeaveGroup = exports.EventCreateGroupPolicy = void 0;
const stargate_1 = require("@cosmjs/stargate");
const proto_signing_1 = require("@cosmjs/proto-signing");
const registry_1 = require("./registry");
const rest_1 = require("./rest");
const query_1 = require("./types/cosmos/group/v1/query");
Object.defineProperty(exports, "QueryGroupsRequest", { enumerable: true, get: function () { return query_1.QueryGroupsRequest; } });
const query_2 = require("./types/cosmos/group/v1/query");
Object.defineProperty(exports, "QueryGroupsResponse", { enumerable: true, get: function () { return query_2.QueryGroupsResponse; } });
const types_1 = require("./types/cosmos/group/v1/types");
Object.defineProperty(exports, "ThresholdDecisionPolicy", { enumerable: true, get: function () { return types_1.ThresholdDecisionPolicy; } });
const tx_1 = require("./types/cosmos/group/v1/tx");
Object.defineProperty(exports, "MsgUpdateGroupPolicyDecisionPolicyResponse", { enumerable: true, get: function () { return tx_1.MsgUpdateGroupPolicyDecisionPolicyResponse; } });
const events_1 = require("./types/cosmos/group/v1/events");
Object.defineProperty(exports, "EventWithdrawProposal", { enumerable: true, get: function () { return events_1.EventWithdrawProposal; } });
const query_3 = require("./types/cosmos/group/v1/query");
Object.defineProperty(exports, "QueryGroupInfoRequest", { enumerable: true, get: function () { return query_3.QueryGroupInfoRequest; } });
const query_4 = require("./types/cosmos/group/v1/query");
Object.defineProperty(exports, "QueryProposalRequest", { enumerable: true, get: function () { return query_4.QueryProposalRequest; } });
const tx_2 = require("./types/cosmos/group/v1/tx");
Object.defineProperty(exports, "MsgUpdateGroupMetadataResponse", { enumerable: true, get: function () { return tx_2.MsgUpdateGroupMetadataResponse; } });
const query_5 = require("./types/cosmos/group/v1/query");
Object.defineProperty(exports, "QueryGroupMembersResponse", { enumerable: true, get: function () { return query_5.QueryGroupMembersResponse; } });
const query_6 = require("./types/cosmos/group/v1/query");
Object.defineProperty(exports, "QueryVotesByVoterRequest", { enumerable: true, get: function () { return query_6.QueryVotesByVoterRequest; } });
const types_2 = require("./types/cosmos/group/v1/types");
Object.defineProperty(exports, "GroupPolicyInfo", { enumerable: true, get: function () { return types_2.GroupPolicyInfo; } });
const tx_3 = require("./types/cosmos/group/v1/tx");
Object.defineProperty(exports, "MsgUpdateGroupMembers", { enumerable: true, get: function () { return tx_3.MsgUpdateGroupMembers; } });
const tx_4 = require("./types/cosmos/group/v1/tx");
Object.defineProperty(exports, "MsgSubmitProposalResponse", { enumerable: true, get: function () { return tx_4.MsgSubmitProposalResponse; } });
const tx_5 = require("./types/cosmos/group/v1/tx");
Object.defineProperty(exports, "MsgLeaveGroup", { enumerable: true, get: function () { return tx_5.MsgLeaveGroup; } });
const query_7 = require("./types/cosmos/group/v1/query");
Object.defineProperty(exports, "QueryGroupInfoResponse", { enumerable: true, get: function () { return query_7.QueryGroupInfoResponse; } });
const query_8 = require("./types/cosmos/group/v1/query");
Object.defineProperty(exports, "QueryTallyResultRequest", { enumerable: true, get: function () { return query_8.QueryTallyResultRequest; } });
const genesis_1 = require("./types/cosmos/group/v1/genesis");
Object.defineProperty(exports, "GenesisState", { enumerable: true, get: function () { return genesis_1.GenesisState; } });
const tx_6 = require("./types/cosmos/group/v1/tx");
Object.defineProperty(exports, "MsgVote", { enumerable: true, get: function () { return tx_6.MsgVote; } });
const events_2 = require("./types/cosmos/group/v1/events");
Object.defineProperty(exports, "EventUpdateGroupPolicy", { enumerable: true, get: function () { return events_2.EventUpdateGroupPolicy; } });
const query_9 = require("./types/cosmos/group/v1/query");
Object.defineProperty(exports, "QueryProposalsByGroupPolicyResponse", { enumerable: true, get: function () { return query_9.QueryProposalsByGroupPolicyResponse; } });
const query_10 = require("./types/cosmos/group/v1/query");
Object.defineProperty(exports, "QueryVotesByProposalRequest", { enumerable: true, get: function () { return query_10.QueryVotesByProposalRequest; } });
const tx_7 = require("./types/cosmos/group/v1/tx");
Object.defineProperty(exports, "MsgUpdateGroupPolicyAdmin", { enumerable: true, get: function () { return tx_7.MsgUpdateGroupPolicyAdmin; } });
const tx_8 = require("./types/cosmos/group/v1/tx");
Object.defineProperty(exports, "MsgWithdrawProposalResponse", { enumerable: true, get: function () { return tx_8.MsgWithdrawProposalResponse; } });
const tx_9 = require("./types/cosmos/group/v1/tx");
Object.defineProperty(exports, "MsgExecResponse", { enumerable: true, get: function () { return tx_9.MsgExecResponse; } });
const events_3 = require("./types/cosmos/group/v1/events");
Object.defineProperty(exports, "EventProposalPruned", { enumerable: true, get: function () { return events_3.EventProposalPruned; } });
const query_11 = require("./types/cosmos/group/v1/query");
Object.defineProperty(exports, "QueryProposalResponse", { enumerable: true, get: function () { return query_11.QueryProposalResponse; } });
const types_3 = require("./types/cosmos/group/v1/types");
Object.defineProperty(exports, "GroupInfo", { enumerable: true, get: function () { return types_3.GroupInfo; } });
const types_4 = require("./types/cosmos/group/v1/types");
Object.defineProperty(exports, "TallyResult", { enumerable: true, get: function () { return types_4.TallyResult; } });
const tx_10 = require("./types/cosmos/group/v1/tx");
Object.defineProperty(exports, "MsgUpdateGroupAdmin", { enumerable: true, get: function () { return tx_10.MsgUpdateGroupAdmin; } });
const tx_11 = require("./types/cosmos/group/v1/tx");
Object.defineProperty(exports, "MsgCreateGroupPolicy", { enumerable: true, get: function () { return tx_11.MsgCreateGroupPolicy; } });
const tx_12 = require("./types/cosmos/group/v1/tx");
Object.defineProperty(exports, "MsgUpdateGroupAdminResponse", { enumerable: true, get: function () { return tx_12.MsgUpdateGroupAdminResponse; } });
const query_12 = require("./types/cosmos/group/v1/query");
Object.defineProperty(exports, "QueryGroupPoliciesByGroupRequest", { enumerable: true, get: function () { return query_12.QueryGroupPoliciesByGroupRequest; } });
const types_5 = require("./types/cosmos/group/v1/types");
Object.defineProperty(exports, "Member", { enumerable: true, get: function () { return types_5.Member; } });
const events_4 = require("./types/cosmos/group/v1/events");
Object.defineProperty(exports, "EventUpdateGroup", { enumerable: true, get: function () { return events_4.EventUpdateGroup; } });
const events_5 = require("./types/cosmos/group/v1/events");
Object.defineProperty(exports, "EventVote", { enumerable: true, get: function () { return events_5.EventVote; } });
const query_13 = require("./types/cosmos/group/v1/query");
Object.defineProperty(exports, "QueryGroupPolicyInfoResponse", { enumerable: true, get: function () { return query_13.QueryGroupPolicyInfoResponse; } });
const query_14 = require("./types/cosmos/group/v1/query");
Object.defineProperty(exports, "QueryGroupPoliciesByAdminRequest", { enumerable: true, get: function () { return query_14.QueryGroupPoliciesByAdminRequest; } });
const query_15 = require("./types/cosmos/group/v1/query");
Object.defineProperty(exports, "QueryVoteByProposalVoterResponse", { enumerable: true, get: function () { return query_15.QueryVoteByProposalVoterResponse; } });
const query_16 = require("./types/cosmos/group/v1/query");
Object.defineProperty(exports, "QueryVotesByVoterResponse", { enumerable: true, get: function () { return query_16.QueryVotesByVoterResponse; } });
const tx_13 = require("./types/cosmos/group/v1/tx");
Object.defineProperty(exports, "MsgUpdateGroupPolicyMetadata", { enumerable: true, get: function () { return tx_13.MsgUpdateGroupPolicyMetadata; } });
const query_17 = require("./types/cosmos/group/v1/query");
Object.defineProperty(exports, "QueryGroupPoliciesByAdminResponse", { enumerable: true, get: function () { return query_17.QueryGroupPoliciesByAdminResponse; } });
const types_6 = require("./types/cosmos/group/v1/types");
Object.defineProperty(exports, "PercentageDecisionPolicy", { enumerable: true, get: function () { return types_6.PercentageDecisionPolicy; } });
const tx_14 = require("./types/cosmos/group/v1/tx");
Object.defineProperty(exports, "MsgUpdateGroupMembersResponse", { enumerable: true, get: function () { return tx_14.MsgUpdateGroupMembersResponse; } });
const tx_15 = require("./types/cosmos/group/v1/tx");
Object.defineProperty(exports, "MsgLeaveGroupResponse", { enumerable: true, get: function () { return tx_15.MsgLeaveGroupResponse; } });
const events_6 = require("./types/cosmos/group/v1/events");
Object.defineProperty(exports, "EventExec", { enumerable: true, get: function () { return events_6.EventExec; } });
const query_18 = require("./types/cosmos/group/v1/query");
Object.defineProperty(exports, "QueryProposalsByGroupPolicyRequest", { enumerable: true, get: function () { return query_18.QueryProposalsByGroupPolicyRequest; } });
const types_7 = require("./types/cosmos/group/v1/types");
Object.defineProperty(exports, "DecisionPolicyWindows", { enumerable: true, get: function () { return types_7.DecisionPolicyWindows; } });
const tx_16 = require("./types/cosmos/group/v1/tx");
Object.defineProperty(exports, "MsgCreateGroupWithPolicy", { enumerable: true, get: function () { return tx_16.MsgCreateGroupWithPolicy; } });
const tx_17 = require("./types/cosmos/group/v1/tx");
Object.defineProperty(exports, "MsgUpdateGroupPolicyMetadataResponse", { enumerable: true, get: function () { return tx_17.MsgUpdateGroupPolicyMetadataResponse; } });
const tx_18 = require("./types/cosmos/group/v1/tx");
Object.defineProperty(exports, "MsgVoteResponse", { enumerable: true, get: function () { return tx_18.MsgVoteResponse; } });
const events_7 = require("./types/cosmos/group/v1/events");
Object.defineProperty(exports, "EventCreateGroupPolicy", { enumerable: true, get: function () { return events_7.EventCreateGroupPolicy; } });
const events_8 = require("./types/cosmos/group/v1/events");
Object.defineProperty(exports, "EventLeaveGroup", { enumerable: true, get: function () { return events_8.EventLeaveGroup; } });
const query_19 = require("./types/cosmos/group/v1/query");
Object.defineProperty(exports, "QueryGroupsByAdminResponse", { enumerable: true, get: function () { return query_19.QueryGroupsByAdminResponse; } });
const types_8 = require("./types/cosmos/group/v1/types");
Object.defineProperty(exports, "MemberRequest", { enumerable: true, get: function () { return types_8.MemberRequest; } });
const tx_19 = require("./types/cosmos/group/v1/tx");
Object.defineProperty(exports, "MsgCreateGroup", { enumerable: true, get: function () { return tx_19.MsgCreateGroup; } });
const events_9 = require("./types/cosmos/group/v1/events");
Object.defineProperty(exports, "EventCreateGroup", { enumerable: true, get: function () { return events_9.EventCreateGroup; } });
const events_10 = require("./types/cosmos/group/v1/events");
Object.defineProperty(exports, "EventSubmitProposal", { enumerable: true, get: function () { return events_10.EventSubmitProposal; } });
const query_20 = require("./types/cosmos/group/v1/query");
Object.defineProperty(exports, "QueryGroupPolicyInfoRequest", { enumerable: true, get: function () { return query_20.QueryGroupPolicyInfoRequest; } });
const types_9 = require("./types/cosmos/group/v1/types");
Object.defineProperty(exports, "Vote", { enumerable: true, get: function () { return types_9.Vote; } });
const tx_20 = require("./types/cosmos/group/v1/tx");
Object.defineProperty(exports, "MsgUpdateGroupPolicyDecisionPolicy", { enumerable: true, get: function () { return tx_20.MsgUpdateGroupPolicyDecisionPolicy; } });
const tx_21 = require("./types/cosmos/group/v1/tx");
Object.defineProperty(exports, "MsgSubmitProposal", { enumerable: true, get: function () { return tx_21.MsgSubmitProposal; } });
const query_21 = require("./types/cosmos/group/v1/query");
Object.defineProperty(exports, "QueryGroupsByAdminRequest", { enumerable: true, get: function () { return query_21.QueryGroupsByAdminRequest; } });
const query_22 = require("./types/cosmos/group/v1/query");
Object.defineProperty(exports, "QueryTallyResultResponse", { enumerable: true, get: function () { return query_22.QueryTallyResultResponse; } });
const types_10 = require("./types/cosmos/group/v1/types");
Object.defineProperty(exports, "GroupMember", { enumerable: true, get: function () { return types_10.GroupMember; } });
const tx_22 = require("./types/cosmos/group/v1/tx");
Object.defineProperty(exports, "MsgUpdateGroupMetadata", { enumerable: true, get: function () { return tx_22.MsgUpdateGroupMetadata; } });
const tx_23 = require("./types/cosmos/group/v1/tx");
Object.defineProperty(exports, "MsgExec", { enumerable: true, get: function () { return tx_23.MsgExec; } });
const query_23 = require("./types/cosmos/group/v1/query");
Object.defineProperty(exports, "QueryGroupPoliciesByGroupResponse", { enumerable: true, get: function () { return query_23.QueryGroupPoliciesByGroupResponse; } });
const query_24 = require("./types/cosmos/group/v1/query");
Object.defineProperty(exports, "QueryVotesByProposalResponse", { enumerable: true, get: function () { return query_24.QueryVotesByProposalResponse; } });
const query_25 = require("./types/cosmos/group/v1/query");
Object.defineProperty(exports, "QueryGroupsByMemberRequest", { enumerable: true, get: function () { return query_25.QueryGroupsByMemberRequest; } });
const types_11 = require("./types/cosmos/group/v1/types");
Object.defineProperty(exports, "Proposal", { enumerable: true, get: function () { return types_11.Proposal; } });
const tx_24 = require("./types/cosmos/group/v1/tx");
Object.defineProperty(exports, "MsgCreateGroupResponse", { enumerable: true, get: function () { return tx_24.MsgCreateGroupResponse; } });
const query_26 = require("./types/cosmos/group/v1/query");
Object.defineProperty(exports, "QueryVoteByProposalVoterRequest", { enumerable: true, get: function () { return query_26.QueryVoteByProposalVoterRequest; } });
const tx_25 = require("./types/cosmos/group/v1/tx");
Object.defineProperty(exports, "MsgCreateGroupWithPolicyResponse", { enumerable: true, get: function () { return tx_25.MsgCreateGroupWithPolicyResponse; } });
const tx_26 = require("./types/cosmos/group/v1/tx");
Object.defineProperty(exports, "MsgWithdrawProposal", { enumerable: true, get: function () { return tx_26.MsgWithdrawProposal; } });
const query_27 = require("./types/cosmos/group/v1/query");
Object.defineProperty(exports, "QueryGroupMembersRequest", { enumerable: true, get: function () { return query_27.QueryGroupMembersRequest; } });
const query_28 = require("./types/cosmos/group/v1/query");
Object.defineProperty(exports, "QueryGroupsByMemberResponse", { enumerable: true, get: function () { return query_28.QueryGroupsByMemberResponse; } });
const tx_27 = require("./types/cosmos/group/v1/tx");
Object.defineProperty(exports, "MsgCreateGroupPolicyResponse", { enumerable: true, get: function () { return tx_27.MsgCreateGroupPolicyResponse; } });
const tx_28 = require("./types/cosmos/group/v1/tx");
Object.defineProperty(exports, "MsgUpdateGroupPolicyAdminResponse", { enumerable: true, get: function () { return tx_28.MsgUpdateGroupPolicyAdminResponse; } });
exports.registry = new proto_signing_1.Registry(registry_1.msgTypes);
function getStructure(template) {
    const structure = { fields: [] };
    for (let [key, value] of Object.entries(template)) {
        let field = { name: key, type: typeof value };
        structure.fields.push(field);
    }
    return structure;
}
const defaultFee = {
    amount: [],
    gas: "200000",
};
const txClient = ({ signer, prefix, addr } = { addr: "http://localhost:26657", prefix: "cosmos" }) => {
    return {
        async sendQueryGroupsRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGroupsRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGroupsRequest({ value: query_1.QueryGroupsRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGroupsRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGroupsResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGroupsResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGroupsResponse({ value: query_2.QueryGroupsResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGroupsResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendThresholdDecisionPolicy({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendThresholdDecisionPolicy: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.thresholdDecisionPolicy({ value: types_1.ThresholdDecisionPolicy.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendThresholdDecisionPolicy: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateGroupPolicyDecisionPolicyResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateGroupPolicyDecisionPolicyResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgUpdateGroupPolicyDecisionPolicyResponse({ value: tx_1.MsgUpdateGroupPolicyDecisionPolicyResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateGroupPolicyDecisionPolicyResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendEventWithdrawProposal({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendEventWithdrawProposal: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.eventWithdrawProposal({ value: events_1.EventWithdrawProposal.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendEventWithdrawProposal: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGroupInfoRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGroupInfoRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGroupInfoRequest({ value: query_3.QueryGroupInfoRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGroupInfoRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryProposalRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryProposalRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryProposalRequest({ value: query_4.QueryProposalRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryProposalRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateGroupMetadataResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateGroupMetadataResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgUpdateGroupMetadataResponse({ value: tx_2.MsgUpdateGroupMetadataResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateGroupMetadataResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGroupMembersResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGroupMembersResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGroupMembersResponse({ value: query_5.QueryGroupMembersResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGroupMembersResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryVotesByVoterRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryVotesByVoterRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryVotesByVoterRequest({ value: query_6.QueryVotesByVoterRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryVotesByVoterRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendGroupPolicyInfo({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendGroupPolicyInfo: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.groupPolicyInfo({ value: types_2.GroupPolicyInfo.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendGroupPolicyInfo: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateGroupMembers({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateGroupMembers: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgUpdateGroupMembers({ value: tx_3.MsgUpdateGroupMembers.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateGroupMembers: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgSubmitProposalResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgSubmitProposalResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgSubmitProposalResponse({ value: tx_4.MsgSubmitProposalResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgSubmitProposalResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgLeaveGroup({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgLeaveGroup: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgLeaveGroup({ value: tx_5.MsgLeaveGroup.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgLeaveGroup: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGroupInfoResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGroupInfoResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGroupInfoResponse({ value: query_7.QueryGroupInfoResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGroupInfoResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryTallyResultRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryTallyResultRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryTallyResultRequest({ value: query_8.QueryTallyResultRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryTallyResultRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendGenesisState({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendGenesisState: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.genesisState({ value: genesis_1.GenesisState.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendGenesisState: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgVote({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgVote: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgVote({ value: tx_6.MsgVote.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgVote: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendEventUpdateGroupPolicy({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendEventUpdateGroupPolicy: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.eventUpdateGroupPolicy({ value: events_2.EventUpdateGroupPolicy.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendEventUpdateGroupPolicy: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryProposalsByGroupPolicyResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryProposalsByGroupPolicyResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryProposalsByGroupPolicyResponse({ value: query_9.QueryProposalsByGroupPolicyResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryProposalsByGroupPolicyResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryVotesByProposalRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryVotesByProposalRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryVotesByProposalRequest({ value: query_10.QueryVotesByProposalRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryVotesByProposalRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateGroupPolicyAdmin({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateGroupPolicyAdmin: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgUpdateGroupPolicyAdmin({ value: tx_7.MsgUpdateGroupPolicyAdmin.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateGroupPolicyAdmin: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgWithdrawProposalResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgWithdrawProposalResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgWithdrawProposalResponse({ value: tx_8.MsgWithdrawProposalResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgWithdrawProposalResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgExecResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgExecResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgExecResponse({ value: tx_9.MsgExecResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgExecResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendEventProposalPruned({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendEventProposalPruned: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.eventProposalPruned({ value: events_3.EventProposalPruned.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendEventProposalPruned: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryProposalResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryProposalResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryProposalResponse({ value: query_11.QueryProposalResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryProposalResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendGroupInfo({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendGroupInfo: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.groupInfo({ value: types_3.GroupInfo.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendGroupInfo: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendTallyResult({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendTallyResult: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.tallyResult({ value: types_4.TallyResult.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendTallyResult: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateGroupAdmin({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateGroupAdmin: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgUpdateGroupAdmin({ value: tx_10.MsgUpdateGroupAdmin.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateGroupAdmin: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgCreateGroupPolicy({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgCreateGroupPolicy: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgCreateGroupPolicy({ value: tx_11.MsgCreateGroupPolicy.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgCreateGroupPolicy: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateGroupAdminResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateGroupAdminResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgUpdateGroupAdminResponse({ value: tx_12.MsgUpdateGroupAdminResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateGroupAdminResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGroupPoliciesByGroupRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGroupPoliciesByGroupRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGroupPoliciesByGroupRequest({ value: query_12.QueryGroupPoliciesByGroupRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGroupPoliciesByGroupRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMember({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMember: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.member({ value: types_5.Member.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMember: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendEventUpdateGroup({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendEventUpdateGroup: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.eventUpdateGroup({ value: events_4.EventUpdateGroup.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendEventUpdateGroup: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendEventVote({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendEventVote: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.eventVote({ value: events_5.EventVote.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendEventVote: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGroupPolicyInfoResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGroupPolicyInfoResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGroupPolicyInfoResponse({ value: query_13.QueryGroupPolicyInfoResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGroupPolicyInfoResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGroupPoliciesByAdminRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGroupPoliciesByAdminRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGroupPoliciesByAdminRequest({ value: query_14.QueryGroupPoliciesByAdminRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGroupPoliciesByAdminRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryVoteByProposalVoterResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryVoteByProposalVoterResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryVoteByProposalVoterResponse({ value: query_15.QueryVoteByProposalVoterResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryVoteByProposalVoterResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryVotesByVoterResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryVotesByVoterResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryVotesByVoterResponse({ value: query_16.QueryVotesByVoterResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryVotesByVoterResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateGroupPolicyMetadata({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateGroupPolicyMetadata: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgUpdateGroupPolicyMetadata({ value: tx_13.MsgUpdateGroupPolicyMetadata.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateGroupPolicyMetadata: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGroupPoliciesByAdminResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGroupPoliciesByAdminResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGroupPoliciesByAdminResponse({ value: query_17.QueryGroupPoliciesByAdminResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGroupPoliciesByAdminResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendPercentageDecisionPolicy({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendPercentageDecisionPolicy: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.percentageDecisionPolicy({ value: types_6.PercentageDecisionPolicy.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendPercentageDecisionPolicy: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateGroupMembersResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateGroupMembersResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgUpdateGroupMembersResponse({ value: tx_14.MsgUpdateGroupMembersResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateGroupMembersResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgLeaveGroupResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgLeaveGroupResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgLeaveGroupResponse({ value: tx_15.MsgLeaveGroupResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgLeaveGroupResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendEventExec({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendEventExec: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.eventExec({ value: events_6.EventExec.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendEventExec: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryProposalsByGroupPolicyRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryProposalsByGroupPolicyRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryProposalsByGroupPolicyRequest({ value: query_18.QueryProposalsByGroupPolicyRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryProposalsByGroupPolicyRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendDecisionPolicyWindows({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendDecisionPolicyWindows: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.decisionPolicyWindows({ value: types_7.DecisionPolicyWindows.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendDecisionPolicyWindows: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgCreateGroupWithPolicy({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgCreateGroupWithPolicy: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgCreateGroupWithPolicy({ value: tx_16.MsgCreateGroupWithPolicy.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgCreateGroupWithPolicy: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateGroupPolicyMetadataResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateGroupPolicyMetadataResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgUpdateGroupPolicyMetadataResponse({ value: tx_17.MsgUpdateGroupPolicyMetadataResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateGroupPolicyMetadataResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgVoteResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgVoteResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgVoteResponse({ value: tx_18.MsgVoteResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgVoteResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendEventCreateGroupPolicy({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendEventCreateGroupPolicy: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.eventCreateGroupPolicy({ value: events_7.EventCreateGroupPolicy.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendEventCreateGroupPolicy: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendEventLeaveGroup({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendEventLeaveGroup: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.eventLeaveGroup({ value: events_8.EventLeaveGroup.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendEventLeaveGroup: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGroupsByAdminResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGroupsByAdminResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGroupsByAdminResponse({ value: query_19.QueryGroupsByAdminResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGroupsByAdminResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMemberRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMemberRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.memberRequest({ value: types_8.MemberRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMemberRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgCreateGroup({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgCreateGroup: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgCreateGroup({ value: tx_19.MsgCreateGroup.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgCreateGroup: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendEventCreateGroup({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendEventCreateGroup: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.eventCreateGroup({ value: events_9.EventCreateGroup.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendEventCreateGroup: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendEventSubmitProposal({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendEventSubmitProposal: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.eventSubmitProposal({ value: events_10.EventSubmitProposal.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendEventSubmitProposal: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGroupPolicyInfoRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGroupPolicyInfoRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGroupPolicyInfoRequest({ value: query_20.QueryGroupPolicyInfoRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGroupPolicyInfoRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendVote({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendVote: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.vote({ value: types_9.Vote.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendVote: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateGroupPolicyDecisionPolicy({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateGroupPolicyDecisionPolicy: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgUpdateGroupPolicyDecisionPolicy({ value: tx_20.MsgUpdateGroupPolicyDecisionPolicy.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateGroupPolicyDecisionPolicy: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgSubmitProposal({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgSubmitProposal: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgSubmitProposal({ value: tx_21.MsgSubmitProposal.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgSubmitProposal: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGroupsByAdminRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGroupsByAdminRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGroupsByAdminRequest({ value: query_21.QueryGroupsByAdminRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGroupsByAdminRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryTallyResultResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryTallyResultResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryTallyResultResponse({ value: query_22.QueryTallyResultResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryTallyResultResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendGroupMember({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendGroupMember: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.groupMember({ value: types_10.GroupMember.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendGroupMember: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateGroupMetadata({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateGroupMetadata: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgUpdateGroupMetadata({ value: tx_22.MsgUpdateGroupMetadata.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateGroupMetadata: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgExec({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgExec: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgExec({ value: tx_23.MsgExec.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgExec: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGroupPoliciesByGroupResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGroupPoliciesByGroupResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGroupPoliciesByGroupResponse({ value: query_23.QueryGroupPoliciesByGroupResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGroupPoliciesByGroupResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryVotesByProposalResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryVotesByProposalResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryVotesByProposalResponse({ value: query_24.QueryVotesByProposalResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryVotesByProposalResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGroupsByMemberRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGroupsByMemberRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGroupsByMemberRequest({ value: query_25.QueryGroupsByMemberRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGroupsByMemberRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendProposal({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendProposal: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.proposal({ value: types_11.Proposal.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendProposal: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgCreateGroupResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgCreateGroupResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgCreateGroupResponse({ value: tx_24.MsgCreateGroupResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgCreateGroupResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryVoteByProposalVoterRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryVoteByProposalVoterRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryVoteByProposalVoterRequest({ value: query_26.QueryVoteByProposalVoterRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryVoteByProposalVoterRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgCreateGroupWithPolicyResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgCreateGroupWithPolicyResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgCreateGroupWithPolicyResponse({ value: tx_25.MsgCreateGroupWithPolicyResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgCreateGroupWithPolicyResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgWithdrawProposal({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgWithdrawProposal: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgWithdrawProposal({ value: tx_26.MsgWithdrawProposal.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgWithdrawProposal: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGroupMembersRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGroupMembersRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGroupMembersRequest({ value: query_27.QueryGroupMembersRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGroupMembersRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGroupsByMemberResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGroupsByMemberResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGroupsByMemberResponse({ value: query_28.QueryGroupsByMemberResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGroupsByMemberResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgCreateGroupPolicyResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgCreateGroupPolicyResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgCreateGroupPolicyResponse({ value: tx_27.MsgCreateGroupPolicyResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgCreateGroupPolicyResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateGroupPolicyAdminResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateGroupPolicyAdminResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgUpdateGroupPolicyAdminResponse({ value: tx_28.MsgUpdateGroupPolicyAdminResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateGroupPolicyAdminResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        queryGroupsRequest({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.QueryGroupsRequest", value: query_1.QueryGroupsRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGroupsRequest: Could not create message: ' + e.message);
            }
        },
        queryGroupsResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.QueryGroupsResponse", value: query_2.QueryGroupsResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGroupsResponse: Could not create message: ' + e.message);
            }
        },
        thresholdDecisionPolicy({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.ThresholdDecisionPolicy", value: types_1.ThresholdDecisionPolicy.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:ThresholdDecisionPolicy: Could not create message: ' + e.message);
            }
        },
        msgUpdateGroupPolicyDecisionPolicyResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicyResponse", value: tx_1.MsgUpdateGroupPolicyDecisionPolicyResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateGroupPolicyDecisionPolicyResponse: Could not create message: ' + e.message);
            }
        },
        eventWithdrawProposal({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.EventWithdrawProposal", value: events_1.EventWithdrawProposal.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:EventWithdrawProposal: Could not create message: ' + e.message);
            }
        },
        queryGroupInfoRequest({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.QueryGroupInfoRequest", value: query_3.QueryGroupInfoRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGroupInfoRequest: Could not create message: ' + e.message);
            }
        },
        queryProposalRequest({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.QueryProposalRequest", value: query_4.QueryProposalRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryProposalRequest: Could not create message: ' + e.message);
            }
        },
        msgUpdateGroupMetadataResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.MsgUpdateGroupMetadataResponse", value: tx_2.MsgUpdateGroupMetadataResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateGroupMetadataResponse: Could not create message: ' + e.message);
            }
        },
        queryGroupMembersResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.QueryGroupMembersResponse", value: query_5.QueryGroupMembersResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGroupMembersResponse: Could not create message: ' + e.message);
            }
        },
        queryVotesByVoterRequest({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.QueryVotesByVoterRequest", value: query_6.QueryVotesByVoterRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryVotesByVoterRequest: Could not create message: ' + e.message);
            }
        },
        groupPolicyInfo({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.GroupPolicyInfo", value: types_2.GroupPolicyInfo.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:GroupPolicyInfo: Could not create message: ' + e.message);
            }
        },
        msgUpdateGroupMembers({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.MsgUpdateGroupMembers", value: tx_3.MsgUpdateGroupMembers.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateGroupMembers: Could not create message: ' + e.message);
            }
        },
        msgSubmitProposalResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.MsgSubmitProposalResponse", value: tx_4.MsgSubmitProposalResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgSubmitProposalResponse: Could not create message: ' + e.message);
            }
        },
        msgLeaveGroup({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.MsgLeaveGroup", value: tx_5.MsgLeaveGroup.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgLeaveGroup: Could not create message: ' + e.message);
            }
        },
        queryGroupInfoResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.QueryGroupInfoResponse", value: query_7.QueryGroupInfoResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGroupInfoResponse: Could not create message: ' + e.message);
            }
        },
        queryTallyResultRequest({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.QueryTallyResultRequest", value: query_8.QueryTallyResultRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryTallyResultRequest: Could not create message: ' + e.message);
            }
        },
        genesisState({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.GenesisState", value: genesis_1.GenesisState.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:GenesisState: Could not create message: ' + e.message);
            }
        },
        msgVote({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.MsgVote", value: tx_6.MsgVote.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgVote: Could not create message: ' + e.message);
            }
        },
        eventUpdateGroupPolicy({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.EventUpdateGroupPolicy", value: events_2.EventUpdateGroupPolicy.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:EventUpdateGroupPolicy: Could not create message: ' + e.message);
            }
        },
        queryProposalsByGroupPolicyResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.QueryProposalsByGroupPolicyResponse", value: query_9.QueryProposalsByGroupPolicyResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryProposalsByGroupPolicyResponse: Could not create message: ' + e.message);
            }
        },
        queryVotesByProposalRequest({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.QueryVotesByProposalRequest", value: query_10.QueryVotesByProposalRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryVotesByProposalRequest: Could not create message: ' + e.message);
            }
        },
        msgUpdateGroupPolicyAdmin({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.MsgUpdateGroupPolicyAdmin", value: tx_7.MsgUpdateGroupPolicyAdmin.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateGroupPolicyAdmin: Could not create message: ' + e.message);
            }
        },
        msgWithdrawProposalResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.MsgWithdrawProposalResponse", value: tx_8.MsgWithdrawProposalResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgWithdrawProposalResponse: Could not create message: ' + e.message);
            }
        },
        msgExecResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.MsgExecResponse", value: tx_9.MsgExecResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgExecResponse: Could not create message: ' + e.message);
            }
        },
        eventProposalPruned({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.EventProposalPruned", value: events_3.EventProposalPruned.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:EventProposalPruned: Could not create message: ' + e.message);
            }
        },
        queryProposalResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.QueryProposalResponse", value: query_11.QueryProposalResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryProposalResponse: Could not create message: ' + e.message);
            }
        },
        groupInfo({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.GroupInfo", value: types_3.GroupInfo.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:GroupInfo: Could not create message: ' + e.message);
            }
        },
        tallyResult({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.TallyResult", value: types_4.TallyResult.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:TallyResult: Could not create message: ' + e.message);
            }
        },
        msgUpdateGroupAdmin({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.MsgUpdateGroupAdmin", value: tx_10.MsgUpdateGroupAdmin.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateGroupAdmin: Could not create message: ' + e.message);
            }
        },
        msgCreateGroupPolicy({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.MsgCreateGroupPolicy", value: tx_11.MsgCreateGroupPolicy.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgCreateGroupPolicy: Could not create message: ' + e.message);
            }
        },
        msgUpdateGroupAdminResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.MsgUpdateGroupAdminResponse", value: tx_12.MsgUpdateGroupAdminResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateGroupAdminResponse: Could not create message: ' + e.message);
            }
        },
        queryGroupPoliciesByGroupRequest({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.QueryGroupPoliciesByGroupRequest", value: query_12.QueryGroupPoliciesByGroupRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGroupPoliciesByGroupRequest: Could not create message: ' + e.message);
            }
        },
        member({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.Member", value: types_5.Member.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:Member: Could not create message: ' + e.message);
            }
        },
        eventUpdateGroup({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.EventUpdateGroup", value: events_4.EventUpdateGroup.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:EventUpdateGroup: Could not create message: ' + e.message);
            }
        },
        eventVote({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.EventVote", value: events_5.EventVote.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:EventVote: Could not create message: ' + e.message);
            }
        },
        queryGroupPolicyInfoResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.QueryGroupPolicyInfoResponse", value: query_13.QueryGroupPolicyInfoResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGroupPolicyInfoResponse: Could not create message: ' + e.message);
            }
        },
        queryGroupPoliciesByAdminRequest({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.QueryGroupPoliciesByAdminRequest", value: query_14.QueryGroupPoliciesByAdminRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGroupPoliciesByAdminRequest: Could not create message: ' + e.message);
            }
        },
        queryVoteByProposalVoterResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.QueryVoteByProposalVoterResponse", value: query_15.QueryVoteByProposalVoterResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryVoteByProposalVoterResponse: Could not create message: ' + e.message);
            }
        },
        queryVotesByVoterResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.QueryVotesByVoterResponse", value: query_16.QueryVotesByVoterResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryVotesByVoterResponse: Could not create message: ' + e.message);
            }
        },
        msgUpdateGroupPolicyMetadata({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.MsgUpdateGroupPolicyMetadata", value: tx_13.MsgUpdateGroupPolicyMetadata.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateGroupPolicyMetadata: Could not create message: ' + e.message);
            }
        },
        queryGroupPoliciesByAdminResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.QueryGroupPoliciesByAdminResponse", value: query_17.QueryGroupPoliciesByAdminResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGroupPoliciesByAdminResponse: Could not create message: ' + e.message);
            }
        },
        percentageDecisionPolicy({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.PercentageDecisionPolicy", value: types_6.PercentageDecisionPolicy.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:PercentageDecisionPolicy: Could not create message: ' + e.message);
            }
        },
        msgUpdateGroupMembersResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.MsgUpdateGroupMembersResponse", value: tx_14.MsgUpdateGroupMembersResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateGroupMembersResponse: Could not create message: ' + e.message);
            }
        },
        msgLeaveGroupResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.MsgLeaveGroupResponse", value: tx_15.MsgLeaveGroupResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgLeaveGroupResponse: Could not create message: ' + e.message);
            }
        },
        eventExec({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.EventExec", value: events_6.EventExec.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:EventExec: Could not create message: ' + e.message);
            }
        },
        queryProposalsByGroupPolicyRequest({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.QueryProposalsByGroupPolicyRequest", value: query_18.QueryProposalsByGroupPolicyRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryProposalsByGroupPolicyRequest: Could not create message: ' + e.message);
            }
        },
        decisionPolicyWindows({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.DecisionPolicyWindows", value: types_7.DecisionPolicyWindows.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:DecisionPolicyWindows: Could not create message: ' + e.message);
            }
        },
        msgCreateGroupWithPolicy({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.MsgCreateGroupWithPolicy", value: tx_16.MsgCreateGroupWithPolicy.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgCreateGroupWithPolicy: Could not create message: ' + e.message);
            }
        },
        msgUpdateGroupPolicyMetadataResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.MsgUpdateGroupPolicyMetadataResponse", value: tx_17.MsgUpdateGroupPolicyMetadataResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateGroupPolicyMetadataResponse: Could not create message: ' + e.message);
            }
        },
        msgVoteResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.MsgVoteResponse", value: tx_18.MsgVoteResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgVoteResponse: Could not create message: ' + e.message);
            }
        },
        eventCreateGroupPolicy({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.EventCreateGroupPolicy", value: events_7.EventCreateGroupPolicy.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:EventCreateGroupPolicy: Could not create message: ' + e.message);
            }
        },
        eventLeaveGroup({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.EventLeaveGroup", value: events_8.EventLeaveGroup.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:EventLeaveGroup: Could not create message: ' + e.message);
            }
        },
        queryGroupsByAdminResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.QueryGroupsByAdminResponse", value: query_19.QueryGroupsByAdminResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGroupsByAdminResponse: Could not create message: ' + e.message);
            }
        },
        memberRequest({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.MemberRequest", value: types_8.MemberRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MemberRequest: Could not create message: ' + e.message);
            }
        },
        msgCreateGroup({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.MsgCreateGroup", value: tx_19.MsgCreateGroup.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgCreateGroup: Could not create message: ' + e.message);
            }
        },
        eventCreateGroup({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.EventCreateGroup", value: events_9.EventCreateGroup.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:EventCreateGroup: Could not create message: ' + e.message);
            }
        },
        eventSubmitProposal({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.EventSubmitProposal", value: events_10.EventSubmitProposal.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:EventSubmitProposal: Could not create message: ' + e.message);
            }
        },
        queryGroupPolicyInfoRequest({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.QueryGroupPolicyInfoRequest", value: query_20.QueryGroupPolicyInfoRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGroupPolicyInfoRequest: Could not create message: ' + e.message);
            }
        },
        vote({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.Vote", value: types_9.Vote.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:Vote: Could not create message: ' + e.message);
            }
        },
        msgUpdateGroupPolicyDecisionPolicy({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicy", value: tx_20.MsgUpdateGroupPolicyDecisionPolicy.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateGroupPolicyDecisionPolicy: Could not create message: ' + e.message);
            }
        },
        msgSubmitProposal({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.MsgSubmitProposal", value: tx_21.MsgSubmitProposal.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgSubmitProposal: Could not create message: ' + e.message);
            }
        },
        queryGroupsByAdminRequest({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.QueryGroupsByAdminRequest", value: query_21.QueryGroupsByAdminRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGroupsByAdminRequest: Could not create message: ' + e.message);
            }
        },
        queryTallyResultResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.QueryTallyResultResponse", value: query_22.QueryTallyResultResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryTallyResultResponse: Could not create message: ' + e.message);
            }
        },
        groupMember({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.GroupMember", value: types_10.GroupMember.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:GroupMember: Could not create message: ' + e.message);
            }
        },
        msgUpdateGroupMetadata({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.MsgUpdateGroupMetadata", value: tx_22.MsgUpdateGroupMetadata.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateGroupMetadata: Could not create message: ' + e.message);
            }
        },
        msgExec({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.MsgExec", value: tx_23.MsgExec.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgExec: Could not create message: ' + e.message);
            }
        },
        queryGroupPoliciesByGroupResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.QueryGroupPoliciesByGroupResponse", value: query_23.QueryGroupPoliciesByGroupResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGroupPoliciesByGroupResponse: Could not create message: ' + e.message);
            }
        },
        queryVotesByProposalResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.QueryVotesByProposalResponse", value: query_24.QueryVotesByProposalResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryVotesByProposalResponse: Could not create message: ' + e.message);
            }
        },
        queryGroupsByMemberRequest({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.QueryGroupsByMemberRequest", value: query_25.QueryGroupsByMemberRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGroupsByMemberRequest: Could not create message: ' + e.message);
            }
        },
        proposal({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.Proposal", value: types_11.Proposal.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:Proposal: Could not create message: ' + e.message);
            }
        },
        msgCreateGroupResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.MsgCreateGroupResponse", value: tx_24.MsgCreateGroupResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgCreateGroupResponse: Could not create message: ' + e.message);
            }
        },
        queryVoteByProposalVoterRequest({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.QueryVoteByProposalVoterRequest", value: query_26.QueryVoteByProposalVoterRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryVoteByProposalVoterRequest: Could not create message: ' + e.message);
            }
        },
        msgCreateGroupWithPolicyResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.MsgCreateGroupWithPolicyResponse", value: tx_25.MsgCreateGroupWithPolicyResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgCreateGroupWithPolicyResponse: Could not create message: ' + e.message);
            }
        },
        msgWithdrawProposal({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.MsgWithdrawProposal", value: tx_26.MsgWithdrawProposal.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgWithdrawProposal: Could not create message: ' + e.message);
            }
        },
        queryGroupMembersRequest({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.QueryGroupMembersRequest", value: query_27.QueryGroupMembersRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGroupMembersRequest: Could not create message: ' + e.message);
            }
        },
        queryGroupsByMemberResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.QueryGroupsByMemberResponse", value: query_28.QueryGroupsByMemberResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGroupsByMemberResponse: Could not create message: ' + e.message);
            }
        },
        msgCreateGroupPolicyResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.MsgCreateGroupPolicyResponse", value: tx_27.MsgCreateGroupPolicyResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgCreateGroupPolicyResponse: Could not create message: ' + e.message);
            }
        },
        msgUpdateGroupPolicyAdminResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.group.v1.MsgUpdateGroupPolicyAdminResponse", value: tx_28.MsgUpdateGroupPolicyAdminResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateGroupPolicyAdminResponse: Could not create message: ' + e.message);
            }
        },
    };
};
exports.txClient = txClient;
const queryClient = ({ addr: addr } = { addr: "http://localhost:1317" }) => {
    return new rest_1.Api({ baseURL: addr });
};
exports.queryClient = queryClient;
class SDKModule {
    constructor(client) {
        this.registry = [];
        this.query = (0, exports.queryClient)({ addr: client.env.apiURL });
        this.updateTX(client);
        this.structure = {};
        client.on('signer-changed', (signer) => {
            this.updateTX(client);
        });
    }
    updateTX(client) {
        const methods = (0, exports.txClient)({
            signer: client.signer,
            addr: client.env.rpcURL,
            prefix: client.env.prefix ?? "cosmos",
        });
        this.tx = methods;
        for (let m in methods) {
            this.tx[m] = methods[m].bind(this.tx);
        }
    }
}
;
const IgntModule = (test) => {
    return {
        module: {
            CosmosGroupV1: new SDKModule(test)
        },
        registry: registry_1.msgTypes
    };
};
exports.default = IgntModule;
