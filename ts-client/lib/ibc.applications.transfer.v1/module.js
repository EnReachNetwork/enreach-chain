"use strict";
// Generated by Ignite ignite.com/cli
Object.defineProperty(exports, "__esModule", { value: true });
exports.queryClient = exports.txClient = exports.registry = exports.QueryDenomHashResponse = exports.QueryDenomTracesRequest = exports.MsgTransfer = exports.MsgUpdateParamsResponse = exports.MsgTransferResponse = exports.TransferAuthorization = exports.Allocation = exports.QueryEscrowAddressResponse = exports.QueryDenomHashRequest = exports.QueryEscrowAddressRequest = exports.QueryDenomTraceResponse = exports.QueryTotalEscrowForDenomRequest = exports.QueryDenomTracesResponse = exports.GenesisState = exports.QueryParamsRequest = exports.QueryDenomTraceRequest = exports.DenomTrace = exports.QueryTotalEscrowForDenomResponse = exports.QueryParamsResponse = exports.Params = exports.MsgUpdateParams = void 0;
const stargate_1 = require("@cosmjs/stargate");
const proto_signing_1 = require("@cosmjs/proto-signing");
const registry_1 = require("./registry");
const rest_1 = require("./rest");
const tx_1 = require("./types/ibc/applications/transfer/v1/tx");
Object.defineProperty(exports, "MsgUpdateParams", { enumerable: true, get: function () { return tx_1.MsgUpdateParams; } });
const transfer_1 = require("./types/ibc/applications/transfer/v1/transfer");
Object.defineProperty(exports, "Params", { enumerable: true, get: function () { return transfer_1.Params; } });
const query_1 = require("./types/ibc/applications/transfer/v1/query");
Object.defineProperty(exports, "QueryParamsResponse", { enumerable: true, get: function () { return query_1.QueryParamsResponse; } });
const query_2 = require("./types/ibc/applications/transfer/v1/query");
Object.defineProperty(exports, "QueryTotalEscrowForDenomResponse", { enumerable: true, get: function () { return query_2.QueryTotalEscrowForDenomResponse; } });
const transfer_2 = require("./types/ibc/applications/transfer/v1/transfer");
Object.defineProperty(exports, "DenomTrace", { enumerable: true, get: function () { return transfer_2.DenomTrace; } });
const query_3 = require("./types/ibc/applications/transfer/v1/query");
Object.defineProperty(exports, "QueryDenomTraceRequest", { enumerable: true, get: function () { return query_3.QueryDenomTraceRequest; } });
const query_4 = require("./types/ibc/applications/transfer/v1/query");
Object.defineProperty(exports, "QueryParamsRequest", { enumerable: true, get: function () { return query_4.QueryParamsRequest; } });
const genesis_1 = require("./types/ibc/applications/transfer/v1/genesis");
Object.defineProperty(exports, "GenesisState", { enumerable: true, get: function () { return genesis_1.GenesisState; } });
const query_5 = require("./types/ibc/applications/transfer/v1/query");
Object.defineProperty(exports, "QueryDenomTracesResponse", { enumerable: true, get: function () { return query_5.QueryDenomTracesResponse; } });
const query_6 = require("./types/ibc/applications/transfer/v1/query");
Object.defineProperty(exports, "QueryTotalEscrowForDenomRequest", { enumerable: true, get: function () { return query_6.QueryTotalEscrowForDenomRequest; } });
const query_7 = require("./types/ibc/applications/transfer/v1/query");
Object.defineProperty(exports, "QueryDenomTraceResponse", { enumerable: true, get: function () { return query_7.QueryDenomTraceResponse; } });
const query_8 = require("./types/ibc/applications/transfer/v1/query");
Object.defineProperty(exports, "QueryEscrowAddressRequest", { enumerable: true, get: function () { return query_8.QueryEscrowAddressRequest; } });
const query_9 = require("./types/ibc/applications/transfer/v1/query");
Object.defineProperty(exports, "QueryDenomHashRequest", { enumerable: true, get: function () { return query_9.QueryDenomHashRequest; } });
const query_10 = require("./types/ibc/applications/transfer/v1/query");
Object.defineProperty(exports, "QueryEscrowAddressResponse", { enumerable: true, get: function () { return query_10.QueryEscrowAddressResponse; } });
const authz_1 = require("./types/ibc/applications/transfer/v1/authz");
Object.defineProperty(exports, "Allocation", { enumerable: true, get: function () { return authz_1.Allocation; } });
const authz_2 = require("./types/ibc/applications/transfer/v1/authz");
Object.defineProperty(exports, "TransferAuthorization", { enumerable: true, get: function () { return authz_2.TransferAuthorization; } });
const tx_2 = require("./types/ibc/applications/transfer/v1/tx");
Object.defineProperty(exports, "MsgTransferResponse", { enumerable: true, get: function () { return tx_2.MsgTransferResponse; } });
const tx_3 = require("./types/ibc/applications/transfer/v1/tx");
Object.defineProperty(exports, "MsgUpdateParamsResponse", { enumerable: true, get: function () { return tx_3.MsgUpdateParamsResponse; } });
const tx_4 = require("./types/ibc/applications/transfer/v1/tx");
Object.defineProperty(exports, "MsgTransfer", { enumerable: true, get: function () { return tx_4.MsgTransfer; } });
const query_11 = require("./types/ibc/applications/transfer/v1/query");
Object.defineProperty(exports, "QueryDenomTracesRequest", { enumerable: true, get: function () { return query_11.QueryDenomTracesRequest; } });
const query_12 = require("./types/ibc/applications/transfer/v1/query");
Object.defineProperty(exports, "QueryDenomHashResponse", { enumerable: true, get: function () { return query_12.QueryDenomHashResponse; } });
exports.registry = new proto_signing_1.Registry(registry_1.msgTypes);
function getStructure(template) {
    const structure = { fields: [] };
    for (let [key, value] of Object.entries(template)) {
        let field = { name: key, type: typeof value };
        structure.fields.push(field);
    }
    return structure;
}
const defaultFee = {
    amount: [],
    gas: "200000",
};
const txClient = ({ signer, prefix, addr } = { addr: "http://localhost:26657", prefix: "cosmos" }) => {
    return {
        async sendMsgUpdateParams({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateParams: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgUpdateParams({ value: tx_1.MsgUpdateParams.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateParams: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendParams({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendParams: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.params({ value: transfer_1.Params.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendParams: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryParamsResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryParamsResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryParamsResponse({ value: query_1.QueryParamsResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryParamsResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryTotalEscrowForDenomResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryTotalEscrowForDenomResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryTotalEscrowForDenomResponse({ value: query_2.QueryTotalEscrowForDenomResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryTotalEscrowForDenomResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendDenomTrace({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendDenomTrace: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.denomTrace({ value: transfer_2.DenomTrace.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendDenomTrace: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryDenomTraceRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryDenomTraceRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryDenomTraceRequest({ value: query_3.QueryDenomTraceRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryDenomTraceRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryParamsRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryParamsRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryParamsRequest({ value: query_4.QueryParamsRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryParamsRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendGenesisState({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendGenesisState: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.genesisState({ value: genesis_1.GenesisState.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendGenesisState: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryDenomTracesResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryDenomTracesResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryDenomTracesResponse({ value: query_5.QueryDenomTracesResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryDenomTracesResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryTotalEscrowForDenomRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryTotalEscrowForDenomRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryTotalEscrowForDenomRequest({ value: query_6.QueryTotalEscrowForDenomRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryTotalEscrowForDenomRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryDenomTraceResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryDenomTraceResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryDenomTraceResponse({ value: query_7.QueryDenomTraceResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryDenomTraceResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryEscrowAddressRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryEscrowAddressRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryEscrowAddressRequest({ value: query_8.QueryEscrowAddressRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryEscrowAddressRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryDenomHashRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryDenomHashRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryDenomHashRequest({ value: query_9.QueryDenomHashRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryDenomHashRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryEscrowAddressResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryEscrowAddressResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryEscrowAddressResponse({ value: query_10.QueryEscrowAddressResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryEscrowAddressResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendAllocation({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendAllocation: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.allocation({ value: authz_1.Allocation.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendAllocation: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendTransferAuthorization({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendTransferAuthorization: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.transferAuthorization({ value: authz_2.TransferAuthorization.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendTransferAuthorization: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgTransferResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgTransferResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgTransferResponse({ value: tx_2.MsgTransferResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgTransferResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateParamsResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateParamsResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgUpdateParamsResponse({ value: tx_3.MsgUpdateParamsResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateParamsResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgTransfer({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgTransfer: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgTransfer({ value: tx_4.MsgTransfer.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgTransfer: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryDenomTracesRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryDenomTracesRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryDenomTracesRequest({ value: query_11.QueryDenomTracesRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryDenomTracesRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryDenomHashResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryDenomHashResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryDenomHashResponse({ value: query_12.QueryDenomHashResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryDenomHashResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        msgUpdateParams({ value }) {
            try {
                return { typeUrl: "/ibc.applications.transfer.v1.MsgUpdateParams", value: tx_1.MsgUpdateParams.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateParams: Could not create message: ' + e.message);
            }
        },
        params({ value }) {
            try {
                return { typeUrl: "/ibc.applications.transfer.v1.Params", value: transfer_1.Params.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:Params: Could not create message: ' + e.message);
            }
        },
        queryParamsResponse({ value }) {
            try {
                return { typeUrl: "/ibc.applications.transfer.v1.QueryParamsResponse", value: query_1.QueryParamsResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryParamsResponse: Could not create message: ' + e.message);
            }
        },
        queryTotalEscrowForDenomResponse({ value }) {
            try {
                return { typeUrl: "/ibc.applications.transfer.v1.QueryTotalEscrowForDenomResponse", value: query_2.QueryTotalEscrowForDenomResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryTotalEscrowForDenomResponse: Could not create message: ' + e.message);
            }
        },
        denomTrace({ value }) {
            try {
                return { typeUrl: "/ibc.applications.transfer.v1.DenomTrace", value: transfer_2.DenomTrace.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:DenomTrace: Could not create message: ' + e.message);
            }
        },
        queryDenomTraceRequest({ value }) {
            try {
                return { typeUrl: "/ibc.applications.transfer.v1.QueryDenomTraceRequest", value: query_3.QueryDenomTraceRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryDenomTraceRequest: Could not create message: ' + e.message);
            }
        },
        queryParamsRequest({ value }) {
            try {
                return { typeUrl: "/ibc.applications.transfer.v1.QueryParamsRequest", value: query_4.QueryParamsRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryParamsRequest: Could not create message: ' + e.message);
            }
        },
        genesisState({ value }) {
            try {
                return { typeUrl: "/ibc.applications.transfer.v1.GenesisState", value: genesis_1.GenesisState.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:GenesisState: Could not create message: ' + e.message);
            }
        },
        queryDenomTracesResponse({ value }) {
            try {
                return { typeUrl: "/ibc.applications.transfer.v1.QueryDenomTracesResponse", value: query_5.QueryDenomTracesResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryDenomTracesResponse: Could not create message: ' + e.message);
            }
        },
        queryTotalEscrowForDenomRequest({ value }) {
            try {
                return { typeUrl: "/ibc.applications.transfer.v1.QueryTotalEscrowForDenomRequest", value: query_6.QueryTotalEscrowForDenomRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryTotalEscrowForDenomRequest: Could not create message: ' + e.message);
            }
        },
        queryDenomTraceResponse({ value }) {
            try {
                return { typeUrl: "/ibc.applications.transfer.v1.QueryDenomTraceResponse", value: query_7.QueryDenomTraceResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryDenomTraceResponse: Could not create message: ' + e.message);
            }
        },
        queryEscrowAddressRequest({ value }) {
            try {
                return { typeUrl: "/ibc.applications.transfer.v1.QueryEscrowAddressRequest", value: query_8.QueryEscrowAddressRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryEscrowAddressRequest: Could not create message: ' + e.message);
            }
        },
        queryDenomHashRequest({ value }) {
            try {
                return { typeUrl: "/ibc.applications.transfer.v1.QueryDenomHashRequest", value: query_9.QueryDenomHashRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryDenomHashRequest: Could not create message: ' + e.message);
            }
        },
        queryEscrowAddressResponse({ value }) {
            try {
                return { typeUrl: "/ibc.applications.transfer.v1.QueryEscrowAddressResponse", value: query_10.QueryEscrowAddressResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryEscrowAddressResponse: Could not create message: ' + e.message);
            }
        },
        allocation({ value }) {
            try {
                return { typeUrl: "/ibc.applications.transfer.v1.Allocation", value: authz_1.Allocation.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:Allocation: Could not create message: ' + e.message);
            }
        },
        transferAuthorization({ value }) {
            try {
                return { typeUrl: "/ibc.applications.transfer.v1.TransferAuthorization", value: authz_2.TransferAuthorization.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:TransferAuthorization: Could not create message: ' + e.message);
            }
        },
        msgTransferResponse({ value }) {
            try {
                return { typeUrl: "/ibc.applications.transfer.v1.MsgTransferResponse", value: tx_2.MsgTransferResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgTransferResponse: Could not create message: ' + e.message);
            }
        },
        msgUpdateParamsResponse({ value }) {
            try {
                return { typeUrl: "/ibc.applications.transfer.v1.MsgUpdateParamsResponse", value: tx_3.MsgUpdateParamsResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateParamsResponse: Could not create message: ' + e.message);
            }
        },
        msgTransfer({ value }) {
            try {
                return { typeUrl: "/ibc.applications.transfer.v1.MsgTransfer", value: tx_4.MsgTransfer.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgTransfer: Could not create message: ' + e.message);
            }
        },
        queryDenomTracesRequest({ value }) {
            try {
                return { typeUrl: "/ibc.applications.transfer.v1.QueryDenomTracesRequest", value: query_11.QueryDenomTracesRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryDenomTracesRequest: Could not create message: ' + e.message);
            }
        },
        queryDenomHashResponse({ value }) {
            try {
                return { typeUrl: "/ibc.applications.transfer.v1.QueryDenomHashResponse", value: query_12.QueryDenomHashResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryDenomHashResponse: Could not create message: ' + e.message);
            }
        },
    };
};
exports.txClient = txClient;
const queryClient = ({ addr: addr } = { addr: "http://localhost:1317" }) => {
    return new rest_1.Api({ baseURL: addr });
};
exports.queryClient = queryClient;
class SDKModule {
    constructor(client) {
        this.registry = [];
        this.query = (0, exports.queryClient)({ addr: client.env.apiURL });
        this.updateTX(client);
        this.structure = {};
        client.on('signer-changed', (signer) => {
            this.updateTX(client);
        });
    }
    updateTX(client) {
        const methods = (0, exports.txClient)({
            signer: client.signer,
            addr: client.env.rpcURL,
            prefix: client.env.prefix ?? "cosmos",
        });
        this.tx = methods;
        for (let m in methods) {
            this.tx[m] = methods[m].bind(this.tx);
        }
    }
}
;
const IgntModule = (test) => {
    return {
        module: {
            IbcApplicationsTransferV1: new SDKModule(test)
        },
        registry: registry_1.msgTypes
    };
};
exports.default = IgntModule;
