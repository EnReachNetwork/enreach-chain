"use strict";
// Generated by Ignite ignite.com/cli
Object.defineProperty(exports, "__esModule", { value: true });
exports.queryClient = exports.txClient = exports.registry = exports.QueryInterchainAccountRequest = exports.MsgUpdateParamsResponse = exports.MsgRegisterInterchainAccount = exports.Params = exports.QueryParamsRequest = exports.QueryInterchainAccountResponse = exports.MsgUpdateParams = exports.QueryParamsResponse = exports.MsgSendTxResponse = exports.MsgSendTx = exports.MsgRegisterInterchainAccountResponse = void 0;
const stargate_1 = require("@cosmjs/stargate");
const proto_signing_1 = require("@cosmjs/proto-signing");
const registry_1 = require("./registry");
const rest_1 = require("./rest");
const tx_1 = require("./types/ibc/applications/interchain_accounts/controller/v1/tx");
Object.defineProperty(exports, "MsgRegisterInterchainAccountResponse", { enumerable: true, get: function () { return tx_1.MsgRegisterInterchainAccountResponse; } });
const tx_2 = require("./types/ibc/applications/interchain_accounts/controller/v1/tx");
Object.defineProperty(exports, "MsgSendTx", { enumerable: true, get: function () { return tx_2.MsgSendTx; } });
const tx_3 = require("./types/ibc/applications/interchain_accounts/controller/v1/tx");
Object.defineProperty(exports, "MsgSendTxResponse", { enumerable: true, get: function () { return tx_3.MsgSendTxResponse; } });
const query_1 = require("./types/ibc/applications/interchain_accounts/controller/v1/query");
Object.defineProperty(exports, "QueryParamsResponse", { enumerable: true, get: function () { return query_1.QueryParamsResponse; } });
const tx_4 = require("./types/ibc/applications/interchain_accounts/controller/v1/tx");
Object.defineProperty(exports, "MsgUpdateParams", { enumerable: true, get: function () { return tx_4.MsgUpdateParams; } });
const query_2 = require("./types/ibc/applications/interchain_accounts/controller/v1/query");
Object.defineProperty(exports, "QueryInterchainAccountResponse", { enumerable: true, get: function () { return query_2.QueryInterchainAccountResponse; } });
const query_3 = require("./types/ibc/applications/interchain_accounts/controller/v1/query");
Object.defineProperty(exports, "QueryParamsRequest", { enumerable: true, get: function () { return query_3.QueryParamsRequest; } });
const controller_1 = require("./types/ibc/applications/interchain_accounts/controller/v1/controller");
Object.defineProperty(exports, "Params", { enumerable: true, get: function () { return controller_1.Params; } });
const tx_5 = require("./types/ibc/applications/interchain_accounts/controller/v1/tx");
Object.defineProperty(exports, "MsgRegisterInterchainAccount", { enumerable: true, get: function () { return tx_5.MsgRegisterInterchainAccount; } });
const tx_6 = require("./types/ibc/applications/interchain_accounts/controller/v1/tx");
Object.defineProperty(exports, "MsgUpdateParamsResponse", { enumerable: true, get: function () { return tx_6.MsgUpdateParamsResponse; } });
const query_4 = require("./types/ibc/applications/interchain_accounts/controller/v1/query");
Object.defineProperty(exports, "QueryInterchainAccountRequest", { enumerable: true, get: function () { return query_4.QueryInterchainAccountRequest; } });
exports.registry = new proto_signing_1.Registry(registry_1.msgTypes);
function getStructure(template) {
    const structure = { fields: [] };
    for (let [key, value] of Object.entries(template)) {
        let field = { name: key, type: typeof value };
        structure.fields.push(field);
    }
    return structure;
}
const defaultFee = {
    amount: [],
    gas: "200000",
};
const txClient = ({ signer, prefix, addr } = { addr: "http://localhost:26657", prefix: "cosmos" }) => {
    return {
        async sendMsgRegisterInterchainAccountResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgRegisterInterchainAccountResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgRegisterInterchainAccountResponse({ value: tx_1.MsgRegisterInterchainAccountResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgRegisterInterchainAccountResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgSendTx({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgSendTx: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgSendTx({ value: tx_2.MsgSendTx.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgSendTx: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgSendTxResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgSendTxResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgSendTxResponse({ value: tx_3.MsgSendTxResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgSendTxResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryParamsResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryParamsResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryParamsResponse({ value: query_1.QueryParamsResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryParamsResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateParams({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateParams: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgUpdateParams({ value: tx_4.MsgUpdateParams.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateParams: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryInterchainAccountResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryInterchainAccountResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryInterchainAccountResponse({ value: query_2.QueryInterchainAccountResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryInterchainAccountResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryParamsRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryParamsRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryParamsRequest({ value: query_3.QueryParamsRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryParamsRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendParams({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendParams: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.params({ value: controller_1.Params.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendParams: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgRegisterInterchainAccount({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgRegisterInterchainAccount: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgRegisterInterchainAccount({ value: tx_5.MsgRegisterInterchainAccount.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgRegisterInterchainAccount: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateParamsResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateParamsResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgUpdateParamsResponse({ value: tx_6.MsgUpdateParamsResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateParamsResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryInterchainAccountRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryInterchainAccountRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryInterchainAccountRequest({ value: query_4.QueryInterchainAccountRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryInterchainAccountRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        msgRegisterInterchainAccountResponse({ value }) {
            try {
                return { typeUrl: "/ibc.applications.interchain_accounts.controller.v1.MsgRegisterInterchainAccountResponse", value: tx_1.MsgRegisterInterchainAccountResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgRegisterInterchainAccountResponse: Could not create message: ' + e.message);
            }
        },
        msgSendTx({ value }) {
            try {
                return { typeUrl: "/ibc.applications.interchain_accounts.controller.v1.MsgSendTx", value: tx_2.MsgSendTx.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgSendTx: Could not create message: ' + e.message);
            }
        },
        msgSendTxResponse({ value }) {
            try {
                return { typeUrl: "/ibc.applications.interchain_accounts.controller.v1.MsgSendTxResponse", value: tx_3.MsgSendTxResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgSendTxResponse: Could not create message: ' + e.message);
            }
        },
        queryParamsResponse({ value }) {
            try {
                return { typeUrl: "/ibc.applications.interchain_accounts.controller.v1.QueryParamsResponse", value: query_1.QueryParamsResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryParamsResponse: Could not create message: ' + e.message);
            }
        },
        msgUpdateParams({ value }) {
            try {
                return { typeUrl: "/ibc.applications.interchain_accounts.controller.v1.MsgUpdateParams", value: tx_4.MsgUpdateParams.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateParams: Could not create message: ' + e.message);
            }
        },
        queryInterchainAccountResponse({ value }) {
            try {
                return { typeUrl: "/ibc.applications.interchain_accounts.controller.v1.QueryInterchainAccountResponse", value: query_2.QueryInterchainAccountResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryInterchainAccountResponse: Could not create message: ' + e.message);
            }
        },
        queryParamsRequest({ value }) {
            try {
                return { typeUrl: "/ibc.applications.interchain_accounts.controller.v1.QueryParamsRequest", value: query_3.QueryParamsRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryParamsRequest: Could not create message: ' + e.message);
            }
        },
        params({ value }) {
            try {
                return { typeUrl: "/ibc.applications.interchain_accounts.controller.v1.Params", value: controller_1.Params.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:Params: Could not create message: ' + e.message);
            }
        },
        msgRegisterInterchainAccount({ value }) {
            try {
                return { typeUrl: "/ibc.applications.interchain_accounts.controller.v1.MsgRegisterInterchainAccount", value: tx_5.MsgRegisterInterchainAccount.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgRegisterInterchainAccount: Could not create message: ' + e.message);
            }
        },
        msgUpdateParamsResponse({ value }) {
            try {
                return { typeUrl: "/ibc.applications.interchain_accounts.controller.v1.MsgUpdateParamsResponse", value: tx_6.MsgUpdateParamsResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateParamsResponse: Could not create message: ' + e.message);
            }
        },
        queryInterchainAccountRequest({ value }) {
            try {
                return { typeUrl: "/ibc.applications.interchain_accounts.controller.v1.QueryInterchainAccountRequest", value: query_4.QueryInterchainAccountRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryInterchainAccountRequest: Could not create message: ' + e.message);
            }
        },
    };
};
exports.txClient = txClient;
const queryClient = ({ addr: addr } = { addr: "http://localhost:1317" }) => {
    return new rest_1.Api({ baseURL: addr });
};
exports.queryClient = queryClient;
class SDKModule {
    constructor(client) {
        this.registry = [];
        this.query = (0, exports.queryClient)({ addr: client.env.apiURL });
        this.updateTX(client);
        this.structure = {};
        client.on('signer-changed', (signer) => {
            this.updateTX(client);
        });
    }
    updateTX(client) {
        const methods = (0, exports.txClient)({
            signer: client.signer,
            addr: client.env.rpcURL,
            prefix: client.env.prefix ?? "cosmos",
        });
        this.tx = methods;
        for (let m in methods) {
            this.tx[m] = methods[m].bind(this.tx);
        }
    }
}
;
const IgntModule = (test) => {
    return {
        module: {
            IbcApplicationsInterchainAccountsControllerV1: new SDKModule(test)
        },
        registry: registry_1.msgTypes
    };
};
exports.default = IgntModule;
