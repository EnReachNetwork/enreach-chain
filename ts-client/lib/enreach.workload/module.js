"use strict";
// Generated by Ignite ignite.com/cli
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgUpdateParams = exports.MsgUpdateParamsResponse = exports.QueryGetCurrentEraRequest = exports.Params = exports.MsgCreateSuperior = exports.QueryGetEraLengthResponse = exports.QueryGetSuperiorResponse = exports.QueryGetAllEpochProcessDataResponse = exports.QueryGetWorkreportRequest = exports.QueryGetAllNodeWorkloadByEpochRequest = exports.NodeWorkload = exports.QueryGetAllWorkreportByEpochRequest = exports.QueryParamsResponse = exports.QueryGetReputationDeltaPointRequest = exports.QueryGetSuperiorRequest = exports.QueryGetAllReputationDeltaPointByEraRequest = exports.QueryGetManagerWRWorkloadResponse = exports.ReputationPointChangeRawDataDB = exports.MsgSubmitWorkreportsResponse = exports.QueryGetEraProcessDataRequest = exports.QueryGetEraLengthRequest = exports.QueryGetNodeWorkloadRequest = exports.ReputationDeltaPoint = exports.QueryGetAllReputationPointRequest = exports.QueryGetAllReputationPointChangeDataByEraRequest = exports.QueryGetCurrentEpochRequest = exports.QueryGetEpochLengthResponse = exports.QueryGetEpochLengthRequest = exports.QueryGetReputationPointResponse = exports.QueryGetAllEpochProcessDataRequest = exports.QueryGetReputationPointChangeDataRequest = exports.QueryGetManagerWRWorkloadRequest = exports.MsgUpdateHistoryEpochDataDepthResponse = exports.QueryGetReputationDeltaPointResponse = exports.Workreport = exports.NodeScore = exports.MsgSubmitReputationPointChangeDataResponse = exports.QueryGetAllManagerRPWorkloadByEraRequest = exports.QueryGetNodeWorkloadResponse = exports.QueryParamsRequest = exports.EpochProcessData = exports.QueryGetReputationPointRequest = exports.QueryGetHistoryEpochDataDepthRequest = exports.QueryGetWorkreportProcessBatchSizeRequest = exports.QueryGetWorkreportResponse = exports.QueryGetManagerRPWorkloadRequest = exports.QueryGetEraProcessDataResponse = exports.QueryGetAllWorkreportByEpochResponse = exports.ReputationPointChangeData = exports.QueryGetAllEraProcessDataResponse = void 0;
exports.queryClient = exports.txClient = exports.registry = exports.Superior = exports.EraProcessData = exports.ReputationPoint = exports.ReputationPointChangeRawDataMapDB = exports.ManagerRPWorkload = exports.MsgSubmitReputationPointChangeData = exports.QueryGetAllReputationDeltaPointByEraResponse = exports.QueryGetWorkreportProcessBatchSizeResponse = exports.QueryGetAllManagerRPWorkloadByEraResponse = exports.QueryGetAllManagerWRWorkloadByEpochResponse = exports.QueryGetAllNodeWorkloadByEpochResponse = exports.ManagerNodeScoreMap = exports.MsgSubmitWorkreports = exports.GenesisState = exports.ReputationPointChangeRawData = exports.QueryGetCurrentEraResponse = exports.QueryGetHistoryEpochDataDepthResponse = exports.QueryGetCurrentEpochResponse = exports.MsgUpdateWorkreportProcessBatchSize = exports.MsgUpdateSuperiorResponse = exports.QueryGetAllManagerWRWorkloadByEpochRequest = exports.ManagerWRWorkload = exports.QueryGetAllEraProcessDataRequest = exports.QueryGetManagerRPWorkloadResponse = exports.QueryGetReputationPointChangeDataResponse = exports.MsgUpdateSuperior = exports.MsgCreateSuperiorResponse = exports.MsgUpdateHistoryEpochDataDepth = exports.NodeScoreDB = exports.MsgUpdateWorkreportProcessBatchSizeResponse = exports.QueryGetAllReputationPointResponse = exports.QueryGetAllReputationPointChangeDataByEraResponse = exports.QueryGetEpochProcessDataResponse = exports.QueryGetEpochProcessDataRequest = void 0;
const stargate_1 = require("@cosmjs/stargate");
const proto_signing_1 = require("@cosmjs/proto-signing");
const registry_1 = require("./registry");
const rest_1 = require("./rest");
const query_1 = require("./types/enreach/workload/query");
Object.defineProperty(exports, "QueryGetAllEraProcessDataResponse", { enumerable: true, get: function () { return query_1.QueryGetAllEraProcessDataResponse; } });
const reputationpoint_1 = require("./types/enreach/workload/reputationpoint");
Object.defineProperty(exports, "ReputationPointChangeData", { enumerable: true, get: function () { return reputationpoint_1.ReputationPointChangeData; } });
const query_2 = require("./types/enreach/workload/query");
Object.defineProperty(exports, "QueryGetAllWorkreportByEpochResponse", { enumerable: true, get: function () { return query_2.QueryGetAllWorkreportByEpochResponse; } });
const query_3 = require("./types/enreach/workload/query");
Object.defineProperty(exports, "QueryGetEraProcessDataResponse", { enumerable: true, get: function () { return query_3.QueryGetEraProcessDataResponse; } });
const query_4 = require("./types/enreach/workload/query");
Object.defineProperty(exports, "QueryGetManagerRPWorkloadRequest", { enumerable: true, get: function () { return query_4.QueryGetManagerRPWorkloadRequest; } });
const query_5 = require("./types/enreach/workload/query");
Object.defineProperty(exports, "QueryGetWorkreportResponse", { enumerable: true, get: function () { return query_5.QueryGetWorkreportResponse; } });
const query_6 = require("./types/enreach/workload/query");
Object.defineProperty(exports, "QueryGetWorkreportProcessBatchSizeRequest", { enumerable: true, get: function () { return query_6.QueryGetWorkreportProcessBatchSizeRequest; } });
const query_7 = require("./types/enreach/workload/query");
Object.defineProperty(exports, "QueryGetHistoryEpochDataDepthRequest", { enumerable: true, get: function () { return query_7.QueryGetHistoryEpochDataDepthRequest; } });
const query_8 = require("./types/enreach/workload/query");
Object.defineProperty(exports, "QueryGetReputationPointRequest", { enumerable: true, get: function () { return query_8.QueryGetReputationPointRequest; } });
const workreport_1 = require("./types/enreach/workload/workreport");
Object.defineProperty(exports, "EpochProcessData", { enumerable: true, get: function () { return workreport_1.EpochProcessData; } });
const query_9 = require("./types/enreach/workload/query");
Object.defineProperty(exports, "QueryParamsRequest", { enumerable: true, get: function () { return query_9.QueryParamsRequest; } });
const query_10 = require("./types/enreach/workload/query");
Object.defineProperty(exports, "QueryGetNodeWorkloadResponse", { enumerable: true, get: function () { return query_10.QueryGetNodeWorkloadResponse; } });
const query_11 = require("./types/enreach/workload/query");
Object.defineProperty(exports, "QueryGetAllManagerRPWorkloadByEraRequest", { enumerable: true, get: function () { return query_11.QueryGetAllManagerRPWorkloadByEraRequest; } });
const tx_1 = require("./types/enreach/workload/tx");
Object.defineProperty(exports, "MsgSubmitReputationPointChangeDataResponse", { enumerable: true, get: function () { return tx_1.MsgSubmitReputationPointChangeDataResponse; } });
const workreport_2 = require("./types/enreach/workload/workreport");
Object.defineProperty(exports, "NodeScore", { enumerable: true, get: function () { return workreport_2.NodeScore; } });
const workreport_3 = require("./types/enreach/workload/workreport");
Object.defineProperty(exports, "Workreport", { enumerable: true, get: function () { return workreport_3.Workreport; } });
const query_12 = require("./types/enreach/workload/query");
Object.defineProperty(exports, "QueryGetReputationDeltaPointResponse", { enumerable: true, get: function () { return query_12.QueryGetReputationDeltaPointResponse; } });
const tx_2 = require("./types/enreach/workload/tx");
Object.defineProperty(exports, "MsgUpdateHistoryEpochDataDepthResponse", { enumerable: true, get: function () { return tx_2.MsgUpdateHistoryEpochDataDepthResponse; } });
const query_13 = require("./types/enreach/workload/query");
Object.defineProperty(exports, "QueryGetManagerWRWorkloadRequest", { enumerable: true, get: function () { return query_13.QueryGetManagerWRWorkloadRequest; } });
const query_14 = require("./types/enreach/workload/query");
Object.defineProperty(exports, "QueryGetReputationPointChangeDataRequest", { enumerable: true, get: function () { return query_14.QueryGetReputationPointChangeDataRequest; } });
const query_15 = require("./types/enreach/workload/query");
Object.defineProperty(exports, "QueryGetAllEpochProcessDataRequest", { enumerable: true, get: function () { return query_15.QueryGetAllEpochProcessDataRequest; } });
const query_16 = require("./types/enreach/workload/query");
Object.defineProperty(exports, "QueryGetReputationPointResponse", { enumerable: true, get: function () { return query_16.QueryGetReputationPointResponse; } });
const query_17 = require("./types/enreach/workload/query");
Object.defineProperty(exports, "QueryGetEpochLengthRequest", { enumerable: true, get: function () { return query_17.QueryGetEpochLengthRequest; } });
const query_18 = require("./types/enreach/workload/query");
Object.defineProperty(exports, "QueryGetEpochLengthResponse", { enumerable: true, get: function () { return query_18.QueryGetEpochLengthResponse; } });
const query_19 = require("./types/enreach/workload/query");
Object.defineProperty(exports, "QueryGetCurrentEpochRequest", { enumerable: true, get: function () { return query_19.QueryGetCurrentEpochRequest; } });
const query_20 = require("./types/enreach/workload/query");
Object.defineProperty(exports, "QueryGetAllReputationPointChangeDataByEraRequest", { enumerable: true, get: function () { return query_20.QueryGetAllReputationPointChangeDataByEraRequest; } });
const query_21 = require("./types/enreach/workload/query");
Object.defineProperty(exports, "QueryGetAllReputationPointRequest", { enumerable: true, get: function () { return query_21.QueryGetAllReputationPointRequest; } });
const reputationpoint_2 = require("./types/enreach/workload/reputationpoint");
Object.defineProperty(exports, "ReputationDeltaPoint", { enumerable: true, get: function () { return reputationpoint_2.ReputationDeltaPoint; } });
const query_22 = require("./types/enreach/workload/query");
Object.defineProperty(exports, "QueryGetNodeWorkloadRequest", { enumerable: true, get: function () { return query_22.QueryGetNodeWorkloadRequest; } });
const query_23 = require("./types/enreach/workload/query");
Object.defineProperty(exports, "QueryGetEraLengthRequest", { enumerable: true, get: function () { return query_23.QueryGetEraLengthRequest; } });
const query_24 = require("./types/enreach/workload/query");
Object.defineProperty(exports, "QueryGetEraProcessDataRequest", { enumerable: true, get: function () { return query_24.QueryGetEraProcessDataRequest; } });
const tx_3 = require("./types/enreach/workload/tx");
Object.defineProperty(exports, "MsgSubmitWorkreportsResponse", { enumerable: true, get: function () { return tx_3.MsgSubmitWorkreportsResponse; } });
const reputationpoint_3 = require("./types/enreach/workload/reputationpoint");
Object.defineProperty(exports, "ReputationPointChangeRawDataDB", { enumerable: true, get: function () { return reputationpoint_3.ReputationPointChangeRawDataDB; } });
const query_25 = require("./types/enreach/workload/query");
Object.defineProperty(exports, "QueryGetManagerWRWorkloadResponse", { enumerable: true, get: function () { return query_25.QueryGetManagerWRWorkloadResponse; } });
const query_26 = require("./types/enreach/workload/query");
Object.defineProperty(exports, "QueryGetAllReputationDeltaPointByEraRequest", { enumerable: true, get: function () { return query_26.QueryGetAllReputationDeltaPointByEraRequest; } });
const query_27 = require("./types/enreach/workload/query");
Object.defineProperty(exports, "QueryGetSuperiorRequest", { enumerable: true, get: function () { return query_27.QueryGetSuperiorRequest; } });
const query_28 = require("./types/enreach/workload/query");
Object.defineProperty(exports, "QueryGetReputationDeltaPointRequest", { enumerable: true, get: function () { return query_28.QueryGetReputationDeltaPointRequest; } });
const query_29 = require("./types/enreach/workload/query");
Object.defineProperty(exports, "QueryParamsResponse", { enumerable: true, get: function () { return query_29.QueryParamsResponse; } });
const query_30 = require("./types/enreach/workload/query");
Object.defineProperty(exports, "QueryGetAllWorkreportByEpochRequest", { enumerable: true, get: function () { return query_30.QueryGetAllWorkreportByEpochRequest; } });
const workload_1 = require("./types/enreach/workload/workload");
Object.defineProperty(exports, "NodeWorkload", { enumerable: true, get: function () { return workload_1.NodeWorkload; } });
const query_31 = require("./types/enreach/workload/query");
Object.defineProperty(exports, "QueryGetAllNodeWorkloadByEpochRequest", { enumerable: true, get: function () { return query_31.QueryGetAllNodeWorkloadByEpochRequest; } });
const query_32 = require("./types/enreach/workload/query");
Object.defineProperty(exports, "QueryGetWorkreportRequest", { enumerable: true, get: function () { return query_32.QueryGetWorkreportRequest; } });
const query_33 = require("./types/enreach/workload/query");
Object.defineProperty(exports, "QueryGetAllEpochProcessDataResponse", { enumerable: true, get: function () { return query_33.QueryGetAllEpochProcessDataResponse; } });
const query_34 = require("./types/enreach/workload/query");
Object.defineProperty(exports, "QueryGetSuperiorResponse", { enumerable: true, get: function () { return query_34.QueryGetSuperiorResponse; } });
const query_35 = require("./types/enreach/workload/query");
Object.defineProperty(exports, "QueryGetEraLengthResponse", { enumerable: true, get: function () { return query_35.QueryGetEraLengthResponse; } });
const tx_4 = require("./types/enreach/workload/tx");
Object.defineProperty(exports, "MsgCreateSuperior", { enumerable: true, get: function () { return tx_4.MsgCreateSuperior; } });
const params_1 = require("./types/enreach/workload/params");
Object.defineProperty(exports, "Params", { enumerable: true, get: function () { return params_1.Params; } });
const query_36 = require("./types/enreach/workload/query");
Object.defineProperty(exports, "QueryGetCurrentEraRequest", { enumerable: true, get: function () { return query_36.QueryGetCurrentEraRequest; } });
const tx_5 = require("./types/enreach/workload/tx");
Object.defineProperty(exports, "MsgUpdateParamsResponse", { enumerable: true, get: function () { return tx_5.MsgUpdateParamsResponse; } });
const tx_6 = require("./types/enreach/workload/tx");
Object.defineProperty(exports, "MsgUpdateParams", { enumerable: true, get: function () { return tx_6.MsgUpdateParams; } });
const query_37 = require("./types/enreach/workload/query");
Object.defineProperty(exports, "QueryGetEpochProcessDataRequest", { enumerable: true, get: function () { return query_37.QueryGetEpochProcessDataRequest; } });
const query_38 = require("./types/enreach/workload/query");
Object.defineProperty(exports, "QueryGetEpochProcessDataResponse", { enumerable: true, get: function () { return query_38.QueryGetEpochProcessDataResponse; } });
const query_39 = require("./types/enreach/workload/query");
Object.defineProperty(exports, "QueryGetAllReputationPointChangeDataByEraResponse", { enumerable: true, get: function () { return query_39.QueryGetAllReputationPointChangeDataByEraResponse; } });
const query_40 = require("./types/enreach/workload/query");
Object.defineProperty(exports, "QueryGetAllReputationPointResponse", { enumerable: true, get: function () { return query_40.QueryGetAllReputationPointResponse; } });
const tx_7 = require("./types/enreach/workload/tx");
Object.defineProperty(exports, "MsgUpdateWorkreportProcessBatchSizeResponse", { enumerable: true, get: function () { return tx_7.MsgUpdateWorkreportProcessBatchSizeResponse; } });
const workreport_4 = require("./types/enreach/workload/workreport");
Object.defineProperty(exports, "NodeScoreDB", { enumerable: true, get: function () { return workreport_4.NodeScoreDB; } });
const tx_8 = require("./types/enreach/workload/tx");
Object.defineProperty(exports, "MsgUpdateHistoryEpochDataDepth", { enumerable: true, get: function () { return tx_8.MsgUpdateHistoryEpochDataDepth; } });
const tx_9 = require("./types/enreach/workload/tx");
Object.defineProperty(exports, "MsgCreateSuperiorResponse", { enumerable: true, get: function () { return tx_9.MsgCreateSuperiorResponse; } });
const tx_10 = require("./types/enreach/workload/tx");
Object.defineProperty(exports, "MsgUpdateSuperior", { enumerable: true, get: function () { return tx_10.MsgUpdateSuperior; } });
const query_41 = require("./types/enreach/workload/query");
Object.defineProperty(exports, "QueryGetReputationPointChangeDataResponse", { enumerable: true, get: function () { return query_41.QueryGetReputationPointChangeDataResponse; } });
const query_42 = require("./types/enreach/workload/query");
Object.defineProperty(exports, "QueryGetManagerRPWorkloadResponse", { enumerable: true, get: function () { return query_42.QueryGetManagerRPWorkloadResponse; } });
const query_43 = require("./types/enreach/workload/query");
Object.defineProperty(exports, "QueryGetAllEraProcessDataRequest", { enumerable: true, get: function () { return query_43.QueryGetAllEraProcessDataRequest; } });
const workload_2 = require("./types/enreach/workload/workload");
Object.defineProperty(exports, "ManagerWRWorkload", { enumerable: true, get: function () { return workload_2.ManagerWRWorkload; } });
const query_44 = require("./types/enreach/workload/query");
Object.defineProperty(exports, "QueryGetAllManagerWRWorkloadByEpochRequest", { enumerable: true, get: function () { return query_44.QueryGetAllManagerWRWorkloadByEpochRequest; } });
const tx_11 = require("./types/enreach/workload/tx");
Object.defineProperty(exports, "MsgUpdateSuperiorResponse", { enumerable: true, get: function () { return tx_11.MsgUpdateSuperiorResponse; } });
const tx_12 = require("./types/enreach/workload/tx");
Object.defineProperty(exports, "MsgUpdateWorkreportProcessBatchSize", { enumerable: true, get: function () { return tx_12.MsgUpdateWorkreportProcessBatchSize; } });
const query_45 = require("./types/enreach/workload/query");
Object.defineProperty(exports, "QueryGetCurrentEpochResponse", { enumerable: true, get: function () { return query_45.QueryGetCurrentEpochResponse; } });
const query_46 = require("./types/enreach/workload/query");
Object.defineProperty(exports, "QueryGetHistoryEpochDataDepthResponse", { enumerable: true, get: function () { return query_46.QueryGetHistoryEpochDataDepthResponse; } });
const query_47 = require("./types/enreach/workload/query");
Object.defineProperty(exports, "QueryGetCurrentEraResponse", { enumerable: true, get: function () { return query_47.QueryGetCurrentEraResponse; } });
const reputationpoint_4 = require("./types/enreach/workload/reputationpoint");
Object.defineProperty(exports, "ReputationPointChangeRawData", { enumerable: true, get: function () { return reputationpoint_4.ReputationPointChangeRawData; } });
const genesis_1 = require("./types/enreach/workload/genesis");
Object.defineProperty(exports, "GenesisState", { enumerable: true, get: function () { return genesis_1.GenesisState; } });
const tx_13 = require("./types/enreach/workload/tx");
Object.defineProperty(exports, "MsgSubmitWorkreports", { enumerable: true, get: function () { return tx_13.MsgSubmitWorkreports; } });
const workreport_5 = require("./types/enreach/workload/workreport");
Object.defineProperty(exports, "ManagerNodeScoreMap", { enumerable: true, get: function () { return workreport_5.ManagerNodeScoreMap; } });
const query_48 = require("./types/enreach/workload/query");
Object.defineProperty(exports, "QueryGetAllNodeWorkloadByEpochResponse", { enumerable: true, get: function () { return query_48.QueryGetAllNodeWorkloadByEpochResponse; } });
const query_49 = require("./types/enreach/workload/query");
Object.defineProperty(exports, "QueryGetAllManagerWRWorkloadByEpochResponse", { enumerable: true, get: function () { return query_49.QueryGetAllManagerWRWorkloadByEpochResponse; } });
const query_50 = require("./types/enreach/workload/query");
Object.defineProperty(exports, "QueryGetAllManagerRPWorkloadByEraResponse", { enumerable: true, get: function () { return query_50.QueryGetAllManagerRPWorkloadByEraResponse; } });
const query_51 = require("./types/enreach/workload/query");
Object.defineProperty(exports, "QueryGetWorkreportProcessBatchSizeResponse", { enumerable: true, get: function () { return query_51.QueryGetWorkreportProcessBatchSizeResponse; } });
const query_52 = require("./types/enreach/workload/query");
Object.defineProperty(exports, "QueryGetAllReputationDeltaPointByEraResponse", { enumerable: true, get: function () { return query_52.QueryGetAllReputationDeltaPointByEraResponse; } });
const tx_14 = require("./types/enreach/workload/tx");
Object.defineProperty(exports, "MsgSubmitReputationPointChangeData", { enumerable: true, get: function () { return tx_14.MsgSubmitReputationPointChangeData; } });
const workload_3 = require("./types/enreach/workload/workload");
Object.defineProperty(exports, "ManagerRPWorkload", { enumerable: true, get: function () { return workload_3.ManagerRPWorkload; } });
const reputationpoint_5 = require("./types/enreach/workload/reputationpoint");
Object.defineProperty(exports, "ReputationPointChangeRawDataMapDB", { enumerable: true, get: function () { return reputationpoint_5.ReputationPointChangeRawDataMapDB; } });
const reputationpoint_6 = require("./types/enreach/workload/reputationpoint");
Object.defineProperty(exports, "ReputationPoint", { enumerable: true, get: function () { return reputationpoint_6.ReputationPoint; } });
const reputationpoint_7 = require("./types/enreach/workload/reputationpoint");
Object.defineProperty(exports, "EraProcessData", { enumerable: true, get: function () { return reputationpoint_7.EraProcessData; } });
const superior_1 = require("./types/enreach/workload/superior");
Object.defineProperty(exports, "Superior", { enumerable: true, get: function () { return superior_1.Superior; } });
exports.registry = new proto_signing_1.Registry(registry_1.msgTypes);
function getStructure(template) {
    const structure = { fields: [] };
    for (let [key, value] of Object.entries(template)) {
        let field = { name: key, type: typeof value };
        structure.fields.push(field);
    }
    return structure;
}
const defaultFee = {
    amount: [],
    gas: "200000",
};
const txClient = ({ signer, prefix, addr } = { addr: "http://localhost:26657", prefix: "cosmos" }) => {
    return {
        async sendQueryGetAllEraProcessDataResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetAllEraProcessDataResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetAllEraProcessDataResponse({ value: query_1.QueryGetAllEraProcessDataResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetAllEraProcessDataResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendReputationPointChangeData({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendReputationPointChangeData: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.reputationPointChangeData({ value: reputationpoint_1.ReputationPointChangeData.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendReputationPointChangeData: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetAllWorkreportByEpochResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetAllWorkreportByEpochResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetAllWorkreportByEpochResponse({ value: query_2.QueryGetAllWorkreportByEpochResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetAllWorkreportByEpochResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetEraProcessDataResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetEraProcessDataResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetEraProcessDataResponse({ value: query_3.QueryGetEraProcessDataResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetEraProcessDataResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetManagerRPWorkloadRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetManagerRPWorkloadRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetManagerRpworkloadRequest({ value: query_4.QueryGetManagerRPWorkloadRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetManagerRPWorkloadRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetWorkreportResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetWorkreportResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetWorkreportResponse({ value: query_5.QueryGetWorkreportResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetWorkreportResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetWorkreportProcessBatchSizeRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetWorkreportProcessBatchSizeRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetWorkreportProcessBatchSizeRequest({ value: query_6.QueryGetWorkreportProcessBatchSizeRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetWorkreportProcessBatchSizeRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetHistoryEpochDataDepthRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetHistoryEpochDataDepthRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetHistoryEpochDataDepthRequest({ value: query_7.QueryGetHistoryEpochDataDepthRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetHistoryEpochDataDepthRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetReputationPointRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetReputationPointRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetReputationPointRequest({ value: query_8.QueryGetReputationPointRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetReputationPointRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendEpochProcessData({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendEpochProcessData: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.epochProcessData({ value: workreport_1.EpochProcessData.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendEpochProcessData: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryParamsRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryParamsRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryParamsRequest({ value: query_9.QueryParamsRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryParamsRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetNodeWorkloadResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetNodeWorkloadResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetNodeWorkloadResponse({ value: query_10.QueryGetNodeWorkloadResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetNodeWorkloadResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetAllManagerRPWorkloadByEraRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetAllManagerRPWorkloadByEraRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetAllManagerRpworkloadByEraRequest({ value: query_11.QueryGetAllManagerRPWorkloadByEraRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetAllManagerRPWorkloadByEraRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgSubmitReputationPointChangeDataResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgSubmitReputationPointChangeDataResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgSubmitReputationPointChangeDataResponse({ value: tx_1.MsgSubmitReputationPointChangeDataResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgSubmitReputationPointChangeDataResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendNodeScore({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendNodeScore: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.nodeScore({ value: workreport_2.NodeScore.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendNodeScore: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendWorkreport({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendWorkreport: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.workreport({ value: workreport_3.Workreport.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendWorkreport: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetReputationDeltaPointResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetReputationDeltaPointResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetReputationDeltaPointResponse({ value: query_12.QueryGetReputationDeltaPointResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetReputationDeltaPointResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateHistoryEpochDataDepthResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateHistoryEpochDataDepthResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgUpdateHistoryEpochDataDepthResponse({ value: tx_2.MsgUpdateHistoryEpochDataDepthResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateHistoryEpochDataDepthResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetManagerWRWorkloadRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetManagerWRWorkloadRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetManagerWrworkloadRequest({ value: query_13.QueryGetManagerWRWorkloadRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetManagerWRWorkloadRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetReputationPointChangeDataRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetReputationPointChangeDataRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetReputationPointChangeDataRequest({ value: query_14.QueryGetReputationPointChangeDataRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetReputationPointChangeDataRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetAllEpochProcessDataRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetAllEpochProcessDataRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetAllEpochProcessDataRequest({ value: query_15.QueryGetAllEpochProcessDataRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetAllEpochProcessDataRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetReputationPointResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetReputationPointResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetReputationPointResponse({ value: query_16.QueryGetReputationPointResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetReputationPointResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetEpochLengthRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetEpochLengthRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetEpochLengthRequest({ value: query_17.QueryGetEpochLengthRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetEpochLengthRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetEpochLengthResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetEpochLengthResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetEpochLengthResponse({ value: query_18.QueryGetEpochLengthResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetEpochLengthResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetCurrentEpochRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetCurrentEpochRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetCurrentEpochRequest({ value: query_19.QueryGetCurrentEpochRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetCurrentEpochRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetAllReputationPointChangeDataByEraRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetAllReputationPointChangeDataByEraRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetAllReputationPointChangeDataByEraRequest({ value: query_20.QueryGetAllReputationPointChangeDataByEraRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetAllReputationPointChangeDataByEraRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetAllReputationPointRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetAllReputationPointRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetAllReputationPointRequest({ value: query_21.QueryGetAllReputationPointRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetAllReputationPointRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendReputationDeltaPoint({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendReputationDeltaPoint: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.reputationDeltaPoint({ value: reputationpoint_2.ReputationDeltaPoint.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendReputationDeltaPoint: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetNodeWorkloadRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetNodeWorkloadRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetNodeWorkloadRequest({ value: query_22.QueryGetNodeWorkloadRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetNodeWorkloadRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetEraLengthRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetEraLengthRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetEraLengthRequest({ value: query_23.QueryGetEraLengthRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetEraLengthRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetEraProcessDataRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetEraProcessDataRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetEraProcessDataRequest({ value: query_24.QueryGetEraProcessDataRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetEraProcessDataRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgSubmitWorkreportsResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgSubmitWorkreportsResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgSubmitWorkreportsResponse({ value: tx_3.MsgSubmitWorkreportsResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgSubmitWorkreportsResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendReputationPointChangeRawDataDB({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendReputationPointChangeRawDataDB: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.reputationPointChangeRawDataDb({ value: reputationpoint_3.ReputationPointChangeRawDataDB.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendReputationPointChangeRawDataDB: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetManagerWRWorkloadResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetManagerWRWorkloadResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetManagerWrworkloadResponse({ value: query_25.QueryGetManagerWRWorkloadResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetManagerWRWorkloadResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetAllReputationDeltaPointByEraRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetAllReputationDeltaPointByEraRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetAllReputationDeltaPointByEraRequest({ value: query_26.QueryGetAllReputationDeltaPointByEraRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetAllReputationDeltaPointByEraRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetSuperiorRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetSuperiorRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetSuperiorRequest({ value: query_27.QueryGetSuperiorRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetSuperiorRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetReputationDeltaPointRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetReputationDeltaPointRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetReputationDeltaPointRequest({ value: query_28.QueryGetReputationDeltaPointRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetReputationDeltaPointRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryParamsResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryParamsResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryParamsResponse({ value: query_29.QueryParamsResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryParamsResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetAllWorkreportByEpochRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetAllWorkreportByEpochRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetAllWorkreportByEpochRequest({ value: query_30.QueryGetAllWorkreportByEpochRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetAllWorkreportByEpochRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendNodeWorkload({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendNodeWorkload: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.nodeWorkload({ value: workload_1.NodeWorkload.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendNodeWorkload: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetAllNodeWorkloadByEpochRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetAllNodeWorkloadByEpochRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetAllNodeWorkloadByEpochRequest({ value: query_31.QueryGetAllNodeWorkloadByEpochRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetAllNodeWorkloadByEpochRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetWorkreportRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetWorkreportRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetWorkreportRequest({ value: query_32.QueryGetWorkreportRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetWorkreportRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetAllEpochProcessDataResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetAllEpochProcessDataResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetAllEpochProcessDataResponse({ value: query_33.QueryGetAllEpochProcessDataResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetAllEpochProcessDataResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetSuperiorResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetSuperiorResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetSuperiorResponse({ value: query_34.QueryGetSuperiorResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetSuperiorResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetEraLengthResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetEraLengthResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetEraLengthResponse({ value: query_35.QueryGetEraLengthResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetEraLengthResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgCreateSuperior({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgCreateSuperior: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgCreateSuperior({ value: tx_4.MsgCreateSuperior.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgCreateSuperior: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendParams({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendParams: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.params({ value: params_1.Params.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendParams: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetCurrentEraRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetCurrentEraRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetCurrentEraRequest({ value: query_36.QueryGetCurrentEraRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetCurrentEraRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateParamsResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateParamsResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgUpdateParamsResponse({ value: tx_5.MsgUpdateParamsResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateParamsResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateParams({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateParams: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgUpdateParams({ value: tx_6.MsgUpdateParams.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateParams: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetEpochProcessDataRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetEpochProcessDataRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetEpochProcessDataRequest({ value: query_37.QueryGetEpochProcessDataRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetEpochProcessDataRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetEpochProcessDataResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetEpochProcessDataResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetEpochProcessDataResponse({ value: query_38.QueryGetEpochProcessDataResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetEpochProcessDataResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetAllReputationPointChangeDataByEraResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetAllReputationPointChangeDataByEraResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetAllReputationPointChangeDataByEraResponse({ value: query_39.QueryGetAllReputationPointChangeDataByEraResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetAllReputationPointChangeDataByEraResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetAllReputationPointResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetAllReputationPointResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetAllReputationPointResponse({ value: query_40.QueryGetAllReputationPointResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetAllReputationPointResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateWorkreportProcessBatchSizeResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateWorkreportProcessBatchSizeResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgUpdateWorkreportProcessBatchSizeResponse({ value: tx_7.MsgUpdateWorkreportProcessBatchSizeResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateWorkreportProcessBatchSizeResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendNodeScoreDB({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendNodeScoreDB: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.nodeScoreDb({ value: workreport_4.NodeScoreDB.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendNodeScoreDB: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateHistoryEpochDataDepth({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateHistoryEpochDataDepth: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgUpdateHistoryEpochDataDepth({ value: tx_8.MsgUpdateHistoryEpochDataDepth.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateHistoryEpochDataDepth: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgCreateSuperiorResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgCreateSuperiorResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgCreateSuperiorResponse({ value: tx_9.MsgCreateSuperiorResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgCreateSuperiorResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateSuperior({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateSuperior: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgUpdateSuperior({ value: tx_10.MsgUpdateSuperior.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateSuperior: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetReputationPointChangeDataResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetReputationPointChangeDataResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetReputationPointChangeDataResponse({ value: query_41.QueryGetReputationPointChangeDataResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetReputationPointChangeDataResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetManagerRPWorkloadResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetManagerRPWorkloadResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetManagerRpworkloadResponse({ value: query_42.QueryGetManagerRPWorkloadResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetManagerRPWorkloadResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetAllEraProcessDataRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetAllEraProcessDataRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetAllEraProcessDataRequest({ value: query_43.QueryGetAllEraProcessDataRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetAllEraProcessDataRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendManagerWRWorkload({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendManagerWRWorkload: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.managerWrworkload({ value: workload_2.ManagerWRWorkload.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendManagerWRWorkload: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetAllManagerWRWorkloadByEpochRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetAllManagerWRWorkloadByEpochRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetAllManagerWrworkloadByEpochRequest({ value: query_44.QueryGetAllManagerWRWorkloadByEpochRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetAllManagerWRWorkloadByEpochRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateSuperiorResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateSuperiorResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgUpdateSuperiorResponse({ value: tx_11.MsgUpdateSuperiorResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateSuperiorResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateWorkreportProcessBatchSize({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateWorkreportProcessBatchSize: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgUpdateWorkreportProcessBatchSize({ value: tx_12.MsgUpdateWorkreportProcessBatchSize.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateWorkreportProcessBatchSize: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetCurrentEpochResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetCurrentEpochResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetCurrentEpochResponse({ value: query_45.QueryGetCurrentEpochResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetCurrentEpochResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetHistoryEpochDataDepthResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetHistoryEpochDataDepthResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetHistoryEpochDataDepthResponse({ value: query_46.QueryGetHistoryEpochDataDepthResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetHistoryEpochDataDepthResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetCurrentEraResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetCurrentEraResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetCurrentEraResponse({ value: query_47.QueryGetCurrentEraResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetCurrentEraResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendReputationPointChangeRawData({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendReputationPointChangeRawData: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.reputationPointChangeRawData({ value: reputationpoint_4.ReputationPointChangeRawData.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendReputationPointChangeRawData: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendGenesisState({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendGenesisState: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.genesisState({ value: genesis_1.GenesisState.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendGenesisState: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgSubmitWorkreports({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgSubmitWorkreports: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgSubmitWorkreports({ value: tx_13.MsgSubmitWorkreports.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgSubmitWorkreports: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendManagerNodeScoreMap({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendManagerNodeScoreMap: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.managerNodeScoreMap({ value: workreport_5.ManagerNodeScoreMap.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendManagerNodeScoreMap: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetAllNodeWorkloadByEpochResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetAllNodeWorkloadByEpochResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetAllNodeWorkloadByEpochResponse({ value: query_48.QueryGetAllNodeWorkloadByEpochResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetAllNodeWorkloadByEpochResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetAllManagerWRWorkloadByEpochResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetAllManagerWRWorkloadByEpochResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetAllManagerWrworkloadByEpochResponse({ value: query_49.QueryGetAllManagerWRWorkloadByEpochResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetAllManagerWRWorkloadByEpochResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetAllManagerRPWorkloadByEraResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetAllManagerRPWorkloadByEraResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetAllManagerRpworkloadByEraResponse({ value: query_50.QueryGetAllManagerRPWorkloadByEraResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetAllManagerRPWorkloadByEraResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetWorkreportProcessBatchSizeResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetWorkreportProcessBatchSizeResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetWorkreportProcessBatchSizeResponse({ value: query_51.QueryGetWorkreportProcessBatchSizeResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetWorkreportProcessBatchSizeResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetAllReputationDeltaPointByEraResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetAllReputationDeltaPointByEraResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetAllReputationDeltaPointByEraResponse({ value: query_52.QueryGetAllReputationDeltaPointByEraResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetAllReputationDeltaPointByEraResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgSubmitReputationPointChangeData({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgSubmitReputationPointChangeData: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgSubmitReputationPointChangeData({ value: tx_14.MsgSubmitReputationPointChangeData.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgSubmitReputationPointChangeData: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendManagerRPWorkload({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendManagerRPWorkload: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.managerRpworkload({ value: workload_3.ManagerRPWorkload.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendManagerRPWorkload: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendReputationPointChangeRawDataMapDB({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendReputationPointChangeRawDataMapDB: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.reputationPointChangeRawDataMapDb({ value: reputationpoint_5.ReputationPointChangeRawDataMapDB.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendReputationPointChangeRawDataMapDB: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendReputationPoint({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendReputationPoint: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.reputationPoint({ value: reputationpoint_6.ReputationPoint.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendReputationPoint: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendEraProcessData({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendEraProcessData: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.eraProcessData({ value: reputationpoint_7.EraProcessData.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendEraProcessData: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendSuperior({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendSuperior: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.superior({ value: superior_1.Superior.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendSuperior: Could not broadcast Tx: ' + e.message);
            }
        },
        queryGetAllEraProcessDataResponse({ value }) {
            try {
                return { typeUrl: "/enreach.workload.QueryGetAllEraProcessDataResponse", value: query_1.QueryGetAllEraProcessDataResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetAllEraProcessDataResponse: Could not create message: ' + e.message);
            }
        },
        reputationPointChangeData({ value }) {
            try {
                return { typeUrl: "/enreach.workload.ReputationPointChangeData", value: reputationpoint_1.ReputationPointChangeData.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:ReputationPointChangeData: Could not create message: ' + e.message);
            }
        },
        queryGetAllWorkreportByEpochResponse({ value }) {
            try {
                return { typeUrl: "/enreach.workload.QueryGetAllWorkreportByEpochResponse", value: query_2.QueryGetAllWorkreportByEpochResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetAllWorkreportByEpochResponse: Could not create message: ' + e.message);
            }
        },
        queryGetEraProcessDataResponse({ value }) {
            try {
                return { typeUrl: "/enreach.workload.QueryGetEraProcessDataResponse", value: query_3.QueryGetEraProcessDataResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetEraProcessDataResponse: Could not create message: ' + e.message);
            }
        },
        queryGetManagerRpworkloadRequest({ value }) {
            try {
                return { typeUrl: "/enreach.workload.QueryGetManagerRPWorkloadRequest", value: query_4.QueryGetManagerRPWorkloadRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetManagerRPWorkloadRequest: Could not create message: ' + e.message);
            }
        },
        queryGetWorkreportResponse({ value }) {
            try {
                return { typeUrl: "/enreach.workload.QueryGetWorkreportResponse", value: query_5.QueryGetWorkreportResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetWorkreportResponse: Could not create message: ' + e.message);
            }
        },
        queryGetWorkreportProcessBatchSizeRequest({ value }) {
            try {
                return { typeUrl: "/enreach.workload.QueryGetWorkreportProcessBatchSizeRequest", value: query_6.QueryGetWorkreportProcessBatchSizeRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetWorkreportProcessBatchSizeRequest: Could not create message: ' + e.message);
            }
        },
        queryGetHistoryEpochDataDepthRequest({ value }) {
            try {
                return { typeUrl: "/enreach.workload.QueryGetHistoryEpochDataDepthRequest", value: query_7.QueryGetHistoryEpochDataDepthRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetHistoryEpochDataDepthRequest: Could not create message: ' + e.message);
            }
        },
        queryGetReputationPointRequest({ value }) {
            try {
                return { typeUrl: "/enreach.workload.QueryGetReputationPointRequest", value: query_8.QueryGetReputationPointRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetReputationPointRequest: Could not create message: ' + e.message);
            }
        },
        epochProcessData({ value }) {
            try {
                return { typeUrl: "/enreach.workload.EpochProcessData", value: workreport_1.EpochProcessData.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:EpochProcessData: Could not create message: ' + e.message);
            }
        },
        queryParamsRequest({ value }) {
            try {
                return { typeUrl: "/enreach.workload.QueryParamsRequest", value: query_9.QueryParamsRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryParamsRequest: Could not create message: ' + e.message);
            }
        },
        queryGetNodeWorkloadResponse({ value }) {
            try {
                return { typeUrl: "/enreach.workload.QueryGetNodeWorkloadResponse", value: query_10.QueryGetNodeWorkloadResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetNodeWorkloadResponse: Could not create message: ' + e.message);
            }
        },
        queryGetAllManagerRpworkloadByEraRequest({ value }) {
            try {
                return { typeUrl: "/enreach.workload.QueryGetAllManagerRPWorkloadByEraRequest", value: query_11.QueryGetAllManagerRPWorkloadByEraRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetAllManagerRPWorkloadByEraRequest: Could not create message: ' + e.message);
            }
        },
        msgSubmitReputationPointChangeDataResponse({ value }) {
            try {
                return { typeUrl: "/enreach.workload.MsgSubmitReputationPointChangeDataResponse", value: tx_1.MsgSubmitReputationPointChangeDataResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgSubmitReputationPointChangeDataResponse: Could not create message: ' + e.message);
            }
        },
        nodeScore({ value }) {
            try {
                return { typeUrl: "/enreach.workload.NodeScore", value: workreport_2.NodeScore.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:NodeScore: Could not create message: ' + e.message);
            }
        },
        workreport({ value }) {
            try {
                return { typeUrl: "/enreach.workload.Workreport", value: workreport_3.Workreport.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:Workreport: Could not create message: ' + e.message);
            }
        },
        queryGetReputationDeltaPointResponse({ value }) {
            try {
                return { typeUrl: "/enreach.workload.QueryGetReputationDeltaPointResponse", value: query_12.QueryGetReputationDeltaPointResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetReputationDeltaPointResponse: Could not create message: ' + e.message);
            }
        },
        msgUpdateHistoryEpochDataDepthResponse({ value }) {
            try {
                return { typeUrl: "/enreach.workload.MsgUpdateHistoryEpochDataDepthResponse", value: tx_2.MsgUpdateHistoryEpochDataDepthResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateHistoryEpochDataDepthResponse: Could not create message: ' + e.message);
            }
        },
        queryGetManagerWrworkloadRequest({ value }) {
            try {
                return { typeUrl: "/enreach.workload.QueryGetManagerWRWorkloadRequest", value: query_13.QueryGetManagerWRWorkloadRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetManagerWRWorkloadRequest: Could not create message: ' + e.message);
            }
        },
        queryGetReputationPointChangeDataRequest({ value }) {
            try {
                return { typeUrl: "/enreach.workload.QueryGetReputationPointChangeDataRequest", value: query_14.QueryGetReputationPointChangeDataRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetReputationPointChangeDataRequest: Could not create message: ' + e.message);
            }
        },
        queryGetAllEpochProcessDataRequest({ value }) {
            try {
                return { typeUrl: "/enreach.workload.QueryGetAllEpochProcessDataRequest", value: query_15.QueryGetAllEpochProcessDataRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetAllEpochProcessDataRequest: Could not create message: ' + e.message);
            }
        },
        queryGetReputationPointResponse({ value }) {
            try {
                return { typeUrl: "/enreach.workload.QueryGetReputationPointResponse", value: query_16.QueryGetReputationPointResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetReputationPointResponse: Could not create message: ' + e.message);
            }
        },
        queryGetEpochLengthRequest({ value }) {
            try {
                return { typeUrl: "/enreach.workload.QueryGetEpochLengthRequest", value: query_17.QueryGetEpochLengthRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetEpochLengthRequest: Could not create message: ' + e.message);
            }
        },
        queryGetEpochLengthResponse({ value }) {
            try {
                return { typeUrl: "/enreach.workload.QueryGetEpochLengthResponse", value: query_18.QueryGetEpochLengthResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetEpochLengthResponse: Could not create message: ' + e.message);
            }
        },
        queryGetCurrentEpochRequest({ value }) {
            try {
                return { typeUrl: "/enreach.workload.QueryGetCurrentEpochRequest", value: query_19.QueryGetCurrentEpochRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetCurrentEpochRequest: Could not create message: ' + e.message);
            }
        },
        queryGetAllReputationPointChangeDataByEraRequest({ value }) {
            try {
                return { typeUrl: "/enreach.workload.QueryGetAllReputationPointChangeDataByEraRequest", value: query_20.QueryGetAllReputationPointChangeDataByEraRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetAllReputationPointChangeDataByEraRequest: Could not create message: ' + e.message);
            }
        },
        queryGetAllReputationPointRequest({ value }) {
            try {
                return { typeUrl: "/enreach.workload.QueryGetAllReputationPointRequest", value: query_21.QueryGetAllReputationPointRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetAllReputationPointRequest: Could not create message: ' + e.message);
            }
        },
        reputationDeltaPoint({ value }) {
            try {
                return { typeUrl: "/enreach.workload.ReputationDeltaPoint", value: reputationpoint_2.ReputationDeltaPoint.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:ReputationDeltaPoint: Could not create message: ' + e.message);
            }
        },
        queryGetNodeWorkloadRequest({ value }) {
            try {
                return { typeUrl: "/enreach.workload.QueryGetNodeWorkloadRequest", value: query_22.QueryGetNodeWorkloadRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetNodeWorkloadRequest: Could not create message: ' + e.message);
            }
        },
        queryGetEraLengthRequest({ value }) {
            try {
                return { typeUrl: "/enreach.workload.QueryGetEraLengthRequest", value: query_23.QueryGetEraLengthRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetEraLengthRequest: Could not create message: ' + e.message);
            }
        },
        queryGetEraProcessDataRequest({ value }) {
            try {
                return { typeUrl: "/enreach.workload.QueryGetEraProcessDataRequest", value: query_24.QueryGetEraProcessDataRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetEraProcessDataRequest: Could not create message: ' + e.message);
            }
        },
        msgSubmitWorkreportsResponse({ value }) {
            try {
                return { typeUrl: "/enreach.workload.MsgSubmitWorkreportsResponse", value: tx_3.MsgSubmitWorkreportsResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgSubmitWorkreportsResponse: Could not create message: ' + e.message);
            }
        },
        reputationPointChangeRawDataDb({ value }) {
            try {
                return { typeUrl: "/enreach.workload.ReputationPointChangeRawDataDB", value: reputationpoint_3.ReputationPointChangeRawDataDB.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:ReputationPointChangeRawDataDB: Could not create message: ' + e.message);
            }
        },
        queryGetManagerWrworkloadResponse({ value }) {
            try {
                return { typeUrl: "/enreach.workload.QueryGetManagerWRWorkloadResponse", value: query_25.QueryGetManagerWRWorkloadResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetManagerWRWorkloadResponse: Could not create message: ' + e.message);
            }
        },
        queryGetAllReputationDeltaPointByEraRequest({ value }) {
            try {
                return { typeUrl: "/enreach.workload.QueryGetAllReputationDeltaPointByEraRequest", value: query_26.QueryGetAllReputationDeltaPointByEraRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetAllReputationDeltaPointByEraRequest: Could not create message: ' + e.message);
            }
        },
        queryGetSuperiorRequest({ value }) {
            try {
                return { typeUrl: "/enreach.workload.QueryGetSuperiorRequest", value: query_27.QueryGetSuperiorRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetSuperiorRequest: Could not create message: ' + e.message);
            }
        },
        queryGetReputationDeltaPointRequest({ value }) {
            try {
                return { typeUrl: "/enreach.workload.QueryGetReputationDeltaPointRequest", value: query_28.QueryGetReputationDeltaPointRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetReputationDeltaPointRequest: Could not create message: ' + e.message);
            }
        },
        queryParamsResponse({ value }) {
            try {
                return { typeUrl: "/enreach.workload.QueryParamsResponse", value: query_29.QueryParamsResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryParamsResponse: Could not create message: ' + e.message);
            }
        },
        queryGetAllWorkreportByEpochRequest({ value }) {
            try {
                return { typeUrl: "/enreach.workload.QueryGetAllWorkreportByEpochRequest", value: query_30.QueryGetAllWorkreportByEpochRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetAllWorkreportByEpochRequest: Could not create message: ' + e.message);
            }
        },
        nodeWorkload({ value }) {
            try {
                return { typeUrl: "/enreach.workload.NodeWorkload", value: workload_1.NodeWorkload.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:NodeWorkload: Could not create message: ' + e.message);
            }
        },
        queryGetAllNodeWorkloadByEpochRequest({ value }) {
            try {
                return { typeUrl: "/enreach.workload.QueryGetAllNodeWorkloadByEpochRequest", value: query_31.QueryGetAllNodeWorkloadByEpochRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetAllNodeWorkloadByEpochRequest: Could not create message: ' + e.message);
            }
        },
        queryGetWorkreportRequest({ value }) {
            try {
                return { typeUrl: "/enreach.workload.QueryGetWorkreportRequest", value: query_32.QueryGetWorkreportRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetWorkreportRequest: Could not create message: ' + e.message);
            }
        },
        queryGetAllEpochProcessDataResponse({ value }) {
            try {
                return { typeUrl: "/enreach.workload.QueryGetAllEpochProcessDataResponse", value: query_33.QueryGetAllEpochProcessDataResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetAllEpochProcessDataResponse: Could not create message: ' + e.message);
            }
        },
        queryGetSuperiorResponse({ value }) {
            try {
                return { typeUrl: "/enreach.workload.QueryGetSuperiorResponse", value: query_34.QueryGetSuperiorResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetSuperiorResponse: Could not create message: ' + e.message);
            }
        },
        queryGetEraLengthResponse({ value }) {
            try {
                return { typeUrl: "/enreach.workload.QueryGetEraLengthResponse", value: query_35.QueryGetEraLengthResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetEraLengthResponse: Could not create message: ' + e.message);
            }
        },
        msgCreateSuperior({ value }) {
            try {
                return { typeUrl: "/enreach.workload.MsgCreateSuperior", value: tx_4.MsgCreateSuperior.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgCreateSuperior: Could not create message: ' + e.message);
            }
        },
        params({ value }) {
            try {
                return { typeUrl: "/enreach.workload.Params", value: params_1.Params.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:Params: Could not create message: ' + e.message);
            }
        },
        queryGetCurrentEraRequest({ value }) {
            try {
                return { typeUrl: "/enreach.workload.QueryGetCurrentEraRequest", value: query_36.QueryGetCurrentEraRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetCurrentEraRequest: Could not create message: ' + e.message);
            }
        },
        msgUpdateParamsResponse({ value }) {
            try {
                return { typeUrl: "/enreach.workload.MsgUpdateParamsResponse", value: tx_5.MsgUpdateParamsResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateParamsResponse: Could not create message: ' + e.message);
            }
        },
        msgUpdateParams({ value }) {
            try {
                return { typeUrl: "/enreach.workload.MsgUpdateParams", value: tx_6.MsgUpdateParams.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateParams: Could not create message: ' + e.message);
            }
        },
        queryGetEpochProcessDataRequest({ value }) {
            try {
                return { typeUrl: "/enreach.workload.QueryGetEpochProcessDataRequest", value: query_37.QueryGetEpochProcessDataRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetEpochProcessDataRequest: Could not create message: ' + e.message);
            }
        },
        queryGetEpochProcessDataResponse({ value }) {
            try {
                return { typeUrl: "/enreach.workload.QueryGetEpochProcessDataResponse", value: query_38.QueryGetEpochProcessDataResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetEpochProcessDataResponse: Could not create message: ' + e.message);
            }
        },
        queryGetAllReputationPointChangeDataByEraResponse({ value }) {
            try {
                return { typeUrl: "/enreach.workload.QueryGetAllReputationPointChangeDataByEraResponse", value: query_39.QueryGetAllReputationPointChangeDataByEraResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetAllReputationPointChangeDataByEraResponse: Could not create message: ' + e.message);
            }
        },
        queryGetAllReputationPointResponse({ value }) {
            try {
                return { typeUrl: "/enreach.workload.QueryGetAllReputationPointResponse", value: query_40.QueryGetAllReputationPointResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetAllReputationPointResponse: Could not create message: ' + e.message);
            }
        },
        msgUpdateWorkreportProcessBatchSizeResponse({ value }) {
            try {
                return { typeUrl: "/enreach.workload.MsgUpdateWorkreportProcessBatchSizeResponse", value: tx_7.MsgUpdateWorkreportProcessBatchSizeResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateWorkreportProcessBatchSizeResponse: Could not create message: ' + e.message);
            }
        },
        nodeScoreDb({ value }) {
            try {
                return { typeUrl: "/enreach.workload.NodeScoreDB", value: workreport_4.NodeScoreDB.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:NodeScoreDB: Could not create message: ' + e.message);
            }
        },
        msgUpdateHistoryEpochDataDepth({ value }) {
            try {
                return { typeUrl: "/enreach.workload.MsgUpdateHistoryEpochDataDepth", value: tx_8.MsgUpdateHistoryEpochDataDepth.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateHistoryEpochDataDepth: Could not create message: ' + e.message);
            }
        },
        msgCreateSuperiorResponse({ value }) {
            try {
                return { typeUrl: "/enreach.workload.MsgCreateSuperiorResponse", value: tx_9.MsgCreateSuperiorResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgCreateSuperiorResponse: Could not create message: ' + e.message);
            }
        },
        msgUpdateSuperior({ value }) {
            try {
                return { typeUrl: "/enreach.workload.MsgUpdateSuperior", value: tx_10.MsgUpdateSuperior.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateSuperior: Could not create message: ' + e.message);
            }
        },
        queryGetReputationPointChangeDataResponse({ value }) {
            try {
                return { typeUrl: "/enreach.workload.QueryGetReputationPointChangeDataResponse", value: query_41.QueryGetReputationPointChangeDataResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetReputationPointChangeDataResponse: Could not create message: ' + e.message);
            }
        },
        queryGetManagerRpworkloadResponse({ value }) {
            try {
                return { typeUrl: "/enreach.workload.QueryGetManagerRPWorkloadResponse", value: query_42.QueryGetManagerRPWorkloadResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetManagerRPWorkloadResponse: Could not create message: ' + e.message);
            }
        },
        queryGetAllEraProcessDataRequest({ value }) {
            try {
                return { typeUrl: "/enreach.workload.QueryGetAllEraProcessDataRequest", value: query_43.QueryGetAllEraProcessDataRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetAllEraProcessDataRequest: Could not create message: ' + e.message);
            }
        },
        managerWrworkload({ value }) {
            try {
                return { typeUrl: "/enreach.workload.ManagerWRWorkload", value: workload_2.ManagerWRWorkload.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:ManagerWRWorkload: Could not create message: ' + e.message);
            }
        },
        queryGetAllManagerWrworkloadByEpochRequest({ value }) {
            try {
                return { typeUrl: "/enreach.workload.QueryGetAllManagerWRWorkloadByEpochRequest", value: query_44.QueryGetAllManagerWRWorkloadByEpochRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetAllManagerWRWorkloadByEpochRequest: Could not create message: ' + e.message);
            }
        },
        msgUpdateSuperiorResponse({ value }) {
            try {
                return { typeUrl: "/enreach.workload.MsgUpdateSuperiorResponse", value: tx_11.MsgUpdateSuperiorResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateSuperiorResponse: Could not create message: ' + e.message);
            }
        },
        msgUpdateWorkreportProcessBatchSize({ value }) {
            try {
                return { typeUrl: "/enreach.workload.MsgUpdateWorkreportProcessBatchSize", value: tx_12.MsgUpdateWorkreportProcessBatchSize.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateWorkreportProcessBatchSize: Could not create message: ' + e.message);
            }
        },
        queryGetCurrentEpochResponse({ value }) {
            try {
                return { typeUrl: "/enreach.workload.QueryGetCurrentEpochResponse", value: query_45.QueryGetCurrentEpochResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetCurrentEpochResponse: Could not create message: ' + e.message);
            }
        },
        queryGetHistoryEpochDataDepthResponse({ value }) {
            try {
                return { typeUrl: "/enreach.workload.QueryGetHistoryEpochDataDepthResponse", value: query_46.QueryGetHistoryEpochDataDepthResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetHistoryEpochDataDepthResponse: Could not create message: ' + e.message);
            }
        },
        queryGetCurrentEraResponse({ value }) {
            try {
                return { typeUrl: "/enreach.workload.QueryGetCurrentEraResponse", value: query_47.QueryGetCurrentEraResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetCurrentEraResponse: Could not create message: ' + e.message);
            }
        },
        reputationPointChangeRawData({ value }) {
            try {
                return { typeUrl: "/enreach.workload.ReputationPointChangeRawData", value: reputationpoint_4.ReputationPointChangeRawData.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:ReputationPointChangeRawData: Could not create message: ' + e.message);
            }
        },
        genesisState({ value }) {
            try {
                return { typeUrl: "/enreach.workload.GenesisState", value: genesis_1.GenesisState.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:GenesisState: Could not create message: ' + e.message);
            }
        },
        msgSubmitWorkreports({ value }) {
            try {
                return { typeUrl: "/enreach.workload.MsgSubmitWorkreports", value: tx_13.MsgSubmitWorkreports.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgSubmitWorkreports: Could not create message: ' + e.message);
            }
        },
        managerNodeScoreMap({ value }) {
            try {
                return { typeUrl: "/enreach.workload.ManagerNodeScoreMap", value: workreport_5.ManagerNodeScoreMap.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:ManagerNodeScoreMap: Could not create message: ' + e.message);
            }
        },
        queryGetAllNodeWorkloadByEpochResponse({ value }) {
            try {
                return { typeUrl: "/enreach.workload.QueryGetAllNodeWorkloadByEpochResponse", value: query_48.QueryGetAllNodeWorkloadByEpochResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetAllNodeWorkloadByEpochResponse: Could not create message: ' + e.message);
            }
        },
        queryGetAllManagerWrworkloadByEpochResponse({ value }) {
            try {
                return { typeUrl: "/enreach.workload.QueryGetAllManagerWRWorkloadByEpochResponse", value: query_49.QueryGetAllManagerWRWorkloadByEpochResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetAllManagerWRWorkloadByEpochResponse: Could not create message: ' + e.message);
            }
        },
        queryGetAllManagerRpworkloadByEraResponse({ value }) {
            try {
                return { typeUrl: "/enreach.workload.QueryGetAllManagerRPWorkloadByEraResponse", value: query_50.QueryGetAllManagerRPWorkloadByEraResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetAllManagerRPWorkloadByEraResponse: Could not create message: ' + e.message);
            }
        },
        queryGetWorkreportProcessBatchSizeResponse({ value }) {
            try {
                return { typeUrl: "/enreach.workload.QueryGetWorkreportProcessBatchSizeResponse", value: query_51.QueryGetWorkreportProcessBatchSizeResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetWorkreportProcessBatchSizeResponse: Could not create message: ' + e.message);
            }
        },
        queryGetAllReputationDeltaPointByEraResponse({ value }) {
            try {
                return { typeUrl: "/enreach.workload.QueryGetAllReputationDeltaPointByEraResponse", value: query_52.QueryGetAllReputationDeltaPointByEraResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetAllReputationDeltaPointByEraResponse: Could not create message: ' + e.message);
            }
        },
        msgSubmitReputationPointChangeData({ value }) {
            try {
                return { typeUrl: "/enreach.workload.MsgSubmitReputationPointChangeData", value: tx_14.MsgSubmitReputationPointChangeData.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgSubmitReputationPointChangeData: Could not create message: ' + e.message);
            }
        },
        managerRpworkload({ value }) {
            try {
                return { typeUrl: "/enreach.workload.ManagerRPWorkload", value: workload_3.ManagerRPWorkload.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:ManagerRPWorkload: Could not create message: ' + e.message);
            }
        },
        reputationPointChangeRawDataMapDb({ value }) {
            try {
                return { typeUrl: "/enreach.workload.ReputationPointChangeRawDataMapDB", value: reputationpoint_5.ReputationPointChangeRawDataMapDB.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:ReputationPointChangeRawDataMapDB: Could not create message: ' + e.message);
            }
        },
        reputationPoint({ value }) {
            try {
                return { typeUrl: "/enreach.workload.ReputationPoint", value: reputationpoint_6.ReputationPoint.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:ReputationPoint: Could not create message: ' + e.message);
            }
        },
        eraProcessData({ value }) {
            try {
                return { typeUrl: "/enreach.workload.EraProcessData", value: reputationpoint_7.EraProcessData.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:EraProcessData: Could not create message: ' + e.message);
            }
        },
        superior({ value }) {
            try {
                return { typeUrl: "/enreach.workload.Superior", value: superior_1.Superior.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:Superior: Could not create message: ' + e.message);
            }
        },
    };
};
exports.txClient = txClient;
const queryClient = ({ addr: addr } = { addr: "http://localhost:1317" }) => {
    return new rest_1.Api({ baseURL: addr });
};
exports.queryClient = queryClient;
class SDKModule {
    constructor(client) {
        this.registry = [];
        this.query = (0, exports.queryClient)({ addr: client.env.apiURL });
        this.updateTX(client);
        this.structure = {};
        client.on('signer-changed', (signer) => {
            this.updateTX(client);
        });
    }
    updateTX(client) {
        const methods = (0, exports.txClient)({
            signer: client.signer,
            addr: client.env.rpcURL,
            prefix: client.env.prefix ?? "cosmos",
        });
        this.tx = methods;
        for (let m in methods) {
            this.tx[m] = methods[m].bind(this.tx);
        }
    }
}
;
const IgntModule = (test) => {
    return {
        module: {
            EnreachWorkload: new SDKModule(test)
        },
        registry: registry_1.msgTypes
    };
};
exports.default = IgntModule;
