"use strict";
// Generated by Ignite ignite.com/cli
Object.defineProperty(exports, "__esModule", { value: true });
exports.queryClient = exports.txClient = exports.registry = exports.QueryGetWorkloadRequest = exports.QueryParamsRequest = exports.GenesisState = exports.MsgCreateWorkloadResponse = exports.MsgCreateWorkload = exports.Workload = exports.QueryAllWorkloadRequest = exports.MsgUpdateParamsResponse = exports.QueryGetWorkloadResponse = exports.QueryAllWorkloadResponse = exports.QueryParamsResponse = exports.Params = exports.MsgUpdateParams = void 0;
const stargate_1 = require("@cosmjs/stargate");
const proto_signing_1 = require("@cosmjs/proto-signing");
const registry_1 = require("./registry");
const rest_1 = require("./rest");
const tx_1 = require("./types/enreach/workload/tx");
Object.defineProperty(exports, "MsgUpdateParams", { enumerable: true, get: function () { return tx_1.MsgUpdateParams; } });
const params_1 = require("./types/enreach/workload/params");
Object.defineProperty(exports, "Params", { enumerable: true, get: function () { return params_1.Params; } });
const query_1 = require("./types/enreach/workload/query");
Object.defineProperty(exports, "QueryParamsResponse", { enumerable: true, get: function () { return query_1.QueryParamsResponse; } });
const query_2 = require("./types/enreach/workload/query");
Object.defineProperty(exports, "QueryAllWorkloadResponse", { enumerable: true, get: function () { return query_2.QueryAllWorkloadResponse; } });
const query_3 = require("./types/enreach/workload/query");
Object.defineProperty(exports, "QueryGetWorkloadResponse", { enumerable: true, get: function () { return query_3.QueryGetWorkloadResponse; } });
const tx_2 = require("./types/enreach/workload/tx");
Object.defineProperty(exports, "MsgUpdateParamsResponse", { enumerable: true, get: function () { return tx_2.MsgUpdateParamsResponse; } });
const query_4 = require("./types/enreach/workload/query");
Object.defineProperty(exports, "QueryAllWorkloadRequest", { enumerable: true, get: function () { return query_4.QueryAllWorkloadRequest; } });
const workload_1 = require("./types/enreach/workload/workload");
Object.defineProperty(exports, "Workload", { enumerable: true, get: function () { return workload_1.Workload; } });
const tx_3 = require("./types/enreach/workload/tx");
Object.defineProperty(exports, "MsgCreateWorkload", { enumerable: true, get: function () { return tx_3.MsgCreateWorkload; } });
const tx_4 = require("./types/enreach/workload/tx");
Object.defineProperty(exports, "MsgCreateWorkloadResponse", { enumerable: true, get: function () { return tx_4.MsgCreateWorkloadResponse; } });
const genesis_1 = require("./types/enreach/workload/genesis");
Object.defineProperty(exports, "GenesisState", { enumerable: true, get: function () { return genesis_1.GenesisState; } });
const query_5 = require("./types/enreach/workload/query");
Object.defineProperty(exports, "QueryParamsRequest", { enumerable: true, get: function () { return query_5.QueryParamsRequest; } });
const query_6 = require("./types/enreach/workload/query");
Object.defineProperty(exports, "QueryGetWorkloadRequest", { enumerable: true, get: function () { return query_6.QueryGetWorkloadRequest; } });
exports.registry = new proto_signing_1.Registry(registry_1.msgTypes);
function getStructure(template) {
    const structure = { fields: [] };
    for (let [key, value] of Object.entries(template)) {
        let field = { name: key, type: typeof value };
        structure.fields.push(field);
    }
    return structure;
}
const defaultFee = {
    amount: [],
    gas: "200000",
};
const txClient = ({ signer, prefix, addr } = { addr: "http://localhost:26657", prefix: "cosmos" }) => {
    return {
        async sendMsgUpdateParams({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateParams: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgUpdateParams({ value: tx_1.MsgUpdateParams.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateParams: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendParams({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendParams: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.params({ value: params_1.Params.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendParams: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryParamsResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryParamsResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryParamsResponse({ value: query_1.QueryParamsResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryParamsResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryAllWorkloadResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryAllWorkloadResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryAllWorkloadResponse({ value: query_2.QueryAllWorkloadResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryAllWorkloadResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetWorkloadResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetWorkloadResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetWorkloadResponse({ value: query_3.QueryGetWorkloadResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetWorkloadResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateParamsResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateParamsResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgUpdateParamsResponse({ value: tx_2.MsgUpdateParamsResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateParamsResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryAllWorkloadRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryAllWorkloadRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryAllWorkloadRequest({ value: query_4.QueryAllWorkloadRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryAllWorkloadRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendWorkload({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendWorkload: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.workload({ value: workload_1.Workload.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendWorkload: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgCreateWorkload({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgCreateWorkload: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgCreateWorkload({ value: tx_3.MsgCreateWorkload.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgCreateWorkload: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgCreateWorkloadResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgCreateWorkloadResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgCreateWorkloadResponse({ value: tx_4.MsgCreateWorkloadResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgCreateWorkloadResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendGenesisState({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendGenesisState: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.genesisState({ value: genesis_1.GenesisState.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendGenesisState: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryParamsRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryParamsRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryParamsRequest({ value: query_5.QueryParamsRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryParamsRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetWorkloadRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetWorkloadRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetWorkloadRequest({ value: query_6.QueryGetWorkloadRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetWorkloadRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        msgUpdateParams({ value }) {
            try {
                return { typeUrl: "/enreach.workload.MsgUpdateParams", value: tx_1.MsgUpdateParams.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateParams: Could not create message: ' + e.message);
            }
        },
        params({ value }) {
            try {
                return { typeUrl: "/enreach.workload.Params", value: params_1.Params.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:Params: Could not create message: ' + e.message);
            }
        },
        queryParamsResponse({ value }) {
            try {
                return { typeUrl: "/enreach.workload.QueryParamsResponse", value: query_1.QueryParamsResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryParamsResponse: Could not create message: ' + e.message);
            }
        },
        queryAllWorkloadResponse({ value }) {
            try {
                return { typeUrl: "/enreach.workload.QueryAllWorkloadResponse", value: query_2.QueryAllWorkloadResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryAllWorkloadResponse: Could not create message: ' + e.message);
            }
        },
        queryGetWorkloadResponse({ value }) {
            try {
                return { typeUrl: "/enreach.workload.QueryGetWorkloadResponse", value: query_3.QueryGetWorkloadResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetWorkloadResponse: Could not create message: ' + e.message);
            }
        },
        msgUpdateParamsResponse({ value }) {
            try {
                return { typeUrl: "/enreach.workload.MsgUpdateParamsResponse", value: tx_2.MsgUpdateParamsResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateParamsResponse: Could not create message: ' + e.message);
            }
        },
        queryAllWorkloadRequest({ value }) {
            try {
                return { typeUrl: "/enreach.workload.QueryAllWorkloadRequest", value: query_4.QueryAllWorkloadRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryAllWorkloadRequest: Could not create message: ' + e.message);
            }
        },
        workload({ value }) {
            try {
                return { typeUrl: "/enreach.workload.Workload", value: workload_1.Workload.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:Workload: Could not create message: ' + e.message);
            }
        },
        msgCreateWorkload({ value }) {
            try {
                return { typeUrl: "/enreach.workload.MsgCreateWorkload", value: tx_3.MsgCreateWorkload.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgCreateWorkload: Could not create message: ' + e.message);
            }
        },
        msgCreateWorkloadResponse({ value }) {
            try {
                return { typeUrl: "/enreach.workload.MsgCreateWorkloadResponse", value: tx_4.MsgCreateWorkloadResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgCreateWorkloadResponse: Could not create message: ' + e.message);
            }
        },
        genesisState({ value }) {
            try {
                return { typeUrl: "/enreach.workload.GenesisState", value: genesis_1.GenesisState.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:GenesisState: Could not create message: ' + e.message);
            }
        },
        queryParamsRequest({ value }) {
            try {
                return { typeUrl: "/enreach.workload.QueryParamsRequest", value: query_5.QueryParamsRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryParamsRequest: Could not create message: ' + e.message);
            }
        },
        queryGetWorkloadRequest({ value }) {
            try {
                return { typeUrl: "/enreach.workload.QueryGetWorkloadRequest", value: query_6.QueryGetWorkloadRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetWorkloadRequest: Could not create message: ' + e.message);
            }
        },
    };
};
exports.txClient = txClient;
const queryClient = ({ addr: addr } = { addr: "http://localhost:1317" }) => {
    return new rest_1.Api({ baseURL: addr });
};
exports.queryClient = queryClient;
class SDKModule {
    constructor(client) {
        this.registry = [];
        this.query = (0, exports.queryClient)({ addr: client.env.apiURL });
        this.updateTX(client);
        this.structure = {};
        client.on('signer-changed', (signer) => {
            this.updateTX(client);
        });
    }
    updateTX(client) {
        const methods = (0, exports.txClient)({
            signer: client.signer,
            addr: client.env.rpcURL,
            prefix: client.env.prefix ?? "cosmos",
        });
        this.tx = methods;
        for (let m in methods) {
            this.tx[m] = methods[m].bind(this.tx);
        }
    }
}
;
const IgntModule = (test) => {
    return {
        module: {
            EnreachWorkload: new SDKModule(test)
        },
        registry: registry_1.msgTypes
    };
};
exports.default = IgntModule;
