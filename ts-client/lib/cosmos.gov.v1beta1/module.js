"use strict";
// Generated by Ignite ignite.com/cli
Object.defineProperty(exports, "__esModule", { value: true });
exports.queryClient = exports.txClient = exports.registry = exports.QueryDepositRequest = exports.QueryVoteResponse = exports.QueryVoteRequest = exports.QueryDepositResponse = exports.MsgVoteWeightedResponse = exports.MsgVoteResponse = exports.MsgSubmitProposal = exports.VotingParams = exports.MsgDepositResponse = exports.QueryVotesResponse = exports.Vote = exports.WeightedVoteOption = exports.QueryParamsResponse = exports.QueryParamsRequest = exports.GenesisState = exports.TextProposal = exports.MsgDeposit = exports.MsgVote = exports.QueryDepositsRequest = exports.MsgVoteWeighted = exports.QueryTallyResultResponse = exports.QueryDepositsResponse = exports.QueryVotesRequest = exports.QueryProposalsResponse = exports.QueryProposalResponse = exports.TallyParams = exports.Proposal = exports.MsgSubmitProposalResponse = exports.QueryProposalsRequest = exports.QueryProposalRequest = exports.QueryTallyResultRequest = exports.TallyResult = exports.DepositParams = exports.Deposit = void 0;
const stargate_1 = require("@cosmjs/stargate");
const proto_signing_1 = require("@cosmjs/proto-signing");
const registry_1 = require("./registry");
const rest_1 = require("./rest");
const gov_1 = require("./types/cosmos/gov/v1beta1/gov");
Object.defineProperty(exports, "Deposit", { enumerable: true, get: function () { return gov_1.Deposit; } });
const gov_2 = require("./types/cosmos/gov/v1beta1/gov");
Object.defineProperty(exports, "DepositParams", { enumerable: true, get: function () { return gov_2.DepositParams; } });
const gov_3 = require("./types/cosmos/gov/v1beta1/gov");
Object.defineProperty(exports, "TallyResult", { enumerable: true, get: function () { return gov_3.TallyResult; } });
const query_1 = require("./types/cosmos/gov/v1beta1/query");
Object.defineProperty(exports, "QueryTallyResultRequest", { enumerable: true, get: function () { return query_1.QueryTallyResultRequest; } });
const query_2 = require("./types/cosmos/gov/v1beta1/query");
Object.defineProperty(exports, "QueryProposalRequest", { enumerable: true, get: function () { return query_2.QueryProposalRequest; } });
const query_3 = require("./types/cosmos/gov/v1beta1/query");
Object.defineProperty(exports, "QueryProposalsRequest", { enumerable: true, get: function () { return query_3.QueryProposalsRequest; } });
const tx_1 = require("./types/cosmos/gov/v1beta1/tx");
Object.defineProperty(exports, "MsgSubmitProposalResponse", { enumerable: true, get: function () { return tx_1.MsgSubmitProposalResponse; } });
const gov_4 = require("./types/cosmos/gov/v1beta1/gov");
Object.defineProperty(exports, "Proposal", { enumerable: true, get: function () { return gov_4.Proposal; } });
const gov_5 = require("./types/cosmos/gov/v1beta1/gov");
Object.defineProperty(exports, "TallyParams", { enumerable: true, get: function () { return gov_5.TallyParams; } });
const query_4 = require("./types/cosmos/gov/v1beta1/query");
Object.defineProperty(exports, "QueryProposalResponse", { enumerable: true, get: function () { return query_4.QueryProposalResponse; } });
const query_5 = require("./types/cosmos/gov/v1beta1/query");
Object.defineProperty(exports, "QueryProposalsResponse", { enumerable: true, get: function () { return query_5.QueryProposalsResponse; } });
const query_6 = require("./types/cosmos/gov/v1beta1/query");
Object.defineProperty(exports, "QueryVotesRequest", { enumerable: true, get: function () { return query_6.QueryVotesRequest; } });
const query_7 = require("./types/cosmos/gov/v1beta1/query");
Object.defineProperty(exports, "QueryDepositsResponse", { enumerable: true, get: function () { return query_7.QueryDepositsResponse; } });
const query_8 = require("./types/cosmos/gov/v1beta1/query");
Object.defineProperty(exports, "QueryTallyResultResponse", { enumerable: true, get: function () { return query_8.QueryTallyResultResponse; } });
const tx_2 = require("./types/cosmos/gov/v1beta1/tx");
Object.defineProperty(exports, "MsgVoteWeighted", { enumerable: true, get: function () { return tx_2.MsgVoteWeighted; } });
const query_9 = require("./types/cosmos/gov/v1beta1/query");
Object.defineProperty(exports, "QueryDepositsRequest", { enumerable: true, get: function () { return query_9.QueryDepositsRequest; } });
const tx_3 = require("./types/cosmos/gov/v1beta1/tx");
Object.defineProperty(exports, "MsgVote", { enumerable: true, get: function () { return tx_3.MsgVote; } });
const tx_4 = require("./types/cosmos/gov/v1beta1/tx");
Object.defineProperty(exports, "MsgDeposit", { enumerable: true, get: function () { return tx_4.MsgDeposit; } });
const gov_6 = require("./types/cosmos/gov/v1beta1/gov");
Object.defineProperty(exports, "TextProposal", { enumerable: true, get: function () { return gov_6.TextProposal; } });
const genesis_1 = require("./types/cosmos/gov/v1beta1/genesis");
Object.defineProperty(exports, "GenesisState", { enumerable: true, get: function () { return genesis_1.GenesisState; } });
const query_10 = require("./types/cosmos/gov/v1beta1/query");
Object.defineProperty(exports, "QueryParamsRequest", { enumerable: true, get: function () { return query_10.QueryParamsRequest; } });
const query_11 = require("./types/cosmos/gov/v1beta1/query");
Object.defineProperty(exports, "QueryParamsResponse", { enumerable: true, get: function () { return query_11.QueryParamsResponse; } });
const gov_7 = require("./types/cosmos/gov/v1beta1/gov");
Object.defineProperty(exports, "WeightedVoteOption", { enumerable: true, get: function () { return gov_7.WeightedVoteOption; } });
const gov_8 = require("./types/cosmos/gov/v1beta1/gov");
Object.defineProperty(exports, "Vote", { enumerable: true, get: function () { return gov_8.Vote; } });
const query_12 = require("./types/cosmos/gov/v1beta1/query");
Object.defineProperty(exports, "QueryVotesResponse", { enumerable: true, get: function () { return query_12.QueryVotesResponse; } });
const tx_5 = require("./types/cosmos/gov/v1beta1/tx");
Object.defineProperty(exports, "MsgDepositResponse", { enumerable: true, get: function () { return tx_5.MsgDepositResponse; } });
const gov_9 = require("./types/cosmos/gov/v1beta1/gov");
Object.defineProperty(exports, "VotingParams", { enumerable: true, get: function () { return gov_9.VotingParams; } });
const tx_6 = require("./types/cosmos/gov/v1beta1/tx");
Object.defineProperty(exports, "MsgSubmitProposal", { enumerable: true, get: function () { return tx_6.MsgSubmitProposal; } });
const tx_7 = require("./types/cosmos/gov/v1beta1/tx");
Object.defineProperty(exports, "MsgVoteResponse", { enumerable: true, get: function () { return tx_7.MsgVoteResponse; } });
const tx_8 = require("./types/cosmos/gov/v1beta1/tx");
Object.defineProperty(exports, "MsgVoteWeightedResponse", { enumerable: true, get: function () { return tx_8.MsgVoteWeightedResponse; } });
const query_13 = require("./types/cosmos/gov/v1beta1/query");
Object.defineProperty(exports, "QueryDepositResponse", { enumerable: true, get: function () { return query_13.QueryDepositResponse; } });
const query_14 = require("./types/cosmos/gov/v1beta1/query");
Object.defineProperty(exports, "QueryVoteRequest", { enumerable: true, get: function () { return query_14.QueryVoteRequest; } });
const query_15 = require("./types/cosmos/gov/v1beta1/query");
Object.defineProperty(exports, "QueryVoteResponse", { enumerable: true, get: function () { return query_15.QueryVoteResponse; } });
const query_16 = require("./types/cosmos/gov/v1beta1/query");
Object.defineProperty(exports, "QueryDepositRequest", { enumerable: true, get: function () { return query_16.QueryDepositRequest; } });
exports.registry = new proto_signing_1.Registry(registry_1.msgTypes);
function getStructure(template) {
    const structure = { fields: [] };
    for (let [key, value] of Object.entries(template)) {
        let field = { name: key, type: typeof value };
        structure.fields.push(field);
    }
    return structure;
}
const defaultFee = {
    amount: [],
    gas: "200000",
};
const txClient = ({ signer, prefix, addr } = { addr: "http://localhost:26657", prefix: "cosmos" }) => {
    return {
        async sendDeposit({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendDeposit: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.deposit({ value: gov_1.Deposit.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendDeposit: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendDepositParams({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendDepositParams: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.depositParams({ value: gov_2.DepositParams.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendDepositParams: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendTallyResult({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendTallyResult: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.tallyResult({ value: gov_3.TallyResult.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendTallyResult: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryTallyResultRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryTallyResultRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryTallyResultRequest({ value: query_1.QueryTallyResultRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryTallyResultRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryProposalRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryProposalRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryProposalRequest({ value: query_2.QueryProposalRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryProposalRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryProposalsRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryProposalsRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryProposalsRequest({ value: query_3.QueryProposalsRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryProposalsRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgSubmitProposalResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgSubmitProposalResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgSubmitProposalResponse({ value: tx_1.MsgSubmitProposalResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgSubmitProposalResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendProposal({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendProposal: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.proposal({ value: gov_4.Proposal.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendProposal: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendTallyParams({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendTallyParams: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.tallyParams({ value: gov_5.TallyParams.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendTallyParams: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryProposalResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryProposalResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryProposalResponse({ value: query_4.QueryProposalResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryProposalResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryProposalsResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryProposalsResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryProposalsResponse({ value: query_5.QueryProposalsResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryProposalsResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryVotesRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryVotesRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryVotesRequest({ value: query_6.QueryVotesRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryVotesRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryDepositsResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryDepositsResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryDepositsResponse({ value: query_7.QueryDepositsResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryDepositsResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryTallyResultResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryTallyResultResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryTallyResultResponse({ value: query_8.QueryTallyResultResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryTallyResultResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgVoteWeighted({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgVoteWeighted: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgVoteWeighted({ value: tx_2.MsgVoteWeighted.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgVoteWeighted: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryDepositsRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryDepositsRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryDepositsRequest({ value: query_9.QueryDepositsRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryDepositsRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgVote({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgVote: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgVote({ value: tx_3.MsgVote.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgVote: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgDeposit({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgDeposit: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgDeposit({ value: tx_4.MsgDeposit.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgDeposit: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendTextProposal({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendTextProposal: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.textProposal({ value: gov_6.TextProposal.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendTextProposal: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendGenesisState({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendGenesisState: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.genesisState({ value: genesis_1.GenesisState.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendGenesisState: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryParamsRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryParamsRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryParamsRequest({ value: query_10.QueryParamsRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryParamsRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryParamsResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryParamsResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryParamsResponse({ value: query_11.QueryParamsResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryParamsResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendWeightedVoteOption({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendWeightedVoteOption: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.weightedVoteOption({ value: gov_7.WeightedVoteOption.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendWeightedVoteOption: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendVote({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendVote: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.vote({ value: gov_8.Vote.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendVote: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryVotesResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryVotesResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryVotesResponse({ value: query_12.QueryVotesResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryVotesResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgDepositResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgDepositResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgDepositResponse({ value: tx_5.MsgDepositResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgDepositResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendVotingParams({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendVotingParams: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.votingParams({ value: gov_9.VotingParams.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendVotingParams: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgSubmitProposal({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgSubmitProposal: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgSubmitProposal({ value: tx_6.MsgSubmitProposal.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgSubmitProposal: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgVoteResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgVoteResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgVoteResponse({ value: tx_7.MsgVoteResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgVoteResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgVoteWeightedResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgVoteWeightedResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgVoteWeightedResponse({ value: tx_8.MsgVoteWeightedResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgVoteWeightedResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryDepositResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryDepositResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryDepositResponse({ value: query_13.QueryDepositResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryDepositResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryVoteRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryVoteRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryVoteRequest({ value: query_14.QueryVoteRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryVoteRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryVoteResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryVoteResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryVoteResponse({ value: query_15.QueryVoteResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryVoteResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryDepositRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryDepositRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryDepositRequest({ value: query_16.QueryDepositRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryDepositRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        deposit({ value }) {
            try {
                return { typeUrl: "/cosmos.gov.v1beta1.Deposit", value: gov_1.Deposit.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:Deposit: Could not create message: ' + e.message);
            }
        },
        depositParams({ value }) {
            try {
                return { typeUrl: "/cosmos.gov.v1beta1.DepositParams", value: gov_2.DepositParams.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:DepositParams: Could not create message: ' + e.message);
            }
        },
        tallyResult({ value }) {
            try {
                return { typeUrl: "/cosmos.gov.v1beta1.TallyResult", value: gov_3.TallyResult.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:TallyResult: Could not create message: ' + e.message);
            }
        },
        queryTallyResultRequest({ value }) {
            try {
                return { typeUrl: "/cosmos.gov.v1beta1.QueryTallyResultRequest", value: query_1.QueryTallyResultRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryTallyResultRequest: Could not create message: ' + e.message);
            }
        },
        queryProposalRequest({ value }) {
            try {
                return { typeUrl: "/cosmos.gov.v1beta1.QueryProposalRequest", value: query_2.QueryProposalRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryProposalRequest: Could not create message: ' + e.message);
            }
        },
        queryProposalsRequest({ value }) {
            try {
                return { typeUrl: "/cosmos.gov.v1beta1.QueryProposalsRequest", value: query_3.QueryProposalsRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryProposalsRequest: Could not create message: ' + e.message);
            }
        },
        msgSubmitProposalResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.gov.v1beta1.MsgSubmitProposalResponse", value: tx_1.MsgSubmitProposalResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgSubmitProposalResponse: Could not create message: ' + e.message);
            }
        },
        proposal({ value }) {
            try {
                return { typeUrl: "/cosmos.gov.v1beta1.Proposal", value: gov_4.Proposal.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:Proposal: Could not create message: ' + e.message);
            }
        },
        tallyParams({ value }) {
            try {
                return { typeUrl: "/cosmos.gov.v1beta1.TallyParams", value: gov_5.TallyParams.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:TallyParams: Could not create message: ' + e.message);
            }
        },
        queryProposalResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.gov.v1beta1.QueryProposalResponse", value: query_4.QueryProposalResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryProposalResponse: Could not create message: ' + e.message);
            }
        },
        queryProposalsResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.gov.v1beta1.QueryProposalsResponse", value: query_5.QueryProposalsResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryProposalsResponse: Could not create message: ' + e.message);
            }
        },
        queryVotesRequest({ value }) {
            try {
                return { typeUrl: "/cosmos.gov.v1beta1.QueryVotesRequest", value: query_6.QueryVotesRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryVotesRequest: Could not create message: ' + e.message);
            }
        },
        queryDepositsResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.gov.v1beta1.QueryDepositsResponse", value: query_7.QueryDepositsResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryDepositsResponse: Could not create message: ' + e.message);
            }
        },
        queryTallyResultResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.gov.v1beta1.QueryTallyResultResponse", value: query_8.QueryTallyResultResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryTallyResultResponse: Could not create message: ' + e.message);
            }
        },
        msgVoteWeighted({ value }) {
            try {
                return { typeUrl: "/cosmos.gov.v1beta1.MsgVoteWeighted", value: tx_2.MsgVoteWeighted.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgVoteWeighted: Could not create message: ' + e.message);
            }
        },
        queryDepositsRequest({ value }) {
            try {
                return { typeUrl: "/cosmos.gov.v1beta1.QueryDepositsRequest", value: query_9.QueryDepositsRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryDepositsRequest: Could not create message: ' + e.message);
            }
        },
        msgVote({ value }) {
            try {
                return { typeUrl: "/cosmos.gov.v1beta1.MsgVote", value: tx_3.MsgVote.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgVote: Could not create message: ' + e.message);
            }
        },
        msgDeposit({ value }) {
            try {
                return { typeUrl: "/cosmos.gov.v1beta1.MsgDeposit", value: tx_4.MsgDeposit.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgDeposit: Could not create message: ' + e.message);
            }
        },
        textProposal({ value }) {
            try {
                return { typeUrl: "/cosmos.gov.v1beta1.TextProposal", value: gov_6.TextProposal.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:TextProposal: Could not create message: ' + e.message);
            }
        },
        genesisState({ value }) {
            try {
                return { typeUrl: "/cosmos.gov.v1beta1.GenesisState", value: genesis_1.GenesisState.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:GenesisState: Could not create message: ' + e.message);
            }
        },
        queryParamsRequest({ value }) {
            try {
                return { typeUrl: "/cosmos.gov.v1beta1.QueryParamsRequest", value: query_10.QueryParamsRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryParamsRequest: Could not create message: ' + e.message);
            }
        },
        queryParamsResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.gov.v1beta1.QueryParamsResponse", value: query_11.QueryParamsResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryParamsResponse: Could not create message: ' + e.message);
            }
        },
        weightedVoteOption({ value }) {
            try {
                return { typeUrl: "/cosmos.gov.v1beta1.WeightedVoteOption", value: gov_7.WeightedVoteOption.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:WeightedVoteOption: Could not create message: ' + e.message);
            }
        },
        vote({ value }) {
            try {
                return { typeUrl: "/cosmos.gov.v1beta1.Vote", value: gov_8.Vote.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:Vote: Could not create message: ' + e.message);
            }
        },
        queryVotesResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.gov.v1beta1.QueryVotesResponse", value: query_12.QueryVotesResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryVotesResponse: Could not create message: ' + e.message);
            }
        },
        msgDepositResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.gov.v1beta1.MsgDepositResponse", value: tx_5.MsgDepositResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgDepositResponse: Could not create message: ' + e.message);
            }
        },
        votingParams({ value }) {
            try {
                return { typeUrl: "/cosmos.gov.v1beta1.VotingParams", value: gov_9.VotingParams.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:VotingParams: Could not create message: ' + e.message);
            }
        },
        msgSubmitProposal({ value }) {
            try {
                return { typeUrl: "/cosmos.gov.v1beta1.MsgSubmitProposal", value: tx_6.MsgSubmitProposal.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgSubmitProposal: Could not create message: ' + e.message);
            }
        },
        msgVoteResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.gov.v1beta1.MsgVoteResponse", value: tx_7.MsgVoteResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgVoteResponse: Could not create message: ' + e.message);
            }
        },
        msgVoteWeightedResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.gov.v1beta1.MsgVoteWeightedResponse", value: tx_8.MsgVoteWeightedResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgVoteWeightedResponse: Could not create message: ' + e.message);
            }
        },
        queryDepositResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.gov.v1beta1.QueryDepositResponse", value: query_13.QueryDepositResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryDepositResponse: Could not create message: ' + e.message);
            }
        },
        queryVoteRequest({ value }) {
            try {
                return { typeUrl: "/cosmos.gov.v1beta1.QueryVoteRequest", value: query_14.QueryVoteRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryVoteRequest: Could not create message: ' + e.message);
            }
        },
        queryVoteResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.gov.v1beta1.QueryVoteResponse", value: query_15.QueryVoteResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryVoteResponse: Could not create message: ' + e.message);
            }
        },
        queryDepositRequest({ value }) {
            try {
                return { typeUrl: "/cosmos.gov.v1beta1.QueryDepositRequest", value: query_16.QueryDepositRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryDepositRequest: Could not create message: ' + e.message);
            }
        },
    };
};
exports.txClient = txClient;
const queryClient = ({ addr: addr } = { addr: "http://localhost:1317" }) => {
    return new rest_1.Api({ baseURL: addr });
};
exports.queryClient = queryClient;
class SDKModule {
    constructor(client) {
        this.registry = [];
        this.query = (0, exports.queryClient)({ addr: client.env.apiURL });
        this.updateTX(client);
        this.structure = {};
        client.on('signer-changed', (signer) => {
            this.updateTX(client);
        });
    }
    updateTX(client) {
        const methods = (0, exports.txClient)({
            signer: client.signer,
            addr: client.env.rpcURL,
            prefix: client.env.prefix ?? "cosmos",
        });
        this.tx = methods;
        for (let m in methods) {
            this.tx[m] = methods[m].bind(this.tx);
        }
    }
}
;
const IgntModule = (test) => {
    return {
        module: {
            CosmosGovV1Beta1: new SDKModule(test)
        },
        registry: registry_1.msgTypes
    };
};
exports.default = IgntModule;
