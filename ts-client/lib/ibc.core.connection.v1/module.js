"use strict";
// Generated by Ignite ignite.com/cli
Object.defineProperty(exports, "__esModule", { value: true });
exports.queryClient = exports.txClient = exports.registry = exports.Version = exports.ConnectionPaths = exports.IdentifiedConnection = exports.QueryConnectionParamsRequest = exports.MsgConnectionOpenAck = exports.MsgUpdateParams = exports.QueryConnectionParamsResponse = exports.QueryConnectionsRequest = exports.MsgConnectionOpenInitResponse = exports.QueryClientConnectionsResponse = exports.QueryClientConnectionsRequest = exports.QueryConnectionsResponse = exports.MsgConnectionOpenTryResponse = exports.MsgConnectionOpenConfirmResponse = exports.QueryConnectionRequest = exports.MsgUpdateParamsResponse = exports.MsgConnectionOpenAckResponse = exports.QueryConnectionResponse = exports.QueryConnectionConsensusStateResponse = exports.GenesisState = exports.Params = exports.Counterparty = exports.QueryConnectionConsensusStateRequest = exports.MsgConnectionOpenTry = exports.ClientPaths = exports.ConnectionEnd = exports.MsgConnectionOpenInit = exports.QueryConnectionClientStateRequest = exports.QueryConnectionClientStateResponse = exports.MsgConnectionOpenConfirm = void 0;
const stargate_1 = require("@cosmjs/stargate");
const proto_signing_1 = require("@cosmjs/proto-signing");
const registry_1 = require("./registry");
const rest_1 = require("./rest");
const tx_1 = require("./types/ibc/core/connection/v1/tx");
Object.defineProperty(exports, "MsgConnectionOpenConfirm", { enumerable: true, get: function () { return tx_1.MsgConnectionOpenConfirm; } });
const query_1 = require("./types/ibc/core/connection/v1/query");
Object.defineProperty(exports, "QueryConnectionClientStateResponse", { enumerable: true, get: function () { return query_1.QueryConnectionClientStateResponse; } });
const query_2 = require("./types/ibc/core/connection/v1/query");
Object.defineProperty(exports, "QueryConnectionClientStateRequest", { enumerable: true, get: function () { return query_2.QueryConnectionClientStateRequest; } });
const tx_2 = require("./types/ibc/core/connection/v1/tx");
Object.defineProperty(exports, "MsgConnectionOpenInit", { enumerable: true, get: function () { return tx_2.MsgConnectionOpenInit; } });
const connection_1 = require("./types/ibc/core/connection/v1/connection");
Object.defineProperty(exports, "ConnectionEnd", { enumerable: true, get: function () { return connection_1.ConnectionEnd; } });
const connection_2 = require("./types/ibc/core/connection/v1/connection");
Object.defineProperty(exports, "ClientPaths", { enumerable: true, get: function () { return connection_2.ClientPaths; } });
const tx_3 = require("./types/ibc/core/connection/v1/tx");
Object.defineProperty(exports, "MsgConnectionOpenTry", { enumerable: true, get: function () { return tx_3.MsgConnectionOpenTry; } });
const query_3 = require("./types/ibc/core/connection/v1/query");
Object.defineProperty(exports, "QueryConnectionConsensusStateRequest", { enumerable: true, get: function () { return query_3.QueryConnectionConsensusStateRequest; } });
const connection_3 = require("./types/ibc/core/connection/v1/connection");
Object.defineProperty(exports, "Counterparty", { enumerable: true, get: function () { return connection_3.Counterparty; } });
const connection_4 = require("./types/ibc/core/connection/v1/connection");
Object.defineProperty(exports, "Params", { enumerable: true, get: function () { return connection_4.Params; } });
const genesis_1 = require("./types/ibc/core/connection/v1/genesis");
Object.defineProperty(exports, "GenesisState", { enumerable: true, get: function () { return genesis_1.GenesisState; } });
const query_4 = require("./types/ibc/core/connection/v1/query");
Object.defineProperty(exports, "QueryConnectionConsensusStateResponse", { enumerable: true, get: function () { return query_4.QueryConnectionConsensusStateResponse; } });
const query_5 = require("./types/ibc/core/connection/v1/query");
Object.defineProperty(exports, "QueryConnectionResponse", { enumerable: true, get: function () { return query_5.QueryConnectionResponse; } });
const tx_4 = require("./types/ibc/core/connection/v1/tx");
Object.defineProperty(exports, "MsgConnectionOpenAckResponse", { enumerable: true, get: function () { return tx_4.MsgConnectionOpenAckResponse; } });
const tx_5 = require("./types/ibc/core/connection/v1/tx");
Object.defineProperty(exports, "MsgUpdateParamsResponse", { enumerable: true, get: function () { return tx_5.MsgUpdateParamsResponse; } });
const query_6 = require("./types/ibc/core/connection/v1/query");
Object.defineProperty(exports, "QueryConnectionRequest", { enumerable: true, get: function () { return query_6.QueryConnectionRequest; } });
const tx_6 = require("./types/ibc/core/connection/v1/tx");
Object.defineProperty(exports, "MsgConnectionOpenConfirmResponse", { enumerable: true, get: function () { return tx_6.MsgConnectionOpenConfirmResponse; } });
const tx_7 = require("./types/ibc/core/connection/v1/tx");
Object.defineProperty(exports, "MsgConnectionOpenTryResponse", { enumerable: true, get: function () { return tx_7.MsgConnectionOpenTryResponse; } });
const query_7 = require("./types/ibc/core/connection/v1/query");
Object.defineProperty(exports, "QueryConnectionsResponse", { enumerable: true, get: function () { return query_7.QueryConnectionsResponse; } });
const query_8 = require("./types/ibc/core/connection/v1/query");
Object.defineProperty(exports, "QueryClientConnectionsRequest", { enumerable: true, get: function () { return query_8.QueryClientConnectionsRequest; } });
const query_9 = require("./types/ibc/core/connection/v1/query");
Object.defineProperty(exports, "QueryClientConnectionsResponse", { enumerable: true, get: function () { return query_9.QueryClientConnectionsResponse; } });
const tx_8 = require("./types/ibc/core/connection/v1/tx");
Object.defineProperty(exports, "MsgConnectionOpenInitResponse", { enumerable: true, get: function () { return tx_8.MsgConnectionOpenInitResponse; } });
const query_10 = require("./types/ibc/core/connection/v1/query");
Object.defineProperty(exports, "QueryConnectionsRequest", { enumerable: true, get: function () { return query_10.QueryConnectionsRequest; } });
const query_11 = require("./types/ibc/core/connection/v1/query");
Object.defineProperty(exports, "QueryConnectionParamsResponse", { enumerable: true, get: function () { return query_11.QueryConnectionParamsResponse; } });
const tx_9 = require("./types/ibc/core/connection/v1/tx");
Object.defineProperty(exports, "MsgUpdateParams", { enumerable: true, get: function () { return tx_9.MsgUpdateParams; } });
const tx_10 = require("./types/ibc/core/connection/v1/tx");
Object.defineProperty(exports, "MsgConnectionOpenAck", { enumerable: true, get: function () { return tx_10.MsgConnectionOpenAck; } });
const query_12 = require("./types/ibc/core/connection/v1/query");
Object.defineProperty(exports, "QueryConnectionParamsRequest", { enumerable: true, get: function () { return query_12.QueryConnectionParamsRequest; } });
const connection_5 = require("./types/ibc/core/connection/v1/connection");
Object.defineProperty(exports, "IdentifiedConnection", { enumerable: true, get: function () { return connection_5.IdentifiedConnection; } });
const connection_6 = require("./types/ibc/core/connection/v1/connection");
Object.defineProperty(exports, "ConnectionPaths", { enumerable: true, get: function () { return connection_6.ConnectionPaths; } });
const connection_7 = require("./types/ibc/core/connection/v1/connection");
Object.defineProperty(exports, "Version", { enumerable: true, get: function () { return connection_7.Version; } });
exports.registry = new proto_signing_1.Registry(registry_1.msgTypes);
function getStructure(template) {
    const structure = { fields: [] };
    for (let [key, value] of Object.entries(template)) {
        let field = { name: key, type: typeof value };
        structure.fields.push(field);
    }
    return structure;
}
const defaultFee = {
    amount: [],
    gas: "200000",
};
const txClient = ({ signer, prefix, addr } = { addr: "http://localhost:26657", prefix: "cosmos" }) => {
    return {
        async sendMsgConnectionOpenConfirm({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgConnectionOpenConfirm: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgConnectionOpenConfirm({ value: tx_1.MsgConnectionOpenConfirm.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgConnectionOpenConfirm: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryConnectionClientStateResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryConnectionClientStateResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryConnectionClientStateResponse({ value: query_1.QueryConnectionClientStateResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryConnectionClientStateResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryConnectionClientStateRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryConnectionClientStateRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryConnectionClientStateRequest({ value: query_2.QueryConnectionClientStateRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryConnectionClientStateRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgConnectionOpenInit({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgConnectionOpenInit: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgConnectionOpenInit({ value: tx_2.MsgConnectionOpenInit.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgConnectionOpenInit: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendConnectionEnd({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendConnectionEnd: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.connectionEnd({ value: connection_1.ConnectionEnd.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendConnectionEnd: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendClientPaths({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendClientPaths: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.clientPaths({ value: connection_2.ClientPaths.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendClientPaths: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgConnectionOpenTry({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgConnectionOpenTry: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgConnectionOpenTry({ value: tx_3.MsgConnectionOpenTry.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgConnectionOpenTry: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryConnectionConsensusStateRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryConnectionConsensusStateRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryConnectionConsensusStateRequest({ value: query_3.QueryConnectionConsensusStateRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryConnectionConsensusStateRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendCounterparty({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendCounterparty: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.counterparty({ value: connection_3.Counterparty.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendCounterparty: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendParams({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendParams: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.params({ value: connection_4.Params.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendParams: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendGenesisState({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendGenesisState: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.genesisState({ value: genesis_1.GenesisState.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendGenesisState: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryConnectionConsensusStateResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryConnectionConsensusStateResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryConnectionConsensusStateResponse({ value: query_4.QueryConnectionConsensusStateResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryConnectionConsensusStateResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryConnectionResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryConnectionResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryConnectionResponse({ value: query_5.QueryConnectionResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryConnectionResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgConnectionOpenAckResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgConnectionOpenAckResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgConnectionOpenAckResponse({ value: tx_4.MsgConnectionOpenAckResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgConnectionOpenAckResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateParamsResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateParamsResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgUpdateParamsResponse({ value: tx_5.MsgUpdateParamsResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateParamsResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryConnectionRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryConnectionRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryConnectionRequest({ value: query_6.QueryConnectionRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryConnectionRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgConnectionOpenConfirmResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgConnectionOpenConfirmResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgConnectionOpenConfirmResponse({ value: tx_6.MsgConnectionOpenConfirmResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgConnectionOpenConfirmResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgConnectionOpenTryResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgConnectionOpenTryResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgConnectionOpenTryResponse({ value: tx_7.MsgConnectionOpenTryResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgConnectionOpenTryResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryConnectionsResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryConnectionsResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryConnectionsResponse({ value: query_7.QueryConnectionsResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryConnectionsResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryClientConnectionsRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryClientConnectionsRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryClientConnectionsRequest({ value: query_8.QueryClientConnectionsRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryClientConnectionsRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryClientConnectionsResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryClientConnectionsResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryClientConnectionsResponse({ value: query_9.QueryClientConnectionsResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryClientConnectionsResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgConnectionOpenInitResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgConnectionOpenInitResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgConnectionOpenInitResponse({ value: tx_8.MsgConnectionOpenInitResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgConnectionOpenInitResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryConnectionsRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryConnectionsRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryConnectionsRequest({ value: query_10.QueryConnectionsRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryConnectionsRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryConnectionParamsResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryConnectionParamsResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryConnectionParamsResponse({ value: query_11.QueryConnectionParamsResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryConnectionParamsResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateParams({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateParams: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgUpdateParams({ value: tx_9.MsgUpdateParams.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateParams: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgConnectionOpenAck({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgConnectionOpenAck: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgConnectionOpenAck({ value: tx_10.MsgConnectionOpenAck.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgConnectionOpenAck: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryConnectionParamsRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryConnectionParamsRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryConnectionParamsRequest({ value: query_12.QueryConnectionParamsRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryConnectionParamsRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendIdentifiedConnection({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendIdentifiedConnection: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.identifiedConnection({ value: connection_5.IdentifiedConnection.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendIdentifiedConnection: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendConnectionPaths({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendConnectionPaths: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.connectionPaths({ value: connection_6.ConnectionPaths.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendConnectionPaths: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendVersion({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendVersion: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.version({ value: connection_7.Version.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendVersion: Could not broadcast Tx: ' + e.message);
            }
        },
        msgConnectionOpenConfirm({ value }) {
            try {
                return { typeUrl: "/ibc.core.connection.v1.MsgConnectionOpenConfirm", value: tx_1.MsgConnectionOpenConfirm.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgConnectionOpenConfirm: Could not create message: ' + e.message);
            }
        },
        queryConnectionClientStateResponse({ value }) {
            try {
                return { typeUrl: "/ibc.core.connection.v1.QueryConnectionClientStateResponse", value: query_1.QueryConnectionClientStateResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryConnectionClientStateResponse: Could not create message: ' + e.message);
            }
        },
        queryConnectionClientStateRequest({ value }) {
            try {
                return { typeUrl: "/ibc.core.connection.v1.QueryConnectionClientStateRequest", value: query_2.QueryConnectionClientStateRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryConnectionClientStateRequest: Could not create message: ' + e.message);
            }
        },
        msgConnectionOpenInit({ value }) {
            try {
                return { typeUrl: "/ibc.core.connection.v1.MsgConnectionOpenInit", value: tx_2.MsgConnectionOpenInit.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgConnectionOpenInit: Could not create message: ' + e.message);
            }
        },
        connectionEnd({ value }) {
            try {
                return { typeUrl: "/ibc.core.connection.v1.ConnectionEnd", value: connection_1.ConnectionEnd.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:ConnectionEnd: Could not create message: ' + e.message);
            }
        },
        clientPaths({ value }) {
            try {
                return { typeUrl: "/ibc.core.connection.v1.ClientPaths", value: connection_2.ClientPaths.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:ClientPaths: Could not create message: ' + e.message);
            }
        },
        msgConnectionOpenTry({ value }) {
            try {
                return { typeUrl: "/ibc.core.connection.v1.MsgConnectionOpenTry", value: tx_3.MsgConnectionOpenTry.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgConnectionOpenTry: Could not create message: ' + e.message);
            }
        },
        queryConnectionConsensusStateRequest({ value }) {
            try {
                return { typeUrl: "/ibc.core.connection.v1.QueryConnectionConsensusStateRequest", value: query_3.QueryConnectionConsensusStateRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryConnectionConsensusStateRequest: Could not create message: ' + e.message);
            }
        },
        counterparty({ value }) {
            try {
                return { typeUrl: "/ibc.core.connection.v1.Counterparty", value: connection_3.Counterparty.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:Counterparty: Could not create message: ' + e.message);
            }
        },
        params({ value }) {
            try {
                return { typeUrl: "/ibc.core.connection.v1.Params", value: connection_4.Params.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:Params: Could not create message: ' + e.message);
            }
        },
        genesisState({ value }) {
            try {
                return { typeUrl: "/ibc.core.connection.v1.GenesisState", value: genesis_1.GenesisState.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:GenesisState: Could not create message: ' + e.message);
            }
        },
        queryConnectionConsensusStateResponse({ value }) {
            try {
                return { typeUrl: "/ibc.core.connection.v1.QueryConnectionConsensusStateResponse", value: query_4.QueryConnectionConsensusStateResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryConnectionConsensusStateResponse: Could not create message: ' + e.message);
            }
        },
        queryConnectionResponse({ value }) {
            try {
                return { typeUrl: "/ibc.core.connection.v1.QueryConnectionResponse", value: query_5.QueryConnectionResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryConnectionResponse: Could not create message: ' + e.message);
            }
        },
        msgConnectionOpenAckResponse({ value }) {
            try {
                return { typeUrl: "/ibc.core.connection.v1.MsgConnectionOpenAckResponse", value: tx_4.MsgConnectionOpenAckResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgConnectionOpenAckResponse: Could not create message: ' + e.message);
            }
        },
        msgUpdateParamsResponse({ value }) {
            try {
                return { typeUrl: "/ibc.core.connection.v1.MsgUpdateParamsResponse", value: tx_5.MsgUpdateParamsResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateParamsResponse: Could not create message: ' + e.message);
            }
        },
        queryConnectionRequest({ value }) {
            try {
                return { typeUrl: "/ibc.core.connection.v1.QueryConnectionRequest", value: query_6.QueryConnectionRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryConnectionRequest: Could not create message: ' + e.message);
            }
        },
        msgConnectionOpenConfirmResponse({ value }) {
            try {
                return { typeUrl: "/ibc.core.connection.v1.MsgConnectionOpenConfirmResponse", value: tx_6.MsgConnectionOpenConfirmResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgConnectionOpenConfirmResponse: Could not create message: ' + e.message);
            }
        },
        msgConnectionOpenTryResponse({ value }) {
            try {
                return { typeUrl: "/ibc.core.connection.v1.MsgConnectionOpenTryResponse", value: tx_7.MsgConnectionOpenTryResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgConnectionOpenTryResponse: Could not create message: ' + e.message);
            }
        },
        queryConnectionsResponse({ value }) {
            try {
                return { typeUrl: "/ibc.core.connection.v1.QueryConnectionsResponse", value: query_7.QueryConnectionsResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryConnectionsResponse: Could not create message: ' + e.message);
            }
        },
        queryClientConnectionsRequest({ value }) {
            try {
                return { typeUrl: "/ibc.core.connection.v1.QueryClientConnectionsRequest", value: query_8.QueryClientConnectionsRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryClientConnectionsRequest: Could not create message: ' + e.message);
            }
        },
        queryClientConnectionsResponse({ value }) {
            try {
                return { typeUrl: "/ibc.core.connection.v1.QueryClientConnectionsResponse", value: query_9.QueryClientConnectionsResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryClientConnectionsResponse: Could not create message: ' + e.message);
            }
        },
        msgConnectionOpenInitResponse({ value }) {
            try {
                return { typeUrl: "/ibc.core.connection.v1.MsgConnectionOpenInitResponse", value: tx_8.MsgConnectionOpenInitResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgConnectionOpenInitResponse: Could not create message: ' + e.message);
            }
        },
        queryConnectionsRequest({ value }) {
            try {
                return { typeUrl: "/ibc.core.connection.v1.QueryConnectionsRequest", value: query_10.QueryConnectionsRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryConnectionsRequest: Could not create message: ' + e.message);
            }
        },
        queryConnectionParamsResponse({ value }) {
            try {
                return { typeUrl: "/ibc.core.connection.v1.QueryConnectionParamsResponse", value: query_11.QueryConnectionParamsResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryConnectionParamsResponse: Could not create message: ' + e.message);
            }
        },
        msgUpdateParams({ value }) {
            try {
                return { typeUrl: "/ibc.core.connection.v1.MsgUpdateParams", value: tx_9.MsgUpdateParams.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateParams: Could not create message: ' + e.message);
            }
        },
        msgConnectionOpenAck({ value }) {
            try {
                return { typeUrl: "/ibc.core.connection.v1.MsgConnectionOpenAck", value: tx_10.MsgConnectionOpenAck.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgConnectionOpenAck: Could not create message: ' + e.message);
            }
        },
        queryConnectionParamsRequest({ value }) {
            try {
                return { typeUrl: "/ibc.core.connection.v1.QueryConnectionParamsRequest", value: query_12.QueryConnectionParamsRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryConnectionParamsRequest: Could not create message: ' + e.message);
            }
        },
        identifiedConnection({ value }) {
            try {
                return { typeUrl: "/ibc.core.connection.v1.IdentifiedConnection", value: connection_5.IdentifiedConnection.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:IdentifiedConnection: Could not create message: ' + e.message);
            }
        },
        connectionPaths({ value }) {
            try {
                return { typeUrl: "/ibc.core.connection.v1.ConnectionPaths", value: connection_6.ConnectionPaths.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:ConnectionPaths: Could not create message: ' + e.message);
            }
        },
        version({ value }) {
            try {
                return { typeUrl: "/ibc.core.connection.v1.Version", value: connection_7.Version.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:Version: Could not create message: ' + e.message);
            }
        },
    };
};
exports.txClient = txClient;
const queryClient = ({ addr: addr } = { addr: "http://localhost:1317" }) => {
    return new rest_1.Api({ baseURL: addr });
};
exports.queryClient = queryClient;
class SDKModule {
    constructor(client) {
        this.registry = [];
        this.query = (0, exports.queryClient)({ addr: client.env.apiURL });
        this.updateTX(client);
        this.structure = {};
        client.on('signer-changed', (signer) => {
            this.updateTX(client);
        });
    }
    updateTX(client) {
        const methods = (0, exports.txClient)({
            signer: client.signer,
            addr: client.env.rpcURL,
            prefix: client.env.prefix ?? "cosmos",
        });
        this.tx = methods;
        for (let m in methods) {
            this.tx[m] = methods[m].bind(this.tx);
        }
    }
}
;
const IgntModule = (test) => {
    return {
        module: {
            IbcCoreConnectionV1: new SDKModule(test)
        },
        registry: registry_1.msgTypes
    };
};
exports.default = IgntModule;
