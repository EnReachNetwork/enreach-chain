"use strict";
// Generated by Ignite ignite.com/cli
Object.defineProperty(exports, "__esModule", { value: true });
exports.queryClient = exports.txClient = exports.registry = exports.QueryConsensusStateHeightsRequest = exports.ClientConsensusStates = exports.MsgUpgradeClientResponse = exports.GenesisMetadata = exports.QueryConsensusStatesRequest = exports.MsgIBCSoftwareUpgradeResponse = exports.IdentifiedClientState = exports.QueryClientStatusResponse = exports.QueryConsensusStateHeightsResponse = exports.MsgRecoverClient = exports.UpgradeProposal = exports.QueryConsensusStateResponse = exports.QueryClientStateResponse = exports.Height = exports.QueryUpgradedClientStateResponse = exports.ConsensusStateWithHeight = exports.QueryConsensusStateRequest = exports.MsgCreateClientResponse = exports.MsgUpgradeClient = exports.QueryClientStatesResponse = exports.QueryClientStatesRequest = exports.MsgUpdateClientResponse = exports.IdentifiedGenesisMetadata = exports.QueryClientParamsResponse = exports.QueryClientParamsRequest = exports.QueryClientStatusRequest = exports.MsgUpdateParams = exports.MsgIBCSoftwareUpgrade = exports.MsgSubmitMisbehaviour = exports.Params = exports.QueryUpgradedConsensusStateRequest = exports.QueryUpgradedConsensusStateResponse = exports.QueryUpgradedClientStateRequest = exports.MsgRecoverClientResponse = exports.MsgSubmitMisbehaviourResponse = exports.ClientUpdateProposal = exports.QueryClientStateRequest = exports.MsgUpdateParamsResponse = exports.MsgUpdateClient = exports.MsgCreateClient = exports.GenesisState = exports.QueryConsensusStatesResponse = void 0;
const stargate_1 = require("@cosmjs/stargate");
const proto_signing_1 = require("@cosmjs/proto-signing");
const registry_1 = require("./registry");
const rest_1 = require("./rest");
const query_1 = require("./types/ibc/core/client/v1/query");
Object.defineProperty(exports, "QueryConsensusStatesResponse", { enumerable: true, get: function () { return query_1.QueryConsensusStatesResponse; } });
const genesis_1 = require("./types/ibc/core/client/v1/genesis");
Object.defineProperty(exports, "GenesisState", { enumerable: true, get: function () { return genesis_1.GenesisState; } });
const tx_1 = require("./types/ibc/core/client/v1/tx");
Object.defineProperty(exports, "MsgCreateClient", { enumerable: true, get: function () { return tx_1.MsgCreateClient; } });
const tx_2 = require("./types/ibc/core/client/v1/tx");
Object.defineProperty(exports, "MsgUpdateClient", { enumerable: true, get: function () { return tx_2.MsgUpdateClient; } });
const tx_3 = require("./types/ibc/core/client/v1/tx");
Object.defineProperty(exports, "MsgUpdateParamsResponse", { enumerable: true, get: function () { return tx_3.MsgUpdateParamsResponse; } });
const query_2 = require("./types/ibc/core/client/v1/query");
Object.defineProperty(exports, "QueryClientStateRequest", { enumerable: true, get: function () { return query_2.QueryClientStateRequest; } });
const client_1 = require("./types/ibc/core/client/v1/client");
Object.defineProperty(exports, "ClientUpdateProposal", { enumerable: true, get: function () { return client_1.ClientUpdateProposal; } });
const tx_4 = require("./types/ibc/core/client/v1/tx");
Object.defineProperty(exports, "MsgSubmitMisbehaviourResponse", { enumerable: true, get: function () { return tx_4.MsgSubmitMisbehaviourResponse; } });
const tx_5 = require("./types/ibc/core/client/v1/tx");
Object.defineProperty(exports, "MsgRecoverClientResponse", { enumerable: true, get: function () { return tx_5.MsgRecoverClientResponse; } });
const query_3 = require("./types/ibc/core/client/v1/query");
Object.defineProperty(exports, "QueryUpgradedClientStateRequest", { enumerable: true, get: function () { return query_3.QueryUpgradedClientStateRequest; } });
const query_4 = require("./types/ibc/core/client/v1/query");
Object.defineProperty(exports, "QueryUpgradedConsensusStateResponse", { enumerable: true, get: function () { return query_4.QueryUpgradedConsensusStateResponse; } });
const query_5 = require("./types/ibc/core/client/v1/query");
Object.defineProperty(exports, "QueryUpgradedConsensusStateRequest", { enumerable: true, get: function () { return query_5.QueryUpgradedConsensusStateRequest; } });
const client_2 = require("./types/ibc/core/client/v1/client");
Object.defineProperty(exports, "Params", { enumerable: true, get: function () { return client_2.Params; } });
const tx_6 = require("./types/ibc/core/client/v1/tx");
Object.defineProperty(exports, "MsgSubmitMisbehaviour", { enumerable: true, get: function () { return tx_6.MsgSubmitMisbehaviour; } });
const tx_7 = require("./types/ibc/core/client/v1/tx");
Object.defineProperty(exports, "MsgIBCSoftwareUpgrade", { enumerable: true, get: function () { return tx_7.MsgIBCSoftwareUpgrade; } });
const tx_8 = require("./types/ibc/core/client/v1/tx");
Object.defineProperty(exports, "MsgUpdateParams", { enumerable: true, get: function () { return tx_8.MsgUpdateParams; } });
const query_6 = require("./types/ibc/core/client/v1/query");
Object.defineProperty(exports, "QueryClientStatusRequest", { enumerable: true, get: function () { return query_6.QueryClientStatusRequest; } });
const query_7 = require("./types/ibc/core/client/v1/query");
Object.defineProperty(exports, "QueryClientParamsRequest", { enumerable: true, get: function () { return query_7.QueryClientParamsRequest; } });
const query_8 = require("./types/ibc/core/client/v1/query");
Object.defineProperty(exports, "QueryClientParamsResponse", { enumerable: true, get: function () { return query_8.QueryClientParamsResponse; } });
const genesis_2 = require("./types/ibc/core/client/v1/genesis");
Object.defineProperty(exports, "IdentifiedGenesisMetadata", { enumerable: true, get: function () { return genesis_2.IdentifiedGenesisMetadata; } });
const tx_9 = require("./types/ibc/core/client/v1/tx");
Object.defineProperty(exports, "MsgUpdateClientResponse", { enumerable: true, get: function () { return tx_9.MsgUpdateClientResponse; } });
const query_9 = require("./types/ibc/core/client/v1/query");
Object.defineProperty(exports, "QueryClientStatesRequest", { enumerable: true, get: function () { return query_9.QueryClientStatesRequest; } });
const query_10 = require("./types/ibc/core/client/v1/query");
Object.defineProperty(exports, "QueryClientStatesResponse", { enumerable: true, get: function () { return query_10.QueryClientStatesResponse; } });
const tx_10 = require("./types/ibc/core/client/v1/tx");
Object.defineProperty(exports, "MsgUpgradeClient", { enumerable: true, get: function () { return tx_10.MsgUpgradeClient; } });
const tx_11 = require("./types/ibc/core/client/v1/tx");
Object.defineProperty(exports, "MsgCreateClientResponse", { enumerable: true, get: function () { return tx_11.MsgCreateClientResponse; } });
const query_11 = require("./types/ibc/core/client/v1/query");
Object.defineProperty(exports, "QueryConsensusStateRequest", { enumerable: true, get: function () { return query_11.QueryConsensusStateRequest; } });
const client_3 = require("./types/ibc/core/client/v1/client");
Object.defineProperty(exports, "ConsensusStateWithHeight", { enumerable: true, get: function () { return client_3.ConsensusStateWithHeight; } });
const query_12 = require("./types/ibc/core/client/v1/query");
Object.defineProperty(exports, "QueryUpgradedClientStateResponse", { enumerable: true, get: function () { return query_12.QueryUpgradedClientStateResponse; } });
const client_4 = require("./types/ibc/core/client/v1/client");
Object.defineProperty(exports, "Height", { enumerable: true, get: function () { return client_4.Height; } });
const query_13 = require("./types/ibc/core/client/v1/query");
Object.defineProperty(exports, "QueryClientStateResponse", { enumerable: true, get: function () { return query_13.QueryClientStateResponse; } });
const query_14 = require("./types/ibc/core/client/v1/query");
Object.defineProperty(exports, "QueryConsensusStateResponse", { enumerable: true, get: function () { return query_14.QueryConsensusStateResponse; } });
const client_5 = require("./types/ibc/core/client/v1/client");
Object.defineProperty(exports, "UpgradeProposal", { enumerable: true, get: function () { return client_5.UpgradeProposal; } });
const tx_12 = require("./types/ibc/core/client/v1/tx");
Object.defineProperty(exports, "MsgRecoverClient", { enumerable: true, get: function () { return tx_12.MsgRecoverClient; } });
const query_15 = require("./types/ibc/core/client/v1/query");
Object.defineProperty(exports, "QueryConsensusStateHeightsResponse", { enumerable: true, get: function () { return query_15.QueryConsensusStateHeightsResponse; } });
const query_16 = require("./types/ibc/core/client/v1/query");
Object.defineProperty(exports, "QueryClientStatusResponse", { enumerable: true, get: function () { return query_16.QueryClientStatusResponse; } });
const client_6 = require("./types/ibc/core/client/v1/client");
Object.defineProperty(exports, "IdentifiedClientState", { enumerable: true, get: function () { return client_6.IdentifiedClientState; } });
const tx_13 = require("./types/ibc/core/client/v1/tx");
Object.defineProperty(exports, "MsgIBCSoftwareUpgradeResponse", { enumerable: true, get: function () { return tx_13.MsgIBCSoftwareUpgradeResponse; } });
const query_17 = require("./types/ibc/core/client/v1/query");
Object.defineProperty(exports, "QueryConsensusStatesRequest", { enumerable: true, get: function () { return query_17.QueryConsensusStatesRequest; } });
const genesis_3 = require("./types/ibc/core/client/v1/genesis");
Object.defineProperty(exports, "GenesisMetadata", { enumerable: true, get: function () { return genesis_3.GenesisMetadata; } });
const tx_14 = require("./types/ibc/core/client/v1/tx");
Object.defineProperty(exports, "MsgUpgradeClientResponse", { enumerable: true, get: function () { return tx_14.MsgUpgradeClientResponse; } });
const client_7 = require("./types/ibc/core/client/v1/client");
Object.defineProperty(exports, "ClientConsensusStates", { enumerable: true, get: function () { return client_7.ClientConsensusStates; } });
const query_18 = require("./types/ibc/core/client/v1/query");
Object.defineProperty(exports, "QueryConsensusStateHeightsRequest", { enumerable: true, get: function () { return query_18.QueryConsensusStateHeightsRequest; } });
exports.registry = new proto_signing_1.Registry(registry_1.msgTypes);
function getStructure(template) {
    const structure = { fields: [] };
    for (let [key, value] of Object.entries(template)) {
        let field = { name: key, type: typeof value };
        structure.fields.push(field);
    }
    return structure;
}
const defaultFee = {
    amount: [],
    gas: "200000",
};
const txClient = ({ signer, prefix, addr } = { addr: "http://localhost:26657", prefix: "cosmos" }) => {
    return {
        async sendQueryConsensusStatesResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryConsensusStatesResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryConsensusStatesResponse({ value: query_1.QueryConsensusStatesResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryConsensusStatesResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendGenesisState({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendGenesisState: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.genesisState({ value: genesis_1.GenesisState.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendGenesisState: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgCreateClient({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgCreateClient: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgCreateClient({ value: tx_1.MsgCreateClient.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgCreateClient: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateClient({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateClient: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgUpdateClient({ value: tx_2.MsgUpdateClient.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateClient: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateParamsResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateParamsResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgUpdateParamsResponse({ value: tx_3.MsgUpdateParamsResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateParamsResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryClientStateRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryClientStateRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryClientStateRequest({ value: query_2.QueryClientStateRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryClientStateRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendClientUpdateProposal({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendClientUpdateProposal: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.clientUpdateProposal({ value: client_1.ClientUpdateProposal.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendClientUpdateProposal: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgSubmitMisbehaviourResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgSubmitMisbehaviourResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgSubmitMisbehaviourResponse({ value: tx_4.MsgSubmitMisbehaviourResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgSubmitMisbehaviourResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgRecoverClientResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgRecoverClientResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgRecoverClientResponse({ value: tx_5.MsgRecoverClientResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgRecoverClientResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryUpgradedClientStateRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryUpgradedClientStateRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryUpgradedClientStateRequest({ value: query_3.QueryUpgradedClientStateRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryUpgradedClientStateRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryUpgradedConsensusStateResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryUpgradedConsensusStateResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryUpgradedConsensusStateResponse({ value: query_4.QueryUpgradedConsensusStateResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryUpgradedConsensusStateResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryUpgradedConsensusStateRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryUpgradedConsensusStateRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryUpgradedConsensusStateRequest({ value: query_5.QueryUpgradedConsensusStateRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryUpgradedConsensusStateRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendParams({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendParams: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.params({ value: client_2.Params.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendParams: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgSubmitMisbehaviour({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgSubmitMisbehaviour: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgSubmitMisbehaviour({ value: tx_6.MsgSubmitMisbehaviour.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgSubmitMisbehaviour: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgIBCSoftwareUpgrade({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgIBCSoftwareUpgrade: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgIbcsoftwareUpgrade({ value: tx_7.MsgIBCSoftwareUpgrade.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgIBCSoftwareUpgrade: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateParams({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateParams: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgUpdateParams({ value: tx_8.MsgUpdateParams.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateParams: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryClientStatusRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryClientStatusRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryClientStatusRequest({ value: query_6.QueryClientStatusRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryClientStatusRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryClientParamsRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryClientParamsRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryClientParamsRequest({ value: query_7.QueryClientParamsRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryClientParamsRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryClientParamsResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryClientParamsResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryClientParamsResponse({ value: query_8.QueryClientParamsResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryClientParamsResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendIdentifiedGenesisMetadata({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendIdentifiedGenesisMetadata: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.identifiedGenesisMetadata({ value: genesis_2.IdentifiedGenesisMetadata.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendIdentifiedGenesisMetadata: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateClientResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateClientResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgUpdateClientResponse({ value: tx_9.MsgUpdateClientResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateClientResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryClientStatesRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryClientStatesRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryClientStatesRequest({ value: query_9.QueryClientStatesRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryClientStatesRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryClientStatesResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryClientStatesResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryClientStatesResponse({ value: query_10.QueryClientStatesResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryClientStatesResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpgradeClient({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpgradeClient: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgUpgradeClient({ value: tx_10.MsgUpgradeClient.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpgradeClient: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgCreateClientResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgCreateClientResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgCreateClientResponse({ value: tx_11.MsgCreateClientResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgCreateClientResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryConsensusStateRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryConsensusStateRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryConsensusStateRequest({ value: query_11.QueryConsensusStateRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryConsensusStateRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendConsensusStateWithHeight({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendConsensusStateWithHeight: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.consensusStateWithHeight({ value: client_3.ConsensusStateWithHeight.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendConsensusStateWithHeight: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryUpgradedClientStateResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryUpgradedClientStateResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryUpgradedClientStateResponse({ value: query_12.QueryUpgradedClientStateResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryUpgradedClientStateResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendHeight({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendHeight: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.height({ value: client_4.Height.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendHeight: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryClientStateResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryClientStateResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryClientStateResponse({ value: query_13.QueryClientStateResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryClientStateResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryConsensusStateResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryConsensusStateResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryConsensusStateResponse({ value: query_14.QueryConsensusStateResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryConsensusStateResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendUpgradeProposal({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendUpgradeProposal: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.upgradeProposal({ value: client_5.UpgradeProposal.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendUpgradeProposal: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgRecoverClient({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgRecoverClient: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgRecoverClient({ value: tx_12.MsgRecoverClient.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgRecoverClient: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryConsensusStateHeightsResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryConsensusStateHeightsResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryConsensusStateHeightsResponse({ value: query_15.QueryConsensusStateHeightsResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryConsensusStateHeightsResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryClientStatusResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryClientStatusResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryClientStatusResponse({ value: query_16.QueryClientStatusResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryClientStatusResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendIdentifiedClientState({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendIdentifiedClientState: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.identifiedClientState({ value: client_6.IdentifiedClientState.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendIdentifiedClientState: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgIBCSoftwareUpgradeResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgIBCSoftwareUpgradeResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgIbcsoftwareUpgradeResponse({ value: tx_13.MsgIBCSoftwareUpgradeResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgIBCSoftwareUpgradeResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryConsensusStatesRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryConsensusStatesRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryConsensusStatesRequest({ value: query_17.QueryConsensusStatesRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryConsensusStatesRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendGenesisMetadata({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendGenesisMetadata: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.genesisMetadata({ value: genesis_3.GenesisMetadata.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendGenesisMetadata: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpgradeClientResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpgradeClientResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgUpgradeClientResponse({ value: tx_14.MsgUpgradeClientResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpgradeClientResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendClientConsensusStates({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendClientConsensusStates: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.clientConsensusStates({ value: client_7.ClientConsensusStates.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendClientConsensusStates: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryConsensusStateHeightsRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryConsensusStateHeightsRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryConsensusStateHeightsRequest({ value: query_18.QueryConsensusStateHeightsRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryConsensusStateHeightsRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        queryConsensusStatesResponse({ value }) {
            try {
                return { typeUrl: "/ibc.core.client.v1.QueryConsensusStatesResponse", value: query_1.QueryConsensusStatesResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryConsensusStatesResponse: Could not create message: ' + e.message);
            }
        },
        genesisState({ value }) {
            try {
                return { typeUrl: "/ibc.core.client.v1.GenesisState", value: genesis_1.GenesisState.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:GenesisState: Could not create message: ' + e.message);
            }
        },
        msgCreateClient({ value }) {
            try {
                return { typeUrl: "/ibc.core.client.v1.MsgCreateClient", value: tx_1.MsgCreateClient.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgCreateClient: Could not create message: ' + e.message);
            }
        },
        msgUpdateClient({ value }) {
            try {
                return { typeUrl: "/ibc.core.client.v1.MsgUpdateClient", value: tx_2.MsgUpdateClient.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateClient: Could not create message: ' + e.message);
            }
        },
        msgUpdateParamsResponse({ value }) {
            try {
                return { typeUrl: "/ibc.core.client.v1.MsgUpdateParamsResponse", value: tx_3.MsgUpdateParamsResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateParamsResponse: Could not create message: ' + e.message);
            }
        },
        queryClientStateRequest({ value }) {
            try {
                return { typeUrl: "/ibc.core.client.v1.QueryClientStateRequest", value: query_2.QueryClientStateRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryClientStateRequest: Could not create message: ' + e.message);
            }
        },
        clientUpdateProposal({ value }) {
            try {
                return { typeUrl: "/ibc.core.client.v1.ClientUpdateProposal", value: client_1.ClientUpdateProposal.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:ClientUpdateProposal: Could not create message: ' + e.message);
            }
        },
        msgSubmitMisbehaviourResponse({ value }) {
            try {
                return { typeUrl: "/ibc.core.client.v1.MsgSubmitMisbehaviourResponse", value: tx_4.MsgSubmitMisbehaviourResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgSubmitMisbehaviourResponse: Could not create message: ' + e.message);
            }
        },
        msgRecoverClientResponse({ value }) {
            try {
                return { typeUrl: "/ibc.core.client.v1.MsgRecoverClientResponse", value: tx_5.MsgRecoverClientResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgRecoverClientResponse: Could not create message: ' + e.message);
            }
        },
        queryUpgradedClientStateRequest({ value }) {
            try {
                return { typeUrl: "/ibc.core.client.v1.QueryUpgradedClientStateRequest", value: query_3.QueryUpgradedClientStateRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryUpgradedClientStateRequest: Could not create message: ' + e.message);
            }
        },
        queryUpgradedConsensusStateResponse({ value }) {
            try {
                return { typeUrl: "/ibc.core.client.v1.QueryUpgradedConsensusStateResponse", value: query_4.QueryUpgradedConsensusStateResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryUpgradedConsensusStateResponse: Could not create message: ' + e.message);
            }
        },
        queryUpgradedConsensusStateRequest({ value }) {
            try {
                return { typeUrl: "/ibc.core.client.v1.QueryUpgradedConsensusStateRequest", value: query_5.QueryUpgradedConsensusStateRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryUpgradedConsensusStateRequest: Could not create message: ' + e.message);
            }
        },
        params({ value }) {
            try {
                return { typeUrl: "/ibc.core.client.v1.Params", value: client_2.Params.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:Params: Could not create message: ' + e.message);
            }
        },
        msgSubmitMisbehaviour({ value }) {
            try {
                return { typeUrl: "/ibc.core.client.v1.MsgSubmitMisbehaviour", value: tx_6.MsgSubmitMisbehaviour.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgSubmitMisbehaviour: Could not create message: ' + e.message);
            }
        },
        msgIbcsoftwareUpgrade({ value }) {
            try {
                return { typeUrl: "/ibc.core.client.v1.MsgIBCSoftwareUpgrade", value: tx_7.MsgIBCSoftwareUpgrade.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgIBCSoftwareUpgrade: Could not create message: ' + e.message);
            }
        },
        msgUpdateParams({ value }) {
            try {
                return { typeUrl: "/ibc.core.client.v1.MsgUpdateParams", value: tx_8.MsgUpdateParams.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateParams: Could not create message: ' + e.message);
            }
        },
        queryClientStatusRequest({ value }) {
            try {
                return { typeUrl: "/ibc.core.client.v1.QueryClientStatusRequest", value: query_6.QueryClientStatusRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryClientStatusRequest: Could not create message: ' + e.message);
            }
        },
        queryClientParamsRequest({ value }) {
            try {
                return { typeUrl: "/ibc.core.client.v1.QueryClientParamsRequest", value: query_7.QueryClientParamsRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryClientParamsRequest: Could not create message: ' + e.message);
            }
        },
        queryClientParamsResponse({ value }) {
            try {
                return { typeUrl: "/ibc.core.client.v1.QueryClientParamsResponse", value: query_8.QueryClientParamsResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryClientParamsResponse: Could not create message: ' + e.message);
            }
        },
        identifiedGenesisMetadata({ value }) {
            try {
                return { typeUrl: "/ibc.core.client.v1.IdentifiedGenesisMetadata", value: genesis_2.IdentifiedGenesisMetadata.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:IdentifiedGenesisMetadata: Could not create message: ' + e.message);
            }
        },
        msgUpdateClientResponse({ value }) {
            try {
                return { typeUrl: "/ibc.core.client.v1.MsgUpdateClientResponse", value: tx_9.MsgUpdateClientResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateClientResponse: Could not create message: ' + e.message);
            }
        },
        queryClientStatesRequest({ value }) {
            try {
                return { typeUrl: "/ibc.core.client.v1.QueryClientStatesRequest", value: query_9.QueryClientStatesRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryClientStatesRequest: Could not create message: ' + e.message);
            }
        },
        queryClientStatesResponse({ value }) {
            try {
                return { typeUrl: "/ibc.core.client.v1.QueryClientStatesResponse", value: query_10.QueryClientStatesResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryClientStatesResponse: Could not create message: ' + e.message);
            }
        },
        msgUpgradeClient({ value }) {
            try {
                return { typeUrl: "/ibc.core.client.v1.MsgUpgradeClient", value: tx_10.MsgUpgradeClient.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpgradeClient: Could not create message: ' + e.message);
            }
        },
        msgCreateClientResponse({ value }) {
            try {
                return { typeUrl: "/ibc.core.client.v1.MsgCreateClientResponse", value: tx_11.MsgCreateClientResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgCreateClientResponse: Could not create message: ' + e.message);
            }
        },
        queryConsensusStateRequest({ value }) {
            try {
                return { typeUrl: "/ibc.core.client.v1.QueryConsensusStateRequest", value: query_11.QueryConsensusStateRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryConsensusStateRequest: Could not create message: ' + e.message);
            }
        },
        consensusStateWithHeight({ value }) {
            try {
                return { typeUrl: "/ibc.core.client.v1.ConsensusStateWithHeight", value: client_3.ConsensusStateWithHeight.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:ConsensusStateWithHeight: Could not create message: ' + e.message);
            }
        },
        queryUpgradedClientStateResponse({ value }) {
            try {
                return { typeUrl: "/ibc.core.client.v1.QueryUpgradedClientStateResponse", value: query_12.QueryUpgradedClientStateResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryUpgradedClientStateResponse: Could not create message: ' + e.message);
            }
        },
        height({ value }) {
            try {
                return { typeUrl: "/ibc.core.client.v1.Height", value: client_4.Height.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:Height: Could not create message: ' + e.message);
            }
        },
        queryClientStateResponse({ value }) {
            try {
                return { typeUrl: "/ibc.core.client.v1.QueryClientStateResponse", value: query_13.QueryClientStateResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryClientStateResponse: Could not create message: ' + e.message);
            }
        },
        queryConsensusStateResponse({ value }) {
            try {
                return { typeUrl: "/ibc.core.client.v1.QueryConsensusStateResponse", value: query_14.QueryConsensusStateResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryConsensusStateResponse: Could not create message: ' + e.message);
            }
        },
        upgradeProposal({ value }) {
            try {
                return { typeUrl: "/ibc.core.client.v1.UpgradeProposal", value: client_5.UpgradeProposal.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:UpgradeProposal: Could not create message: ' + e.message);
            }
        },
        msgRecoverClient({ value }) {
            try {
                return { typeUrl: "/ibc.core.client.v1.MsgRecoverClient", value: tx_12.MsgRecoverClient.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgRecoverClient: Could not create message: ' + e.message);
            }
        },
        queryConsensusStateHeightsResponse({ value }) {
            try {
                return { typeUrl: "/ibc.core.client.v1.QueryConsensusStateHeightsResponse", value: query_15.QueryConsensusStateHeightsResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryConsensusStateHeightsResponse: Could not create message: ' + e.message);
            }
        },
        queryClientStatusResponse({ value }) {
            try {
                return { typeUrl: "/ibc.core.client.v1.QueryClientStatusResponse", value: query_16.QueryClientStatusResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryClientStatusResponse: Could not create message: ' + e.message);
            }
        },
        identifiedClientState({ value }) {
            try {
                return { typeUrl: "/ibc.core.client.v1.IdentifiedClientState", value: client_6.IdentifiedClientState.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:IdentifiedClientState: Could not create message: ' + e.message);
            }
        },
        msgIbcsoftwareUpgradeResponse({ value }) {
            try {
                return { typeUrl: "/ibc.core.client.v1.MsgIBCSoftwareUpgradeResponse", value: tx_13.MsgIBCSoftwareUpgradeResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgIBCSoftwareUpgradeResponse: Could not create message: ' + e.message);
            }
        },
        queryConsensusStatesRequest({ value }) {
            try {
                return { typeUrl: "/ibc.core.client.v1.QueryConsensusStatesRequest", value: query_17.QueryConsensusStatesRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryConsensusStatesRequest: Could not create message: ' + e.message);
            }
        },
        genesisMetadata({ value }) {
            try {
                return { typeUrl: "/ibc.core.client.v1.GenesisMetadata", value: genesis_3.GenesisMetadata.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:GenesisMetadata: Could not create message: ' + e.message);
            }
        },
        msgUpgradeClientResponse({ value }) {
            try {
                return { typeUrl: "/ibc.core.client.v1.MsgUpgradeClientResponse", value: tx_14.MsgUpgradeClientResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpgradeClientResponse: Could not create message: ' + e.message);
            }
        },
        clientConsensusStates({ value }) {
            try {
                return { typeUrl: "/ibc.core.client.v1.ClientConsensusStates", value: client_7.ClientConsensusStates.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:ClientConsensusStates: Could not create message: ' + e.message);
            }
        },
        queryConsensusStateHeightsRequest({ value }) {
            try {
                return { typeUrl: "/ibc.core.client.v1.QueryConsensusStateHeightsRequest", value: query_18.QueryConsensusStateHeightsRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryConsensusStateHeightsRequest: Could not create message: ' + e.message);
            }
        },
    };
};
exports.txClient = txClient;
const queryClient = ({ addr: addr } = { addr: "http://localhost:1317" }) => {
    return new rest_1.Api({ baseURL: addr });
};
exports.queryClient = queryClient;
class SDKModule {
    constructor(client) {
        this.registry = [];
        this.query = (0, exports.queryClient)({ addr: client.env.apiURL });
        this.updateTX(client);
        this.structure = {};
        client.on('signer-changed', (signer) => {
            this.updateTX(client);
        });
    }
    updateTX(client) {
        const methods = (0, exports.txClient)({
            signer: client.signer,
            addr: client.env.rpcURL,
            prefix: client.env.prefix ?? "cosmos",
        });
        this.tx = methods;
        for (let m in methods) {
            this.tx[m] = methods[m].bind(this.tx);
        }
    }
}
;
const IgntModule = (test) => {
    return {
        module: {
            IbcCoreClientV1: new SDKModule(test)
        },
        registry: registry_1.msgTypes
    };
};
exports.default = IgntModule;
