"use strict";
// Generated by Ignite ignite.com/cli
Object.defineProperty(exports, "__esModule", { value: true });
exports.queryClient = exports.txClient = exports.registry = exports.GenericAuthorization = exports.QueryGranterGrantsRequest = exports.MsgGrant = exports.MsgRevokeResponse = exports.MsgRevoke = exports.MsgGrantResponse = exports.EventRevoke = exports.MsgExecResponse = exports.QueryGrantsRequest = exports.EventGrant = exports.GrantAuthorization = exports.Grant = exports.QueryGranteeGrantsRequest = exports.QueryGranterGrantsResponse = exports.QueryGrantsResponse = exports.QueryGranteeGrantsResponse = exports.MsgExec = exports.GenesisState = exports.GrantQueueItem = void 0;
const stargate_1 = require("@cosmjs/stargate");
const proto_signing_1 = require("@cosmjs/proto-signing");
const registry_1 = require("./registry");
const rest_1 = require("./rest");
const authz_1 = require("./types/cosmos/authz/v1beta1/authz");
Object.defineProperty(exports, "GrantQueueItem", { enumerable: true, get: function () { return authz_1.GrantQueueItem; } });
const genesis_1 = require("./types/cosmos/authz/v1beta1/genesis");
Object.defineProperty(exports, "GenesisState", { enumerable: true, get: function () { return genesis_1.GenesisState; } });
const tx_1 = require("./types/cosmos/authz/v1beta1/tx");
Object.defineProperty(exports, "MsgExec", { enumerable: true, get: function () { return tx_1.MsgExec; } });
const query_1 = require("./types/cosmos/authz/v1beta1/query");
Object.defineProperty(exports, "QueryGranteeGrantsResponse", { enumerable: true, get: function () { return query_1.QueryGranteeGrantsResponse; } });
const query_2 = require("./types/cosmos/authz/v1beta1/query");
Object.defineProperty(exports, "QueryGrantsResponse", { enumerable: true, get: function () { return query_2.QueryGrantsResponse; } });
const query_3 = require("./types/cosmos/authz/v1beta1/query");
Object.defineProperty(exports, "QueryGranterGrantsResponse", { enumerable: true, get: function () { return query_3.QueryGranterGrantsResponse; } });
const query_4 = require("./types/cosmos/authz/v1beta1/query");
Object.defineProperty(exports, "QueryGranteeGrantsRequest", { enumerable: true, get: function () { return query_4.QueryGranteeGrantsRequest; } });
const authz_2 = require("./types/cosmos/authz/v1beta1/authz");
Object.defineProperty(exports, "Grant", { enumerable: true, get: function () { return authz_2.Grant; } });
const authz_3 = require("./types/cosmos/authz/v1beta1/authz");
Object.defineProperty(exports, "GrantAuthorization", { enumerable: true, get: function () { return authz_3.GrantAuthorization; } });
const event_1 = require("./types/cosmos/authz/v1beta1/event");
Object.defineProperty(exports, "EventGrant", { enumerable: true, get: function () { return event_1.EventGrant; } });
const query_5 = require("./types/cosmos/authz/v1beta1/query");
Object.defineProperty(exports, "QueryGrantsRequest", { enumerable: true, get: function () { return query_5.QueryGrantsRequest; } });
const tx_2 = require("./types/cosmos/authz/v1beta1/tx");
Object.defineProperty(exports, "MsgExecResponse", { enumerable: true, get: function () { return tx_2.MsgExecResponse; } });
const event_2 = require("./types/cosmos/authz/v1beta1/event");
Object.defineProperty(exports, "EventRevoke", { enumerable: true, get: function () { return event_2.EventRevoke; } });
const tx_3 = require("./types/cosmos/authz/v1beta1/tx");
Object.defineProperty(exports, "MsgGrantResponse", { enumerable: true, get: function () { return tx_3.MsgGrantResponse; } });
const tx_4 = require("./types/cosmos/authz/v1beta1/tx");
Object.defineProperty(exports, "MsgRevoke", { enumerable: true, get: function () { return tx_4.MsgRevoke; } });
const tx_5 = require("./types/cosmos/authz/v1beta1/tx");
Object.defineProperty(exports, "MsgRevokeResponse", { enumerable: true, get: function () { return tx_5.MsgRevokeResponse; } });
const tx_6 = require("./types/cosmos/authz/v1beta1/tx");
Object.defineProperty(exports, "MsgGrant", { enumerable: true, get: function () { return tx_6.MsgGrant; } });
const query_6 = require("./types/cosmos/authz/v1beta1/query");
Object.defineProperty(exports, "QueryGranterGrantsRequest", { enumerable: true, get: function () { return query_6.QueryGranterGrantsRequest; } });
const authz_4 = require("./types/cosmos/authz/v1beta1/authz");
Object.defineProperty(exports, "GenericAuthorization", { enumerable: true, get: function () { return authz_4.GenericAuthorization; } });
exports.registry = new proto_signing_1.Registry(registry_1.msgTypes);
function getStructure(template) {
    const structure = { fields: [] };
    for (let [key, value] of Object.entries(template)) {
        let field = { name: key, type: typeof value };
        structure.fields.push(field);
    }
    return structure;
}
const defaultFee = {
    amount: [],
    gas: "200000",
};
const txClient = ({ signer, prefix, addr } = { addr: "http://localhost:26657", prefix: "cosmos" }) => {
    return {
        async sendGrantQueueItem({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendGrantQueueItem: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.grantQueueItem({ value: authz_1.GrantQueueItem.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendGrantQueueItem: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendGenesisState({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendGenesisState: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.genesisState({ value: genesis_1.GenesisState.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendGenesisState: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgExec({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgExec: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgExec({ value: tx_1.MsgExec.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgExec: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGranteeGrantsResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGranteeGrantsResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGranteeGrantsResponse({ value: query_1.QueryGranteeGrantsResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGranteeGrantsResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGrantsResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGrantsResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGrantsResponse({ value: query_2.QueryGrantsResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGrantsResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGranterGrantsResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGranterGrantsResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGranterGrantsResponse({ value: query_3.QueryGranterGrantsResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGranterGrantsResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGranteeGrantsRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGranteeGrantsRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGranteeGrantsRequest({ value: query_4.QueryGranteeGrantsRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGranteeGrantsRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendGrant({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendGrant: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.grant({ value: authz_2.Grant.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendGrant: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendGrantAuthorization({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendGrantAuthorization: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.grantAuthorization({ value: authz_3.GrantAuthorization.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendGrantAuthorization: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendEventGrant({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendEventGrant: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.eventGrant({ value: event_1.EventGrant.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendEventGrant: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGrantsRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGrantsRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGrantsRequest({ value: query_5.QueryGrantsRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGrantsRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgExecResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgExecResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgExecResponse({ value: tx_2.MsgExecResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgExecResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendEventRevoke({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendEventRevoke: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.eventRevoke({ value: event_2.EventRevoke.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendEventRevoke: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgGrantResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgGrantResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgGrantResponse({ value: tx_3.MsgGrantResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgGrantResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgRevoke({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgRevoke: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgRevoke({ value: tx_4.MsgRevoke.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgRevoke: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgRevokeResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgRevokeResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgRevokeResponse({ value: tx_5.MsgRevokeResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgRevokeResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgGrant({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgGrant: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgGrant({ value: tx_6.MsgGrant.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgGrant: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGranterGrantsRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGranterGrantsRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGranterGrantsRequest({ value: query_6.QueryGranterGrantsRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGranterGrantsRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendGenericAuthorization({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendGenericAuthorization: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.genericAuthorization({ value: authz_4.GenericAuthorization.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendGenericAuthorization: Could not broadcast Tx: ' + e.message);
            }
        },
        grantQueueItem({ value }) {
            try {
                return { typeUrl: "/cosmos.authz.v1beta1.GrantQueueItem", value: authz_1.GrantQueueItem.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:GrantQueueItem: Could not create message: ' + e.message);
            }
        },
        genesisState({ value }) {
            try {
                return { typeUrl: "/cosmos.authz.v1beta1.GenesisState", value: genesis_1.GenesisState.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:GenesisState: Could not create message: ' + e.message);
            }
        },
        msgExec({ value }) {
            try {
                return { typeUrl: "/cosmos.authz.v1beta1.MsgExec", value: tx_1.MsgExec.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgExec: Could not create message: ' + e.message);
            }
        },
        queryGranteeGrantsResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.authz.v1beta1.QueryGranteeGrantsResponse", value: query_1.QueryGranteeGrantsResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGranteeGrantsResponse: Could not create message: ' + e.message);
            }
        },
        queryGrantsResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.authz.v1beta1.QueryGrantsResponse", value: query_2.QueryGrantsResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGrantsResponse: Could not create message: ' + e.message);
            }
        },
        queryGranterGrantsResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.authz.v1beta1.QueryGranterGrantsResponse", value: query_3.QueryGranterGrantsResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGranterGrantsResponse: Could not create message: ' + e.message);
            }
        },
        queryGranteeGrantsRequest({ value }) {
            try {
                return { typeUrl: "/cosmos.authz.v1beta1.QueryGranteeGrantsRequest", value: query_4.QueryGranteeGrantsRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGranteeGrantsRequest: Could not create message: ' + e.message);
            }
        },
        grant({ value }) {
            try {
                return { typeUrl: "/cosmos.authz.v1beta1.Grant", value: authz_2.Grant.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:Grant: Could not create message: ' + e.message);
            }
        },
        grantAuthorization({ value }) {
            try {
                return { typeUrl: "/cosmos.authz.v1beta1.GrantAuthorization", value: authz_3.GrantAuthorization.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:GrantAuthorization: Could not create message: ' + e.message);
            }
        },
        eventGrant({ value }) {
            try {
                return { typeUrl: "/cosmos.authz.v1beta1.EventGrant", value: event_1.EventGrant.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:EventGrant: Could not create message: ' + e.message);
            }
        },
        queryGrantsRequest({ value }) {
            try {
                return { typeUrl: "/cosmos.authz.v1beta1.QueryGrantsRequest", value: query_5.QueryGrantsRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGrantsRequest: Could not create message: ' + e.message);
            }
        },
        msgExecResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.authz.v1beta1.MsgExecResponse", value: tx_2.MsgExecResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgExecResponse: Could not create message: ' + e.message);
            }
        },
        eventRevoke({ value }) {
            try {
                return { typeUrl: "/cosmos.authz.v1beta1.EventRevoke", value: event_2.EventRevoke.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:EventRevoke: Could not create message: ' + e.message);
            }
        },
        msgGrantResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.authz.v1beta1.MsgGrantResponse", value: tx_3.MsgGrantResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgGrantResponse: Could not create message: ' + e.message);
            }
        },
        msgRevoke({ value }) {
            try {
                return { typeUrl: "/cosmos.authz.v1beta1.MsgRevoke", value: tx_4.MsgRevoke.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgRevoke: Could not create message: ' + e.message);
            }
        },
        msgRevokeResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.authz.v1beta1.MsgRevokeResponse", value: tx_5.MsgRevokeResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgRevokeResponse: Could not create message: ' + e.message);
            }
        },
        msgGrant({ value }) {
            try {
                return { typeUrl: "/cosmos.authz.v1beta1.MsgGrant", value: tx_6.MsgGrant.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgGrant: Could not create message: ' + e.message);
            }
        },
        queryGranterGrantsRequest({ value }) {
            try {
                return { typeUrl: "/cosmos.authz.v1beta1.QueryGranterGrantsRequest", value: query_6.QueryGranterGrantsRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGranterGrantsRequest: Could not create message: ' + e.message);
            }
        },
        genericAuthorization({ value }) {
            try {
                return { typeUrl: "/cosmos.authz.v1beta1.GenericAuthorization", value: authz_4.GenericAuthorization.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:GenericAuthorization: Could not create message: ' + e.message);
            }
        },
    };
};
exports.txClient = txClient;
const queryClient = ({ addr: addr } = { addr: "http://localhost:1317" }) => {
    return new rest_1.Api({ baseURL: addr });
};
exports.queryClient = queryClient;
class SDKModule {
    constructor(client) {
        this.registry = [];
        this.query = (0, exports.queryClient)({ addr: client.env.apiURL });
        this.updateTX(client);
        this.structure = {};
        client.on('signer-changed', (signer) => {
            this.updateTX(client);
        });
    }
    updateTX(client) {
        const methods = (0, exports.txClient)({
            signer: client.signer,
            addr: client.env.rpcURL,
            prefix: client.env.prefix ?? "cosmos",
        });
        this.tx = methods;
        for (let m in methods) {
            this.tx[m] = methods[m].bind(this.tx);
        }
    }
}
;
const IgntModule = (test) => {
    return {
        module: {
            CosmosAuthzV1Beta1: new SDKModule(test)
        },
        registry: registry_1.msgTypes
    };
};
exports.default = IgntModule;
