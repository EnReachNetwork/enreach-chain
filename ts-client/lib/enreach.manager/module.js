"use strict";
// Generated by Ignite ignite.com/cli
Object.defineProperty(exports, "__esModule", { value: true });
exports.queryClient = exports.txClient = exports.registry = exports.MsgDeleteManager = exports.QueryAllManagerRequest = exports.QueryGetManagerResponse = exports.MsgUpdateManagerResponse = exports.MsgUpdateParams = exports.MsgUpdateManager = exports.MsgRegisterManagerResponse = exports.Params = exports.QueryGetManagerByRegionResponse = exports.GenesisState = exports.MsgDeleteManagerResponse = exports.MsgUpdateParamsResponse = exports.Manager = exports.QueryGetManagerByRegionRequest = exports.QueryAllManagerResponse = exports.QueryGetManagerRequest = exports.QueryParamsResponse = exports.QueryParamsRequest = exports.MsgRegisterManager = void 0;
const stargate_1 = require("@cosmjs/stargate");
const proto_signing_1 = require("@cosmjs/proto-signing");
const registry_1 = require("./registry");
const rest_1 = require("./rest");
const tx_1 = require("./types/enreach/manager/tx");
Object.defineProperty(exports, "MsgRegisterManager", { enumerable: true, get: function () { return tx_1.MsgRegisterManager; } });
const query_1 = require("./types/enreach/manager/query");
Object.defineProperty(exports, "QueryParamsRequest", { enumerable: true, get: function () { return query_1.QueryParamsRequest; } });
const query_2 = require("./types/enreach/manager/query");
Object.defineProperty(exports, "QueryParamsResponse", { enumerable: true, get: function () { return query_2.QueryParamsResponse; } });
const query_3 = require("./types/enreach/manager/query");
Object.defineProperty(exports, "QueryGetManagerRequest", { enumerable: true, get: function () { return query_3.QueryGetManagerRequest; } });
const query_4 = require("./types/enreach/manager/query");
Object.defineProperty(exports, "QueryAllManagerResponse", { enumerable: true, get: function () { return query_4.QueryAllManagerResponse; } });
const query_5 = require("./types/enreach/manager/query");
Object.defineProperty(exports, "QueryGetManagerByRegionRequest", { enumerable: true, get: function () { return query_5.QueryGetManagerByRegionRequest; } });
const manager_1 = require("./types/enreach/manager/manager");
Object.defineProperty(exports, "Manager", { enumerable: true, get: function () { return manager_1.Manager; } });
const tx_2 = require("./types/enreach/manager/tx");
Object.defineProperty(exports, "MsgUpdateParamsResponse", { enumerable: true, get: function () { return tx_2.MsgUpdateParamsResponse; } });
const tx_3 = require("./types/enreach/manager/tx");
Object.defineProperty(exports, "MsgDeleteManagerResponse", { enumerable: true, get: function () { return tx_3.MsgDeleteManagerResponse; } });
const genesis_1 = require("./types/enreach/manager/genesis");
Object.defineProperty(exports, "GenesisState", { enumerable: true, get: function () { return genesis_1.GenesisState; } });
const query_6 = require("./types/enreach/manager/query");
Object.defineProperty(exports, "QueryGetManagerByRegionResponse", { enumerable: true, get: function () { return query_6.QueryGetManagerByRegionResponse; } });
const params_1 = require("./types/enreach/manager/params");
Object.defineProperty(exports, "Params", { enumerable: true, get: function () { return params_1.Params; } });
const tx_4 = require("./types/enreach/manager/tx");
Object.defineProperty(exports, "MsgRegisterManagerResponse", { enumerable: true, get: function () { return tx_4.MsgRegisterManagerResponse; } });
const tx_5 = require("./types/enreach/manager/tx");
Object.defineProperty(exports, "MsgUpdateManager", { enumerable: true, get: function () { return tx_5.MsgUpdateManager; } });
const tx_6 = require("./types/enreach/manager/tx");
Object.defineProperty(exports, "MsgUpdateParams", { enumerable: true, get: function () { return tx_6.MsgUpdateParams; } });
const tx_7 = require("./types/enreach/manager/tx");
Object.defineProperty(exports, "MsgUpdateManagerResponse", { enumerable: true, get: function () { return tx_7.MsgUpdateManagerResponse; } });
const query_7 = require("./types/enreach/manager/query");
Object.defineProperty(exports, "QueryGetManagerResponse", { enumerable: true, get: function () { return query_7.QueryGetManagerResponse; } });
const query_8 = require("./types/enreach/manager/query");
Object.defineProperty(exports, "QueryAllManagerRequest", { enumerable: true, get: function () { return query_8.QueryAllManagerRequest; } });
const tx_8 = require("./types/enreach/manager/tx");
Object.defineProperty(exports, "MsgDeleteManager", { enumerable: true, get: function () { return tx_8.MsgDeleteManager; } });
exports.registry = new proto_signing_1.Registry(registry_1.msgTypes);
function getStructure(template) {
    const structure = { fields: [] };
    for (let [key, value] of Object.entries(template)) {
        let field = { name: key, type: typeof value };
        structure.fields.push(field);
    }
    return structure;
}
const defaultFee = {
    amount: [],
    gas: "200000",
};
const txClient = ({ signer, prefix, addr } = { addr: "http://localhost:26657", prefix: "cosmos" }) => {
    return {
        async sendMsgRegisterManager({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgRegisterManager: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgRegisterManager({ value: tx_1.MsgRegisterManager.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgRegisterManager: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryParamsRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryParamsRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryParamsRequest({ value: query_1.QueryParamsRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryParamsRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryParamsResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryParamsResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryParamsResponse({ value: query_2.QueryParamsResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryParamsResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetManagerRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetManagerRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetManagerRequest({ value: query_3.QueryGetManagerRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetManagerRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryAllManagerResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryAllManagerResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryAllManagerResponse({ value: query_4.QueryAllManagerResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryAllManagerResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetManagerByRegionRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetManagerByRegionRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetManagerByRegionRequest({ value: query_5.QueryGetManagerByRegionRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetManagerByRegionRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendManager({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendManager: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.manager({ value: manager_1.Manager.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendManager: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateParamsResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateParamsResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgUpdateParamsResponse({ value: tx_2.MsgUpdateParamsResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateParamsResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgDeleteManagerResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgDeleteManagerResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgDeleteManagerResponse({ value: tx_3.MsgDeleteManagerResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgDeleteManagerResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendGenesisState({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendGenesisState: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.genesisState({ value: genesis_1.GenesisState.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendGenesisState: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetManagerByRegionResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetManagerByRegionResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetManagerByRegionResponse({ value: query_6.QueryGetManagerByRegionResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetManagerByRegionResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendParams({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendParams: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.params({ value: params_1.Params.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendParams: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgRegisterManagerResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgRegisterManagerResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgRegisterManagerResponse({ value: tx_4.MsgRegisterManagerResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgRegisterManagerResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateManager({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateManager: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgUpdateManager({ value: tx_5.MsgUpdateManager.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateManager: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateParams({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateParams: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgUpdateParams({ value: tx_6.MsgUpdateParams.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateParams: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateManagerResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateManagerResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgUpdateManagerResponse({ value: tx_7.MsgUpdateManagerResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateManagerResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetManagerResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetManagerResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetManagerResponse({ value: query_7.QueryGetManagerResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetManagerResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryAllManagerRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryAllManagerRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryAllManagerRequest({ value: query_8.QueryAllManagerRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryAllManagerRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgDeleteManager({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgDeleteManager: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgDeleteManager({ value: tx_8.MsgDeleteManager.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgDeleteManager: Could not broadcast Tx: ' + e.message);
            }
        },
        msgRegisterManager({ value }) {
            try {
                return { typeUrl: "/enreach.manager.MsgRegisterManager", value: tx_1.MsgRegisterManager.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgRegisterManager: Could not create message: ' + e.message);
            }
        },
        queryParamsRequest({ value }) {
            try {
                return { typeUrl: "/enreach.manager.QueryParamsRequest", value: query_1.QueryParamsRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryParamsRequest: Could not create message: ' + e.message);
            }
        },
        queryParamsResponse({ value }) {
            try {
                return { typeUrl: "/enreach.manager.QueryParamsResponse", value: query_2.QueryParamsResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryParamsResponse: Could not create message: ' + e.message);
            }
        },
        queryGetManagerRequest({ value }) {
            try {
                return { typeUrl: "/enreach.manager.QueryGetManagerRequest", value: query_3.QueryGetManagerRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetManagerRequest: Could not create message: ' + e.message);
            }
        },
        queryAllManagerResponse({ value }) {
            try {
                return { typeUrl: "/enreach.manager.QueryAllManagerResponse", value: query_4.QueryAllManagerResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryAllManagerResponse: Could not create message: ' + e.message);
            }
        },
        queryGetManagerByRegionRequest({ value }) {
            try {
                return { typeUrl: "/enreach.manager.QueryGetManagerByRegionRequest", value: query_5.QueryGetManagerByRegionRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetManagerByRegionRequest: Could not create message: ' + e.message);
            }
        },
        manager({ value }) {
            try {
                return { typeUrl: "/enreach.manager.Manager", value: manager_1.Manager.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:Manager: Could not create message: ' + e.message);
            }
        },
        msgUpdateParamsResponse({ value }) {
            try {
                return { typeUrl: "/enreach.manager.MsgUpdateParamsResponse", value: tx_2.MsgUpdateParamsResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateParamsResponse: Could not create message: ' + e.message);
            }
        },
        msgDeleteManagerResponse({ value }) {
            try {
                return { typeUrl: "/enreach.manager.MsgDeleteManagerResponse", value: tx_3.MsgDeleteManagerResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgDeleteManagerResponse: Could not create message: ' + e.message);
            }
        },
        genesisState({ value }) {
            try {
                return { typeUrl: "/enreach.manager.GenesisState", value: genesis_1.GenesisState.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:GenesisState: Could not create message: ' + e.message);
            }
        },
        queryGetManagerByRegionResponse({ value }) {
            try {
                return { typeUrl: "/enreach.manager.QueryGetManagerByRegionResponse", value: query_6.QueryGetManagerByRegionResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetManagerByRegionResponse: Could not create message: ' + e.message);
            }
        },
        params({ value }) {
            try {
                return { typeUrl: "/enreach.manager.Params", value: params_1.Params.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:Params: Could not create message: ' + e.message);
            }
        },
        msgRegisterManagerResponse({ value }) {
            try {
                return { typeUrl: "/enreach.manager.MsgRegisterManagerResponse", value: tx_4.MsgRegisterManagerResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgRegisterManagerResponse: Could not create message: ' + e.message);
            }
        },
        msgUpdateManager({ value }) {
            try {
                return { typeUrl: "/enreach.manager.MsgUpdateManager", value: tx_5.MsgUpdateManager.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateManager: Could not create message: ' + e.message);
            }
        },
        msgUpdateParams({ value }) {
            try {
                return { typeUrl: "/enreach.manager.MsgUpdateParams", value: tx_6.MsgUpdateParams.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateParams: Could not create message: ' + e.message);
            }
        },
        msgUpdateManagerResponse({ value }) {
            try {
                return { typeUrl: "/enreach.manager.MsgUpdateManagerResponse", value: tx_7.MsgUpdateManagerResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateManagerResponse: Could not create message: ' + e.message);
            }
        },
        queryGetManagerResponse({ value }) {
            try {
                return { typeUrl: "/enreach.manager.QueryGetManagerResponse", value: query_7.QueryGetManagerResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetManagerResponse: Could not create message: ' + e.message);
            }
        },
        queryAllManagerRequest({ value }) {
            try {
                return { typeUrl: "/enreach.manager.QueryAllManagerRequest", value: query_8.QueryAllManagerRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryAllManagerRequest: Could not create message: ' + e.message);
            }
        },
        msgDeleteManager({ value }) {
            try {
                return { typeUrl: "/enreach.manager.MsgDeleteManager", value: tx_8.MsgDeleteManager.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgDeleteManager: Could not create message: ' + e.message);
            }
        },
    };
};
exports.txClient = txClient;
const queryClient = ({ addr: addr } = { addr: "http://localhost:1317" }) => {
    return new rest_1.Api({ baseURL: addr });
};
exports.queryClient = queryClient;
class SDKModule {
    constructor(client) {
        this.registry = [];
        this.query = (0, exports.queryClient)({ addr: client.env.apiURL });
        this.updateTX(client);
        this.structure = {};
        client.on('signer-changed', (signer) => {
            this.updateTX(client);
        });
    }
    updateTX(client) {
        const methods = (0, exports.txClient)({
            signer: client.signer,
            addr: client.env.rpcURL,
            prefix: client.env.prefix ?? "cosmos",
        });
        this.tx = methods;
        for (let m in methods) {
            this.tx[m] = methods[m].bind(this.tx);
        }
    }
}
;
const IgntModule = (test) => {
    return {
        module: {
            EnreachManager: new SDKModule(test)
        },
        registry: registry_1.msgTypes
    };
};
exports.default = IgntModule;
