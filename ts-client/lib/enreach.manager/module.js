"use strict";
// Generated by Ignite ignite.com/cli
Object.defineProperty(exports, "__esModule", { value: true });
exports.queryClient = exports.txClient = exports.registry = exports.MsgActivateManager = exports.QueryAllManagerResponse = exports.QueryAllOperatorRequest = exports.QueryParamsRequest = exports.QueryGetSuperiorResponse = exports.QueryGetCurrentEpochRequest = exports.MsgCreateSuperiorResponse = exports.MsgUpdateOperatorBasicInfoResponse = exports.MsgSetManagerRegionResponse = exports.MsgSetManagerRegion = exports.QueryGetManagerByRegionResponse = exports.Operator = exports.MsgGoWorkingResponse = exports.MsgBindOperatorManagerAccount = exports.Manager = exports.MsgUpdateManagerConnParams = exports.QueryGetSuperiorRequest = exports.QueryGetEpochLengthRequest = exports.QueryAllManagerRequest = exports.MsgCreateSuperior = exports.QueryGetCurrentEpochResponse = exports.MsgUpdateSuperior = exports.GenesisState = exports.MsgGoWorking = exports.QueryGetManagerByRegionRequest = exports.QueryGetManagerRequest = exports.MsgCreateOperatorResponse = exports.QueryGetEpochLengthResponse = exports.QueryGetOperatorRequest = exports.QueryParamsResponse = exports.MsgCreateOperator = exports.MsgRegisterManagerResponse = exports.MsgBindOperatorEVMAccountResponse = exports.MsgBindOperatorEVMAccount = exports.MsgUpdateSuperiorResponse = exports.Superior = exports.MsgUpdateManagerConnParamsResponse = exports.Params = exports.QueryAllOperatorResponse = exports.MsgBindOperatorManagerAccountResponse = exports.MsgUpdateOperatorBasicInfo = exports.QueryGetManagerResponse = exports.MsgRegisterManager = exports.MsgUpdateParamsResponse = exports.MsgActivateManagerResponse = exports.MsgUpdateParams = exports.QueryGetOperatorResponse = void 0;
const stargate_1 = require("@cosmjs/stargate");
const proto_signing_1 = require("@cosmjs/proto-signing");
const registry_1 = require("./registry");
const rest_1 = require("./rest");
const query_1 = require("./types/enreach/manager/query");
Object.defineProperty(exports, "QueryGetOperatorResponse", { enumerable: true, get: function () { return query_1.QueryGetOperatorResponse; } });
const tx_1 = require("./types/enreach/manager/tx");
Object.defineProperty(exports, "MsgUpdateParams", { enumerable: true, get: function () { return tx_1.MsgUpdateParams; } });
const tx_2 = require("./types/enreach/manager/tx");
Object.defineProperty(exports, "MsgActivateManagerResponse", { enumerable: true, get: function () { return tx_2.MsgActivateManagerResponse; } });
const tx_3 = require("./types/enreach/manager/tx");
Object.defineProperty(exports, "MsgUpdateParamsResponse", { enumerable: true, get: function () { return tx_3.MsgUpdateParamsResponse; } });
const tx_4 = require("./types/enreach/manager/tx");
Object.defineProperty(exports, "MsgRegisterManager", { enumerable: true, get: function () { return tx_4.MsgRegisterManager; } });
const query_2 = require("./types/enreach/manager/query");
Object.defineProperty(exports, "QueryGetManagerResponse", { enumerable: true, get: function () { return query_2.QueryGetManagerResponse; } });
const tx_5 = require("./types/enreach/manager/tx");
Object.defineProperty(exports, "MsgUpdateOperatorBasicInfo", { enumerable: true, get: function () { return tx_5.MsgUpdateOperatorBasicInfo; } });
const tx_6 = require("./types/enreach/manager/tx");
Object.defineProperty(exports, "MsgBindOperatorManagerAccountResponse", { enumerable: true, get: function () { return tx_6.MsgBindOperatorManagerAccountResponse; } });
const query_3 = require("./types/enreach/manager/query");
Object.defineProperty(exports, "QueryAllOperatorResponse", { enumerable: true, get: function () { return query_3.QueryAllOperatorResponse; } });
const params_1 = require("./types/enreach/manager/params");
Object.defineProperty(exports, "Params", { enumerable: true, get: function () { return params_1.Params; } });
const tx_7 = require("./types/enreach/manager/tx");
Object.defineProperty(exports, "MsgUpdateManagerConnParamsResponse", { enumerable: true, get: function () { return tx_7.MsgUpdateManagerConnParamsResponse; } });
const superior_1 = require("./types/enreach/manager/superior");
Object.defineProperty(exports, "Superior", { enumerable: true, get: function () { return superior_1.Superior; } });
const tx_8 = require("./types/enreach/manager/tx");
Object.defineProperty(exports, "MsgUpdateSuperiorResponse", { enumerable: true, get: function () { return tx_8.MsgUpdateSuperiorResponse; } });
const tx_9 = require("./types/enreach/manager/tx");
Object.defineProperty(exports, "MsgBindOperatorEVMAccount", { enumerable: true, get: function () { return tx_9.MsgBindOperatorEVMAccount; } });
const tx_10 = require("./types/enreach/manager/tx");
Object.defineProperty(exports, "MsgBindOperatorEVMAccountResponse", { enumerable: true, get: function () { return tx_10.MsgBindOperatorEVMAccountResponse; } });
const tx_11 = require("./types/enreach/manager/tx");
Object.defineProperty(exports, "MsgRegisterManagerResponse", { enumerable: true, get: function () { return tx_11.MsgRegisterManagerResponse; } });
const tx_12 = require("./types/enreach/manager/tx");
Object.defineProperty(exports, "MsgCreateOperator", { enumerable: true, get: function () { return tx_12.MsgCreateOperator; } });
const query_4 = require("./types/enreach/manager/query");
Object.defineProperty(exports, "QueryParamsResponse", { enumerable: true, get: function () { return query_4.QueryParamsResponse; } });
const query_5 = require("./types/enreach/manager/query");
Object.defineProperty(exports, "QueryGetOperatorRequest", { enumerable: true, get: function () { return query_5.QueryGetOperatorRequest; } });
const query_6 = require("./types/enreach/manager/query");
Object.defineProperty(exports, "QueryGetEpochLengthResponse", { enumerable: true, get: function () { return query_6.QueryGetEpochLengthResponse; } });
const tx_13 = require("./types/enreach/manager/tx");
Object.defineProperty(exports, "MsgCreateOperatorResponse", { enumerable: true, get: function () { return tx_13.MsgCreateOperatorResponse; } });
const query_7 = require("./types/enreach/manager/query");
Object.defineProperty(exports, "QueryGetManagerRequest", { enumerable: true, get: function () { return query_7.QueryGetManagerRequest; } });
const query_8 = require("./types/enreach/manager/query");
Object.defineProperty(exports, "QueryGetManagerByRegionRequest", { enumerable: true, get: function () { return query_8.QueryGetManagerByRegionRequest; } });
const tx_14 = require("./types/enreach/manager/tx");
Object.defineProperty(exports, "MsgGoWorking", { enumerable: true, get: function () { return tx_14.MsgGoWorking; } });
const genesis_1 = require("./types/enreach/manager/genesis");
Object.defineProperty(exports, "GenesisState", { enumerable: true, get: function () { return genesis_1.GenesisState; } });
const tx_15 = require("./types/enreach/manager/tx");
Object.defineProperty(exports, "MsgUpdateSuperior", { enumerable: true, get: function () { return tx_15.MsgUpdateSuperior; } });
const query_9 = require("./types/enreach/manager/query");
Object.defineProperty(exports, "QueryGetCurrentEpochResponse", { enumerable: true, get: function () { return query_9.QueryGetCurrentEpochResponse; } });
const tx_16 = require("./types/enreach/manager/tx");
Object.defineProperty(exports, "MsgCreateSuperior", { enumerable: true, get: function () { return tx_16.MsgCreateSuperior; } });
const query_10 = require("./types/enreach/manager/query");
Object.defineProperty(exports, "QueryAllManagerRequest", { enumerable: true, get: function () { return query_10.QueryAllManagerRequest; } });
const query_11 = require("./types/enreach/manager/query");
Object.defineProperty(exports, "QueryGetEpochLengthRequest", { enumerable: true, get: function () { return query_11.QueryGetEpochLengthRequest; } });
const query_12 = require("./types/enreach/manager/query");
Object.defineProperty(exports, "QueryGetSuperiorRequest", { enumerable: true, get: function () { return query_12.QueryGetSuperiorRequest; } });
const tx_17 = require("./types/enreach/manager/tx");
Object.defineProperty(exports, "MsgUpdateManagerConnParams", { enumerable: true, get: function () { return tx_17.MsgUpdateManagerConnParams; } });
const manager_1 = require("./types/enreach/manager/manager");
Object.defineProperty(exports, "Manager", { enumerable: true, get: function () { return manager_1.Manager; } });
const tx_18 = require("./types/enreach/manager/tx");
Object.defineProperty(exports, "MsgBindOperatorManagerAccount", { enumerable: true, get: function () { return tx_18.MsgBindOperatorManagerAccount; } });
const tx_19 = require("./types/enreach/manager/tx");
Object.defineProperty(exports, "MsgGoWorkingResponse", { enumerable: true, get: function () { return tx_19.MsgGoWorkingResponse; } });
const operator_1 = require("./types/enreach/manager/operator");
Object.defineProperty(exports, "Operator", { enumerable: true, get: function () { return operator_1.Operator; } });
const query_13 = require("./types/enreach/manager/query");
Object.defineProperty(exports, "QueryGetManagerByRegionResponse", { enumerable: true, get: function () { return query_13.QueryGetManagerByRegionResponse; } });
const tx_20 = require("./types/enreach/manager/tx");
Object.defineProperty(exports, "MsgSetManagerRegion", { enumerable: true, get: function () { return tx_20.MsgSetManagerRegion; } });
const tx_21 = require("./types/enreach/manager/tx");
Object.defineProperty(exports, "MsgSetManagerRegionResponse", { enumerable: true, get: function () { return tx_21.MsgSetManagerRegionResponse; } });
const tx_22 = require("./types/enreach/manager/tx");
Object.defineProperty(exports, "MsgUpdateOperatorBasicInfoResponse", { enumerable: true, get: function () { return tx_22.MsgUpdateOperatorBasicInfoResponse; } });
const tx_23 = require("./types/enreach/manager/tx");
Object.defineProperty(exports, "MsgCreateSuperiorResponse", { enumerable: true, get: function () { return tx_23.MsgCreateSuperiorResponse; } });
const query_14 = require("./types/enreach/manager/query");
Object.defineProperty(exports, "QueryGetCurrentEpochRequest", { enumerable: true, get: function () { return query_14.QueryGetCurrentEpochRequest; } });
const query_15 = require("./types/enreach/manager/query");
Object.defineProperty(exports, "QueryGetSuperiorResponse", { enumerable: true, get: function () { return query_15.QueryGetSuperiorResponse; } });
const query_16 = require("./types/enreach/manager/query");
Object.defineProperty(exports, "QueryParamsRequest", { enumerable: true, get: function () { return query_16.QueryParamsRequest; } });
const query_17 = require("./types/enreach/manager/query");
Object.defineProperty(exports, "QueryAllOperatorRequest", { enumerable: true, get: function () { return query_17.QueryAllOperatorRequest; } });
const query_18 = require("./types/enreach/manager/query");
Object.defineProperty(exports, "QueryAllManagerResponse", { enumerable: true, get: function () { return query_18.QueryAllManagerResponse; } });
const tx_24 = require("./types/enreach/manager/tx");
Object.defineProperty(exports, "MsgActivateManager", { enumerable: true, get: function () { return tx_24.MsgActivateManager; } });
exports.registry = new proto_signing_1.Registry(registry_1.msgTypes);
function getStructure(template) {
    const structure = { fields: [] };
    for (let [key, value] of Object.entries(template)) {
        let field = { name: key, type: typeof value };
        structure.fields.push(field);
    }
    return structure;
}
const defaultFee = {
    amount: [],
    gas: "200000",
};
const txClient = ({ signer, prefix, addr } = { addr: "http://localhost:26657", prefix: "cosmos" }) => {
    return {
        async sendQueryGetOperatorResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetOperatorResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetOperatorResponse({ value: query_1.QueryGetOperatorResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetOperatorResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateParams({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateParams: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgUpdateParams({ value: tx_1.MsgUpdateParams.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateParams: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgActivateManagerResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgActivateManagerResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgActivateManagerResponse({ value: tx_2.MsgActivateManagerResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgActivateManagerResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateParamsResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateParamsResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgUpdateParamsResponse({ value: tx_3.MsgUpdateParamsResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateParamsResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgRegisterManager({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgRegisterManager: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgRegisterManager({ value: tx_4.MsgRegisterManager.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgRegisterManager: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetManagerResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetManagerResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetManagerResponse({ value: query_2.QueryGetManagerResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetManagerResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateOperatorBasicInfo({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateOperatorBasicInfo: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgUpdateOperatorBasicInfo({ value: tx_5.MsgUpdateOperatorBasicInfo.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateOperatorBasicInfo: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgBindOperatorManagerAccountResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgBindOperatorManagerAccountResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgBindOperatorManagerAccountResponse({ value: tx_6.MsgBindOperatorManagerAccountResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgBindOperatorManagerAccountResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryAllOperatorResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryAllOperatorResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryAllOperatorResponse({ value: query_3.QueryAllOperatorResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryAllOperatorResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendParams({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendParams: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.params({ value: params_1.Params.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendParams: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateManagerConnParamsResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateManagerConnParamsResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgUpdateManagerConnParamsResponse({ value: tx_7.MsgUpdateManagerConnParamsResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateManagerConnParamsResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendSuperior({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendSuperior: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.superior({ value: superior_1.Superior.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendSuperior: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateSuperiorResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateSuperiorResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgUpdateSuperiorResponse({ value: tx_8.MsgUpdateSuperiorResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateSuperiorResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgBindOperatorEVMAccount({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgBindOperatorEVMAccount: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgBindOperatorEvmaccount({ value: tx_9.MsgBindOperatorEVMAccount.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgBindOperatorEVMAccount: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgBindOperatorEVMAccountResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgBindOperatorEVMAccountResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgBindOperatorEvmaccountResponse({ value: tx_10.MsgBindOperatorEVMAccountResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgBindOperatorEVMAccountResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgRegisterManagerResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgRegisterManagerResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgRegisterManagerResponse({ value: tx_11.MsgRegisterManagerResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgRegisterManagerResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgCreateOperator({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgCreateOperator: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgCreateOperator({ value: tx_12.MsgCreateOperator.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgCreateOperator: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryParamsResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryParamsResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryParamsResponse({ value: query_4.QueryParamsResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryParamsResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetOperatorRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetOperatorRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetOperatorRequest({ value: query_5.QueryGetOperatorRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetOperatorRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetEpochLengthResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetEpochLengthResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetEpochLengthResponse({ value: query_6.QueryGetEpochLengthResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetEpochLengthResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgCreateOperatorResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgCreateOperatorResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgCreateOperatorResponse({ value: tx_13.MsgCreateOperatorResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgCreateOperatorResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetManagerRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetManagerRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetManagerRequest({ value: query_7.QueryGetManagerRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetManagerRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetManagerByRegionRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetManagerByRegionRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetManagerByRegionRequest({ value: query_8.QueryGetManagerByRegionRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetManagerByRegionRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgGoWorking({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgGoWorking: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgGoWorking({ value: tx_14.MsgGoWorking.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgGoWorking: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendGenesisState({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendGenesisState: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.genesisState({ value: genesis_1.GenesisState.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendGenesisState: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateSuperior({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateSuperior: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgUpdateSuperior({ value: tx_15.MsgUpdateSuperior.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateSuperior: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetCurrentEpochResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetCurrentEpochResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetCurrentEpochResponse({ value: query_9.QueryGetCurrentEpochResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetCurrentEpochResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgCreateSuperior({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgCreateSuperior: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgCreateSuperior({ value: tx_16.MsgCreateSuperior.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgCreateSuperior: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryAllManagerRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryAllManagerRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryAllManagerRequest({ value: query_10.QueryAllManagerRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryAllManagerRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetEpochLengthRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetEpochLengthRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetEpochLengthRequest({ value: query_11.QueryGetEpochLengthRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetEpochLengthRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetSuperiorRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetSuperiorRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetSuperiorRequest({ value: query_12.QueryGetSuperiorRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetSuperiorRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateManagerConnParams({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateManagerConnParams: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgUpdateManagerConnParams({ value: tx_17.MsgUpdateManagerConnParams.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateManagerConnParams: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendManager({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendManager: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.manager({ value: manager_1.Manager.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendManager: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgBindOperatorManagerAccount({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgBindOperatorManagerAccount: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgBindOperatorManagerAccount({ value: tx_18.MsgBindOperatorManagerAccount.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgBindOperatorManagerAccount: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgGoWorkingResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgGoWorkingResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgGoWorkingResponse({ value: tx_19.MsgGoWorkingResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgGoWorkingResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendOperator({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendOperator: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.operator({ value: operator_1.Operator.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendOperator: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetManagerByRegionResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetManagerByRegionResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetManagerByRegionResponse({ value: query_13.QueryGetManagerByRegionResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetManagerByRegionResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgSetManagerRegion({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgSetManagerRegion: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgSetManagerRegion({ value: tx_20.MsgSetManagerRegion.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgSetManagerRegion: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgSetManagerRegionResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgSetManagerRegionResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgSetManagerRegionResponse({ value: tx_21.MsgSetManagerRegionResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgSetManagerRegionResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateOperatorBasicInfoResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateOperatorBasicInfoResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgUpdateOperatorBasicInfoResponse({ value: tx_22.MsgUpdateOperatorBasicInfoResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateOperatorBasicInfoResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgCreateSuperiorResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgCreateSuperiorResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgCreateSuperiorResponse({ value: tx_23.MsgCreateSuperiorResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgCreateSuperiorResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetCurrentEpochRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetCurrentEpochRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetCurrentEpochRequest({ value: query_14.QueryGetCurrentEpochRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetCurrentEpochRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetSuperiorResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetSuperiorResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetSuperiorResponse({ value: query_15.QueryGetSuperiorResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetSuperiorResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryParamsRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryParamsRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryParamsRequest({ value: query_16.QueryParamsRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryParamsRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryAllOperatorRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryAllOperatorRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryAllOperatorRequest({ value: query_17.QueryAllOperatorRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryAllOperatorRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryAllManagerResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryAllManagerResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryAllManagerResponse({ value: query_18.QueryAllManagerResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryAllManagerResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgActivateManager({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgActivateManager: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgActivateManager({ value: tx_24.MsgActivateManager.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgActivateManager: Could not broadcast Tx: ' + e.message);
            }
        },
        queryGetOperatorResponse({ value }) {
            try {
                return { typeUrl: "/enreach.manager.QueryGetOperatorResponse", value: query_1.QueryGetOperatorResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetOperatorResponse: Could not create message: ' + e.message);
            }
        },
        msgUpdateParams({ value }) {
            try {
                return { typeUrl: "/enreach.manager.MsgUpdateParams", value: tx_1.MsgUpdateParams.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateParams: Could not create message: ' + e.message);
            }
        },
        msgActivateManagerResponse({ value }) {
            try {
                return { typeUrl: "/enreach.manager.MsgActivateManagerResponse", value: tx_2.MsgActivateManagerResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgActivateManagerResponse: Could not create message: ' + e.message);
            }
        },
        msgUpdateParamsResponse({ value }) {
            try {
                return { typeUrl: "/enreach.manager.MsgUpdateParamsResponse", value: tx_3.MsgUpdateParamsResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateParamsResponse: Could not create message: ' + e.message);
            }
        },
        msgRegisterManager({ value }) {
            try {
                return { typeUrl: "/enreach.manager.MsgRegisterManager", value: tx_4.MsgRegisterManager.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgRegisterManager: Could not create message: ' + e.message);
            }
        },
        queryGetManagerResponse({ value }) {
            try {
                return { typeUrl: "/enreach.manager.QueryGetManagerResponse", value: query_2.QueryGetManagerResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetManagerResponse: Could not create message: ' + e.message);
            }
        },
        msgUpdateOperatorBasicInfo({ value }) {
            try {
                return { typeUrl: "/enreach.manager.MsgUpdateOperatorBasicInfo", value: tx_5.MsgUpdateOperatorBasicInfo.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateOperatorBasicInfo: Could not create message: ' + e.message);
            }
        },
        msgBindOperatorManagerAccountResponse({ value }) {
            try {
                return { typeUrl: "/enreach.manager.MsgBindOperatorManagerAccountResponse", value: tx_6.MsgBindOperatorManagerAccountResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgBindOperatorManagerAccountResponse: Could not create message: ' + e.message);
            }
        },
        queryAllOperatorResponse({ value }) {
            try {
                return { typeUrl: "/enreach.manager.QueryAllOperatorResponse", value: query_3.QueryAllOperatorResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryAllOperatorResponse: Could not create message: ' + e.message);
            }
        },
        params({ value }) {
            try {
                return { typeUrl: "/enreach.manager.Params", value: params_1.Params.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:Params: Could not create message: ' + e.message);
            }
        },
        msgUpdateManagerConnParamsResponse({ value }) {
            try {
                return { typeUrl: "/enreach.manager.MsgUpdateManagerConnParamsResponse", value: tx_7.MsgUpdateManagerConnParamsResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateManagerConnParamsResponse: Could not create message: ' + e.message);
            }
        },
        superior({ value }) {
            try {
                return { typeUrl: "/enreach.manager.Superior", value: superior_1.Superior.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:Superior: Could not create message: ' + e.message);
            }
        },
        msgUpdateSuperiorResponse({ value }) {
            try {
                return { typeUrl: "/enreach.manager.MsgUpdateSuperiorResponse", value: tx_8.MsgUpdateSuperiorResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateSuperiorResponse: Could not create message: ' + e.message);
            }
        },
        msgBindOperatorEvmaccount({ value }) {
            try {
                return { typeUrl: "/enreach.manager.MsgBindOperatorEVMAccount", value: tx_9.MsgBindOperatorEVMAccount.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgBindOperatorEVMAccount: Could not create message: ' + e.message);
            }
        },
        msgBindOperatorEvmaccountResponse({ value }) {
            try {
                return { typeUrl: "/enreach.manager.MsgBindOperatorEVMAccountResponse", value: tx_10.MsgBindOperatorEVMAccountResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgBindOperatorEVMAccountResponse: Could not create message: ' + e.message);
            }
        },
        msgRegisterManagerResponse({ value }) {
            try {
                return { typeUrl: "/enreach.manager.MsgRegisterManagerResponse", value: tx_11.MsgRegisterManagerResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgRegisterManagerResponse: Could not create message: ' + e.message);
            }
        },
        msgCreateOperator({ value }) {
            try {
                return { typeUrl: "/enreach.manager.MsgCreateOperator", value: tx_12.MsgCreateOperator.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgCreateOperator: Could not create message: ' + e.message);
            }
        },
        queryParamsResponse({ value }) {
            try {
                return { typeUrl: "/enreach.manager.QueryParamsResponse", value: query_4.QueryParamsResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryParamsResponse: Could not create message: ' + e.message);
            }
        },
        queryGetOperatorRequest({ value }) {
            try {
                return { typeUrl: "/enreach.manager.QueryGetOperatorRequest", value: query_5.QueryGetOperatorRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetOperatorRequest: Could not create message: ' + e.message);
            }
        },
        queryGetEpochLengthResponse({ value }) {
            try {
                return { typeUrl: "/enreach.manager.QueryGetEpochLengthResponse", value: query_6.QueryGetEpochLengthResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetEpochLengthResponse: Could not create message: ' + e.message);
            }
        },
        msgCreateOperatorResponse({ value }) {
            try {
                return { typeUrl: "/enreach.manager.MsgCreateOperatorResponse", value: tx_13.MsgCreateOperatorResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgCreateOperatorResponse: Could not create message: ' + e.message);
            }
        },
        queryGetManagerRequest({ value }) {
            try {
                return { typeUrl: "/enreach.manager.QueryGetManagerRequest", value: query_7.QueryGetManagerRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetManagerRequest: Could not create message: ' + e.message);
            }
        },
        queryGetManagerByRegionRequest({ value }) {
            try {
                return { typeUrl: "/enreach.manager.QueryGetManagerByRegionRequest", value: query_8.QueryGetManagerByRegionRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetManagerByRegionRequest: Could not create message: ' + e.message);
            }
        },
        msgGoWorking({ value }) {
            try {
                return { typeUrl: "/enreach.manager.MsgGoWorking", value: tx_14.MsgGoWorking.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgGoWorking: Could not create message: ' + e.message);
            }
        },
        genesisState({ value }) {
            try {
                return { typeUrl: "/enreach.manager.GenesisState", value: genesis_1.GenesisState.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:GenesisState: Could not create message: ' + e.message);
            }
        },
        msgUpdateSuperior({ value }) {
            try {
                return { typeUrl: "/enreach.manager.MsgUpdateSuperior", value: tx_15.MsgUpdateSuperior.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateSuperior: Could not create message: ' + e.message);
            }
        },
        queryGetCurrentEpochResponse({ value }) {
            try {
                return { typeUrl: "/enreach.manager.QueryGetCurrentEpochResponse", value: query_9.QueryGetCurrentEpochResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetCurrentEpochResponse: Could not create message: ' + e.message);
            }
        },
        msgCreateSuperior({ value }) {
            try {
                return { typeUrl: "/enreach.manager.MsgCreateSuperior", value: tx_16.MsgCreateSuperior.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgCreateSuperior: Could not create message: ' + e.message);
            }
        },
        queryAllManagerRequest({ value }) {
            try {
                return { typeUrl: "/enreach.manager.QueryAllManagerRequest", value: query_10.QueryAllManagerRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryAllManagerRequest: Could not create message: ' + e.message);
            }
        },
        queryGetEpochLengthRequest({ value }) {
            try {
                return { typeUrl: "/enreach.manager.QueryGetEpochLengthRequest", value: query_11.QueryGetEpochLengthRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetEpochLengthRequest: Could not create message: ' + e.message);
            }
        },
        queryGetSuperiorRequest({ value }) {
            try {
                return { typeUrl: "/enreach.manager.QueryGetSuperiorRequest", value: query_12.QueryGetSuperiorRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetSuperiorRequest: Could not create message: ' + e.message);
            }
        },
        msgUpdateManagerConnParams({ value }) {
            try {
                return { typeUrl: "/enreach.manager.MsgUpdateManagerConnParams", value: tx_17.MsgUpdateManagerConnParams.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateManagerConnParams: Could not create message: ' + e.message);
            }
        },
        manager({ value }) {
            try {
                return { typeUrl: "/enreach.manager.Manager", value: manager_1.Manager.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:Manager: Could not create message: ' + e.message);
            }
        },
        msgBindOperatorManagerAccount({ value }) {
            try {
                return { typeUrl: "/enreach.manager.MsgBindOperatorManagerAccount", value: tx_18.MsgBindOperatorManagerAccount.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgBindOperatorManagerAccount: Could not create message: ' + e.message);
            }
        },
        msgGoWorkingResponse({ value }) {
            try {
                return { typeUrl: "/enreach.manager.MsgGoWorkingResponse", value: tx_19.MsgGoWorkingResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgGoWorkingResponse: Could not create message: ' + e.message);
            }
        },
        operator({ value }) {
            try {
                return { typeUrl: "/enreach.manager.Operator", value: operator_1.Operator.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:Operator: Could not create message: ' + e.message);
            }
        },
        queryGetManagerByRegionResponse({ value }) {
            try {
                return { typeUrl: "/enreach.manager.QueryGetManagerByRegionResponse", value: query_13.QueryGetManagerByRegionResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetManagerByRegionResponse: Could not create message: ' + e.message);
            }
        },
        msgSetManagerRegion({ value }) {
            try {
                return { typeUrl: "/enreach.manager.MsgSetManagerRegion", value: tx_20.MsgSetManagerRegion.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgSetManagerRegion: Could not create message: ' + e.message);
            }
        },
        msgSetManagerRegionResponse({ value }) {
            try {
                return { typeUrl: "/enreach.manager.MsgSetManagerRegionResponse", value: tx_21.MsgSetManagerRegionResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgSetManagerRegionResponse: Could not create message: ' + e.message);
            }
        },
        msgUpdateOperatorBasicInfoResponse({ value }) {
            try {
                return { typeUrl: "/enreach.manager.MsgUpdateOperatorBasicInfoResponse", value: tx_22.MsgUpdateOperatorBasicInfoResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateOperatorBasicInfoResponse: Could not create message: ' + e.message);
            }
        },
        msgCreateSuperiorResponse({ value }) {
            try {
                return { typeUrl: "/enreach.manager.MsgCreateSuperiorResponse", value: tx_23.MsgCreateSuperiorResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgCreateSuperiorResponse: Could not create message: ' + e.message);
            }
        },
        queryGetCurrentEpochRequest({ value }) {
            try {
                return { typeUrl: "/enreach.manager.QueryGetCurrentEpochRequest", value: query_14.QueryGetCurrentEpochRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetCurrentEpochRequest: Could not create message: ' + e.message);
            }
        },
        queryGetSuperiorResponse({ value }) {
            try {
                return { typeUrl: "/enreach.manager.QueryGetSuperiorResponse", value: query_15.QueryGetSuperiorResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetSuperiorResponse: Could not create message: ' + e.message);
            }
        },
        queryParamsRequest({ value }) {
            try {
                return { typeUrl: "/enreach.manager.QueryParamsRequest", value: query_16.QueryParamsRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryParamsRequest: Could not create message: ' + e.message);
            }
        },
        queryAllOperatorRequest({ value }) {
            try {
                return { typeUrl: "/enreach.manager.QueryAllOperatorRequest", value: query_17.QueryAllOperatorRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryAllOperatorRequest: Could not create message: ' + e.message);
            }
        },
        queryAllManagerResponse({ value }) {
            try {
                return { typeUrl: "/enreach.manager.QueryAllManagerResponse", value: query_18.QueryAllManagerResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryAllManagerResponse: Could not create message: ' + e.message);
            }
        },
        msgActivateManager({ value }) {
            try {
                return { typeUrl: "/enreach.manager.MsgActivateManager", value: tx_24.MsgActivateManager.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgActivateManager: Could not create message: ' + e.message);
            }
        },
    };
};
exports.txClient = txClient;
const queryClient = ({ addr: addr } = { addr: "http://localhost:1317" }) => {
    return new rest_1.Api({ baseURL: addr });
};
exports.queryClient = queryClient;
class SDKModule {
    constructor(client) {
        this.registry = [];
        this.query = (0, exports.queryClient)({ addr: client.env.apiURL });
        this.updateTX(client);
        this.structure = {};
        client.on('signer-changed', (signer) => {
            this.updateTX(client);
        });
    }
    updateTX(client) {
        const methods = (0, exports.txClient)({
            signer: client.signer,
            addr: client.env.rpcURL,
            prefix: client.env.prefix ?? "cosmos",
        });
        this.tx = methods;
        for (let m in methods) {
            this.tx[m] = methods[m].bind(this.tx);
        }
    }
}
;
const IgntModule = (test) => {
    return {
        module: {
            EnreachManager: new SDKModule(test)
        },
        registry: registry_1.msgTypes
    };
};
exports.default = IgntModule;
