"use strict";
// Generated by Ignite ignite.com/cli
Object.defineProperty(exports, "__esModule", { value: true });
exports.queryClient = exports.txClient = exports.registry = exports.QueryOwnerResponse = exports.QueryNFTsRequest = exports.EventBurn = exports.QueryOwnerRequest = exports.GenesisState = exports.QueryClassesResponse = exports.QueryClassesRequest = exports.QueryNFTResponse = exports.Class = exports.EventMint = exports.QueryNFTRequest = exports.QuerySupplyRequest = exports.MsgSend = exports.QuerySupplyResponse = exports.Entry = exports.MsgSendResponse = exports.QueryBalanceResponse = exports.NFT = exports.EventSend = exports.QueryClassResponse = exports.QueryClassRequest = exports.QueryNFTsResponse = exports.QueryBalanceRequest = void 0;
const stargate_1 = require("@cosmjs/stargate");
const proto_signing_1 = require("@cosmjs/proto-signing");
const registry_1 = require("./registry");
const rest_1 = require("./rest");
const query_1 = require("./types/cosmos/nft/v1beta1/query");
Object.defineProperty(exports, "QueryBalanceRequest", { enumerable: true, get: function () { return query_1.QueryBalanceRequest; } });
const query_2 = require("./types/cosmos/nft/v1beta1/query");
Object.defineProperty(exports, "QueryNFTsResponse", { enumerable: true, get: function () { return query_2.QueryNFTsResponse; } });
const query_3 = require("./types/cosmos/nft/v1beta1/query");
Object.defineProperty(exports, "QueryClassRequest", { enumerable: true, get: function () { return query_3.QueryClassRequest; } });
const query_4 = require("./types/cosmos/nft/v1beta1/query");
Object.defineProperty(exports, "QueryClassResponse", { enumerable: true, get: function () { return query_4.QueryClassResponse; } });
const event_1 = require("./types/cosmos/nft/v1beta1/event");
Object.defineProperty(exports, "EventSend", { enumerable: true, get: function () { return event_1.EventSend; } });
const nft_1 = require("./types/cosmos/nft/v1beta1/nft");
Object.defineProperty(exports, "NFT", { enumerable: true, get: function () { return nft_1.NFT; } });
const query_5 = require("./types/cosmos/nft/v1beta1/query");
Object.defineProperty(exports, "QueryBalanceResponse", { enumerable: true, get: function () { return query_5.QueryBalanceResponse; } });
const tx_1 = require("./types/cosmos/nft/v1beta1/tx");
Object.defineProperty(exports, "MsgSendResponse", { enumerable: true, get: function () { return tx_1.MsgSendResponse; } });
const genesis_1 = require("./types/cosmos/nft/v1beta1/genesis");
Object.defineProperty(exports, "Entry", { enumerable: true, get: function () { return genesis_1.Entry; } });
const query_6 = require("./types/cosmos/nft/v1beta1/query");
Object.defineProperty(exports, "QuerySupplyResponse", { enumerable: true, get: function () { return query_6.QuerySupplyResponse; } });
const tx_2 = require("./types/cosmos/nft/v1beta1/tx");
Object.defineProperty(exports, "MsgSend", { enumerable: true, get: function () { return tx_2.MsgSend; } });
const query_7 = require("./types/cosmos/nft/v1beta1/query");
Object.defineProperty(exports, "QuerySupplyRequest", { enumerable: true, get: function () { return query_7.QuerySupplyRequest; } });
const query_8 = require("./types/cosmos/nft/v1beta1/query");
Object.defineProperty(exports, "QueryNFTRequest", { enumerable: true, get: function () { return query_8.QueryNFTRequest; } });
const event_2 = require("./types/cosmos/nft/v1beta1/event");
Object.defineProperty(exports, "EventMint", { enumerable: true, get: function () { return event_2.EventMint; } });
const nft_2 = require("./types/cosmos/nft/v1beta1/nft");
Object.defineProperty(exports, "Class", { enumerable: true, get: function () { return nft_2.Class; } });
const query_9 = require("./types/cosmos/nft/v1beta1/query");
Object.defineProperty(exports, "QueryNFTResponse", { enumerable: true, get: function () { return query_9.QueryNFTResponse; } });
const query_10 = require("./types/cosmos/nft/v1beta1/query");
Object.defineProperty(exports, "QueryClassesRequest", { enumerable: true, get: function () { return query_10.QueryClassesRequest; } });
const query_11 = require("./types/cosmos/nft/v1beta1/query");
Object.defineProperty(exports, "QueryClassesResponse", { enumerable: true, get: function () { return query_11.QueryClassesResponse; } });
const genesis_2 = require("./types/cosmos/nft/v1beta1/genesis");
Object.defineProperty(exports, "GenesisState", { enumerable: true, get: function () { return genesis_2.GenesisState; } });
const query_12 = require("./types/cosmos/nft/v1beta1/query");
Object.defineProperty(exports, "QueryOwnerRequest", { enumerable: true, get: function () { return query_12.QueryOwnerRequest; } });
const event_3 = require("./types/cosmos/nft/v1beta1/event");
Object.defineProperty(exports, "EventBurn", { enumerable: true, get: function () { return event_3.EventBurn; } });
const query_13 = require("./types/cosmos/nft/v1beta1/query");
Object.defineProperty(exports, "QueryNFTsRequest", { enumerable: true, get: function () { return query_13.QueryNFTsRequest; } });
const query_14 = require("./types/cosmos/nft/v1beta1/query");
Object.defineProperty(exports, "QueryOwnerResponse", { enumerable: true, get: function () { return query_14.QueryOwnerResponse; } });
exports.registry = new proto_signing_1.Registry(registry_1.msgTypes);
function getStructure(template) {
    const structure = { fields: [] };
    for (let [key, value] of Object.entries(template)) {
        let field = { name: key, type: typeof value };
        structure.fields.push(field);
    }
    return structure;
}
const defaultFee = {
    amount: [],
    gas: "200000",
};
const txClient = ({ signer, prefix, addr } = { addr: "http://localhost:26657", prefix: "cosmos" }) => {
    return {
        async sendQueryBalanceRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryBalanceRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryBalanceRequest({ value: query_1.QueryBalanceRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryBalanceRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryNFTsResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryNFTsResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryNftsResponse({ value: query_2.QueryNFTsResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryNFTsResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryClassRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryClassRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryClassRequest({ value: query_3.QueryClassRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryClassRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryClassResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryClassResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryClassResponse({ value: query_4.QueryClassResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryClassResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendEventSend({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendEventSend: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.eventSend({ value: event_1.EventSend.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendEventSend: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendNFT({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendNFT: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.nft({ value: nft_1.NFT.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendNFT: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryBalanceResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryBalanceResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryBalanceResponse({ value: query_5.QueryBalanceResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryBalanceResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgSendResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgSendResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgSendResponse({ value: tx_1.MsgSendResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgSendResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendEntry({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendEntry: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.entry({ value: genesis_1.Entry.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendEntry: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQuerySupplyResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQuerySupplyResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.querySupplyResponse({ value: query_6.QuerySupplyResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQuerySupplyResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgSend({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgSend: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgSend({ value: tx_2.MsgSend.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgSend: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQuerySupplyRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQuerySupplyRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.querySupplyRequest({ value: query_7.QuerySupplyRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQuerySupplyRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryNFTRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryNFTRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryNftrequest({ value: query_8.QueryNFTRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryNFTRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendEventMint({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendEventMint: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.eventMint({ value: event_2.EventMint.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendEventMint: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendClass({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendClass: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.class({ value: nft_2.Class.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendClass: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryNFTResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryNFTResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryNftresponse({ value: query_9.QueryNFTResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryNFTResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryClassesRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryClassesRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryClassesRequest({ value: query_10.QueryClassesRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryClassesRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryClassesResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryClassesResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryClassesResponse({ value: query_11.QueryClassesResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryClassesResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendGenesisState({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendGenesisState: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.genesisState({ value: genesis_2.GenesisState.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendGenesisState: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryOwnerRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryOwnerRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryOwnerRequest({ value: query_12.QueryOwnerRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryOwnerRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendEventBurn({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendEventBurn: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.eventBurn({ value: event_3.EventBurn.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendEventBurn: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryNFTsRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryNFTsRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryNftsRequest({ value: query_13.QueryNFTsRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryNFTsRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryOwnerResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryOwnerResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryOwnerResponse({ value: query_14.QueryOwnerResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryOwnerResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        queryBalanceRequest({ value }) {
            try {
                return { typeUrl: "/cosmos.nft.v1beta1.QueryBalanceRequest", value: query_1.QueryBalanceRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryBalanceRequest: Could not create message: ' + e.message);
            }
        },
        queryNftsResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.nft.v1beta1.QueryNFTsResponse", value: query_2.QueryNFTsResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryNFTsResponse: Could not create message: ' + e.message);
            }
        },
        queryClassRequest({ value }) {
            try {
                return { typeUrl: "/cosmos.nft.v1beta1.QueryClassRequest", value: query_3.QueryClassRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryClassRequest: Could not create message: ' + e.message);
            }
        },
        queryClassResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.nft.v1beta1.QueryClassResponse", value: query_4.QueryClassResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryClassResponse: Could not create message: ' + e.message);
            }
        },
        eventSend({ value }) {
            try {
                return { typeUrl: "/cosmos.nft.v1beta1.EventSend", value: event_1.EventSend.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:EventSend: Could not create message: ' + e.message);
            }
        },
        nft({ value }) {
            try {
                return { typeUrl: "/cosmos.nft.v1beta1.NFT", value: nft_1.NFT.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:NFT: Could not create message: ' + e.message);
            }
        },
        queryBalanceResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.nft.v1beta1.QueryBalanceResponse", value: query_5.QueryBalanceResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryBalanceResponse: Could not create message: ' + e.message);
            }
        },
        msgSendResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.nft.v1beta1.MsgSendResponse", value: tx_1.MsgSendResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgSendResponse: Could not create message: ' + e.message);
            }
        },
        entry({ value }) {
            try {
                return { typeUrl: "/cosmos.nft.v1beta1.Entry", value: genesis_1.Entry.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:Entry: Could not create message: ' + e.message);
            }
        },
        querySupplyResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.nft.v1beta1.QuerySupplyResponse", value: query_6.QuerySupplyResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QuerySupplyResponse: Could not create message: ' + e.message);
            }
        },
        msgSend({ value }) {
            try {
                return { typeUrl: "/cosmos.nft.v1beta1.MsgSend", value: tx_2.MsgSend.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgSend: Could not create message: ' + e.message);
            }
        },
        querySupplyRequest({ value }) {
            try {
                return { typeUrl: "/cosmos.nft.v1beta1.QuerySupplyRequest", value: query_7.QuerySupplyRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QuerySupplyRequest: Could not create message: ' + e.message);
            }
        },
        queryNftrequest({ value }) {
            try {
                return { typeUrl: "/cosmos.nft.v1beta1.QueryNFTRequest", value: query_8.QueryNFTRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryNFTRequest: Could not create message: ' + e.message);
            }
        },
        eventMint({ value }) {
            try {
                return { typeUrl: "/cosmos.nft.v1beta1.EventMint", value: event_2.EventMint.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:EventMint: Could not create message: ' + e.message);
            }
        },
        class({ value }) {
            try {
                return { typeUrl: "/cosmos.nft.v1beta1.Class", value: nft_2.Class.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:Class: Could not create message: ' + e.message);
            }
        },
        queryNftresponse({ value }) {
            try {
                return { typeUrl: "/cosmos.nft.v1beta1.QueryNFTResponse", value: query_9.QueryNFTResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryNFTResponse: Could not create message: ' + e.message);
            }
        },
        queryClassesRequest({ value }) {
            try {
                return { typeUrl: "/cosmos.nft.v1beta1.QueryClassesRequest", value: query_10.QueryClassesRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryClassesRequest: Could not create message: ' + e.message);
            }
        },
        queryClassesResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.nft.v1beta1.QueryClassesResponse", value: query_11.QueryClassesResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryClassesResponse: Could not create message: ' + e.message);
            }
        },
        genesisState({ value }) {
            try {
                return { typeUrl: "/cosmos.nft.v1beta1.GenesisState", value: genesis_2.GenesisState.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:GenesisState: Could not create message: ' + e.message);
            }
        },
        queryOwnerRequest({ value }) {
            try {
                return { typeUrl: "/cosmos.nft.v1beta1.QueryOwnerRequest", value: query_12.QueryOwnerRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryOwnerRequest: Could not create message: ' + e.message);
            }
        },
        eventBurn({ value }) {
            try {
                return { typeUrl: "/cosmos.nft.v1beta1.EventBurn", value: event_3.EventBurn.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:EventBurn: Could not create message: ' + e.message);
            }
        },
        queryNftsRequest({ value }) {
            try {
                return { typeUrl: "/cosmos.nft.v1beta1.QueryNFTsRequest", value: query_13.QueryNFTsRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryNFTsRequest: Could not create message: ' + e.message);
            }
        },
        queryOwnerResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.nft.v1beta1.QueryOwnerResponse", value: query_14.QueryOwnerResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryOwnerResponse: Could not create message: ' + e.message);
            }
        },
    };
};
exports.txClient = txClient;
const queryClient = ({ addr: addr } = { addr: "http://localhost:1317" }) => {
    return new rest_1.Api({ baseURL: addr });
};
exports.queryClient = queryClient;
class SDKModule {
    constructor(client) {
        this.registry = [];
        this.query = (0, exports.queryClient)({ addr: client.env.apiURL });
        this.updateTX(client);
        this.structure = {};
        client.on('signer-changed', (signer) => {
            this.updateTX(client);
        });
    }
    updateTX(client) {
        const methods = (0, exports.txClient)({
            signer: client.signer,
            addr: client.env.rpcURL,
            prefix: client.env.prefix ?? "cosmos",
        });
        this.tx = methods;
        for (let m in methods) {
            this.tx[m] = methods[m].bind(this.tx);
        }
    }
}
;
const IgntModule = (test) => {
    return {
        module: {
            CosmosNftV1Beta1: new SDKModule(test)
        },
        registry: registry_1.msgTypes
    };
};
exports.default = IgntModule;
