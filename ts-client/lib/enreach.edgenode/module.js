"use strict";
// Generated by Ignite ignite.com/cli
Object.defineProperty(exports, "__esModule", { value: true });
exports.queryClient = exports.txClient = exports.registry = exports.QueryParamsResponse = exports.MsgBindAndActivateNode = exports.MsgBindUserEVMAccountResponse = exports.MsgUpdateParams = exports.Node = exports.QueryGetSuperiorResponse = exports.QueryGetNodeRequest = exports.MsgUpdateNodeTrafficTypeBatchResponse = exports.MsgUpdateNodeTrafficTypeBatch = exports.MsgBindAndActivateNodeResponse = exports.MsgUpdateParamsResponse = exports.Superior = exports.MsgUpdateSuperiorResponse = exports.MsgCreateSuperiorResponse = exports.MsgRegisterNodeResponse = exports.MsgBindUserEVMAccount = exports.QueryAllNodeRequest = exports.Params = exports.QueryParamsRequest = exports.GenesisState = exports.MsgUnbindNodeResponse = exports.MsgRegisterNode = exports.MsgUpdateSuperior = exports.MsgCreateSuperior = exports.QueryGetUserResponse = exports.QueryGetNodeResponse = exports.QueryAllUserRequest = exports.User = exports.QueryAllNodeResponse = exports.QueryGetSuperiorRequest = exports.QueryGetUserRequest = exports.MsgCreateUser = exports.QueryAllUserResponse = exports.MsgUnbindNode = exports.MsgCreateUserResponse = void 0;
const stargate_1 = require("@cosmjs/stargate");
const proto_signing_1 = require("@cosmjs/proto-signing");
const registry_1 = require("./registry");
const rest_1 = require("./rest");
const tx_1 = require("./types/enreach/edgenode/tx");
Object.defineProperty(exports, "MsgCreateUserResponse", { enumerable: true, get: function () { return tx_1.MsgCreateUserResponse; } });
const tx_2 = require("./types/enreach/edgenode/tx");
Object.defineProperty(exports, "MsgUnbindNode", { enumerable: true, get: function () { return tx_2.MsgUnbindNode; } });
const query_1 = require("./types/enreach/edgenode/query");
Object.defineProperty(exports, "QueryAllUserResponse", { enumerable: true, get: function () { return query_1.QueryAllUserResponse; } });
const tx_3 = require("./types/enreach/edgenode/tx");
Object.defineProperty(exports, "MsgCreateUser", { enumerable: true, get: function () { return tx_3.MsgCreateUser; } });
const query_2 = require("./types/enreach/edgenode/query");
Object.defineProperty(exports, "QueryGetUserRequest", { enumerable: true, get: function () { return query_2.QueryGetUserRequest; } });
const query_3 = require("./types/enreach/edgenode/query");
Object.defineProperty(exports, "QueryGetSuperiorRequest", { enumerable: true, get: function () { return query_3.QueryGetSuperiorRequest; } });
const query_4 = require("./types/enreach/edgenode/query");
Object.defineProperty(exports, "QueryAllNodeResponse", { enumerable: true, get: function () { return query_4.QueryAllNodeResponse; } });
const user_1 = require("./types/enreach/edgenode/user");
Object.defineProperty(exports, "User", { enumerable: true, get: function () { return user_1.User; } });
const query_5 = require("./types/enreach/edgenode/query");
Object.defineProperty(exports, "QueryAllUserRequest", { enumerable: true, get: function () { return query_5.QueryAllUserRequest; } });
const query_6 = require("./types/enreach/edgenode/query");
Object.defineProperty(exports, "QueryGetNodeResponse", { enumerable: true, get: function () { return query_6.QueryGetNodeResponse; } });
const query_7 = require("./types/enreach/edgenode/query");
Object.defineProperty(exports, "QueryGetUserResponse", { enumerable: true, get: function () { return query_7.QueryGetUserResponse; } });
const tx_4 = require("./types/enreach/edgenode/tx");
Object.defineProperty(exports, "MsgCreateSuperior", { enumerable: true, get: function () { return tx_4.MsgCreateSuperior; } });
const tx_5 = require("./types/enreach/edgenode/tx");
Object.defineProperty(exports, "MsgUpdateSuperior", { enumerable: true, get: function () { return tx_5.MsgUpdateSuperior; } });
const tx_6 = require("./types/enreach/edgenode/tx");
Object.defineProperty(exports, "MsgRegisterNode", { enumerable: true, get: function () { return tx_6.MsgRegisterNode; } });
const tx_7 = require("./types/enreach/edgenode/tx");
Object.defineProperty(exports, "MsgUnbindNodeResponse", { enumerable: true, get: function () { return tx_7.MsgUnbindNodeResponse; } });
const genesis_1 = require("./types/enreach/edgenode/genesis");
Object.defineProperty(exports, "GenesisState", { enumerable: true, get: function () { return genesis_1.GenesisState; } });
const query_8 = require("./types/enreach/edgenode/query");
Object.defineProperty(exports, "QueryParamsRequest", { enumerable: true, get: function () { return query_8.QueryParamsRequest; } });
const params_1 = require("./types/enreach/edgenode/params");
Object.defineProperty(exports, "Params", { enumerable: true, get: function () { return params_1.Params; } });
const query_9 = require("./types/enreach/edgenode/query");
Object.defineProperty(exports, "QueryAllNodeRequest", { enumerable: true, get: function () { return query_9.QueryAllNodeRequest; } });
const tx_8 = require("./types/enreach/edgenode/tx");
Object.defineProperty(exports, "MsgBindUserEVMAccount", { enumerable: true, get: function () { return tx_8.MsgBindUserEVMAccount; } });
const tx_9 = require("./types/enreach/edgenode/tx");
Object.defineProperty(exports, "MsgRegisterNodeResponse", { enumerable: true, get: function () { return tx_9.MsgRegisterNodeResponse; } });
const tx_10 = require("./types/enreach/edgenode/tx");
Object.defineProperty(exports, "MsgCreateSuperiorResponse", { enumerable: true, get: function () { return tx_10.MsgCreateSuperiorResponse; } });
const tx_11 = require("./types/enreach/edgenode/tx");
Object.defineProperty(exports, "MsgUpdateSuperiorResponse", { enumerable: true, get: function () { return tx_11.MsgUpdateSuperiorResponse; } });
const superior_1 = require("./types/enreach/edgenode/superior");
Object.defineProperty(exports, "Superior", { enumerable: true, get: function () { return superior_1.Superior; } });
const tx_12 = require("./types/enreach/edgenode/tx");
Object.defineProperty(exports, "MsgUpdateParamsResponse", { enumerable: true, get: function () { return tx_12.MsgUpdateParamsResponse; } });
const tx_13 = require("./types/enreach/edgenode/tx");
Object.defineProperty(exports, "MsgBindAndActivateNodeResponse", { enumerable: true, get: function () { return tx_13.MsgBindAndActivateNodeResponse; } });
const tx_14 = require("./types/enreach/edgenode/tx");
Object.defineProperty(exports, "MsgUpdateNodeTrafficTypeBatch", { enumerable: true, get: function () { return tx_14.MsgUpdateNodeTrafficTypeBatch; } });
const tx_15 = require("./types/enreach/edgenode/tx");
Object.defineProperty(exports, "MsgUpdateNodeTrafficTypeBatchResponse", { enumerable: true, get: function () { return tx_15.MsgUpdateNodeTrafficTypeBatchResponse; } });
const query_10 = require("./types/enreach/edgenode/query");
Object.defineProperty(exports, "QueryGetNodeRequest", { enumerable: true, get: function () { return query_10.QueryGetNodeRequest; } });
const query_11 = require("./types/enreach/edgenode/query");
Object.defineProperty(exports, "QueryGetSuperiorResponse", { enumerable: true, get: function () { return query_11.QueryGetSuperiorResponse; } });
const node_1 = require("./types/enreach/edgenode/node");
Object.defineProperty(exports, "Node", { enumerable: true, get: function () { return node_1.Node; } });
const tx_16 = require("./types/enreach/edgenode/tx");
Object.defineProperty(exports, "MsgUpdateParams", { enumerable: true, get: function () { return tx_16.MsgUpdateParams; } });
const tx_17 = require("./types/enreach/edgenode/tx");
Object.defineProperty(exports, "MsgBindUserEVMAccountResponse", { enumerable: true, get: function () { return tx_17.MsgBindUserEVMAccountResponse; } });
const tx_18 = require("./types/enreach/edgenode/tx");
Object.defineProperty(exports, "MsgBindAndActivateNode", { enumerable: true, get: function () { return tx_18.MsgBindAndActivateNode; } });
const query_12 = require("./types/enreach/edgenode/query");
Object.defineProperty(exports, "QueryParamsResponse", { enumerable: true, get: function () { return query_12.QueryParamsResponse; } });
exports.registry = new proto_signing_1.Registry(registry_1.msgTypes);
function getStructure(template) {
    const structure = { fields: [] };
    for (let [key, value] of Object.entries(template)) {
        let field = { name: key, type: typeof value };
        structure.fields.push(field);
    }
    return structure;
}
const defaultFee = {
    amount: [],
    gas: "200000",
};
const txClient = ({ signer, prefix, addr } = { addr: "http://localhost:26657", prefix: "cosmos" }) => {
    return {
        async sendMsgCreateUserResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgCreateUserResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgCreateUserResponse({ value: tx_1.MsgCreateUserResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgCreateUserResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUnbindNode({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUnbindNode: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgUnbindNode({ value: tx_2.MsgUnbindNode.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUnbindNode: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryAllUserResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryAllUserResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryAllUserResponse({ value: query_1.QueryAllUserResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryAllUserResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgCreateUser({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgCreateUser: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgCreateUser({ value: tx_3.MsgCreateUser.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgCreateUser: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetUserRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetUserRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetUserRequest({ value: query_2.QueryGetUserRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetUserRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetSuperiorRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetSuperiorRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetSuperiorRequest({ value: query_3.QueryGetSuperiorRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetSuperiorRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryAllNodeResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryAllNodeResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryAllNodeResponse({ value: query_4.QueryAllNodeResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryAllNodeResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendUser({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendUser: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.user({ value: user_1.User.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendUser: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryAllUserRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryAllUserRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryAllUserRequest({ value: query_5.QueryAllUserRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryAllUserRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetNodeResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetNodeResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetNodeResponse({ value: query_6.QueryGetNodeResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetNodeResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetUserResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetUserResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetUserResponse({ value: query_7.QueryGetUserResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetUserResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgCreateSuperior({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgCreateSuperior: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgCreateSuperior({ value: tx_4.MsgCreateSuperior.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgCreateSuperior: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateSuperior({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateSuperior: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgUpdateSuperior({ value: tx_5.MsgUpdateSuperior.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateSuperior: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgRegisterNode({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgRegisterNode: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgRegisterNode({ value: tx_6.MsgRegisterNode.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgRegisterNode: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUnbindNodeResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUnbindNodeResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgUnbindNodeResponse({ value: tx_7.MsgUnbindNodeResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUnbindNodeResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendGenesisState({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendGenesisState: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.genesisState({ value: genesis_1.GenesisState.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendGenesisState: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryParamsRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryParamsRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryParamsRequest({ value: query_8.QueryParamsRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryParamsRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendParams({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendParams: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.params({ value: params_1.Params.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendParams: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryAllNodeRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryAllNodeRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryAllNodeRequest({ value: query_9.QueryAllNodeRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryAllNodeRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgBindUserEVMAccount({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgBindUserEVMAccount: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgBindUserEvmaccount({ value: tx_8.MsgBindUserEVMAccount.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgBindUserEVMAccount: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgRegisterNodeResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgRegisterNodeResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgRegisterNodeResponse({ value: tx_9.MsgRegisterNodeResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgRegisterNodeResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgCreateSuperiorResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgCreateSuperiorResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgCreateSuperiorResponse({ value: tx_10.MsgCreateSuperiorResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgCreateSuperiorResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateSuperiorResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateSuperiorResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgUpdateSuperiorResponse({ value: tx_11.MsgUpdateSuperiorResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateSuperiorResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendSuperior({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendSuperior: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.superior({ value: superior_1.Superior.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendSuperior: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateParamsResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateParamsResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgUpdateParamsResponse({ value: tx_12.MsgUpdateParamsResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateParamsResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgBindAndActivateNodeResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgBindAndActivateNodeResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgBindAndActivateNodeResponse({ value: tx_13.MsgBindAndActivateNodeResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgBindAndActivateNodeResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateNodeTrafficTypeBatch({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateNodeTrafficTypeBatch: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgUpdateNodeTrafficTypeBatch({ value: tx_14.MsgUpdateNodeTrafficTypeBatch.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateNodeTrafficTypeBatch: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateNodeTrafficTypeBatchResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateNodeTrafficTypeBatchResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgUpdateNodeTrafficTypeBatchResponse({ value: tx_15.MsgUpdateNodeTrafficTypeBatchResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateNodeTrafficTypeBatchResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetNodeRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetNodeRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetNodeRequest({ value: query_10.QueryGetNodeRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetNodeRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryGetSuperiorResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryGetSuperiorResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryGetSuperiorResponse({ value: query_11.QueryGetSuperiorResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryGetSuperiorResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendNode({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendNode: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.node({ value: node_1.Node.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendNode: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateParams({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateParams: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgUpdateParams({ value: tx_16.MsgUpdateParams.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateParams: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgBindUserEVMAccountResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgBindUserEVMAccountResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgBindUserEvmaccountResponse({ value: tx_17.MsgBindUserEVMAccountResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgBindUserEVMAccountResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgBindAndActivateNode({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgBindAndActivateNode: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgBindAndActivateNode({ value: tx_18.MsgBindAndActivateNode.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgBindAndActivateNode: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryParamsResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryParamsResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryParamsResponse({ value: query_12.QueryParamsResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryParamsResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        msgCreateUserResponse({ value }) {
            try {
                return { typeUrl: "/enreach.edgenode.MsgCreateUserResponse", value: tx_1.MsgCreateUserResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgCreateUserResponse: Could not create message: ' + e.message);
            }
        },
        msgUnbindNode({ value }) {
            try {
                return { typeUrl: "/enreach.edgenode.MsgUnbindNode", value: tx_2.MsgUnbindNode.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUnbindNode: Could not create message: ' + e.message);
            }
        },
        queryAllUserResponse({ value }) {
            try {
                return { typeUrl: "/enreach.edgenode.QueryAllUserResponse", value: query_1.QueryAllUserResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryAllUserResponse: Could not create message: ' + e.message);
            }
        },
        msgCreateUser({ value }) {
            try {
                return { typeUrl: "/enreach.edgenode.MsgCreateUser", value: tx_3.MsgCreateUser.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgCreateUser: Could not create message: ' + e.message);
            }
        },
        queryGetUserRequest({ value }) {
            try {
                return { typeUrl: "/enreach.edgenode.QueryGetUserRequest", value: query_2.QueryGetUserRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetUserRequest: Could not create message: ' + e.message);
            }
        },
        queryGetSuperiorRequest({ value }) {
            try {
                return { typeUrl: "/enreach.edgenode.QueryGetSuperiorRequest", value: query_3.QueryGetSuperiorRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetSuperiorRequest: Could not create message: ' + e.message);
            }
        },
        queryAllNodeResponse({ value }) {
            try {
                return { typeUrl: "/enreach.edgenode.QueryAllNodeResponse", value: query_4.QueryAllNodeResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryAllNodeResponse: Could not create message: ' + e.message);
            }
        },
        user({ value }) {
            try {
                return { typeUrl: "/enreach.edgenode.User", value: user_1.User.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:User: Could not create message: ' + e.message);
            }
        },
        queryAllUserRequest({ value }) {
            try {
                return { typeUrl: "/enreach.edgenode.QueryAllUserRequest", value: query_5.QueryAllUserRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryAllUserRequest: Could not create message: ' + e.message);
            }
        },
        queryGetNodeResponse({ value }) {
            try {
                return { typeUrl: "/enreach.edgenode.QueryGetNodeResponse", value: query_6.QueryGetNodeResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetNodeResponse: Could not create message: ' + e.message);
            }
        },
        queryGetUserResponse({ value }) {
            try {
                return { typeUrl: "/enreach.edgenode.QueryGetUserResponse", value: query_7.QueryGetUserResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetUserResponse: Could not create message: ' + e.message);
            }
        },
        msgCreateSuperior({ value }) {
            try {
                return { typeUrl: "/enreach.edgenode.MsgCreateSuperior", value: tx_4.MsgCreateSuperior.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgCreateSuperior: Could not create message: ' + e.message);
            }
        },
        msgUpdateSuperior({ value }) {
            try {
                return { typeUrl: "/enreach.edgenode.MsgUpdateSuperior", value: tx_5.MsgUpdateSuperior.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateSuperior: Could not create message: ' + e.message);
            }
        },
        msgRegisterNode({ value }) {
            try {
                return { typeUrl: "/enreach.edgenode.MsgRegisterNode", value: tx_6.MsgRegisterNode.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgRegisterNode: Could not create message: ' + e.message);
            }
        },
        msgUnbindNodeResponse({ value }) {
            try {
                return { typeUrl: "/enreach.edgenode.MsgUnbindNodeResponse", value: tx_7.MsgUnbindNodeResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUnbindNodeResponse: Could not create message: ' + e.message);
            }
        },
        genesisState({ value }) {
            try {
                return { typeUrl: "/enreach.edgenode.GenesisState", value: genesis_1.GenesisState.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:GenesisState: Could not create message: ' + e.message);
            }
        },
        queryParamsRequest({ value }) {
            try {
                return { typeUrl: "/enreach.edgenode.QueryParamsRequest", value: query_8.QueryParamsRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryParamsRequest: Could not create message: ' + e.message);
            }
        },
        params({ value }) {
            try {
                return { typeUrl: "/enreach.edgenode.Params", value: params_1.Params.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:Params: Could not create message: ' + e.message);
            }
        },
        queryAllNodeRequest({ value }) {
            try {
                return { typeUrl: "/enreach.edgenode.QueryAllNodeRequest", value: query_9.QueryAllNodeRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryAllNodeRequest: Could not create message: ' + e.message);
            }
        },
        msgBindUserEvmaccount({ value }) {
            try {
                return { typeUrl: "/enreach.edgenode.MsgBindUserEVMAccount", value: tx_8.MsgBindUserEVMAccount.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgBindUserEVMAccount: Could not create message: ' + e.message);
            }
        },
        msgRegisterNodeResponse({ value }) {
            try {
                return { typeUrl: "/enreach.edgenode.MsgRegisterNodeResponse", value: tx_9.MsgRegisterNodeResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgRegisterNodeResponse: Could not create message: ' + e.message);
            }
        },
        msgCreateSuperiorResponse({ value }) {
            try {
                return { typeUrl: "/enreach.edgenode.MsgCreateSuperiorResponse", value: tx_10.MsgCreateSuperiorResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgCreateSuperiorResponse: Could not create message: ' + e.message);
            }
        },
        msgUpdateSuperiorResponse({ value }) {
            try {
                return { typeUrl: "/enreach.edgenode.MsgUpdateSuperiorResponse", value: tx_11.MsgUpdateSuperiorResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateSuperiorResponse: Could not create message: ' + e.message);
            }
        },
        superior({ value }) {
            try {
                return { typeUrl: "/enreach.edgenode.Superior", value: superior_1.Superior.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:Superior: Could not create message: ' + e.message);
            }
        },
        msgUpdateParamsResponse({ value }) {
            try {
                return { typeUrl: "/enreach.edgenode.MsgUpdateParamsResponse", value: tx_12.MsgUpdateParamsResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateParamsResponse: Could not create message: ' + e.message);
            }
        },
        msgBindAndActivateNodeResponse({ value }) {
            try {
                return { typeUrl: "/enreach.edgenode.MsgBindAndActivateNodeResponse", value: tx_13.MsgBindAndActivateNodeResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgBindAndActivateNodeResponse: Could not create message: ' + e.message);
            }
        },
        msgUpdateNodeTrafficTypeBatch({ value }) {
            try {
                return { typeUrl: "/enreach.edgenode.MsgUpdateNodeTrafficTypeBatch", value: tx_14.MsgUpdateNodeTrafficTypeBatch.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateNodeTrafficTypeBatch: Could not create message: ' + e.message);
            }
        },
        msgUpdateNodeTrafficTypeBatchResponse({ value }) {
            try {
                return { typeUrl: "/enreach.edgenode.MsgUpdateNodeTrafficTypeBatchResponse", value: tx_15.MsgUpdateNodeTrafficTypeBatchResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateNodeTrafficTypeBatchResponse: Could not create message: ' + e.message);
            }
        },
        queryGetNodeRequest({ value }) {
            try {
                return { typeUrl: "/enreach.edgenode.QueryGetNodeRequest", value: query_10.QueryGetNodeRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetNodeRequest: Could not create message: ' + e.message);
            }
        },
        queryGetSuperiorResponse({ value }) {
            try {
                return { typeUrl: "/enreach.edgenode.QueryGetSuperiorResponse", value: query_11.QueryGetSuperiorResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryGetSuperiorResponse: Could not create message: ' + e.message);
            }
        },
        node({ value }) {
            try {
                return { typeUrl: "/enreach.edgenode.Node", value: node_1.Node.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:Node: Could not create message: ' + e.message);
            }
        },
        msgUpdateParams({ value }) {
            try {
                return { typeUrl: "/enreach.edgenode.MsgUpdateParams", value: tx_16.MsgUpdateParams.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateParams: Could not create message: ' + e.message);
            }
        },
        msgBindUserEvmaccountResponse({ value }) {
            try {
                return { typeUrl: "/enreach.edgenode.MsgBindUserEVMAccountResponse", value: tx_17.MsgBindUserEVMAccountResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgBindUserEVMAccountResponse: Could not create message: ' + e.message);
            }
        },
        msgBindAndActivateNode({ value }) {
            try {
                return { typeUrl: "/enreach.edgenode.MsgBindAndActivateNode", value: tx_18.MsgBindAndActivateNode.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgBindAndActivateNode: Could not create message: ' + e.message);
            }
        },
        queryParamsResponse({ value }) {
            try {
                return { typeUrl: "/enreach.edgenode.QueryParamsResponse", value: query_12.QueryParamsResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryParamsResponse: Could not create message: ' + e.message);
            }
        },
    };
};
exports.txClient = txClient;
const queryClient = ({ addr: addr } = { addr: "http://localhost:1317" }) => {
    return new rest_1.Api({ baseURL: addr });
};
exports.queryClient = queryClient;
class SDKModule {
    constructor(client) {
        this.registry = [];
        this.query = (0, exports.queryClient)({ addr: client.env.apiURL });
        this.updateTX(client);
        this.structure = {};
        client.on('signer-changed', (signer) => {
            this.updateTX(client);
        });
    }
    updateTX(client) {
        const methods = (0, exports.txClient)({
            signer: client.signer,
            addr: client.env.rpcURL,
            prefix: client.env.prefix ?? "cosmos",
        });
        this.tx = methods;
        for (let m in methods) {
            this.tx[m] = methods[m].bind(this.tx);
        }
    }
}
;
const IgntModule = (test) => {
    return {
        module: {
            EnreachEdgenode: new SDKModule(test)
        },
        registry: registry_1.msgTypes
    };
};
exports.default = IgntModule;
