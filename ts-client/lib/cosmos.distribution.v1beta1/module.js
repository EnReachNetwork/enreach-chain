"use strict";
// Generated by Ignite ignite.com/cli
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryParamsRequest = exports.MsgDepositValidatorRewardsPoolResponse = exports.QueryValidatorOutstandingRewardsResponse = exports.ValidatorSlashEventRecord = exports.CommunityPoolSpendProposalWithDeposit = exports.QueryDelegationTotalRewardsResponse = exports.QueryDelegationRewardsRequest = exports.QueryValidatorCommissionRequest = exports.QueryParamsResponse = exports.ValidatorSlashEvent = exports.ValidatorOutstandingRewards = exports.MsgFundCommunityPool = exports.QueryDelegatorWithdrawAddressRequest = exports.DelegatorStartingInfoRecord = exports.MsgUpdateParams = exports.MsgCommunityPoolSpend = exports.MsgSetWithdrawAddressResponse = exports.QueryDelegatorValidatorsRequest = exports.DelegatorStartingInfo = exports.CommunityPoolSpendProposal = exports.MsgWithdrawValidatorCommissionResponse = exports.QueryCommunityPoolRequest = exports.QueryDelegationRewardsResponse = exports.QueryValidatorSlashesRequest = exports.ValidatorHistoricalRewardsRecord = exports.ValidatorAccumulatedCommissionRecord = exports.QueryCommunityPoolResponse = exports.QueryValidatorDistributionInfoResponse = exports.MsgCommunityPoolSpendResponse = exports.MsgUpdateParamsResponse = exports.QueryValidatorCommissionResponse = exports.QueryValidatorOutstandingRewardsRequest = exports.ValidatorSlashEvents = exports.MsgDepositValidatorRewardsPool = exports.QueryDelegatorValidatorsResponse = exports.ValidatorCurrentRewardsRecord = exports.ValidatorOutstandingRewardsRecord = exports.MsgWithdrawValidatorCommission = exports.ValidatorCurrentRewards = exports.MsgWithdrawDelegatorRewardResponse = exports.QueryDelegatorWithdrawAddressResponse = exports.GenesisState = exports.ValidatorAccumulatedCommission = exports.MsgWithdrawDelegatorReward = exports.QueryValidatorSlashesResponse = exports.Params = exports.FeePool = exports.MsgFundCommunityPoolResponse = exports.QueryValidatorDistributionInfoRequest = exports.DelegationDelegatorReward = void 0;
exports.queryClient = exports.txClient = exports.registry = exports.DelegatorWithdrawInfo = exports.MsgSetWithdrawAddress = exports.ValidatorHistoricalRewards = exports.QueryDelegationTotalRewardsRequest = void 0;
const stargate_1 = require("@cosmjs/stargate");
const proto_signing_1 = require("@cosmjs/proto-signing");
const registry_1 = require("./registry");
const rest_1 = require("./rest");
const distribution_1 = require("./types/cosmos/distribution/v1beta1/distribution");
Object.defineProperty(exports, "DelegationDelegatorReward", { enumerable: true, get: function () { return distribution_1.DelegationDelegatorReward; } });
const query_1 = require("./types/cosmos/distribution/v1beta1/query");
Object.defineProperty(exports, "QueryValidatorDistributionInfoRequest", { enumerable: true, get: function () { return query_1.QueryValidatorDistributionInfoRequest; } });
const tx_1 = require("./types/cosmos/distribution/v1beta1/tx");
Object.defineProperty(exports, "MsgFundCommunityPoolResponse", { enumerable: true, get: function () { return tx_1.MsgFundCommunityPoolResponse; } });
const distribution_2 = require("./types/cosmos/distribution/v1beta1/distribution");
Object.defineProperty(exports, "FeePool", { enumerable: true, get: function () { return distribution_2.FeePool; } });
const distribution_3 = require("./types/cosmos/distribution/v1beta1/distribution");
Object.defineProperty(exports, "Params", { enumerable: true, get: function () { return distribution_3.Params; } });
const query_2 = require("./types/cosmos/distribution/v1beta1/query");
Object.defineProperty(exports, "QueryValidatorSlashesResponse", { enumerable: true, get: function () { return query_2.QueryValidatorSlashesResponse; } });
const tx_2 = require("./types/cosmos/distribution/v1beta1/tx");
Object.defineProperty(exports, "MsgWithdrawDelegatorReward", { enumerable: true, get: function () { return tx_2.MsgWithdrawDelegatorReward; } });
const distribution_4 = require("./types/cosmos/distribution/v1beta1/distribution");
Object.defineProperty(exports, "ValidatorAccumulatedCommission", { enumerable: true, get: function () { return distribution_4.ValidatorAccumulatedCommission; } });
const genesis_1 = require("./types/cosmos/distribution/v1beta1/genesis");
Object.defineProperty(exports, "GenesisState", { enumerable: true, get: function () { return genesis_1.GenesisState; } });
const query_3 = require("./types/cosmos/distribution/v1beta1/query");
Object.defineProperty(exports, "QueryDelegatorWithdrawAddressResponse", { enumerable: true, get: function () { return query_3.QueryDelegatorWithdrawAddressResponse; } });
const tx_3 = require("./types/cosmos/distribution/v1beta1/tx");
Object.defineProperty(exports, "MsgWithdrawDelegatorRewardResponse", { enumerable: true, get: function () { return tx_3.MsgWithdrawDelegatorRewardResponse; } });
const distribution_5 = require("./types/cosmos/distribution/v1beta1/distribution");
Object.defineProperty(exports, "ValidatorCurrentRewards", { enumerable: true, get: function () { return distribution_5.ValidatorCurrentRewards; } });
const tx_4 = require("./types/cosmos/distribution/v1beta1/tx");
Object.defineProperty(exports, "MsgWithdrawValidatorCommission", { enumerable: true, get: function () { return tx_4.MsgWithdrawValidatorCommission; } });
const genesis_2 = require("./types/cosmos/distribution/v1beta1/genesis");
Object.defineProperty(exports, "ValidatorOutstandingRewardsRecord", { enumerable: true, get: function () { return genesis_2.ValidatorOutstandingRewardsRecord; } });
const genesis_3 = require("./types/cosmos/distribution/v1beta1/genesis");
Object.defineProperty(exports, "ValidatorCurrentRewardsRecord", { enumerable: true, get: function () { return genesis_3.ValidatorCurrentRewardsRecord; } });
const query_4 = require("./types/cosmos/distribution/v1beta1/query");
Object.defineProperty(exports, "QueryDelegatorValidatorsResponse", { enumerable: true, get: function () { return query_4.QueryDelegatorValidatorsResponse; } });
const tx_5 = require("./types/cosmos/distribution/v1beta1/tx");
Object.defineProperty(exports, "MsgDepositValidatorRewardsPool", { enumerable: true, get: function () { return tx_5.MsgDepositValidatorRewardsPool; } });
const distribution_6 = require("./types/cosmos/distribution/v1beta1/distribution");
Object.defineProperty(exports, "ValidatorSlashEvents", { enumerable: true, get: function () { return distribution_6.ValidatorSlashEvents; } });
const query_5 = require("./types/cosmos/distribution/v1beta1/query");
Object.defineProperty(exports, "QueryValidatorOutstandingRewardsRequest", { enumerable: true, get: function () { return query_5.QueryValidatorOutstandingRewardsRequest; } });
const query_6 = require("./types/cosmos/distribution/v1beta1/query");
Object.defineProperty(exports, "QueryValidatorCommissionResponse", { enumerable: true, get: function () { return query_6.QueryValidatorCommissionResponse; } });
const tx_6 = require("./types/cosmos/distribution/v1beta1/tx");
Object.defineProperty(exports, "MsgUpdateParamsResponse", { enumerable: true, get: function () { return tx_6.MsgUpdateParamsResponse; } });
const tx_7 = require("./types/cosmos/distribution/v1beta1/tx");
Object.defineProperty(exports, "MsgCommunityPoolSpendResponse", { enumerable: true, get: function () { return tx_7.MsgCommunityPoolSpendResponse; } });
const query_7 = require("./types/cosmos/distribution/v1beta1/query");
Object.defineProperty(exports, "QueryValidatorDistributionInfoResponse", { enumerable: true, get: function () { return query_7.QueryValidatorDistributionInfoResponse; } });
const query_8 = require("./types/cosmos/distribution/v1beta1/query");
Object.defineProperty(exports, "QueryCommunityPoolResponse", { enumerable: true, get: function () { return query_8.QueryCommunityPoolResponse; } });
const genesis_4 = require("./types/cosmos/distribution/v1beta1/genesis");
Object.defineProperty(exports, "ValidatorAccumulatedCommissionRecord", { enumerable: true, get: function () { return genesis_4.ValidatorAccumulatedCommissionRecord; } });
const genesis_5 = require("./types/cosmos/distribution/v1beta1/genesis");
Object.defineProperty(exports, "ValidatorHistoricalRewardsRecord", { enumerable: true, get: function () { return genesis_5.ValidatorHistoricalRewardsRecord; } });
const query_9 = require("./types/cosmos/distribution/v1beta1/query");
Object.defineProperty(exports, "QueryValidatorSlashesRequest", { enumerable: true, get: function () { return query_9.QueryValidatorSlashesRequest; } });
const query_10 = require("./types/cosmos/distribution/v1beta1/query");
Object.defineProperty(exports, "QueryDelegationRewardsResponse", { enumerable: true, get: function () { return query_10.QueryDelegationRewardsResponse; } });
const query_11 = require("./types/cosmos/distribution/v1beta1/query");
Object.defineProperty(exports, "QueryCommunityPoolRequest", { enumerable: true, get: function () { return query_11.QueryCommunityPoolRequest; } });
const tx_8 = require("./types/cosmos/distribution/v1beta1/tx");
Object.defineProperty(exports, "MsgWithdrawValidatorCommissionResponse", { enumerable: true, get: function () { return tx_8.MsgWithdrawValidatorCommissionResponse; } });
const distribution_7 = require("./types/cosmos/distribution/v1beta1/distribution");
Object.defineProperty(exports, "CommunityPoolSpendProposal", { enumerable: true, get: function () { return distribution_7.CommunityPoolSpendProposal; } });
const distribution_8 = require("./types/cosmos/distribution/v1beta1/distribution");
Object.defineProperty(exports, "DelegatorStartingInfo", { enumerable: true, get: function () { return distribution_8.DelegatorStartingInfo; } });
const query_12 = require("./types/cosmos/distribution/v1beta1/query");
Object.defineProperty(exports, "QueryDelegatorValidatorsRequest", { enumerable: true, get: function () { return query_12.QueryDelegatorValidatorsRequest; } });
const tx_9 = require("./types/cosmos/distribution/v1beta1/tx");
Object.defineProperty(exports, "MsgSetWithdrawAddressResponse", { enumerable: true, get: function () { return tx_9.MsgSetWithdrawAddressResponse; } });
const tx_10 = require("./types/cosmos/distribution/v1beta1/tx");
Object.defineProperty(exports, "MsgCommunityPoolSpend", { enumerable: true, get: function () { return tx_10.MsgCommunityPoolSpend; } });
const tx_11 = require("./types/cosmos/distribution/v1beta1/tx");
Object.defineProperty(exports, "MsgUpdateParams", { enumerable: true, get: function () { return tx_11.MsgUpdateParams; } });
const genesis_6 = require("./types/cosmos/distribution/v1beta1/genesis");
Object.defineProperty(exports, "DelegatorStartingInfoRecord", { enumerable: true, get: function () { return genesis_6.DelegatorStartingInfoRecord; } });
const query_13 = require("./types/cosmos/distribution/v1beta1/query");
Object.defineProperty(exports, "QueryDelegatorWithdrawAddressRequest", { enumerable: true, get: function () { return query_13.QueryDelegatorWithdrawAddressRequest; } });
const tx_12 = require("./types/cosmos/distribution/v1beta1/tx");
Object.defineProperty(exports, "MsgFundCommunityPool", { enumerable: true, get: function () { return tx_12.MsgFundCommunityPool; } });
const distribution_9 = require("./types/cosmos/distribution/v1beta1/distribution");
Object.defineProperty(exports, "ValidatorOutstandingRewards", { enumerable: true, get: function () { return distribution_9.ValidatorOutstandingRewards; } });
const distribution_10 = require("./types/cosmos/distribution/v1beta1/distribution");
Object.defineProperty(exports, "ValidatorSlashEvent", { enumerable: true, get: function () { return distribution_10.ValidatorSlashEvent; } });
const query_14 = require("./types/cosmos/distribution/v1beta1/query");
Object.defineProperty(exports, "QueryParamsResponse", { enumerable: true, get: function () { return query_14.QueryParamsResponse; } });
const query_15 = require("./types/cosmos/distribution/v1beta1/query");
Object.defineProperty(exports, "QueryValidatorCommissionRequest", { enumerable: true, get: function () { return query_15.QueryValidatorCommissionRequest; } });
const query_16 = require("./types/cosmos/distribution/v1beta1/query");
Object.defineProperty(exports, "QueryDelegationRewardsRequest", { enumerable: true, get: function () { return query_16.QueryDelegationRewardsRequest; } });
const query_17 = require("./types/cosmos/distribution/v1beta1/query");
Object.defineProperty(exports, "QueryDelegationTotalRewardsResponse", { enumerable: true, get: function () { return query_17.QueryDelegationTotalRewardsResponse; } });
const distribution_11 = require("./types/cosmos/distribution/v1beta1/distribution");
Object.defineProperty(exports, "CommunityPoolSpendProposalWithDeposit", { enumerable: true, get: function () { return distribution_11.CommunityPoolSpendProposalWithDeposit; } });
const genesis_7 = require("./types/cosmos/distribution/v1beta1/genesis");
Object.defineProperty(exports, "ValidatorSlashEventRecord", { enumerable: true, get: function () { return genesis_7.ValidatorSlashEventRecord; } });
const query_18 = require("./types/cosmos/distribution/v1beta1/query");
Object.defineProperty(exports, "QueryValidatorOutstandingRewardsResponse", { enumerable: true, get: function () { return query_18.QueryValidatorOutstandingRewardsResponse; } });
const tx_13 = require("./types/cosmos/distribution/v1beta1/tx");
Object.defineProperty(exports, "MsgDepositValidatorRewardsPoolResponse", { enumerable: true, get: function () { return tx_13.MsgDepositValidatorRewardsPoolResponse; } });
const query_19 = require("./types/cosmos/distribution/v1beta1/query");
Object.defineProperty(exports, "QueryParamsRequest", { enumerable: true, get: function () { return query_19.QueryParamsRequest; } });
const query_20 = require("./types/cosmos/distribution/v1beta1/query");
Object.defineProperty(exports, "QueryDelegationTotalRewardsRequest", { enumerable: true, get: function () { return query_20.QueryDelegationTotalRewardsRequest; } });
const distribution_12 = require("./types/cosmos/distribution/v1beta1/distribution");
Object.defineProperty(exports, "ValidatorHistoricalRewards", { enumerable: true, get: function () { return distribution_12.ValidatorHistoricalRewards; } });
const tx_14 = require("./types/cosmos/distribution/v1beta1/tx");
Object.defineProperty(exports, "MsgSetWithdrawAddress", { enumerable: true, get: function () { return tx_14.MsgSetWithdrawAddress; } });
const genesis_8 = require("./types/cosmos/distribution/v1beta1/genesis");
Object.defineProperty(exports, "DelegatorWithdrawInfo", { enumerable: true, get: function () { return genesis_8.DelegatorWithdrawInfo; } });
exports.registry = new proto_signing_1.Registry(registry_1.msgTypes);
function getStructure(template) {
    const structure = { fields: [] };
    for (let [key, value] of Object.entries(template)) {
        let field = { name: key, type: typeof value };
        structure.fields.push(field);
    }
    return structure;
}
const defaultFee = {
    amount: [],
    gas: "200000",
};
const txClient = ({ signer, prefix, addr } = { addr: "http://localhost:26657", prefix: "cosmos" }) => {
    return {
        async sendDelegationDelegatorReward({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendDelegationDelegatorReward: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.delegationDelegatorReward({ value: distribution_1.DelegationDelegatorReward.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendDelegationDelegatorReward: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryValidatorDistributionInfoRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryValidatorDistributionInfoRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryValidatorDistributionInfoRequest({ value: query_1.QueryValidatorDistributionInfoRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryValidatorDistributionInfoRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgFundCommunityPoolResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgFundCommunityPoolResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgFundCommunityPoolResponse({ value: tx_1.MsgFundCommunityPoolResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgFundCommunityPoolResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendFeePool({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendFeePool: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.feePool({ value: distribution_2.FeePool.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendFeePool: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendParams({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendParams: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.params({ value: distribution_3.Params.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendParams: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryValidatorSlashesResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryValidatorSlashesResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryValidatorSlashesResponse({ value: query_2.QueryValidatorSlashesResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryValidatorSlashesResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgWithdrawDelegatorReward({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgWithdrawDelegatorReward: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgWithdrawDelegatorReward({ value: tx_2.MsgWithdrawDelegatorReward.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgWithdrawDelegatorReward: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendValidatorAccumulatedCommission({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendValidatorAccumulatedCommission: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.validatorAccumulatedCommission({ value: distribution_4.ValidatorAccumulatedCommission.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendValidatorAccumulatedCommission: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendGenesisState({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendGenesisState: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.genesisState({ value: genesis_1.GenesisState.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendGenesisState: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryDelegatorWithdrawAddressResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryDelegatorWithdrawAddressResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryDelegatorWithdrawAddressResponse({ value: query_3.QueryDelegatorWithdrawAddressResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryDelegatorWithdrawAddressResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgWithdrawDelegatorRewardResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgWithdrawDelegatorRewardResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgWithdrawDelegatorRewardResponse({ value: tx_3.MsgWithdrawDelegatorRewardResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgWithdrawDelegatorRewardResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendValidatorCurrentRewards({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendValidatorCurrentRewards: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.validatorCurrentRewards({ value: distribution_5.ValidatorCurrentRewards.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendValidatorCurrentRewards: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgWithdrawValidatorCommission({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgWithdrawValidatorCommission: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgWithdrawValidatorCommission({ value: tx_4.MsgWithdrawValidatorCommission.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgWithdrawValidatorCommission: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendValidatorOutstandingRewardsRecord({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendValidatorOutstandingRewardsRecord: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.validatorOutstandingRewardsRecord({ value: genesis_2.ValidatorOutstandingRewardsRecord.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendValidatorOutstandingRewardsRecord: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendValidatorCurrentRewardsRecord({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendValidatorCurrentRewardsRecord: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.validatorCurrentRewardsRecord({ value: genesis_3.ValidatorCurrentRewardsRecord.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendValidatorCurrentRewardsRecord: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryDelegatorValidatorsResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryDelegatorValidatorsResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryDelegatorValidatorsResponse({ value: query_4.QueryDelegatorValidatorsResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryDelegatorValidatorsResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgDepositValidatorRewardsPool({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgDepositValidatorRewardsPool: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgDepositValidatorRewardsPool({ value: tx_5.MsgDepositValidatorRewardsPool.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgDepositValidatorRewardsPool: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendValidatorSlashEvents({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendValidatorSlashEvents: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.validatorSlashEvents({ value: distribution_6.ValidatorSlashEvents.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendValidatorSlashEvents: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryValidatorOutstandingRewardsRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryValidatorOutstandingRewardsRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryValidatorOutstandingRewardsRequest({ value: query_5.QueryValidatorOutstandingRewardsRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryValidatorOutstandingRewardsRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryValidatorCommissionResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryValidatorCommissionResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryValidatorCommissionResponse({ value: query_6.QueryValidatorCommissionResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryValidatorCommissionResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateParamsResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateParamsResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgUpdateParamsResponse({ value: tx_6.MsgUpdateParamsResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateParamsResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgCommunityPoolSpendResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgCommunityPoolSpendResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgCommunityPoolSpendResponse({ value: tx_7.MsgCommunityPoolSpendResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgCommunityPoolSpendResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryValidatorDistributionInfoResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryValidatorDistributionInfoResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryValidatorDistributionInfoResponse({ value: query_7.QueryValidatorDistributionInfoResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryValidatorDistributionInfoResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryCommunityPoolResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryCommunityPoolResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryCommunityPoolResponse({ value: query_8.QueryCommunityPoolResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryCommunityPoolResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendValidatorAccumulatedCommissionRecord({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendValidatorAccumulatedCommissionRecord: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.validatorAccumulatedCommissionRecord({ value: genesis_4.ValidatorAccumulatedCommissionRecord.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendValidatorAccumulatedCommissionRecord: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendValidatorHistoricalRewardsRecord({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendValidatorHistoricalRewardsRecord: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.validatorHistoricalRewardsRecord({ value: genesis_5.ValidatorHistoricalRewardsRecord.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendValidatorHistoricalRewardsRecord: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryValidatorSlashesRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryValidatorSlashesRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryValidatorSlashesRequest({ value: query_9.QueryValidatorSlashesRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryValidatorSlashesRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryDelegationRewardsResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryDelegationRewardsResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryDelegationRewardsResponse({ value: query_10.QueryDelegationRewardsResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryDelegationRewardsResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryCommunityPoolRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryCommunityPoolRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryCommunityPoolRequest({ value: query_11.QueryCommunityPoolRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryCommunityPoolRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgWithdrawValidatorCommissionResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgWithdrawValidatorCommissionResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgWithdrawValidatorCommissionResponse({ value: tx_8.MsgWithdrawValidatorCommissionResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgWithdrawValidatorCommissionResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendCommunityPoolSpendProposal({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendCommunityPoolSpendProposal: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.communityPoolSpendProposal({ value: distribution_7.CommunityPoolSpendProposal.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendCommunityPoolSpendProposal: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendDelegatorStartingInfo({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendDelegatorStartingInfo: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.delegatorStartingInfo({ value: distribution_8.DelegatorStartingInfo.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendDelegatorStartingInfo: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryDelegatorValidatorsRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryDelegatorValidatorsRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryDelegatorValidatorsRequest({ value: query_12.QueryDelegatorValidatorsRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryDelegatorValidatorsRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgSetWithdrawAddressResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgSetWithdrawAddressResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgSetWithdrawAddressResponse({ value: tx_9.MsgSetWithdrawAddressResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgSetWithdrawAddressResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgCommunityPoolSpend({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgCommunityPoolSpend: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgCommunityPoolSpend({ value: tx_10.MsgCommunityPoolSpend.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgCommunityPoolSpend: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateParams({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateParams: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgUpdateParams({ value: tx_11.MsgUpdateParams.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateParams: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendDelegatorStartingInfoRecord({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendDelegatorStartingInfoRecord: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.delegatorStartingInfoRecord({ value: genesis_6.DelegatorStartingInfoRecord.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendDelegatorStartingInfoRecord: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryDelegatorWithdrawAddressRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryDelegatorWithdrawAddressRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryDelegatorWithdrawAddressRequest({ value: query_13.QueryDelegatorWithdrawAddressRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryDelegatorWithdrawAddressRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgFundCommunityPool({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgFundCommunityPool: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgFundCommunityPool({ value: tx_12.MsgFundCommunityPool.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgFundCommunityPool: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendValidatorOutstandingRewards({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendValidatorOutstandingRewards: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.validatorOutstandingRewards({ value: distribution_9.ValidatorOutstandingRewards.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendValidatorOutstandingRewards: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendValidatorSlashEvent({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendValidatorSlashEvent: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.validatorSlashEvent({ value: distribution_10.ValidatorSlashEvent.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendValidatorSlashEvent: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryParamsResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryParamsResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryParamsResponse({ value: query_14.QueryParamsResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryParamsResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryValidatorCommissionRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryValidatorCommissionRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryValidatorCommissionRequest({ value: query_15.QueryValidatorCommissionRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryValidatorCommissionRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryDelegationRewardsRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryDelegationRewardsRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryDelegationRewardsRequest({ value: query_16.QueryDelegationRewardsRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryDelegationRewardsRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryDelegationTotalRewardsResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryDelegationTotalRewardsResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryDelegationTotalRewardsResponse({ value: query_17.QueryDelegationTotalRewardsResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryDelegationTotalRewardsResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendCommunityPoolSpendProposalWithDeposit({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendCommunityPoolSpendProposalWithDeposit: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.communityPoolSpendProposalWithDeposit({ value: distribution_11.CommunityPoolSpendProposalWithDeposit.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendCommunityPoolSpendProposalWithDeposit: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendValidatorSlashEventRecord({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendValidatorSlashEventRecord: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.validatorSlashEventRecord({ value: genesis_7.ValidatorSlashEventRecord.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendValidatorSlashEventRecord: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryValidatorOutstandingRewardsResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryValidatorOutstandingRewardsResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryValidatorOutstandingRewardsResponse({ value: query_18.QueryValidatorOutstandingRewardsResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryValidatorOutstandingRewardsResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgDepositValidatorRewardsPoolResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgDepositValidatorRewardsPoolResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgDepositValidatorRewardsPoolResponse({ value: tx_13.MsgDepositValidatorRewardsPoolResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgDepositValidatorRewardsPoolResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryParamsRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryParamsRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryParamsRequest({ value: query_19.QueryParamsRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryParamsRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryDelegationTotalRewardsRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryDelegationTotalRewardsRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryDelegationTotalRewardsRequest({ value: query_20.QueryDelegationTotalRewardsRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryDelegationTotalRewardsRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendValidatorHistoricalRewards({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendValidatorHistoricalRewards: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.validatorHistoricalRewards({ value: distribution_12.ValidatorHistoricalRewards.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendValidatorHistoricalRewards: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgSetWithdrawAddress({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgSetWithdrawAddress: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgSetWithdrawAddress({ value: tx_14.MsgSetWithdrawAddress.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgSetWithdrawAddress: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendDelegatorWithdrawInfo({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendDelegatorWithdrawInfo: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.delegatorWithdrawInfo({ value: genesis_8.DelegatorWithdrawInfo.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendDelegatorWithdrawInfo: Could not broadcast Tx: ' + e.message);
            }
        },
        delegationDelegatorReward({ value }) {
            try {
                return { typeUrl: "/cosmos.distribution.v1beta1.DelegationDelegatorReward", value: distribution_1.DelegationDelegatorReward.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:DelegationDelegatorReward: Could not create message: ' + e.message);
            }
        },
        queryValidatorDistributionInfoRequest({ value }) {
            try {
                return { typeUrl: "/cosmos.distribution.v1beta1.QueryValidatorDistributionInfoRequest", value: query_1.QueryValidatorDistributionInfoRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryValidatorDistributionInfoRequest: Could not create message: ' + e.message);
            }
        },
        msgFundCommunityPoolResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.distribution.v1beta1.MsgFundCommunityPoolResponse", value: tx_1.MsgFundCommunityPoolResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgFundCommunityPoolResponse: Could not create message: ' + e.message);
            }
        },
        feePool({ value }) {
            try {
                return { typeUrl: "/cosmos.distribution.v1beta1.FeePool", value: distribution_2.FeePool.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:FeePool: Could not create message: ' + e.message);
            }
        },
        params({ value }) {
            try {
                return { typeUrl: "/cosmos.distribution.v1beta1.Params", value: distribution_3.Params.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:Params: Could not create message: ' + e.message);
            }
        },
        queryValidatorSlashesResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.distribution.v1beta1.QueryValidatorSlashesResponse", value: query_2.QueryValidatorSlashesResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryValidatorSlashesResponse: Could not create message: ' + e.message);
            }
        },
        msgWithdrawDelegatorReward({ value }) {
            try {
                return { typeUrl: "/cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward", value: tx_2.MsgWithdrawDelegatorReward.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgWithdrawDelegatorReward: Could not create message: ' + e.message);
            }
        },
        validatorAccumulatedCommission({ value }) {
            try {
                return { typeUrl: "/cosmos.distribution.v1beta1.ValidatorAccumulatedCommission", value: distribution_4.ValidatorAccumulatedCommission.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:ValidatorAccumulatedCommission: Could not create message: ' + e.message);
            }
        },
        genesisState({ value }) {
            try {
                return { typeUrl: "/cosmos.distribution.v1beta1.GenesisState", value: genesis_1.GenesisState.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:GenesisState: Could not create message: ' + e.message);
            }
        },
        queryDelegatorWithdrawAddressResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.distribution.v1beta1.QueryDelegatorWithdrawAddressResponse", value: query_3.QueryDelegatorWithdrawAddressResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryDelegatorWithdrawAddressResponse: Could not create message: ' + e.message);
            }
        },
        msgWithdrawDelegatorRewardResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.distribution.v1beta1.MsgWithdrawDelegatorRewardResponse", value: tx_3.MsgWithdrawDelegatorRewardResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgWithdrawDelegatorRewardResponse: Could not create message: ' + e.message);
            }
        },
        validatorCurrentRewards({ value }) {
            try {
                return { typeUrl: "/cosmos.distribution.v1beta1.ValidatorCurrentRewards", value: distribution_5.ValidatorCurrentRewards.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:ValidatorCurrentRewards: Could not create message: ' + e.message);
            }
        },
        msgWithdrawValidatorCommission({ value }) {
            try {
                return { typeUrl: "/cosmos.distribution.v1beta1.MsgWithdrawValidatorCommission", value: tx_4.MsgWithdrawValidatorCommission.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgWithdrawValidatorCommission: Could not create message: ' + e.message);
            }
        },
        validatorOutstandingRewardsRecord({ value }) {
            try {
                return { typeUrl: "/cosmos.distribution.v1beta1.ValidatorOutstandingRewardsRecord", value: genesis_2.ValidatorOutstandingRewardsRecord.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:ValidatorOutstandingRewardsRecord: Could not create message: ' + e.message);
            }
        },
        validatorCurrentRewardsRecord({ value }) {
            try {
                return { typeUrl: "/cosmos.distribution.v1beta1.ValidatorCurrentRewardsRecord", value: genesis_3.ValidatorCurrentRewardsRecord.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:ValidatorCurrentRewardsRecord: Could not create message: ' + e.message);
            }
        },
        queryDelegatorValidatorsResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.distribution.v1beta1.QueryDelegatorValidatorsResponse", value: query_4.QueryDelegatorValidatorsResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryDelegatorValidatorsResponse: Could not create message: ' + e.message);
            }
        },
        msgDepositValidatorRewardsPool({ value }) {
            try {
                return { typeUrl: "/cosmos.distribution.v1beta1.MsgDepositValidatorRewardsPool", value: tx_5.MsgDepositValidatorRewardsPool.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgDepositValidatorRewardsPool: Could not create message: ' + e.message);
            }
        },
        validatorSlashEvents({ value }) {
            try {
                return { typeUrl: "/cosmos.distribution.v1beta1.ValidatorSlashEvents", value: distribution_6.ValidatorSlashEvents.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:ValidatorSlashEvents: Could not create message: ' + e.message);
            }
        },
        queryValidatorOutstandingRewardsRequest({ value }) {
            try {
                return { typeUrl: "/cosmos.distribution.v1beta1.QueryValidatorOutstandingRewardsRequest", value: query_5.QueryValidatorOutstandingRewardsRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryValidatorOutstandingRewardsRequest: Could not create message: ' + e.message);
            }
        },
        queryValidatorCommissionResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.distribution.v1beta1.QueryValidatorCommissionResponse", value: query_6.QueryValidatorCommissionResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryValidatorCommissionResponse: Could not create message: ' + e.message);
            }
        },
        msgUpdateParamsResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.distribution.v1beta1.MsgUpdateParamsResponse", value: tx_6.MsgUpdateParamsResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateParamsResponse: Could not create message: ' + e.message);
            }
        },
        msgCommunityPoolSpendResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.distribution.v1beta1.MsgCommunityPoolSpendResponse", value: tx_7.MsgCommunityPoolSpendResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgCommunityPoolSpendResponse: Could not create message: ' + e.message);
            }
        },
        queryValidatorDistributionInfoResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.distribution.v1beta1.QueryValidatorDistributionInfoResponse", value: query_7.QueryValidatorDistributionInfoResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryValidatorDistributionInfoResponse: Could not create message: ' + e.message);
            }
        },
        queryCommunityPoolResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.distribution.v1beta1.QueryCommunityPoolResponse", value: query_8.QueryCommunityPoolResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryCommunityPoolResponse: Could not create message: ' + e.message);
            }
        },
        validatorAccumulatedCommissionRecord({ value }) {
            try {
                return { typeUrl: "/cosmos.distribution.v1beta1.ValidatorAccumulatedCommissionRecord", value: genesis_4.ValidatorAccumulatedCommissionRecord.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:ValidatorAccumulatedCommissionRecord: Could not create message: ' + e.message);
            }
        },
        validatorHistoricalRewardsRecord({ value }) {
            try {
                return { typeUrl: "/cosmos.distribution.v1beta1.ValidatorHistoricalRewardsRecord", value: genesis_5.ValidatorHistoricalRewardsRecord.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:ValidatorHistoricalRewardsRecord: Could not create message: ' + e.message);
            }
        },
        queryValidatorSlashesRequest({ value }) {
            try {
                return { typeUrl: "/cosmos.distribution.v1beta1.QueryValidatorSlashesRequest", value: query_9.QueryValidatorSlashesRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryValidatorSlashesRequest: Could not create message: ' + e.message);
            }
        },
        queryDelegationRewardsResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.distribution.v1beta1.QueryDelegationRewardsResponse", value: query_10.QueryDelegationRewardsResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryDelegationRewardsResponse: Could not create message: ' + e.message);
            }
        },
        queryCommunityPoolRequest({ value }) {
            try {
                return { typeUrl: "/cosmos.distribution.v1beta1.QueryCommunityPoolRequest", value: query_11.QueryCommunityPoolRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryCommunityPoolRequest: Could not create message: ' + e.message);
            }
        },
        msgWithdrawValidatorCommissionResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.distribution.v1beta1.MsgWithdrawValidatorCommissionResponse", value: tx_8.MsgWithdrawValidatorCommissionResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgWithdrawValidatorCommissionResponse: Could not create message: ' + e.message);
            }
        },
        communityPoolSpendProposal({ value }) {
            try {
                return { typeUrl: "/cosmos.distribution.v1beta1.CommunityPoolSpendProposal", value: distribution_7.CommunityPoolSpendProposal.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:CommunityPoolSpendProposal: Could not create message: ' + e.message);
            }
        },
        delegatorStartingInfo({ value }) {
            try {
                return { typeUrl: "/cosmos.distribution.v1beta1.DelegatorStartingInfo", value: distribution_8.DelegatorStartingInfo.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:DelegatorStartingInfo: Could not create message: ' + e.message);
            }
        },
        queryDelegatorValidatorsRequest({ value }) {
            try {
                return { typeUrl: "/cosmos.distribution.v1beta1.QueryDelegatorValidatorsRequest", value: query_12.QueryDelegatorValidatorsRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryDelegatorValidatorsRequest: Could not create message: ' + e.message);
            }
        },
        msgSetWithdrawAddressResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.distribution.v1beta1.MsgSetWithdrawAddressResponse", value: tx_9.MsgSetWithdrawAddressResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgSetWithdrawAddressResponse: Could not create message: ' + e.message);
            }
        },
        msgCommunityPoolSpend({ value }) {
            try {
                return { typeUrl: "/cosmos.distribution.v1beta1.MsgCommunityPoolSpend", value: tx_10.MsgCommunityPoolSpend.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgCommunityPoolSpend: Could not create message: ' + e.message);
            }
        },
        msgUpdateParams({ value }) {
            try {
                return { typeUrl: "/cosmos.distribution.v1beta1.MsgUpdateParams", value: tx_11.MsgUpdateParams.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateParams: Could not create message: ' + e.message);
            }
        },
        delegatorStartingInfoRecord({ value }) {
            try {
                return { typeUrl: "/cosmos.distribution.v1beta1.DelegatorStartingInfoRecord", value: genesis_6.DelegatorStartingInfoRecord.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:DelegatorStartingInfoRecord: Could not create message: ' + e.message);
            }
        },
        queryDelegatorWithdrawAddressRequest({ value }) {
            try {
                return { typeUrl: "/cosmos.distribution.v1beta1.QueryDelegatorWithdrawAddressRequest", value: query_13.QueryDelegatorWithdrawAddressRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryDelegatorWithdrawAddressRequest: Could not create message: ' + e.message);
            }
        },
        msgFundCommunityPool({ value }) {
            try {
                return { typeUrl: "/cosmos.distribution.v1beta1.MsgFundCommunityPool", value: tx_12.MsgFundCommunityPool.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgFundCommunityPool: Could not create message: ' + e.message);
            }
        },
        validatorOutstandingRewards({ value }) {
            try {
                return { typeUrl: "/cosmos.distribution.v1beta1.ValidatorOutstandingRewards", value: distribution_9.ValidatorOutstandingRewards.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:ValidatorOutstandingRewards: Could not create message: ' + e.message);
            }
        },
        validatorSlashEvent({ value }) {
            try {
                return { typeUrl: "/cosmos.distribution.v1beta1.ValidatorSlashEvent", value: distribution_10.ValidatorSlashEvent.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:ValidatorSlashEvent: Could not create message: ' + e.message);
            }
        },
        queryParamsResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.distribution.v1beta1.QueryParamsResponse", value: query_14.QueryParamsResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryParamsResponse: Could not create message: ' + e.message);
            }
        },
        queryValidatorCommissionRequest({ value }) {
            try {
                return { typeUrl: "/cosmos.distribution.v1beta1.QueryValidatorCommissionRequest", value: query_15.QueryValidatorCommissionRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryValidatorCommissionRequest: Could not create message: ' + e.message);
            }
        },
        queryDelegationRewardsRequest({ value }) {
            try {
                return { typeUrl: "/cosmos.distribution.v1beta1.QueryDelegationRewardsRequest", value: query_16.QueryDelegationRewardsRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryDelegationRewardsRequest: Could not create message: ' + e.message);
            }
        },
        queryDelegationTotalRewardsResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.distribution.v1beta1.QueryDelegationTotalRewardsResponse", value: query_17.QueryDelegationTotalRewardsResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryDelegationTotalRewardsResponse: Could not create message: ' + e.message);
            }
        },
        communityPoolSpendProposalWithDeposit({ value }) {
            try {
                return { typeUrl: "/cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit", value: distribution_11.CommunityPoolSpendProposalWithDeposit.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:CommunityPoolSpendProposalWithDeposit: Could not create message: ' + e.message);
            }
        },
        validatorSlashEventRecord({ value }) {
            try {
                return { typeUrl: "/cosmos.distribution.v1beta1.ValidatorSlashEventRecord", value: genesis_7.ValidatorSlashEventRecord.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:ValidatorSlashEventRecord: Could not create message: ' + e.message);
            }
        },
        queryValidatorOutstandingRewardsResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.distribution.v1beta1.QueryValidatorOutstandingRewardsResponse", value: query_18.QueryValidatorOutstandingRewardsResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryValidatorOutstandingRewardsResponse: Could not create message: ' + e.message);
            }
        },
        msgDepositValidatorRewardsPoolResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.distribution.v1beta1.MsgDepositValidatorRewardsPoolResponse", value: tx_13.MsgDepositValidatorRewardsPoolResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgDepositValidatorRewardsPoolResponse: Could not create message: ' + e.message);
            }
        },
        queryParamsRequest({ value }) {
            try {
                return { typeUrl: "/cosmos.distribution.v1beta1.QueryParamsRequest", value: query_19.QueryParamsRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryParamsRequest: Could not create message: ' + e.message);
            }
        },
        queryDelegationTotalRewardsRequest({ value }) {
            try {
                return { typeUrl: "/cosmos.distribution.v1beta1.QueryDelegationTotalRewardsRequest", value: query_20.QueryDelegationTotalRewardsRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryDelegationTotalRewardsRequest: Could not create message: ' + e.message);
            }
        },
        validatorHistoricalRewards({ value }) {
            try {
                return { typeUrl: "/cosmos.distribution.v1beta1.ValidatorHistoricalRewards", value: distribution_12.ValidatorHistoricalRewards.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:ValidatorHistoricalRewards: Could not create message: ' + e.message);
            }
        },
        msgSetWithdrawAddress({ value }) {
            try {
                return { typeUrl: "/cosmos.distribution.v1beta1.MsgSetWithdrawAddress", value: tx_14.MsgSetWithdrawAddress.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgSetWithdrawAddress: Could not create message: ' + e.message);
            }
        },
        delegatorWithdrawInfo({ value }) {
            try {
                return { typeUrl: "/cosmos.distribution.v1beta1.DelegatorWithdrawInfo", value: genesis_8.DelegatorWithdrawInfo.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:DelegatorWithdrawInfo: Could not create message: ' + e.message);
            }
        },
    };
};
exports.txClient = txClient;
const queryClient = ({ addr: addr } = { addr: "http://localhost:1317" }) => {
    return new rest_1.Api({ baseURL: addr });
};
exports.queryClient = queryClient;
class SDKModule {
    constructor(client) {
        this.registry = [];
        this.query = (0, exports.queryClient)({ addr: client.env.apiURL });
        this.updateTX(client);
        this.structure = {};
        client.on('signer-changed', (signer) => {
            this.updateTX(client);
        });
    }
    updateTX(client) {
        const methods = (0, exports.txClient)({
            signer: client.signer,
            addr: client.env.rpcURL,
            prefix: client.env.prefix ?? "cosmos",
        });
        this.tx = methods;
        for (let m in methods) {
            this.tx[m] = methods[m].bind(this.tx);
        }
    }
}
;
const IgntModule = (test) => {
    return {
        module: {
            CosmosDistributionV1Beta1: new SDKModule(test)
        },
        registry: registry_1.msgTypes
    };
};
exports.default = IgntModule;
