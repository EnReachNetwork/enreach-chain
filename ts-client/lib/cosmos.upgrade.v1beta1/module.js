"use strict";
// Generated by Ignite ignite.com/cli
Object.defineProperty(exports, "__esModule", { value: true });
exports.queryClient = exports.txClient = exports.registry = exports.QueryAuthorityResponse = exports.QueryModuleVersionsResponse = exports.QueryModuleVersionsRequest = exports.QueryAppliedPlanRequest = exports.MsgCancelUpgradeResponse = exports.MsgSoftwareUpgradeResponse = exports.SoftwareUpgradeProposal = exports.QueryAuthorityRequest = exports.MsgCancelUpgrade = exports.MsgSoftwareUpgrade = exports.CancelSoftwareUpgradeProposal = exports.QueryAppliedPlanResponse = exports.QueryCurrentPlanResponse = exports.ModuleVersion = exports.QueryUpgradedConsensusStateResponse = exports.QueryUpgradedConsensusStateRequest = exports.QueryCurrentPlanRequest = exports.Plan = void 0;
const stargate_1 = require("@cosmjs/stargate");
const proto_signing_1 = require("@cosmjs/proto-signing");
const registry_1 = require("./registry");
const rest_1 = require("./rest");
const upgrade_1 = require("./types/cosmos/upgrade/v1beta1/upgrade");
Object.defineProperty(exports, "Plan", { enumerable: true, get: function () { return upgrade_1.Plan; } });
const query_1 = require("./types/cosmos/upgrade/v1beta1/query");
Object.defineProperty(exports, "QueryCurrentPlanRequest", { enumerable: true, get: function () { return query_1.QueryCurrentPlanRequest; } });
const query_2 = require("./types/cosmos/upgrade/v1beta1/query");
Object.defineProperty(exports, "QueryUpgradedConsensusStateRequest", { enumerable: true, get: function () { return query_2.QueryUpgradedConsensusStateRequest; } });
const query_3 = require("./types/cosmos/upgrade/v1beta1/query");
Object.defineProperty(exports, "QueryUpgradedConsensusStateResponse", { enumerable: true, get: function () { return query_3.QueryUpgradedConsensusStateResponse; } });
const upgrade_2 = require("./types/cosmos/upgrade/v1beta1/upgrade");
Object.defineProperty(exports, "ModuleVersion", { enumerable: true, get: function () { return upgrade_2.ModuleVersion; } });
const query_4 = require("./types/cosmos/upgrade/v1beta1/query");
Object.defineProperty(exports, "QueryCurrentPlanResponse", { enumerable: true, get: function () { return query_4.QueryCurrentPlanResponse; } });
const query_5 = require("./types/cosmos/upgrade/v1beta1/query");
Object.defineProperty(exports, "QueryAppliedPlanResponse", { enumerable: true, get: function () { return query_5.QueryAppliedPlanResponse; } });
const upgrade_3 = require("./types/cosmos/upgrade/v1beta1/upgrade");
Object.defineProperty(exports, "CancelSoftwareUpgradeProposal", { enumerable: true, get: function () { return upgrade_3.CancelSoftwareUpgradeProposal; } });
const tx_1 = require("./types/cosmos/upgrade/v1beta1/tx");
Object.defineProperty(exports, "MsgSoftwareUpgrade", { enumerable: true, get: function () { return tx_1.MsgSoftwareUpgrade; } });
const tx_2 = require("./types/cosmos/upgrade/v1beta1/tx");
Object.defineProperty(exports, "MsgCancelUpgrade", { enumerable: true, get: function () { return tx_2.MsgCancelUpgrade; } });
const query_6 = require("./types/cosmos/upgrade/v1beta1/query");
Object.defineProperty(exports, "QueryAuthorityRequest", { enumerable: true, get: function () { return query_6.QueryAuthorityRequest; } });
const upgrade_4 = require("./types/cosmos/upgrade/v1beta1/upgrade");
Object.defineProperty(exports, "SoftwareUpgradeProposal", { enumerable: true, get: function () { return upgrade_4.SoftwareUpgradeProposal; } });
const tx_3 = require("./types/cosmos/upgrade/v1beta1/tx");
Object.defineProperty(exports, "MsgSoftwareUpgradeResponse", { enumerable: true, get: function () { return tx_3.MsgSoftwareUpgradeResponse; } });
const tx_4 = require("./types/cosmos/upgrade/v1beta1/tx");
Object.defineProperty(exports, "MsgCancelUpgradeResponse", { enumerable: true, get: function () { return tx_4.MsgCancelUpgradeResponse; } });
const query_7 = require("./types/cosmos/upgrade/v1beta1/query");
Object.defineProperty(exports, "QueryAppliedPlanRequest", { enumerable: true, get: function () { return query_7.QueryAppliedPlanRequest; } });
const query_8 = require("./types/cosmos/upgrade/v1beta1/query");
Object.defineProperty(exports, "QueryModuleVersionsRequest", { enumerable: true, get: function () { return query_8.QueryModuleVersionsRequest; } });
const query_9 = require("./types/cosmos/upgrade/v1beta1/query");
Object.defineProperty(exports, "QueryModuleVersionsResponse", { enumerable: true, get: function () { return query_9.QueryModuleVersionsResponse; } });
const query_10 = require("./types/cosmos/upgrade/v1beta1/query");
Object.defineProperty(exports, "QueryAuthorityResponse", { enumerable: true, get: function () { return query_10.QueryAuthorityResponse; } });
exports.registry = new proto_signing_1.Registry(registry_1.msgTypes);
function getStructure(template) {
    const structure = { fields: [] };
    for (let [key, value] of Object.entries(template)) {
        let field = { name: key, type: typeof value };
        structure.fields.push(field);
    }
    return structure;
}
const defaultFee = {
    amount: [],
    gas: "200000",
};
const txClient = ({ signer, prefix, addr } = { addr: "http://localhost:26657", prefix: "cosmos" }) => {
    return {
        async sendPlan({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendPlan: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.plan({ value: upgrade_1.Plan.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendPlan: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryCurrentPlanRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryCurrentPlanRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryCurrentPlanRequest({ value: query_1.QueryCurrentPlanRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryCurrentPlanRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryUpgradedConsensusStateRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryUpgradedConsensusStateRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryUpgradedConsensusStateRequest({ value: query_2.QueryUpgradedConsensusStateRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryUpgradedConsensusStateRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryUpgradedConsensusStateResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryUpgradedConsensusStateResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryUpgradedConsensusStateResponse({ value: query_3.QueryUpgradedConsensusStateResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryUpgradedConsensusStateResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendModuleVersion({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendModuleVersion: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.moduleVersion({ value: upgrade_2.ModuleVersion.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendModuleVersion: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryCurrentPlanResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryCurrentPlanResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryCurrentPlanResponse({ value: query_4.QueryCurrentPlanResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryCurrentPlanResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryAppliedPlanResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryAppliedPlanResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryAppliedPlanResponse({ value: query_5.QueryAppliedPlanResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryAppliedPlanResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendCancelSoftwareUpgradeProposal({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendCancelSoftwareUpgradeProposal: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.cancelSoftwareUpgradeProposal({ value: upgrade_3.CancelSoftwareUpgradeProposal.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendCancelSoftwareUpgradeProposal: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgSoftwareUpgrade({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgSoftwareUpgrade: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgSoftwareUpgrade({ value: tx_1.MsgSoftwareUpgrade.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgSoftwareUpgrade: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgCancelUpgrade({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgCancelUpgrade: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgCancelUpgrade({ value: tx_2.MsgCancelUpgrade.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgCancelUpgrade: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryAuthorityRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryAuthorityRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryAuthorityRequest({ value: query_6.QueryAuthorityRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryAuthorityRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendSoftwareUpgradeProposal({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendSoftwareUpgradeProposal: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.softwareUpgradeProposal({ value: upgrade_4.SoftwareUpgradeProposal.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendSoftwareUpgradeProposal: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgSoftwareUpgradeResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgSoftwareUpgradeResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgSoftwareUpgradeResponse({ value: tx_3.MsgSoftwareUpgradeResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgSoftwareUpgradeResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgCancelUpgradeResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgCancelUpgradeResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgCancelUpgradeResponse({ value: tx_4.MsgCancelUpgradeResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgCancelUpgradeResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryAppliedPlanRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryAppliedPlanRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryAppliedPlanRequest({ value: query_7.QueryAppliedPlanRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryAppliedPlanRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryModuleVersionsRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryModuleVersionsRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryModuleVersionsRequest({ value: query_8.QueryModuleVersionsRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryModuleVersionsRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryModuleVersionsResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryModuleVersionsResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryModuleVersionsResponse({ value: query_9.QueryModuleVersionsResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryModuleVersionsResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryAuthorityResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryAuthorityResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryAuthorityResponse({ value: query_10.QueryAuthorityResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryAuthorityResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        plan({ value }) {
            try {
                return { typeUrl: "/cosmos.upgrade.v1beta1.Plan", value: upgrade_1.Plan.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:Plan: Could not create message: ' + e.message);
            }
        },
        queryCurrentPlanRequest({ value }) {
            try {
                return { typeUrl: "/cosmos.upgrade.v1beta1.QueryCurrentPlanRequest", value: query_1.QueryCurrentPlanRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryCurrentPlanRequest: Could not create message: ' + e.message);
            }
        },
        queryUpgradedConsensusStateRequest({ value }) {
            try {
                return { typeUrl: "/cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateRequest", value: query_2.QueryUpgradedConsensusStateRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryUpgradedConsensusStateRequest: Could not create message: ' + e.message);
            }
        },
        queryUpgradedConsensusStateResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateResponse", value: query_3.QueryUpgradedConsensusStateResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryUpgradedConsensusStateResponse: Could not create message: ' + e.message);
            }
        },
        moduleVersion({ value }) {
            try {
                return { typeUrl: "/cosmos.upgrade.v1beta1.ModuleVersion", value: upgrade_2.ModuleVersion.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:ModuleVersion: Could not create message: ' + e.message);
            }
        },
        queryCurrentPlanResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.upgrade.v1beta1.QueryCurrentPlanResponse", value: query_4.QueryCurrentPlanResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryCurrentPlanResponse: Could not create message: ' + e.message);
            }
        },
        queryAppliedPlanResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.upgrade.v1beta1.QueryAppliedPlanResponse", value: query_5.QueryAppliedPlanResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryAppliedPlanResponse: Could not create message: ' + e.message);
            }
        },
        cancelSoftwareUpgradeProposal({ value }) {
            try {
                return { typeUrl: "/cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal", value: upgrade_3.CancelSoftwareUpgradeProposal.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:CancelSoftwareUpgradeProposal: Could not create message: ' + e.message);
            }
        },
        msgSoftwareUpgrade({ value }) {
            try {
                return { typeUrl: "/cosmos.upgrade.v1beta1.MsgSoftwareUpgrade", value: tx_1.MsgSoftwareUpgrade.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgSoftwareUpgrade: Could not create message: ' + e.message);
            }
        },
        msgCancelUpgrade({ value }) {
            try {
                return { typeUrl: "/cosmos.upgrade.v1beta1.MsgCancelUpgrade", value: tx_2.MsgCancelUpgrade.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgCancelUpgrade: Could not create message: ' + e.message);
            }
        },
        queryAuthorityRequest({ value }) {
            try {
                return { typeUrl: "/cosmos.upgrade.v1beta1.QueryAuthorityRequest", value: query_6.QueryAuthorityRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryAuthorityRequest: Could not create message: ' + e.message);
            }
        },
        softwareUpgradeProposal({ value }) {
            try {
                return { typeUrl: "/cosmos.upgrade.v1beta1.SoftwareUpgradeProposal", value: upgrade_4.SoftwareUpgradeProposal.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:SoftwareUpgradeProposal: Could not create message: ' + e.message);
            }
        },
        msgSoftwareUpgradeResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.upgrade.v1beta1.MsgSoftwareUpgradeResponse", value: tx_3.MsgSoftwareUpgradeResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgSoftwareUpgradeResponse: Could not create message: ' + e.message);
            }
        },
        msgCancelUpgradeResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.upgrade.v1beta1.MsgCancelUpgradeResponse", value: tx_4.MsgCancelUpgradeResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgCancelUpgradeResponse: Could not create message: ' + e.message);
            }
        },
        queryAppliedPlanRequest({ value }) {
            try {
                return { typeUrl: "/cosmos.upgrade.v1beta1.QueryAppliedPlanRequest", value: query_7.QueryAppliedPlanRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryAppliedPlanRequest: Could not create message: ' + e.message);
            }
        },
        queryModuleVersionsRequest({ value }) {
            try {
                return { typeUrl: "/cosmos.upgrade.v1beta1.QueryModuleVersionsRequest", value: query_8.QueryModuleVersionsRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryModuleVersionsRequest: Could not create message: ' + e.message);
            }
        },
        queryModuleVersionsResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.upgrade.v1beta1.QueryModuleVersionsResponse", value: query_9.QueryModuleVersionsResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryModuleVersionsResponse: Could not create message: ' + e.message);
            }
        },
        queryAuthorityResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.upgrade.v1beta1.QueryAuthorityResponse", value: query_10.QueryAuthorityResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryAuthorityResponse: Could not create message: ' + e.message);
            }
        },
    };
};
exports.txClient = txClient;
const queryClient = ({ addr: addr } = { addr: "http://localhost:1317" }) => {
    return new rest_1.Api({ baseURL: addr });
};
exports.queryClient = queryClient;
class SDKModule {
    constructor(client) {
        this.registry = [];
        this.query = (0, exports.queryClient)({ addr: client.env.apiURL });
        this.updateTX(client);
        this.structure = {};
        client.on('signer-changed', (signer) => {
            this.updateTX(client);
        });
    }
    updateTX(client) {
        const methods = (0, exports.txClient)({
            signer: client.signer,
            addr: client.env.rpcURL,
            prefix: client.env.prefix ?? "cosmos",
        });
        this.tx = methods;
        for (let m in methods) {
            this.tx[m] = methods[m].bind(this.tx);
        }
    }
}
;
const IgntModule = (test) => {
    return {
        module: {
            CosmosUpgradeV1Beta1: new SDKModule(test)
        },
        registry: registry_1.msgTypes
    };
};
exports.default = IgntModule;
