"use strict";
// Generated by Ignite ignite.com/cli
Object.defineProperty(exports, "__esModule", { value: true });
exports.queryClient = exports.txClient = exports.registry = exports.MsgSubmitEvidenceResponse = exports.QueryAllEvidenceRequest = exports.Equivocation = exports.QueryEvidenceRequest = exports.GenesisState = exports.MsgSubmitEvidence = exports.QueryAllEvidenceResponse = exports.QueryEvidenceResponse = void 0;
const stargate_1 = require("@cosmjs/stargate");
const proto_signing_1 = require("@cosmjs/proto-signing");
const registry_1 = require("./registry");
const rest_1 = require("./rest");
const query_1 = require("./types/cosmos/evidence/v1beta1/query");
Object.defineProperty(exports, "QueryEvidenceResponse", { enumerable: true, get: function () { return query_1.QueryEvidenceResponse; } });
const query_2 = require("./types/cosmos/evidence/v1beta1/query");
Object.defineProperty(exports, "QueryAllEvidenceResponse", { enumerable: true, get: function () { return query_2.QueryAllEvidenceResponse; } });
const tx_1 = require("./types/cosmos/evidence/v1beta1/tx");
Object.defineProperty(exports, "MsgSubmitEvidence", { enumerable: true, get: function () { return tx_1.MsgSubmitEvidence; } });
const genesis_1 = require("./types/cosmos/evidence/v1beta1/genesis");
Object.defineProperty(exports, "GenesisState", { enumerable: true, get: function () { return genesis_1.GenesisState; } });
const query_3 = require("./types/cosmos/evidence/v1beta1/query");
Object.defineProperty(exports, "QueryEvidenceRequest", { enumerable: true, get: function () { return query_3.QueryEvidenceRequest; } });
const evidence_1 = require("./types/cosmos/evidence/v1beta1/evidence");
Object.defineProperty(exports, "Equivocation", { enumerable: true, get: function () { return evidence_1.Equivocation; } });
const query_4 = require("./types/cosmos/evidence/v1beta1/query");
Object.defineProperty(exports, "QueryAllEvidenceRequest", { enumerable: true, get: function () { return query_4.QueryAllEvidenceRequest; } });
const tx_2 = require("./types/cosmos/evidence/v1beta1/tx");
Object.defineProperty(exports, "MsgSubmitEvidenceResponse", { enumerable: true, get: function () { return tx_2.MsgSubmitEvidenceResponse; } });
exports.registry = new proto_signing_1.Registry(registry_1.msgTypes);
function getStructure(template) {
    const structure = { fields: [] };
    for (let [key, value] of Object.entries(template)) {
        let field = { name: key, type: typeof value };
        structure.fields.push(field);
    }
    return structure;
}
const defaultFee = {
    amount: [],
    gas: "200000",
};
const txClient = ({ signer, prefix, addr } = { addr: "http://localhost:26657", prefix: "cosmos" }) => {
    return {
        async sendQueryEvidenceResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryEvidenceResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryEvidenceResponse({ value: query_1.QueryEvidenceResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryEvidenceResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryAllEvidenceResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryAllEvidenceResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryAllEvidenceResponse({ value: query_2.QueryAllEvidenceResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryAllEvidenceResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgSubmitEvidence({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgSubmitEvidence: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgSubmitEvidence({ value: tx_1.MsgSubmitEvidence.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgSubmitEvidence: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendGenesisState({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendGenesisState: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.genesisState({ value: genesis_1.GenesisState.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendGenesisState: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryEvidenceRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryEvidenceRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryEvidenceRequest({ value: query_3.QueryEvidenceRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryEvidenceRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendEquivocation({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendEquivocation: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.equivocation({ value: evidence_1.Equivocation.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendEquivocation: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendQueryAllEvidenceRequest({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendQueryAllEvidenceRequest: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.queryAllEvidenceRequest({ value: query_4.QueryAllEvidenceRequest.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendQueryAllEvidenceRequest: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgSubmitEvidenceResponse({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgSubmitEvidenceResponse: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(addr, signer, { registry: exports.registry });
                let msg = this.msgSubmitEvidenceResponse({ value: tx_2.MsgSubmitEvidenceResponse.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgSubmitEvidenceResponse: Could not broadcast Tx: ' + e.message);
            }
        },
        queryEvidenceResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.evidence.v1beta1.QueryEvidenceResponse", value: query_1.QueryEvidenceResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryEvidenceResponse: Could not create message: ' + e.message);
            }
        },
        queryAllEvidenceResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.evidence.v1beta1.QueryAllEvidenceResponse", value: query_2.QueryAllEvidenceResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryAllEvidenceResponse: Could not create message: ' + e.message);
            }
        },
        msgSubmitEvidence({ value }) {
            try {
                return { typeUrl: "/cosmos.evidence.v1beta1.MsgSubmitEvidence", value: tx_1.MsgSubmitEvidence.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgSubmitEvidence: Could not create message: ' + e.message);
            }
        },
        genesisState({ value }) {
            try {
                return { typeUrl: "/cosmos.evidence.v1beta1.GenesisState", value: genesis_1.GenesisState.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:GenesisState: Could not create message: ' + e.message);
            }
        },
        queryEvidenceRequest({ value }) {
            try {
                return { typeUrl: "/cosmos.evidence.v1beta1.QueryEvidenceRequest", value: query_3.QueryEvidenceRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryEvidenceRequest: Could not create message: ' + e.message);
            }
        },
        equivocation({ value }) {
            try {
                return { typeUrl: "/cosmos.evidence.v1beta1.Equivocation", value: evidence_1.Equivocation.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:Equivocation: Could not create message: ' + e.message);
            }
        },
        queryAllEvidenceRequest({ value }) {
            try {
                return { typeUrl: "/cosmos.evidence.v1beta1.QueryAllEvidenceRequest", value: query_4.QueryAllEvidenceRequest.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:QueryAllEvidenceRequest: Could not create message: ' + e.message);
            }
        },
        msgSubmitEvidenceResponse({ value }) {
            try {
                return { typeUrl: "/cosmos.evidence.v1beta1.MsgSubmitEvidenceResponse", value: tx_2.MsgSubmitEvidenceResponse.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgSubmitEvidenceResponse: Could not create message: ' + e.message);
            }
        },
    };
};
exports.txClient = txClient;
const queryClient = ({ addr: addr } = { addr: "http://localhost:1317" }) => {
    return new rest_1.Api({ baseURL: addr });
};
exports.queryClient = queryClient;
class SDKModule {
    constructor(client) {
        this.registry = [];
        this.query = (0, exports.queryClient)({ addr: client.env.apiURL });
        this.updateTX(client);
        this.structure = {};
        client.on('signer-changed', (signer) => {
            this.updateTX(client);
        });
    }
    updateTX(client) {
        const methods = (0, exports.txClient)({
            signer: client.signer,
            addr: client.env.rpcURL,
            prefix: client.env.prefix ?? "cosmos",
        });
        this.tx = methods;
        for (let m in methods) {
            this.tx[m] = methods[m].bind(this.tx);
        }
    }
}
;
const IgntModule = (test) => {
    return {
        module: {
            CosmosEvidenceV1Beta1: new SDKModule(test)
        },
        registry: registry_1.msgTypes
    };
};
exports.default = IgntModule;
