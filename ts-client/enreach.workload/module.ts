// Generated by Ignite ignite.com/cli

import { SigningStargateClient, DeliverTxResponse, StdFee } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { GenesisState } from "./types/enreach/workload/genesis";
import { MsgSubmitWorkreports } from "./types/enreach/workload/tx";
import { QueryGetAllWorkreportByEpochRequest } from "./types/enreach/workload/query";
import { QueryGetSuperiorRequest } from "./types/enreach/workload/query";
import { QueryGetHistoryEraRequest } from "./types/enreach/workload/query";
import { MsgCreateSuperiorResponse } from "./types/enreach/workload/tx";
import { QueryGetEpochProcessDataRequest } from "./types/enreach/workload/query";
import { NodeScore } from "./types/enreach/workload/workreport";
import { QueryParamResponse } from "./types/enreach/workload/query";
import { QueryGetCurrentEraResponse } from "./types/enreach/workload/query";
import { QueryGetEraProcessDataResponse } from "./types/enreach/workload/query";
import { CheatStatusCRDB } from "./types/enreach/workload/cheat_status";
import { QueryGetAllReputationPointChangeDataByEraRequest } from "./types/enreach/workload/query";
import { QueryGetCheatStatusCRDataResponse } from "./types/enreach/workload/query";
import { ReputationPointChangeRawData } from "./types/enreach/workload/reputationpoint";
import { EraInfo } from "./types/enreach/workload/era_info";
import { NodeWorkload } from "./types/enreach/workload/workload";
import { QueryGetManagerRPWorkloadResponse } from "./types/enreach/workload/query";
import { QueryGetAllManagerCSWorkloadByEraRequest } from "./types/enreach/workload/query";
import { QueryGetEraCheatStatusProcessDataResponse } from "./types/enreach/workload/query";
import { QueryGetAllEraCheatStatusProcessDataRequest } from "./types/enreach/workload/query";
import { ReputationDeltaPoint } from "./types/enreach/workload/reputationpoint";
import { EpochInfo } from "./types/enreach/workload/epoch_info";
import { QueryGetAllHistoryEraRequest } from "./types/enreach/workload/query";
import { EraProcessData } from "./types/enreach/workload/reputationpoint";
import { ManagerWRWorkload } from "./types/enreach/workload/workload";
import { QueryGetCurrentEraRequest } from "./types/enreach/workload/query";
import { CheatStatusCR } from "./types/enreach/workload/cheat_status";
import { CheatStatusCRMapDB } from "./types/enreach/workload/cheat_status";
import { QueryGetReputationDeltaPointResponse } from "./types/enreach/workload/query";
import { QueryGetPendingNextEraRequest } from "./types/enreach/workload/query";
import { QueryGetPendingNextEraResponse } from "./types/enreach/workload/query";
import { QueryGetAllReputationPointChangeDataByEraResponse } from "./types/enreach/workload/query";
import { QueryGetAllReputationDeltaPointByEraResponse } from "./types/enreach/workload/query";
import { MsgUpdateParamResponse } from "./types/enreach/workload/tx";
import { MsgSubmitWorkreportsResponse } from "./types/enreach/workload/tx";
import { QueryParamRequest } from "./types/enreach/workload/query";
import { NodeScoreDB } from "./types/enreach/workload/workreport";
import { CheatStatusCRData } from "./types/enreach/workload/cheat_status";
import { QueryGetAllCheatStatusCRDataByEraRequest } from "./types/enreach/workload/query";
import { MsgSubmitReputationPointChangeDataResponse } from "./types/enreach/workload/tx";
import { MsgSubmitCheatStatusCRResponse } from "./types/enreach/workload/tx";
import { QueryGetEpochLengthResponse } from "./types/enreach/workload/query";
import { QueryGetWorkreportRequest } from "./types/enreach/workload/query";
import { QueryGetAllEpochProcessDataRequest } from "./types/enreach/workload/query";
import { QueryGetAllReputationDeltaPointByEraRequest } from "./types/enreach/workload/query";
import { QueryGetAllEraProcessDataRequest } from "./types/enreach/workload/query";
import { QueryParamsResponse } from "./types/enreach/workload/query";
import { QueryGetHistoryEpochResponse } from "./types/enreach/workload/query";
import { QueryGetAllNodeWorkloadByEpochResponse } from "./types/enreach/workload/query";
import { QueryGetHistoryEraResponse } from "./types/enreach/workload/query";
import { QueryGetAllEraProcessDataResponse } from "./types/enreach/workload/query";
import { QueryGetNodeWorkloadRequest } from "./types/enreach/workload/query";
import { QueryGetEpochProcessDataResponse } from "./types/enreach/workload/query";
import { MsgUpdateSuperiorResponse } from "./types/enreach/workload/tx";
import { QueryGetPendingNextEpochRequest } from "./types/enreach/workload/query";
import { QueryGetManagerWRWorkloadRequest } from "./types/enreach/workload/query";
import { QueryGetEraLengthRequest } from "./types/enreach/workload/query";
import { QueryGetAllHistoryEraResponse } from "./types/enreach/workload/query";
import { MsgCreateSuperior } from "./types/enreach/workload/tx";
import { QueryGetHistoryEpochRequest } from "./types/enreach/workload/query";
import { QueryGetAllManagerRPWorkloadByEraRequest } from "./types/enreach/workload/query";
import { QueryGetWorkreportResponse } from "./types/enreach/workload/query";
import { QueryGetAllManagerRPWorkloadByEraResponse } from "./types/enreach/workload/query";
import { ReputationPointChangeData } from "./types/enreach/workload/reputationpoint";
import { ManagerNodeScoreMap } from "./types/enreach/workload/workreport";
import { QueryGetCurrentEpochResponse } from "./types/enreach/workload/query";
import { QueryGetPendingNextEpochResponse } from "./types/enreach/workload/query";
import { QueryGetManagerCSWorkloadResponse } from "./types/enreach/workload/query";
import { QueryGetAllWorkreportByEpochResponse } from "./types/enreach/workload/query";
import { QueryGetSuperiorResponse } from "./types/enreach/workload/query";
import { ReputationPointChangeRawDataMapDB } from "./types/enreach/workload/reputationpoint";
import { QueryGetAllCheatStatusCRDataByEraResponse } from "./types/enreach/workload/query";
import { QueryGetEraCheatStatusProcessDataRequest } from "./types/enreach/workload/query";
import { QueryGetAllManagerCSWorkloadByEraResponse } from "./types/enreach/workload/query";
import { QueryGetCheatStatusCRDataRequest } from "./types/enreach/workload/query";
import { QueryGetAllEraCheatStatusProcessDataResponse } from "./types/enreach/workload/query";
import { ReputationPointChangeRawDataDB } from "./types/enreach/workload/reputationpoint";
import { MsgUpdateSuperior } from "./types/enreach/workload/tx";
import { ManagerCSWorkload } from "./types/enreach/workload/workload";
import { QueryParamsRequest } from "./types/enreach/workload/query";
import { QueryGetCurrentEpochRequest } from "./types/enreach/workload/query";
import { QueryGetEraLengthResponse } from "./types/enreach/workload/query";
import { QueryGetReputationPointChangeDataRequest } from "./types/enreach/workload/query";
import { MsgUpdateParam } from "./types/enreach/workload/tx";
import { QueryGetAllHistoryEpochResponse } from "./types/enreach/workload/query";
import { QueryGetEraProcessDataRequest } from "./types/enreach/workload/query";
import { ManagerRPWorkload } from "./types/enreach/workload/workload";
import { QueryGetReputationDeltaPointRequest } from "./types/enreach/workload/query";
import { EpochProcessData } from "./types/enreach/workload/workreport";
import { EraCheatStatusProcessData } from "./types/enreach/workload/cheat_status";
import { QueryGetEpochLengthRequest } from "./types/enreach/workload/query";
import { QueryGetAllManagerWRWorkloadByEpochRequest } from "./types/enreach/workload/query";
import { Params } from "./types/enreach/workload/params";
import { QueryGetNodeWorkloadResponse } from "./types/enreach/workload/query";
import { QueryGetAllManagerWRWorkloadByEpochResponse } from "./types/enreach/workload/query";
import { QueryGetAllNodeWorkloadByEpochRequest } from "./types/enreach/workload/query";
import { QueryGetManagerCSWorkloadRequest } from "./types/enreach/workload/query";
import { QueryGetAllEpochProcessDataResponse } from "./types/enreach/workload/query";
import { MsgSubmitReputationPointChangeData } from "./types/enreach/workload/tx";
import { MsgSubmitCheatStatusCR } from "./types/enreach/workload/tx";
import { QueryGetManagerRPWorkloadRequest } from "./types/enreach/workload/query";
import { QueryGetReputationPointChangeDataResponse } from "./types/enreach/workload/query";
import { Superior } from "./types/enreach/workload/superior";
import { QueryGetAllHistoryEpochRequest } from "./types/enreach/workload/query";
import { QueryGetManagerWRWorkloadResponse } from "./types/enreach/workload/query";
import { Workreport } from "./types/enreach/workload/workreport";


export { GenesisState, MsgSubmitWorkreports, QueryGetAllWorkreportByEpochRequest, QueryGetSuperiorRequest, QueryGetHistoryEraRequest, MsgCreateSuperiorResponse, QueryGetEpochProcessDataRequest, NodeScore, QueryParamResponse, QueryGetCurrentEraResponse, QueryGetEraProcessDataResponse, CheatStatusCRDB, QueryGetAllReputationPointChangeDataByEraRequest, QueryGetCheatStatusCRDataResponse, ReputationPointChangeRawData, EraInfo, NodeWorkload, QueryGetManagerRPWorkloadResponse, QueryGetAllManagerCSWorkloadByEraRequest, QueryGetEraCheatStatusProcessDataResponse, QueryGetAllEraCheatStatusProcessDataRequest, ReputationDeltaPoint, EpochInfo, QueryGetAllHistoryEraRequest, EraProcessData, ManagerWRWorkload, QueryGetCurrentEraRequest, CheatStatusCR, CheatStatusCRMapDB, QueryGetReputationDeltaPointResponse, QueryGetPendingNextEraRequest, QueryGetPendingNextEraResponse, QueryGetAllReputationPointChangeDataByEraResponse, QueryGetAllReputationDeltaPointByEraResponse, MsgUpdateParamResponse, MsgSubmitWorkreportsResponse, QueryParamRequest, NodeScoreDB, CheatStatusCRData, QueryGetAllCheatStatusCRDataByEraRequest, MsgSubmitReputationPointChangeDataResponse, MsgSubmitCheatStatusCRResponse, QueryGetEpochLengthResponse, QueryGetWorkreportRequest, QueryGetAllEpochProcessDataRequest, QueryGetAllReputationDeltaPointByEraRequest, QueryGetAllEraProcessDataRequest, QueryParamsResponse, QueryGetHistoryEpochResponse, QueryGetAllNodeWorkloadByEpochResponse, QueryGetHistoryEraResponse, QueryGetAllEraProcessDataResponse, QueryGetNodeWorkloadRequest, QueryGetEpochProcessDataResponse, MsgUpdateSuperiorResponse, QueryGetPendingNextEpochRequest, QueryGetManagerWRWorkloadRequest, QueryGetEraLengthRequest, QueryGetAllHistoryEraResponse, MsgCreateSuperior, QueryGetHistoryEpochRequest, QueryGetAllManagerRPWorkloadByEraRequest, QueryGetWorkreportResponse, QueryGetAllManagerRPWorkloadByEraResponse, ReputationPointChangeData, ManagerNodeScoreMap, QueryGetCurrentEpochResponse, QueryGetPendingNextEpochResponse, QueryGetManagerCSWorkloadResponse, QueryGetAllWorkreportByEpochResponse, QueryGetSuperiorResponse, ReputationPointChangeRawDataMapDB, QueryGetAllCheatStatusCRDataByEraResponse, QueryGetEraCheatStatusProcessDataRequest, QueryGetAllManagerCSWorkloadByEraResponse, QueryGetCheatStatusCRDataRequest, QueryGetAllEraCheatStatusProcessDataResponse, ReputationPointChangeRawDataDB, MsgUpdateSuperior, ManagerCSWorkload, QueryParamsRequest, QueryGetCurrentEpochRequest, QueryGetEraLengthResponse, QueryGetReputationPointChangeDataRequest, MsgUpdateParam, QueryGetAllHistoryEpochResponse, QueryGetEraProcessDataRequest, ManagerRPWorkload, QueryGetReputationDeltaPointRequest, EpochProcessData, EraCheatStatusProcessData, QueryGetEpochLengthRequest, QueryGetAllManagerWRWorkloadByEpochRequest, Params, QueryGetNodeWorkloadResponse, QueryGetAllManagerWRWorkloadByEpochResponse, QueryGetAllNodeWorkloadByEpochRequest, QueryGetManagerCSWorkloadRequest, QueryGetAllEpochProcessDataResponse, MsgSubmitReputationPointChangeData, MsgSubmitCheatStatusCR, QueryGetManagerRPWorkloadRequest, QueryGetReputationPointChangeDataResponse, Superior, QueryGetAllHistoryEpochRequest, QueryGetManagerWRWorkloadResponse, Workreport };

type sendGenesisStateParams = {
  value: GenesisState,
  fee?: StdFee,
  memo?: string
};

type sendMsgSubmitWorkreportsParams = {
  value: MsgSubmitWorkreports,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetAllWorkreportByEpochRequestParams = {
  value: QueryGetAllWorkreportByEpochRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetSuperiorRequestParams = {
  value: QueryGetSuperiorRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetHistoryEraRequestParams = {
  value: QueryGetHistoryEraRequest,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateSuperiorResponseParams = {
  value: MsgCreateSuperiorResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetEpochProcessDataRequestParams = {
  value: QueryGetEpochProcessDataRequest,
  fee?: StdFee,
  memo?: string
};

type sendNodeScoreParams = {
  value: NodeScore,
  fee?: StdFee,
  memo?: string
};

type sendQueryParamResponseParams = {
  value: QueryParamResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetCurrentEraResponseParams = {
  value: QueryGetCurrentEraResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetEraProcessDataResponseParams = {
  value: QueryGetEraProcessDataResponse,
  fee?: StdFee,
  memo?: string
};

type sendCheatStatusCRDBParams = {
  value: CheatStatusCRDB,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetAllReputationPointChangeDataByEraRequestParams = {
  value: QueryGetAllReputationPointChangeDataByEraRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetCheatStatusCRDataResponseParams = {
  value: QueryGetCheatStatusCRDataResponse,
  fee?: StdFee,
  memo?: string
};

type sendReputationPointChangeRawDataParams = {
  value: ReputationPointChangeRawData,
  fee?: StdFee,
  memo?: string
};

type sendEraInfoParams = {
  value: EraInfo,
  fee?: StdFee,
  memo?: string
};

type sendNodeWorkloadParams = {
  value: NodeWorkload,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetManagerRPWorkloadResponseParams = {
  value: QueryGetManagerRPWorkloadResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetAllManagerCSWorkloadByEraRequestParams = {
  value: QueryGetAllManagerCSWorkloadByEraRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetEraCheatStatusProcessDataResponseParams = {
  value: QueryGetEraCheatStatusProcessDataResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetAllEraCheatStatusProcessDataRequestParams = {
  value: QueryGetAllEraCheatStatusProcessDataRequest,
  fee?: StdFee,
  memo?: string
};

type sendReputationDeltaPointParams = {
  value: ReputationDeltaPoint,
  fee?: StdFee,
  memo?: string
};

type sendEpochInfoParams = {
  value: EpochInfo,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetAllHistoryEraRequestParams = {
  value: QueryGetAllHistoryEraRequest,
  fee?: StdFee,
  memo?: string
};

type sendEraProcessDataParams = {
  value: EraProcessData,
  fee?: StdFee,
  memo?: string
};

type sendManagerWRWorkloadParams = {
  value: ManagerWRWorkload,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetCurrentEraRequestParams = {
  value: QueryGetCurrentEraRequest,
  fee?: StdFee,
  memo?: string
};

type sendCheatStatusCRParams = {
  value: CheatStatusCR,
  fee?: StdFee,
  memo?: string
};

type sendCheatStatusCRMapDBParams = {
  value: CheatStatusCRMapDB,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetReputationDeltaPointResponseParams = {
  value: QueryGetReputationDeltaPointResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetPendingNextEraRequestParams = {
  value: QueryGetPendingNextEraRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetPendingNextEraResponseParams = {
  value: QueryGetPendingNextEraResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetAllReputationPointChangeDataByEraResponseParams = {
  value: QueryGetAllReputationPointChangeDataByEraResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetAllReputationDeltaPointByEraResponseParams = {
  value: QueryGetAllReputationDeltaPointByEraResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateParamResponseParams = {
  value: MsgUpdateParamResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgSubmitWorkreportsResponseParams = {
  value: MsgSubmitWorkreportsResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryParamRequestParams = {
  value: QueryParamRequest,
  fee?: StdFee,
  memo?: string
};

type sendNodeScoreDBParams = {
  value: NodeScoreDB,
  fee?: StdFee,
  memo?: string
};

type sendCheatStatusCRDataParams = {
  value: CheatStatusCRData,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetAllCheatStatusCRDataByEraRequestParams = {
  value: QueryGetAllCheatStatusCRDataByEraRequest,
  fee?: StdFee,
  memo?: string
};

type sendMsgSubmitReputationPointChangeDataResponseParams = {
  value: MsgSubmitReputationPointChangeDataResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgSubmitCheatStatusCRResponseParams = {
  value: MsgSubmitCheatStatusCRResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetEpochLengthResponseParams = {
  value: QueryGetEpochLengthResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetWorkreportRequestParams = {
  value: QueryGetWorkreportRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetAllEpochProcessDataRequestParams = {
  value: QueryGetAllEpochProcessDataRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetAllReputationDeltaPointByEraRequestParams = {
  value: QueryGetAllReputationDeltaPointByEraRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetAllEraProcessDataRequestParams = {
  value: QueryGetAllEraProcessDataRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryParamsResponseParams = {
  value: QueryParamsResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetHistoryEpochResponseParams = {
  value: QueryGetHistoryEpochResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetAllNodeWorkloadByEpochResponseParams = {
  value: QueryGetAllNodeWorkloadByEpochResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetHistoryEraResponseParams = {
  value: QueryGetHistoryEraResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetAllEraProcessDataResponseParams = {
  value: QueryGetAllEraProcessDataResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetNodeWorkloadRequestParams = {
  value: QueryGetNodeWorkloadRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetEpochProcessDataResponseParams = {
  value: QueryGetEpochProcessDataResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateSuperiorResponseParams = {
  value: MsgUpdateSuperiorResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetPendingNextEpochRequestParams = {
  value: QueryGetPendingNextEpochRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetManagerWRWorkloadRequestParams = {
  value: QueryGetManagerWRWorkloadRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetEraLengthRequestParams = {
  value: QueryGetEraLengthRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetAllHistoryEraResponseParams = {
  value: QueryGetAllHistoryEraResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateSuperiorParams = {
  value: MsgCreateSuperior,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetHistoryEpochRequestParams = {
  value: QueryGetHistoryEpochRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetAllManagerRPWorkloadByEraRequestParams = {
  value: QueryGetAllManagerRPWorkloadByEraRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetWorkreportResponseParams = {
  value: QueryGetWorkreportResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetAllManagerRPWorkloadByEraResponseParams = {
  value: QueryGetAllManagerRPWorkloadByEraResponse,
  fee?: StdFee,
  memo?: string
};

type sendReputationPointChangeDataParams = {
  value: ReputationPointChangeData,
  fee?: StdFee,
  memo?: string
};

type sendManagerNodeScoreMapParams = {
  value: ManagerNodeScoreMap,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetCurrentEpochResponseParams = {
  value: QueryGetCurrentEpochResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetPendingNextEpochResponseParams = {
  value: QueryGetPendingNextEpochResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetManagerCSWorkloadResponseParams = {
  value: QueryGetManagerCSWorkloadResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetAllWorkreportByEpochResponseParams = {
  value: QueryGetAllWorkreportByEpochResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetSuperiorResponseParams = {
  value: QueryGetSuperiorResponse,
  fee?: StdFee,
  memo?: string
};

type sendReputationPointChangeRawDataMapDBParams = {
  value: ReputationPointChangeRawDataMapDB,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetAllCheatStatusCRDataByEraResponseParams = {
  value: QueryGetAllCheatStatusCRDataByEraResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetEraCheatStatusProcessDataRequestParams = {
  value: QueryGetEraCheatStatusProcessDataRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetAllManagerCSWorkloadByEraResponseParams = {
  value: QueryGetAllManagerCSWorkloadByEraResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetCheatStatusCRDataRequestParams = {
  value: QueryGetCheatStatusCRDataRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetAllEraCheatStatusProcessDataResponseParams = {
  value: QueryGetAllEraCheatStatusProcessDataResponse,
  fee?: StdFee,
  memo?: string
};

type sendReputationPointChangeRawDataDBParams = {
  value: ReputationPointChangeRawDataDB,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateSuperiorParams = {
  value: MsgUpdateSuperior,
  fee?: StdFee,
  memo?: string
};

type sendManagerCSWorkloadParams = {
  value: ManagerCSWorkload,
  fee?: StdFee,
  memo?: string
};

type sendQueryParamsRequestParams = {
  value: QueryParamsRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetCurrentEpochRequestParams = {
  value: QueryGetCurrentEpochRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetEraLengthResponseParams = {
  value: QueryGetEraLengthResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetReputationPointChangeDataRequestParams = {
  value: QueryGetReputationPointChangeDataRequest,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateParamParams = {
  value: MsgUpdateParam,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetAllHistoryEpochResponseParams = {
  value: QueryGetAllHistoryEpochResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetEraProcessDataRequestParams = {
  value: QueryGetEraProcessDataRequest,
  fee?: StdFee,
  memo?: string
};

type sendManagerRPWorkloadParams = {
  value: ManagerRPWorkload,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetReputationDeltaPointRequestParams = {
  value: QueryGetReputationDeltaPointRequest,
  fee?: StdFee,
  memo?: string
};

type sendEpochProcessDataParams = {
  value: EpochProcessData,
  fee?: StdFee,
  memo?: string
};

type sendEraCheatStatusProcessDataParams = {
  value: EraCheatStatusProcessData,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetEpochLengthRequestParams = {
  value: QueryGetEpochLengthRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetAllManagerWRWorkloadByEpochRequestParams = {
  value: QueryGetAllManagerWRWorkloadByEpochRequest,
  fee?: StdFee,
  memo?: string
};

type sendParamsParams = {
  value: Params,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetNodeWorkloadResponseParams = {
  value: QueryGetNodeWorkloadResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetAllManagerWRWorkloadByEpochResponseParams = {
  value: QueryGetAllManagerWRWorkloadByEpochResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetAllNodeWorkloadByEpochRequestParams = {
  value: QueryGetAllNodeWorkloadByEpochRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetManagerCSWorkloadRequestParams = {
  value: QueryGetManagerCSWorkloadRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetAllEpochProcessDataResponseParams = {
  value: QueryGetAllEpochProcessDataResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgSubmitReputationPointChangeDataParams = {
  value: MsgSubmitReputationPointChangeData,
  fee?: StdFee,
  memo?: string
};

type sendMsgSubmitCheatStatusCRParams = {
  value: MsgSubmitCheatStatusCR,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetManagerRPWorkloadRequestParams = {
  value: QueryGetManagerRPWorkloadRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetReputationPointChangeDataResponseParams = {
  value: QueryGetReputationPointChangeDataResponse,
  fee?: StdFee,
  memo?: string
};

type sendSuperiorParams = {
  value: Superior,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetAllHistoryEpochRequestParams = {
  value: QueryGetAllHistoryEpochRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetManagerWRWorkloadResponseParams = {
  value: QueryGetManagerWRWorkloadResponse,
  fee?: StdFee,
  memo?: string
};

type sendWorkreportParams = {
  value: Workreport,
  fee?: StdFee,
  memo?: string
};


type genesisStateParams = {
  value: GenesisState,
};

type msgSubmitWorkreportsParams = {
  value: MsgSubmitWorkreports,
};

type queryGetAllWorkreportByEpochRequestParams = {
  value: QueryGetAllWorkreportByEpochRequest,
};

type queryGetSuperiorRequestParams = {
  value: QueryGetSuperiorRequest,
};

type queryGetHistoryEraRequestParams = {
  value: QueryGetHistoryEraRequest,
};

type msgCreateSuperiorResponseParams = {
  value: MsgCreateSuperiorResponse,
};

type queryGetEpochProcessDataRequestParams = {
  value: QueryGetEpochProcessDataRequest,
};

type nodeScoreParams = {
  value: NodeScore,
};

type queryParamResponseParams = {
  value: QueryParamResponse,
};

type queryGetCurrentEraResponseParams = {
  value: QueryGetCurrentEraResponse,
};

type queryGetEraProcessDataResponseParams = {
  value: QueryGetEraProcessDataResponse,
};

type cheatStatusCrdbParams = {
  value: CheatStatusCRDB,
};

type queryGetAllReputationPointChangeDataByEraRequestParams = {
  value: QueryGetAllReputationPointChangeDataByEraRequest,
};

type queryGetCheatStatusCrdataResponseParams = {
  value: QueryGetCheatStatusCRDataResponse,
};

type reputationPointChangeRawDataParams = {
  value: ReputationPointChangeRawData,
};

type eraInfoParams = {
  value: EraInfo,
};

type nodeWorkloadParams = {
  value: NodeWorkload,
};

type queryGetManagerRpworkloadResponseParams = {
  value: QueryGetManagerRPWorkloadResponse,
};

type queryGetAllManagerCsworkloadByEraRequestParams = {
  value: QueryGetAllManagerCSWorkloadByEraRequest,
};

type queryGetEraCheatStatusProcessDataResponseParams = {
  value: QueryGetEraCheatStatusProcessDataResponse,
};

type queryGetAllEraCheatStatusProcessDataRequestParams = {
  value: QueryGetAllEraCheatStatusProcessDataRequest,
};

type reputationDeltaPointParams = {
  value: ReputationDeltaPoint,
};

type epochInfoParams = {
  value: EpochInfo,
};

type queryGetAllHistoryEraRequestParams = {
  value: QueryGetAllHistoryEraRequest,
};

type eraProcessDataParams = {
  value: EraProcessData,
};

type managerWrworkloadParams = {
  value: ManagerWRWorkload,
};

type queryGetCurrentEraRequestParams = {
  value: QueryGetCurrentEraRequest,
};

type cheatStatusCrParams = {
  value: CheatStatusCR,
};

type cheatStatusCrmapDbParams = {
  value: CheatStatusCRMapDB,
};

type queryGetReputationDeltaPointResponseParams = {
  value: QueryGetReputationDeltaPointResponse,
};

type queryGetPendingNextEraRequestParams = {
  value: QueryGetPendingNextEraRequest,
};

type queryGetPendingNextEraResponseParams = {
  value: QueryGetPendingNextEraResponse,
};

type queryGetAllReputationPointChangeDataByEraResponseParams = {
  value: QueryGetAllReputationPointChangeDataByEraResponse,
};

type queryGetAllReputationDeltaPointByEraResponseParams = {
  value: QueryGetAllReputationDeltaPointByEraResponse,
};

type msgUpdateParamResponseParams = {
  value: MsgUpdateParamResponse,
};

type msgSubmitWorkreportsResponseParams = {
  value: MsgSubmitWorkreportsResponse,
};

type queryParamRequestParams = {
  value: QueryParamRequest,
};

type nodeScoreDbParams = {
  value: NodeScoreDB,
};

type cheatStatusCrdataParams = {
  value: CheatStatusCRData,
};

type queryGetAllCheatStatusCrdataByEraRequestParams = {
  value: QueryGetAllCheatStatusCRDataByEraRequest,
};

type msgSubmitReputationPointChangeDataResponseParams = {
  value: MsgSubmitReputationPointChangeDataResponse,
};

type msgSubmitCheatStatusCrresponseParams = {
  value: MsgSubmitCheatStatusCRResponse,
};

type queryGetEpochLengthResponseParams = {
  value: QueryGetEpochLengthResponse,
};

type queryGetWorkreportRequestParams = {
  value: QueryGetWorkreportRequest,
};

type queryGetAllEpochProcessDataRequestParams = {
  value: QueryGetAllEpochProcessDataRequest,
};

type queryGetAllReputationDeltaPointByEraRequestParams = {
  value: QueryGetAllReputationDeltaPointByEraRequest,
};

type queryGetAllEraProcessDataRequestParams = {
  value: QueryGetAllEraProcessDataRequest,
};

type queryParamsResponseParams = {
  value: QueryParamsResponse,
};

type queryGetHistoryEpochResponseParams = {
  value: QueryGetHistoryEpochResponse,
};

type queryGetAllNodeWorkloadByEpochResponseParams = {
  value: QueryGetAllNodeWorkloadByEpochResponse,
};

type queryGetHistoryEraResponseParams = {
  value: QueryGetHistoryEraResponse,
};

type queryGetAllEraProcessDataResponseParams = {
  value: QueryGetAllEraProcessDataResponse,
};

type queryGetNodeWorkloadRequestParams = {
  value: QueryGetNodeWorkloadRequest,
};

type queryGetEpochProcessDataResponseParams = {
  value: QueryGetEpochProcessDataResponse,
};

type msgUpdateSuperiorResponseParams = {
  value: MsgUpdateSuperiorResponse,
};

type queryGetPendingNextEpochRequestParams = {
  value: QueryGetPendingNextEpochRequest,
};

type queryGetManagerWrworkloadRequestParams = {
  value: QueryGetManagerWRWorkloadRequest,
};

type queryGetEraLengthRequestParams = {
  value: QueryGetEraLengthRequest,
};

type queryGetAllHistoryEraResponseParams = {
  value: QueryGetAllHistoryEraResponse,
};

type msgCreateSuperiorParams = {
  value: MsgCreateSuperior,
};

type queryGetHistoryEpochRequestParams = {
  value: QueryGetHistoryEpochRequest,
};

type queryGetAllManagerRpworkloadByEraRequestParams = {
  value: QueryGetAllManagerRPWorkloadByEraRequest,
};

type queryGetWorkreportResponseParams = {
  value: QueryGetWorkreportResponse,
};

type queryGetAllManagerRpworkloadByEraResponseParams = {
  value: QueryGetAllManagerRPWorkloadByEraResponse,
};

type reputationPointChangeDataParams = {
  value: ReputationPointChangeData,
};

type managerNodeScoreMapParams = {
  value: ManagerNodeScoreMap,
};

type queryGetCurrentEpochResponseParams = {
  value: QueryGetCurrentEpochResponse,
};

type queryGetPendingNextEpochResponseParams = {
  value: QueryGetPendingNextEpochResponse,
};

type queryGetManagerCsworkloadResponseParams = {
  value: QueryGetManagerCSWorkloadResponse,
};

type queryGetAllWorkreportByEpochResponseParams = {
  value: QueryGetAllWorkreportByEpochResponse,
};

type queryGetSuperiorResponseParams = {
  value: QueryGetSuperiorResponse,
};

type reputationPointChangeRawDataMapDbParams = {
  value: ReputationPointChangeRawDataMapDB,
};

type queryGetAllCheatStatusCrdataByEraResponseParams = {
  value: QueryGetAllCheatStatusCRDataByEraResponse,
};

type queryGetEraCheatStatusProcessDataRequestParams = {
  value: QueryGetEraCheatStatusProcessDataRequest,
};

type queryGetAllManagerCsworkloadByEraResponseParams = {
  value: QueryGetAllManagerCSWorkloadByEraResponse,
};

type queryGetCheatStatusCrdataRequestParams = {
  value: QueryGetCheatStatusCRDataRequest,
};

type queryGetAllEraCheatStatusProcessDataResponseParams = {
  value: QueryGetAllEraCheatStatusProcessDataResponse,
};

type reputationPointChangeRawDataDbParams = {
  value: ReputationPointChangeRawDataDB,
};

type msgUpdateSuperiorParams = {
  value: MsgUpdateSuperior,
};

type managerCsworkloadParams = {
  value: ManagerCSWorkload,
};

type queryParamsRequestParams = {
  value: QueryParamsRequest,
};

type queryGetCurrentEpochRequestParams = {
  value: QueryGetCurrentEpochRequest,
};

type queryGetEraLengthResponseParams = {
  value: QueryGetEraLengthResponse,
};

type queryGetReputationPointChangeDataRequestParams = {
  value: QueryGetReputationPointChangeDataRequest,
};

type msgUpdateParamParams = {
  value: MsgUpdateParam,
};

type queryGetAllHistoryEpochResponseParams = {
  value: QueryGetAllHistoryEpochResponse,
};

type queryGetEraProcessDataRequestParams = {
  value: QueryGetEraProcessDataRequest,
};

type managerRpworkloadParams = {
  value: ManagerRPWorkload,
};

type queryGetReputationDeltaPointRequestParams = {
  value: QueryGetReputationDeltaPointRequest,
};

type epochProcessDataParams = {
  value: EpochProcessData,
};

type eraCheatStatusProcessDataParams = {
  value: EraCheatStatusProcessData,
};

type queryGetEpochLengthRequestParams = {
  value: QueryGetEpochLengthRequest,
};

type queryGetAllManagerWrworkloadByEpochRequestParams = {
  value: QueryGetAllManagerWRWorkloadByEpochRequest,
};

type paramsParams = {
  value: Params,
};

type queryGetNodeWorkloadResponseParams = {
  value: QueryGetNodeWorkloadResponse,
};

type queryGetAllManagerWrworkloadByEpochResponseParams = {
  value: QueryGetAllManagerWRWorkloadByEpochResponse,
};

type queryGetAllNodeWorkloadByEpochRequestParams = {
  value: QueryGetAllNodeWorkloadByEpochRequest,
};

type queryGetManagerCsworkloadRequestParams = {
  value: QueryGetManagerCSWorkloadRequest,
};

type queryGetAllEpochProcessDataResponseParams = {
  value: QueryGetAllEpochProcessDataResponse,
};

type msgSubmitReputationPointChangeDataParams = {
  value: MsgSubmitReputationPointChangeData,
};

type msgSubmitCheatStatusCrParams = {
  value: MsgSubmitCheatStatusCR,
};

type queryGetManagerRpworkloadRequestParams = {
  value: QueryGetManagerRPWorkloadRequest,
};

type queryGetReputationPointChangeDataResponseParams = {
  value: QueryGetReputationPointChangeDataResponse,
};

type superiorParams = {
  value: Superior,
};

type queryGetAllHistoryEpochRequestParams = {
  value: QueryGetAllHistoryEpochRequest,
};

type queryGetManagerWrworkloadResponseParams = {
  value: QueryGetManagerWRWorkloadResponse,
};

type workreportParams = {
  value: Workreport,
};


export const registry = new Registry(msgTypes);

type Field = {
	name: string;
	type: unknown;
}
function getStructure(template) {
	const structure: {fields: Field[]} = { fields: [] }
	for (let [key, value] of Object.entries(template)) {
		let field = { name: key, type: typeof value }
		structure.fields.push(field)
	}
	return structure
}
const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendGenesisState({ value, fee, memo }: sendGenesisStateParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendGenesisState: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.genesisState({ value: GenesisState.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendGenesisState: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgSubmitWorkreports({ value, fee, memo }: sendMsgSubmitWorkreportsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgSubmitWorkreports: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgSubmitWorkreports({ value: MsgSubmitWorkreports.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgSubmitWorkreports: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetAllWorkreportByEpochRequest({ value, fee, memo }: sendQueryGetAllWorkreportByEpochRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetAllWorkreportByEpochRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetAllWorkreportByEpochRequest({ value: QueryGetAllWorkreportByEpochRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetAllWorkreportByEpochRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetSuperiorRequest({ value, fee, memo }: sendQueryGetSuperiorRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetSuperiorRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetSuperiorRequest({ value: QueryGetSuperiorRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetSuperiorRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetHistoryEraRequest({ value, fee, memo }: sendQueryGetHistoryEraRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetHistoryEraRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetHistoryEraRequest({ value: QueryGetHistoryEraRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetHistoryEraRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateSuperiorResponse({ value, fee, memo }: sendMsgCreateSuperiorResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateSuperiorResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgCreateSuperiorResponse({ value: MsgCreateSuperiorResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateSuperiorResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetEpochProcessDataRequest({ value, fee, memo }: sendQueryGetEpochProcessDataRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetEpochProcessDataRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetEpochProcessDataRequest({ value: QueryGetEpochProcessDataRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetEpochProcessDataRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendNodeScore({ value, fee, memo }: sendNodeScoreParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendNodeScore: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.nodeScore({ value: NodeScore.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendNodeScore: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryParamResponse({ value, fee, memo }: sendQueryParamResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryParamResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryParamResponse({ value: QueryParamResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryParamResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetCurrentEraResponse({ value, fee, memo }: sendQueryGetCurrentEraResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetCurrentEraResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetCurrentEraResponse({ value: QueryGetCurrentEraResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetCurrentEraResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetEraProcessDataResponse({ value, fee, memo }: sendQueryGetEraProcessDataResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetEraProcessDataResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetEraProcessDataResponse({ value: QueryGetEraProcessDataResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetEraProcessDataResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendCheatStatusCRDB({ value, fee, memo }: sendCheatStatusCRDBParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendCheatStatusCRDB: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.cheatStatusCrdb({ value: CheatStatusCRDB.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendCheatStatusCRDB: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetAllReputationPointChangeDataByEraRequest({ value, fee, memo }: sendQueryGetAllReputationPointChangeDataByEraRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetAllReputationPointChangeDataByEraRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetAllReputationPointChangeDataByEraRequest({ value: QueryGetAllReputationPointChangeDataByEraRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetAllReputationPointChangeDataByEraRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetCheatStatusCRDataResponse({ value, fee, memo }: sendQueryGetCheatStatusCRDataResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetCheatStatusCRDataResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetCheatStatusCrdataResponse({ value: QueryGetCheatStatusCRDataResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetCheatStatusCRDataResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendReputationPointChangeRawData({ value, fee, memo }: sendReputationPointChangeRawDataParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendReputationPointChangeRawData: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.reputationPointChangeRawData({ value: ReputationPointChangeRawData.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendReputationPointChangeRawData: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendEraInfo({ value, fee, memo }: sendEraInfoParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendEraInfo: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.eraInfo({ value: EraInfo.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendEraInfo: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendNodeWorkload({ value, fee, memo }: sendNodeWorkloadParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendNodeWorkload: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.nodeWorkload({ value: NodeWorkload.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendNodeWorkload: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetManagerRPWorkloadResponse({ value, fee, memo }: sendQueryGetManagerRPWorkloadResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetManagerRPWorkloadResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetManagerRpworkloadResponse({ value: QueryGetManagerRPWorkloadResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetManagerRPWorkloadResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetAllManagerCSWorkloadByEraRequest({ value, fee, memo }: sendQueryGetAllManagerCSWorkloadByEraRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetAllManagerCSWorkloadByEraRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetAllManagerCsworkloadByEraRequest({ value: QueryGetAllManagerCSWorkloadByEraRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetAllManagerCSWorkloadByEraRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetEraCheatStatusProcessDataResponse({ value, fee, memo }: sendQueryGetEraCheatStatusProcessDataResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetEraCheatStatusProcessDataResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetEraCheatStatusProcessDataResponse({ value: QueryGetEraCheatStatusProcessDataResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetEraCheatStatusProcessDataResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetAllEraCheatStatusProcessDataRequest({ value, fee, memo }: sendQueryGetAllEraCheatStatusProcessDataRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetAllEraCheatStatusProcessDataRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetAllEraCheatStatusProcessDataRequest({ value: QueryGetAllEraCheatStatusProcessDataRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetAllEraCheatStatusProcessDataRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendReputationDeltaPoint({ value, fee, memo }: sendReputationDeltaPointParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendReputationDeltaPoint: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.reputationDeltaPoint({ value: ReputationDeltaPoint.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendReputationDeltaPoint: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendEpochInfo({ value, fee, memo }: sendEpochInfoParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendEpochInfo: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.epochInfo({ value: EpochInfo.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendEpochInfo: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetAllHistoryEraRequest({ value, fee, memo }: sendQueryGetAllHistoryEraRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetAllHistoryEraRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetAllHistoryEraRequest({ value: QueryGetAllHistoryEraRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetAllHistoryEraRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendEraProcessData({ value, fee, memo }: sendEraProcessDataParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendEraProcessData: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.eraProcessData({ value: EraProcessData.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendEraProcessData: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendManagerWRWorkload({ value, fee, memo }: sendManagerWRWorkloadParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendManagerWRWorkload: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.managerWrworkload({ value: ManagerWRWorkload.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendManagerWRWorkload: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetCurrentEraRequest({ value, fee, memo }: sendQueryGetCurrentEraRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetCurrentEraRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetCurrentEraRequest({ value: QueryGetCurrentEraRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetCurrentEraRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendCheatStatusCR({ value, fee, memo }: sendCheatStatusCRParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendCheatStatusCR: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.cheatStatusCr({ value: CheatStatusCR.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendCheatStatusCR: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendCheatStatusCRMapDB({ value, fee, memo }: sendCheatStatusCRMapDBParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendCheatStatusCRMapDB: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.cheatStatusCrmapDb({ value: CheatStatusCRMapDB.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendCheatStatusCRMapDB: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetReputationDeltaPointResponse({ value, fee, memo }: sendQueryGetReputationDeltaPointResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetReputationDeltaPointResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetReputationDeltaPointResponse({ value: QueryGetReputationDeltaPointResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetReputationDeltaPointResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetPendingNextEraRequest({ value, fee, memo }: sendQueryGetPendingNextEraRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetPendingNextEraRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetPendingNextEraRequest({ value: QueryGetPendingNextEraRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetPendingNextEraRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetPendingNextEraResponse({ value, fee, memo }: sendQueryGetPendingNextEraResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetPendingNextEraResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetPendingNextEraResponse({ value: QueryGetPendingNextEraResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetPendingNextEraResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetAllReputationPointChangeDataByEraResponse({ value, fee, memo }: sendQueryGetAllReputationPointChangeDataByEraResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetAllReputationPointChangeDataByEraResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetAllReputationPointChangeDataByEraResponse({ value: QueryGetAllReputationPointChangeDataByEraResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetAllReputationPointChangeDataByEraResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetAllReputationDeltaPointByEraResponse({ value, fee, memo }: sendQueryGetAllReputationDeltaPointByEraResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetAllReputationDeltaPointByEraResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetAllReputationDeltaPointByEraResponse({ value: QueryGetAllReputationDeltaPointByEraResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetAllReputationDeltaPointByEraResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateParamResponse({ value, fee, memo }: sendMsgUpdateParamResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateParamResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateParamResponse({ value: MsgUpdateParamResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateParamResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgSubmitWorkreportsResponse({ value, fee, memo }: sendMsgSubmitWorkreportsResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgSubmitWorkreportsResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgSubmitWorkreportsResponse({ value: MsgSubmitWorkreportsResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgSubmitWorkreportsResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryParamRequest({ value, fee, memo }: sendQueryParamRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryParamRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryParamRequest({ value: QueryParamRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryParamRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendNodeScoreDB({ value, fee, memo }: sendNodeScoreDBParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendNodeScoreDB: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.nodeScoreDb({ value: NodeScoreDB.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendNodeScoreDB: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendCheatStatusCRData({ value, fee, memo }: sendCheatStatusCRDataParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendCheatStatusCRData: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.cheatStatusCrdata({ value: CheatStatusCRData.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendCheatStatusCRData: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetAllCheatStatusCRDataByEraRequest({ value, fee, memo }: sendQueryGetAllCheatStatusCRDataByEraRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetAllCheatStatusCRDataByEraRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetAllCheatStatusCrdataByEraRequest({ value: QueryGetAllCheatStatusCRDataByEraRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetAllCheatStatusCRDataByEraRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgSubmitReputationPointChangeDataResponse({ value, fee, memo }: sendMsgSubmitReputationPointChangeDataResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgSubmitReputationPointChangeDataResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgSubmitReputationPointChangeDataResponse({ value: MsgSubmitReputationPointChangeDataResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgSubmitReputationPointChangeDataResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgSubmitCheatStatusCRResponse({ value, fee, memo }: sendMsgSubmitCheatStatusCRResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgSubmitCheatStatusCRResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgSubmitCheatStatusCrresponse({ value: MsgSubmitCheatStatusCRResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgSubmitCheatStatusCRResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetEpochLengthResponse({ value, fee, memo }: sendQueryGetEpochLengthResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetEpochLengthResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetEpochLengthResponse({ value: QueryGetEpochLengthResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetEpochLengthResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetWorkreportRequest({ value, fee, memo }: sendQueryGetWorkreportRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetWorkreportRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetWorkreportRequest({ value: QueryGetWorkreportRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetWorkreportRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetAllEpochProcessDataRequest({ value, fee, memo }: sendQueryGetAllEpochProcessDataRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetAllEpochProcessDataRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetAllEpochProcessDataRequest({ value: QueryGetAllEpochProcessDataRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetAllEpochProcessDataRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetAllReputationDeltaPointByEraRequest({ value, fee, memo }: sendQueryGetAllReputationDeltaPointByEraRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetAllReputationDeltaPointByEraRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetAllReputationDeltaPointByEraRequest({ value: QueryGetAllReputationDeltaPointByEraRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetAllReputationDeltaPointByEraRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetAllEraProcessDataRequest({ value, fee, memo }: sendQueryGetAllEraProcessDataRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetAllEraProcessDataRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetAllEraProcessDataRequest({ value: QueryGetAllEraProcessDataRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetAllEraProcessDataRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryParamsResponse({ value, fee, memo }: sendQueryParamsResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryParamsResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryParamsResponse({ value: QueryParamsResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryParamsResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetHistoryEpochResponse({ value, fee, memo }: sendQueryGetHistoryEpochResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetHistoryEpochResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetHistoryEpochResponse({ value: QueryGetHistoryEpochResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetHistoryEpochResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetAllNodeWorkloadByEpochResponse({ value, fee, memo }: sendQueryGetAllNodeWorkloadByEpochResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetAllNodeWorkloadByEpochResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetAllNodeWorkloadByEpochResponse({ value: QueryGetAllNodeWorkloadByEpochResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetAllNodeWorkloadByEpochResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetHistoryEraResponse({ value, fee, memo }: sendQueryGetHistoryEraResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetHistoryEraResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetHistoryEraResponse({ value: QueryGetHistoryEraResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetHistoryEraResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetAllEraProcessDataResponse({ value, fee, memo }: sendQueryGetAllEraProcessDataResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetAllEraProcessDataResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetAllEraProcessDataResponse({ value: QueryGetAllEraProcessDataResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetAllEraProcessDataResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetNodeWorkloadRequest({ value, fee, memo }: sendQueryGetNodeWorkloadRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetNodeWorkloadRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetNodeWorkloadRequest({ value: QueryGetNodeWorkloadRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetNodeWorkloadRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetEpochProcessDataResponse({ value, fee, memo }: sendQueryGetEpochProcessDataResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetEpochProcessDataResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetEpochProcessDataResponse({ value: QueryGetEpochProcessDataResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetEpochProcessDataResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateSuperiorResponse({ value, fee, memo }: sendMsgUpdateSuperiorResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateSuperiorResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateSuperiorResponse({ value: MsgUpdateSuperiorResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateSuperiorResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetPendingNextEpochRequest({ value, fee, memo }: sendQueryGetPendingNextEpochRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetPendingNextEpochRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetPendingNextEpochRequest({ value: QueryGetPendingNextEpochRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetPendingNextEpochRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetManagerWRWorkloadRequest({ value, fee, memo }: sendQueryGetManagerWRWorkloadRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetManagerWRWorkloadRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetManagerWrworkloadRequest({ value: QueryGetManagerWRWorkloadRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetManagerWRWorkloadRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetEraLengthRequest({ value, fee, memo }: sendQueryGetEraLengthRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetEraLengthRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetEraLengthRequest({ value: QueryGetEraLengthRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetEraLengthRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetAllHistoryEraResponse({ value, fee, memo }: sendQueryGetAllHistoryEraResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetAllHistoryEraResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetAllHistoryEraResponse({ value: QueryGetAllHistoryEraResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetAllHistoryEraResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateSuperior({ value, fee, memo }: sendMsgCreateSuperiorParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateSuperior: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgCreateSuperior({ value: MsgCreateSuperior.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateSuperior: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetHistoryEpochRequest({ value, fee, memo }: sendQueryGetHistoryEpochRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetHistoryEpochRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetHistoryEpochRequest({ value: QueryGetHistoryEpochRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetHistoryEpochRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetAllManagerRPWorkloadByEraRequest({ value, fee, memo }: sendQueryGetAllManagerRPWorkloadByEraRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetAllManagerRPWorkloadByEraRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetAllManagerRpworkloadByEraRequest({ value: QueryGetAllManagerRPWorkloadByEraRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetAllManagerRPWorkloadByEraRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetWorkreportResponse({ value, fee, memo }: sendQueryGetWorkreportResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetWorkreportResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetWorkreportResponse({ value: QueryGetWorkreportResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetWorkreportResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetAllManagerRPWorkloadByEraResponse({ value, fee, memo }: sendQueryGetAllManagerRPWorkloadByEraResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetAllManagerRPWorkloadByEraResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetAllManagerRpworkloadByEraResponse({ value: QueryGetAllManagerRPWorkloadByEraResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetAllManagerRPWorkloadByEraResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendReputationPointChangeData({ value, fee, memo }: sendReputationPointChangeDataParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendReputationPointChangeData: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.reputationPointChangeData({ value: ReputationPointChangeData.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendReputationPointChangeData: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendManagerNodeScoreMap({ value, fee, memo }: sendManagerNodeScoreMapParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendManagerNodeScoreMap: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.managerNodeScoreMap({ value: ManagerNodeScoreMap.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendManagerNodeScoreMap: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetCurrentEpochResponse({ value, fee, memo }: sendQueryGetCurrentEpochResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetCurrentEpochResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetCurrentEpochResponse({ value: QueryGetCurrentEpochResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetCurrentEpochResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetPendingNextEpochResponse({ value, fee, memo }: sendQueryGetPendingNextEpochResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetPendingNextEpochResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetPendingNextEpochResponse({ value: QueryGetPendingNextEpochResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetPendingNextEpochResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetManagerCSWorkloadResponse({ value, fee, memo }: sendQueryGetManagerCSWorkloadResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetManagerCSWorkloadResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetManagerCsworkloadResponse({ value: QueryGetManagerCSWorkloadResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetManagerCSWorkloadResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetAllWorkreportByEpochResponse({ value, fee, memo }: sendQueryGetAllWorkreportByEpochResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetAllWorkreportByEpochResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetAllWorkreportByEpochResponse({ value: QueryGetAllWorkreportByEpochResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetAllWorkreportByEpochResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetSuperiorResponse({ value, fee, memo }: sendQueryGetSuperiorResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetSuperiorResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetSuperiorResponse({ value: QueryGetSuperiorResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetSuperiorResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendReputationPointChangeRawDataMapDB({ value, fee, memo }: sendReputationPointChangeRawDataMapDBParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendReputationPointChangeRawDataMapDB: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.reputationPointChangeRawDataMapDb({ value: ReputationPointChangeRawDataMapDB.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendReputationPointChangeRawDataMapDB: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetAllCheatStatusCRDataByEraResponse({ value, fee, memo }: sendQueryGetAllCheatStatusCRDataByEraResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetAllCheatStatusCRDataByEraResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetAllCheatStatusCrdataByEraResponse({ value: QueryGetAllCheatStatusCRDataByEraResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetAllCheatStatusCRDataByEraResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetEraCheatStatusProcessDataRequest({ value, fee, memo }: sendQueryGetEraCheatStatusProcessDataRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetEraCheatStatusProcessDataRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetEraCheatStatusProcessDataRequest({ value: QueryGetEraCheatStatusProcessDataRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetEraCheatStatusProcessDataRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetAllManagerCSWorkloadByEraResponse({ value, fee, memo }: sendQueryGetAllManagerCSWorkloadByEraResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetAllManagerCSWorkloadByEraResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetAllManagerCsworkloadByEraResponse({ value: QueryGetAllManagerCSWorkloadByEraResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetAllManagerCSWorkloadByEraResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetCheatStatusCRDataRequest({ value, fee, memo }: sendQueryGetCheatStatusCRDataRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetCheatStatusCRDataRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetCheatStatusCrdataRequest({ value: QueryGetCheatStatusCRDataRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetCheatStatusCRDataRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetAllEraCheatStatusProcessDataResponse({ value, fee, memo }: sendQueryGetAllEraCheatStatusProcessDataResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetAllEraCheatStatusProcessDataResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetAllEraCheatStatusProcessDataResponse({ value: QueryGetAllEraCheatStatusProcessDataResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetAllEraCheatStatusProcessDataResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendReputationPointChangeRawDataDB({ value, fee, memo }: sendReputationPointChangeRawDataDBParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendReputationPointChangeRawDataDB: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.reputationPointChangeRawDataDb({ value: ReputationPointChangeRawDataDB.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendReputationPointChangeRawDataDB: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateSuperior({ value, fee, memo }: sendMsgUpdateSuperiorParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateSuperior: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateSuperior({ value: MsgUpdateSuperior.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateSuperior: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendManagerCSWorkload({ value, fee, memo }: sendManagerCSWorkloadParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendManagerCSWorkload: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.managerCsworkload({ value: ManagerCSWorkload.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendManagerCSWorkload: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryParamsRequest({ value, fee, memo }: sendQueryParamsRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryParamsRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryParamsRequest({ value: QueryParamsRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryParamsRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetCurrentEpochRequest({ value, fee, memo }: sendQueryGetCurrentEpochRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetCurrentEpochRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetCurrentEpochRequest({ value: QueryGetCurrentEpochRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetCurrentEpochRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetEraLengthResponse({ value, fee, memo }: sendQueryGetEraLengthResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetEraLengthResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetEraLengthResponse({ value: QueryGetEraLengthResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetEraLengthResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetReputationPointChangeDataRequest({ value, fee, memo }: sendQueryGetReputationPointChangeDataRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetReputationPointChangeDataRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetReputationPointChangeDataRequest({ value: QueryGetReputationPointChangeDataRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetReputationPointChangeDataRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateParam({ value, fee, memo }: sendMsgUpdateParamParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateParam: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateParam({ value: MsgUpdateParam.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateParam: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetAllHistoryEpochResponse({ value, fee, memo }: sendQueryGetAllHistoryEpochResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetAllHistoryEpochResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetAllHistoryEpochResponse({ value: QueryGetAllHistoryEpochResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetAllHistoryEpochResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetEraProcessDataRequest({ value, fee, memo }: sendQueryGetEraProcessDataRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetEraProcessDataRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetEraProcessDataRequest({ value: QueryGetEraProcessDataRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetEraProcessDataRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendManagerRPWorkload({ value, fee, memo }: sendManagerRPWorkloadParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendManagerRPWorkload: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.managerRpworkload({ value: ManagerRPWorkload.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendManagerRPWorkload: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetReputationDeltaPointRequest({ value, fee, memo }: sendQueryGetReputationDeltaPointRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetReputationDeltaPointRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetReputationDeltaPointRequest({ value: QueryGetReputationDeltaPointRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetReputationDeltaPointRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendEpochProcessData({ value, fee, memo }: sendEpochProcessDataParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendEpochProcessData: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.epochProcessData({ value: EpochProcessData.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendEpochProcessData: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendEraCheatStatusProcessData({ value, fee, memo }: sendEraCheatStatusProcessDataParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendEraCheatStatusProcessData: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.eraCheatStatusProcessData({ value: EraCheatStatusProcessData.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendEraCheatStatusProcessData: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetEpochLengthRequest({ value, fee, memo }: sendQueryGetEpochLengthRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetEpochLengthRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetEpochLengthRequest({ value: QueryGetEpochLengthRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetEpochLengthRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetAllManagerWRWorkloadByEpochRequest({ value, fee, memo }: sendQueryGetAllManagerWRWorkloadByEpochRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetAllManagerWRWorkloadByEpochRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetAllManagerWrworkloadByEpochRequest({ value: QueryGetAllManagerWRWorkloadByEpochRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetAllManagerWRWorkloadByEpochRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendParams({ value, fee, memo }: sendParamsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendParams: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.params({ value: Params.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendParams: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetNodeWorkloadResponse({ value, fee, memo }: sendQueryGetNodeWorkloadResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetNodeWorkloadResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetNodeWorkloadResponse({ value: QueryGetNodeWorkloadResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetNodeWorkloadResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetAllManagerWRWorkloadByEpochResponse({ value, fee, memo }: sendQueryGetAllManagerWRWorkloadByEpochResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetAllManagerWRWorkloadByEpochResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetAllManagerWrworkloadByEpochResponse({ value: QueryGetAllManagerWRWorkloadByEpochResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetAllManagerWRWorkloadByEpochResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetAllNodeWorkloadByEpochRequest({ value, fee, memo }: sendQueryGetAllNodeWorkloadByEpochRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetAllNodeWorkloadByEpochRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetAllNodeWorkloadByEpochRequest({ value: QueryGetAllNodeWorkloadByEpochRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetAllNodeWorkloadByEpochRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetManagerCSWorkloadRequest({ value, fee, memo }: sendQueryGetManagerCSWorkloadRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetManagerCSWorkloadRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetManagerCsworkloadRequest({ value: QueryGetManagerCSWorkloadRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetManagerCSWorkloadRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetAllEpochProcessDataResponse({ value, fee, memo }: sendQueryGetAllEpochProcessDataResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetAllEpochProcessDataResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetAllEpochProcessDataResponse({ value: QueryGetAllEpochProcessDataResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetAllEpochProcessDataResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgSubmitReputationPointChangeData({ value, fee, memo }: sendMsgSubmitReputationPointChangeDataParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgSubmitReputationPointChangeData: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgSubmitReputationPointChangeData({ value: MsgSubmitReputationPointChangeData.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgSubmitReputationPointChangeData: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgSubmitCheatStatusCR({ value, fee, memo }: sendMsgSubmitCheatStatusCRParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgSubmitCheatStatusCR: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgSubmitCheatStatusCr({ value: MsgSubmitCheatStatusCR.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgSubmitCheatStatusCR: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetManagerRPWorkloadRequest({ value, fee, memo }: sendQueryGetManagerRPWorkloadRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetManagerRPWorkloadRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetManagerRpworkloadRequest({ value: QueryGetManagerRPWorkloadRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetManagerRPWorkloadRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetReputationPointChangeDataResponse({ value, fee, memo }: sendQueryGetReputationPointChangeDataResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetReputationPointChangeDataResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetReputationPointChangeDataResponse({ value: QueryGetReputationPointChangeDataResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetReputationPointChangeDataResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendSuperior({ value, fee, memo }: sendSuperiorParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendSuperior: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.superior({ value: Superior.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendSuperior: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetAllHistoryEpochRequest({ value, fee, memo }: sendQueryGetAllHistoryEpochRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetAllHistoryEpochRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetAllHistoryEpochRequest({ value: QueryGetAllHistoryEpochRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetAllHistoryEpochRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetManagerWRWorkloadResponse({ value, fee, memo }: sendQueryGetManagerWRWorkloadResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetManagerWRWorkloadResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetManagerWrworkloadResponse({ value: QueryGetManagerWRWorkloadResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetManagerWRWorkloadResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendWorkreport({ value, fee, memo }: sendWorkreportParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendWorkreport: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.workreport({ value: Workreport.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendWorkreport: Could not broadcast Tx: '+ e.message)
			}
		},
		
		
		genesisState({ value }: genesisStateParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.GenesisState", value: GenesisState.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:GenesisState: Could not create message: ' + e.message)
			}
		},
		
		msgSubmitWorkreports({ value }: msgSubmitWorkreportsParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.MsgSubmitWorkreports", value: MsgSubmitWorkreports.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgSubmitWorkreports: Could not create message: ' + e.message)
			}
		},
		
		queryGetAllWorkreportByEpochRequest({ value }: queryGetAllWorkreportByEpochRequestParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryGetAllWorkreportByEpochRequest", value: QueryGetAllWorkreportByEpochRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetAllWorkreportByEpochRequest: Could not create message: ' + e.message)
			}
		},
		
		queryGetSuperiorRequest({ value }: queryGetSuperiorRequestParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryGetSuperiorRequest", value: QueryGetSuperiorRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetSuperiorRequest: Could not create message: ' + e.message)
			}
		},
		
		queryGetHistoryEraRequest({ value }: queryGetHistoryEraRequestParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryGetHistoryEraRequest", value: QueryGetHistoryEraRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetHistoryEraRequest: Could not create message: ' + e.message)
			}
		},
		
		msgCreateSuperiorResponse({ value }: msgCreateSuperiorResponseParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.MsgCreateSuperiorResponse", value: MsgCreateSuperiorResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateSuperiorResponse: Could not create message: ' + e.message)
			}
		},
		
		queryGetEpochProcessDataRequest({ value }: queryGetEpochProcessDataRequestParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryGetEpochProcessDataRequest", value: QueryGetEpochProcessDataRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetEpochProcessDataRequest: Could not create message: ' + e.message)
			}
		},
		
		nodeScore({ value }: nodeScoreParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.NodeScore", value: NodeScore.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:NodeScore: Could not create message: ' + e.message)
			}
		},
		
		queryParamResponse({ value }: queryParamResponseParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryParamResponse", value: QueryParamResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryParamResponse: Could not create message: ' + e.message)
			}
		},
		
		queryGetCurrentEraResponse({ value }: queryGetCurrentEraResponseParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryGetCurrentEraResponse", value: QueryGetCurrentEraResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetCurrentEraResponse: Could not create message: ' + e.message)
			}
		},
		
		queryGetEraProcessDataResponse({ value }: queryGetEraProcessDataResponseParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryGetEraProcessDataResponse", value: QueryGetEraProcessDataResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetEraProcessDataResponse: Could not create message: ' + e.message)
			}
		},
		
		cheatStatusCrdb({ value }: cheatStatusCrdbParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.CheatStatusCRDB", value: CheatStatusCRDB.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:CheatStatusCRDB: Could not create message: ' + e.message)
			}
		},
		
		queryGetAllReputationPointChangeDataByEraRequest({ value }: queryGetAllReputationPointChangeDataByEraRequestParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryGetAllReputationPointChangeDataByEraRequest", value: QueryGetAllReputationPointChangeDataByEraRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetAllReputationPointChangeDataByEraRequest: Could not create message: ' + e.message)
			}
		},
		
		queryGetCheatStatusCrdataResponse({ value }: queryGetCheatStatusCrdataResponseParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryGetCheatStatusCRDataResponse", value: QueryGetCheatStatusCRDataResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetCheatStatusCRDataResponse: Could not create message: ' + e.message)
			}
		},
		
		reputationPointChangeRawData({ value }: reputationPointChangeRawDataParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.ReputationPointChangeRawData", value: ReputationPointChangeRawData.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:ReputationPointChangeRawData: Could not create message: ' + e.message)
			}
		},
		
		eraInfo({ value }: eraInfoParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.EraInfo", value: EraInfo.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:EraInfo: Could not create message: ' + e.message)
			}
		},
		
		nodeWorkload({ value }: nodeWorkloadParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.NodeWorkload", value: NodeWorkload.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:NodeWorkload: Could not create message: ' + e.message)
			}
		},
		
		queryGetManagerRpworkloadResponse({ value }: queryGetManagerRpworkloadResponseParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryGetManagerRPWorkloadResponse", value: QueryGetManagerRPWorkloadResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetManagerRPWorkloadResponse: Could not create message: ' + e.message)
			}
		},
		
		queryGetAllManagerCsworkloadByEraRequest({ value }: queryGetAllManagerCsworkloadByEraRequestParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryGetAllManagerCSWorkloadByEraRequest", value: QueryGetAllManagerCSWorkloadByEraRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetAllManagerCSWorkloadByEraRequest: Could not create message: ' + e.message)
			}
		},
		
		queryGetEraCheatStatusProcessDataResponse({ value }: queryGetEraCheatStatusProcessDataResponseParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryGetEraCheatStatusProcessDataResponse", value: QueryGetEraCheatStatusProcessDataResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetEraCheatStatusProcessDataResponse: Could not create message: ' + e.message)
			}
		},
		
		queryGetAllEraCheatStatusProcessDataRequest({ value }: queryGetAllEraCheatStatusProcessDataRequestParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryGetAllEraCheatStatusProcessDataRequest", value: QueryGetAllEraCheatStatusProcessDataRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetAllEraCheatStatusProcessDataRequest: Could not create message: ' + e.message)
			}
		},
		
		reputationDeltaPoint({ value }: reputationDeltaPointParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.ReputationDeltaPoint", value: ReputationDeltaPoint.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:ReputationDeltaPoint: Could not create message: ' + e.message)
			}
		},
		
		epochInfo({ value }: epochInfoParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.EpochInfo", value: EpochInfo.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:EpochInfo: Could not create message: ' + e.message)
			}
		},
		
		queryGetAllHistoryEraRequest({ value }: queryGetAllHistoryEraRequestParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryGetAllHistoryEraRequest", value: QueryGetAllHistoryEraRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetAllHistoryEraRequest: Could not create message: ' + e.message)
			}
		},
		
		eraProcessData({ value }: eraProcessDataParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.EraProcessData", value: EraProcessData.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:EraProcessData: Could not create message: ' + e.message)
			}
		},
		
		managerWrworkload({ value }: managerWrworkloadParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.ManagerWRWorkload", value: ManagerWRWorkload.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:ManagerWRWorkload: Could not create message: ' + e.message)
			}
		},
		
		queryGetCurrentEraRequest({ value }: queryGetCurrentEraRequestParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryGetCurrentEraRequest", value: QueryGetCurrentEraRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetCurrentEraRequest: Could not create message: ' + e.message)
			}
		},
		
		cheatStatusCr({ value }: cheatStatusCrParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.CheatStatusCR", value: CheatStatusCR.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:CheatStatusCR: Could not create message: ' + e.message)
			}
		},
		
		cheatStatusCrmapDb({ value }: cheatStatusCrmapDbParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.CheatStatusCRMapDB", value: CheatStatusCRMapDB.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:CheatStatusCRMapDB: Could not create message: ' + e.message)
			}
		},
		
		queryGetReputationDeltaPointResponse({ value }: queryGetReputationDeltaPointResponseParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryGetReputationDeltaPointResponse", value: QueryGetReputationDeltaPointResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetReputationDeltaPointResponse: Could not create message: ' + e.message)
			}
		},
		
		queryGetPendingNextEraRequest({ value }: queryGetPendingNextEraRequestParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryGetPendingNextEraRequest", value: QueryGetPendingNextEraRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetPendingNextEraRequest: Could not create message: ' + e.message)
			}
		},
		
		queryGetPendingNextEraResponse({ value }: queryGetPendingNextEraResponseParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryGetPendingNextEraResponse", value: QueryGetPendingNextEraResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetPendingNextEraResponse: Could not create message: ' + e.message)
			}
		},
		
		queryGetAllReputationPointChangeDataByEraResponse({ value }: queryGetAllReputationPointChangeDataByEraResponseParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryGetAllReputationPointChangeDataByEraResponse", value: QueryGetAllReputationPointChangeDataByEraResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetAllReputationPointChangeDataByEraResponse: Could not create message: ' + e.message)
			}
		},
		
		queryGetAllReputationDeltaPointByEraResponse({ value }: queryGetAllReputationDeltaPointByEraResponseParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryGetAllReputationDeltaPointByEraResponse", value: QueryGetAllReputationDeltaPointByEraResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetAllReputationDeltaPointByEraResponse: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateParamResponse({ value }: msgUpdateParamResponseParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.MsgUpdateParamResponse", value: MsgUpdateParamResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateParamResponse: Could not create message: ' + e.message)
			}
		},
		
		msgSubmitWorkreportsResponse({ value }: msgSubmitWorkreportsResponseParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.MsgSubmitWorkreportsResponse", value: MsgSubmitWorkreportsResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgSubmitWorkreportsResponse: Could not create message: ' + e.message)
			}
		},
		
		queryParamRequest({ value }: queryParamRequestParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryParamRequest", value: QueryParamRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryParamRequest: Could not create message: ' + e.message)
			}
		},
		
		nodeScoreDb({ value }: nodeScoreDbParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.NodeScoreDB", value: NodeScoreDB.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:NodeScoreDB: Could not create message: ' + e.message)
			}
		},
		
		cheatStatusCrdata({ value }: cheatStatusCrdataParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.CheatStatusCRData", value: CheatStatusCRData.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:CheatStatusCRData: Could not create message: ' + e.message)
			}
		},
		
		queryGetAllCheatStatusCrdataByEraRequest({ value }: queryGetAllCheatStatusCrdataByEraRequestParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryGetAllCheatStatusCRDataByEraRequest", value: QueryGetAllCheatStatusCRDataByEraRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetAllCheatStatusCRDataByEraRequest: Could not create message: ' + e.message)
			}
		},
		
		msgSubmitReputationPointChangeDataResponse({ value }: msgSubmitReputationPointChangeDataResponseParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.MsgSubmitReputationPointChangeDataResponse", value: MsgSubmitReputationPointChangeDataResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgSubmitReputationPointChangeDataResponse: Could not create message: ' + e.message)
			}
		},
		
		msgSubmitCheatStatusCrresponse({ value }: msgSubmitCheatStatusCrresponseParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.MsgSubmitCheatStatusCRResponse", value: MsgSubmitCheatStatusCRResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgSubmitCheatStatusCRResponse: Could not create message: ' + e.message)
			}
		},
		
		queryGetEpochLengthResponse({ value }: queryGetEpochLengthResponseParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryGetEpochLengthResponse", value: QueryGetEpochLengthResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetEpochLengthResponse: Could not create message: ' + e.message)
			}
		},
		
		queryGetWorkreportRequest({ value }: queryGetWorkreportRequestParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryGetWorkreportRequest", value: QueryGetWorkreportRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetWorkreportRequest: Could not create message: ' + e.message)
			}
		},
		
		queryGetAllEpochProcessDataRequest({ value }: queryGetAllEpochProcessDataRequestParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryGetAllEpochProcessDataRequest", value: QueryGetAllEpochProcessDataRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetAllEpochProcessDataRequest: Could not create message: ' + e.message)
			}
		},
		
		queryGetAllReputationDeltaPointByEraRequest({ value }: queryGetAllReputationDeltaPointByEraRequestParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryGetAllReputationDeltaPointByEraRequest", value: QueryGetAllReputationDeltaPointByEraRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetAllReputationDeltaPointByEraRequest: Could not create message: ' + e.message)
			}
		},
		
		queryGetAllEraProcessDataRequest({ value }: queryGetAllEraProcessDataRequestParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryGetAllEraProcessDataRequest", value: QueryGetAllEraProcessDataRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetAllEraProcessDataRequest: Could not create message: ' + e.message)
			}
		},
		
		queryParamsResponse({ value }: queryParamsResponseParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryParamsResponse", value: QueryParamsResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryParamsResponse: Could not create message: ' + e.message)
			}
		},
		
		queryGetHistoryEpochResponse({ value }: queryGetHistoryEpochResponseParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryGetHistoryEpochResponse", value: QueryGetHistoryEpochResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetHistoryEpochResponse: Could not create message: ' + e.message)
			}
		},
		
		queryGetAllNodeWorkloadByEpochResponse({ value }: queryGetAllNodeWorkloadByEpochResponseParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryGetAllNodeWorkloadByEpochResponse", value: QueryGetAllNodeWorkloadByEpochResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetAllNodeWorkloadByEpochResponse: Could not create message: ' + e.message)
			}
		},
		
		queryGetHistoryEraResponse({ value }: queryGetHistoryEraResponseParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryGetHistoryEraResponse", value: QueryGetHistoryEraResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetHistoryEraResponse: Could not create message: ' + e.message)
			}
		},
		
		queryGetAllEraProcessDataResponse({ value }: queryGetAllEraProcessDataResponseParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryGetAllEraProcessDataResponse", value: QueryGetAllEraProcessDataResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetAllEraProcessDataResponse: Could not create message: ' + e.message)
			}
		},
		
		queryGetNodeWorkloadRequest({ value }: queryGetNodeWorkloadRequestParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryGetNodeWorkloadRequest", value: QueryGetNodeWorkloadRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetNodeWorkloadRequest: Could not create message: ' + e.message)
			}
		},
		
		queryGetEpochProcessDataResponse({ value }: queryGetEpochProcessDataResponseParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryGetEpochProcessDataResponse", value: QueryGetEpochProcessDataResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetEpochProcessDataResponse: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateSuperiorResponse({ value }: msgUpdateSuperiorResponseParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.MsgUpdateSuperiorResponse", value: MsgUpdateSuperiorResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateSuperiorResponse: Could not create message: ' + e.message)
			}
		},
		
		queryGetPendingNextEpochRequest({ value }: queryGetPendingNextEpochRequestParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryGetPendingNextEpochRequest", value: QueryGetPendingNextEpochRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetPendingNextEpochRequest: Could not create message: ' + e.message)
			}
		},
		
		queryGetManagerWrworkloadRequest({ value }: queryGetManagerWrworkloadRequestParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryGetManagerWRWorkloadRequest", value: QueryGetManagerWRWorkloadRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetManagerWRWorkloadRequest: Could not create message: ' + e.message)
			}
		},
		
		queryGetEraLengthRequest({ value }: queryGetEraLengthRequestParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryGetEraLengthRequest", value: QueryGetEraLengthRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetEraLengthRequest: Could not create message: ' + e.message)
			}
		},
		
		queryGetAllHistoryEraResponse({ value }: queryGetAllHistoryEraResponseParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryGetAllHistoryEraResponse", value: QueryGetAllHistoryEraResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetAllHistoryEraResponse: Could not create message: ' + e.message)
			}
		},
		
		msgCreateSuperior({ value }: msgCreateSuperiorParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.MsgCreateSuperior", value: MsgCreateSuperior.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateSuperior: Could not create message: ' + e.message)
			}
		},
		
		queryGetHistoryEpochRequest({ value }: queryGetHistoryEpochRequestParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryGetHistoryEpochRequest", value: QueryGetHistoryEpochRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetHistoryEpochRequest: Could not create message: ' + e.message)
			}
		},
		
		queryGetAllManagerRpworkloadByEraRequest({ value }: queryGetAllManagerRpworkloadByEraRequestParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryGetAllManagerRPWorkloadByEraRequest", value: QueryGetAllManagerRPWorkloadByEraRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetAllManagerRPWorkloadByEraRequest: Could not create message: ' + e.message)
			}
		},
		
		queryGetWorkreportResponse({ value }: queryGetWorkreportResponseParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryGetWorkreportResponse", value: QueryGetWorkreportResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetWorkreportResponse: Could not create message: ' + e.message)
			}
		},
		
		queryGetAllManagerRpworkloadByEraResponse({ value }: queryGetAllManagerRpworkloadByEraResponseParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryGetAllManagerRPWorkloadByEraResponse", value: QueryGetAllManagerRPWorkloadByEraResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetAllManagerRPWorkloadByEraResponse: Could not create message: ' + e.message)
			}
		},
		
		reputationPointChangeData({ value }: reputationPointChangeDataParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.ReputationPointChangeData", value: ReputationPointChangeData.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:ReputationPointChangeData: Could not create message: ' + e.message)
			}
		},
		
		managerNodeScoreMap({ value }: managerNodeScoreMapParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.ManagerNodeScoreMap", value: ManagerNodeScoreMap.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:ManagerNodeScoreMap: Could not create message: ' + e.message)
			}
		},
		
		queryGetCurrentEpochResponse({ value }: queryGetCurrentEpochResponseParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryGetCurrentEpochResponse", value: QueryGetCurrentEpochResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetCurrentEpochResponse: Could not create message: ' + e.message)
			}
		},
		
		queryGetPendingNextEpochResponse({ value }: queryGetPendingNextEpochResponseParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryGetPendingNextEpochResponse", value: QueryGetPendingNextEpochResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetPendingNextEpochResponse: Could not create message: ' + e.message)
			}
		},
		
		queryGetManagerCsworkloadResponse({ value }: queryGetManagerCsworkloadResponseParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryGetManagerCSWorkloadResponse", value: QueryGetManagerCSWorkloadResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetManagerCSWorkloadResponse: Could not create message: ' + e.message)
			}
		},
		
		queryGetAllWorkreportByEpochResponse({ value }: queryGetAllWorkreportByEpochResponseParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryGetAllWorkreportByEpochResponse", value: QueryGetAllWorkreportByEpochResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetAllWorkreportByEpochResponse: Could not create message: ' + e.message)
			}
		},
		
		queryGetSuperiorResponse({ value }: queryGetSuperiorResponseParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryGetSuperiorResponse", value: QueryGetSuperiorResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetSuperiorResponse: Could not create message: ' + e.message)
			}
		},
		
		reputationPointChangeRawDataMapDb({ value }: reputationPointChangeRawDataMapDbParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.ReputationPointChangeRawDataMapDB", value: ReputationPointChangeRawDataMapDB.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:ReputationPointChangeRawDataMapDB: Could not create message: ' + e.message)
			}
		},
		
		queryGetAllCheatStatusCrdataByEraResponse({ value }: queryGetAllCheatStatusCrdataByEraResponseParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryGetAllCheatStatusCRDataByEraResponse", value: QueryGetAllCheatStatusCRDataByEraResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetAllCheatStatusCRDataByEraResponse: Could not create message: ' + e.message)
			}
		},
		
		queryGetEraCheatStatusProcessDataRequest({ value }: queryGetEraCheatStatusProcessDataRequestParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryGetEraCheatStatusProcessDataRequest", value: QueryGetEraCheatStatusProcessDataRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetEraCheatStatusProcessDataRequest: Could not create message: ' + e.message)
			}
		},
		
		queryGetAllManagerCsworkloadByEraResponse({ value }: queryGetAllManagerCsworkloadByEraResponseParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryGetAllManagerCSWorkloadByEraResponse", value: QueryGetAllManagerCSWorkloadByEraResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetAllManagerCSWorkloadByEraResponse: Could not create message: ' + e.message)
			}
		},
		
		queryGetCheatStatusCrdataRequest({ value }: queryGetCheatStatusCrdataRequestParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryGetCheatStatusCRDataRequest", value: QueryGetCheatStatusCRDataRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetCheatStatusCRDataRequest: Could not create message: ' + e.message)
			}
		},
		
		queryGetAllEraCheatStatusProcessDataResponse({ value }: queryGetAllEraCheatStatusProcessDataResponseParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryGetAllEraCheatStatusProcessDataResponse", value: QueryGetAllEraCheatStatusProcessDataResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetAllEraCheatStatusProcessDataResponse: Could not create message: ' + e.message)
			}
		},
		
		reputationPointChangeRawDataDb({ value }: reputationPointChangeRawDataDbParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.ReputationPointChangeRawDataDB", value: ReputationPointChangeRawDataDB.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:ReputationPointChangeRawDataDB: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateSuperior({ value }: msgUpdateSuperiorParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.MsgUpdateSuperior", value: MsgUpdateSuperior.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateSuperior: Could not create message: ' + e.message)
			}
		},
		
		managerCsworkload({ value }: managerCsworkloadParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.ManagerCSWorkload", value: ManagerCSWorkload.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:ManagerCSWorkload: Could not create message: ' + e.message)
			}
		},
		
		queryParamsRequest({ value }: queryParamsRequestParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryParamsRequest", value: QueryParamsRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryParamsRequest: Could not create message: ' + e.message)
			}
		},
		
		queryGetCurrentEpochRequest({ value }: queryGetCurrentEpochRequestParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryGetCurrentEpochRequest", value: QueryGetCurrentEpochRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetCurrentEpochRequest: Could not create message: ' + e.message)
			}
		},
		
		queryGetEraLengthResponse({ value }: queryGetEraLengthResponseParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryGetEraLengthResponse", value: QueryGetEraLengthResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetEraLengthResponse: Could not create message: ' + e.message)
			}
		},
		
		queryGetReputationPointChangeDataRequest({ value }: queryGetReputationPointChangeDataRequestParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryGetReputationPointChangeDataRequest", value: QueryGetReputationPointChangeDataRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetReputationPointChangeDataRequest: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateParam({ value }: msgUpdateParamParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.MsgUpdateParam", value: MsgUpdateParam.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateParam: Could not create message: ' + e.message)
			}
		},
		
		queryGetAllHistoryEpochResponse({ value }: queryGetAllHistoryEpochResponseParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryGetAllHistoryEpochResponse", value: QueryGetAllHistoryEpochResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetAllHistoryEpochResponse: Could not create message: ' + e.message)
			}
		},
		
		queryGetEraProcessDataRequest({ value }: queryGetEraProcessDataRequestParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryGetEraProcessDataRequest", value: QueryGetEraProcessDataRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetEraProcessDataRequest: Could not create message: ' + e.message)
			}
		},
		
		managerRpworkload({ value }: managerRpworkloadParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.ManagerRPWorkload", value: ManagerRPWorkload.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:ManagerRPWorkload: Could not create message: ' + e.message)
			}
		},
		
		queryGetReputationDeltaPointRequest({ value }: queryGetReputationDeltaPointRequestParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryGetReputationDeltaPointRequest", value: QueryGetReputationDeltaPointRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetReputationDeltaPointRequest: Could not create message: ' + e.message)
			}
		},
		
		epochProcessData({ value }: epochProcessDataParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.EpochProcessData", value: EpochProcessData.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:EpochProcessData: Could not create message: ' + e.message)
			}
		},
		
		eraCheatStatusProcessData({ value }: eraCheatStatusProcessDataParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.EraCheatStatusProcessData", value: EraCheatStatusProcessData.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:EraCheatStatusProcessData: Could not create message: ' + e.message)
			}
		},
		
		queryGetEpochLengthRequest({ value }: queryGetEpochLengthRequestParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryGetEpochLengthRequest", value: QueryGetEpochLengthRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetEpochLengthRequest: Could not create message: ' + e.message)
			}
		},
		
		queryGetAllManagerWrworkloadByEpochRequest({ value }: queryGetAllManagerWrworkloadByEpochRequestParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryGetAllManagerWRWorkloadByEpochRequest", value: QueryGetAllManagerWRWorkloadByEpochRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetAllManagerWRWorkloadByEpochRequest: Could not create message: ' + e.message)
			}
		},
		
		params({ value }: paramsParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.Params", value: Params.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:Params: Could not create message: ' + e.message)
			}
		},
		
		queryGetNodeWorkloadResponse({ value }: queryGetNodeWorkloadResponseParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryGetNodeWorkloadResponse", value: QueryGetNodeWorkloadResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetNodeWorkloadResponse: Could not create message: ' + e.message)
			}
		},
		
		queryGetAllManagerWrworkloadByEpochResponse({ value }: queryGetAllManagerWrworkloadByEpochResponseParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryGetAllManagerWRWorkloadByEpochResponse", value: QueryGetAllManagerWRWorkloadByEpochResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetAllManagerWRWorkloadByEpochResponse: Could not create message: ' + e.message)
			}
		},
		
		queryGetAllNodeWorkloadByEpochRequest({ value }: queryGetAllNodeWorkloadByEpochRequestParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryGetAllNodeWorkloadByEpochRequest", value: QueryGetAllNodeWorkloadByEpochRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetAllNodeWorkloadByEpochRequest: Could not create message: ' + e.message)
			}
		},
		
		queryGetManagerCsworkloadRequest({ value }: queryGetManagerCsworkloadRequestParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryGetManagerCSWorkloadRequest", value: QueryGetManagerCSWorkloadRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetManagerCSWorkloadRequest: Could not create message: ' + e.message)
			}
		},
		
		queryGetAllEpochProcessDataResponse({ value }: queryGetAllEpochProcessDataResponseParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryGetAllEpochProcessDataResponse", value: QueryGetAllEpochProcessDataResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetAllEpochProcessDataResponse: Could not create message: ' + e.message)
			}
		},
		
		msgSubmitReputationPointChangeData({ value }: msgSubmitReputationPointChangeDataParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.MsgSubmitReputationPointChangeData", value: MsgSubmitReputationPointChangeData.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgSubmitReputationPointChangeData: Could not create message: ' + e.message)
			}
		},
		
		msgSubmitCheatStatusCr({ value }: msgSubmitCheatStatusCrParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.MsgSubmitCheatStatusCR", value: MsgSubmitCheatStatusCR.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgSubmitCheatStatusCR: Could not create message: ' + e.message)
			}
		},
		
		queryGetManagerRpworkloadRequest({ value }: queryGetManagerRpworkloadRequestParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryGetManagerRPWorkloadRequest", value: QueryGetManagerRPWorkloadRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetManagerRPWorkloadRequest: Could not create message: ' + e.message)
			}
		},
		
		queryGetReputationPointChangeDataResponse({ value }: queryGetReputationPointChangeDataResponseParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryGetReputationPointChangeDataResponse", value: QueryGetReputationPointChangeDataResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetReputationPointChangeDataResponse: Could not create message: ' + e.message)
			}
		},
		
		superior({ value }: superiorParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.Superior", value: Superior.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:Superior: Could not create message: ' + e.message)
			}
		},
		
		queryGetAllHistoryEpochRequest({ value }: queryGetAllHistoryEpochRequestParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryGetAllHistoryEpochRequest", value: QueryGetAllHistoryEpochRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetAllHistoryEpochRequest: Could not create message: ' + e.message)
			}
		},
		
		queryGetManagerWrworkloadResponse({ value }: queryGetManagerWrworkloadResponseParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.QueryGetManagerWRWorkloadResponse", value: QueryGetManagerWRWorkloadResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetManagerWRWorkloadResponse: Could not create message: ' + e.message)
			}
		},
		
		workreport({ value }: workreportParams): EncodeObject {
			try {
				return { typeUrl: "/enreach.workload.Workreport", value: Workreport.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:Workreport: Could not create message: ' + e.message)
			}
		},
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseURL: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	public structure: Record<string,unknown>;
	public registry: Array<[string, GeneratedType]> = [];

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });		
		this.updateTX(client);
		this.structure =  {
						
		};
		client.on('signer-changed',(signer) => {			
		 this.updateTX(client);
		})
	}
	updateTX(client: IgniteClient) {
    const methods = txClient({
        signer: client.signer,
        addr: client.env.rpcURL,
        prefix: client.env.prefix ?? "cosmos",
    })
	
    this.tx = methods;
    for (let m in methods) {
        this.tx[m] = methods[m].bind(this.tx);
    }
	}
};

const IgntModule = (test: IgniteClient) => {
	return {
		module: {
			EnreachWorkload: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default IgntModule;