// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: enreach/workload/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// //////////////////////////////////////////////////////
type QueryParamRequest struct {
	ParamKey string `protobuf:"bytes,1,opt,name=paramKey,proto3" json:"paramKey,omitempty"`
}

func (m *QueryParamRequest) Reset()         { *m = QueryParamRequest{} }
func (m *QueryParamRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamRequest) ProtoMessage()    {}
func (*QueryParamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{0}
}
func (m *QueryParamRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamRequest.Merge(m, src)
}
func (m *QueryParamRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamRequest proto.InternalMessageInfo

func (m *QueryParamRequest) GetParamKey() string {
	if m != nil {
		return m.ParamKey
	}
	return ""
}

type QueryParamResponse struct {
	ParamValue string `protobuf:"bytes,1,opt,name=paramValue,proto3" json:"paramValue,omitempty"`
}

func (m *QueryParamResponse) Reset()         { *m = QueryParamResponse{} }
func (m *QueryParamResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamResponse) ProtoMessage()    {}
func (*QueryParamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{1}
}
func (m *QueryParamResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamResponse.Merge(m, src)
}
func (m *QueryParamResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamResponse proto.InternalMessageInfo

func (m *QueryParamResponse) GetParamValue() string {
	if m != nil {
		return m.ParamValue
	}
	return ""
}

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{2}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{3}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// //////////
type QueryGetEpochLengthRequest struct {
}

func (m *QueryGetEpochLengthRequest) Reset()         { *m = QueryGetEpochLengthRequest{} }
func (m *QueryGetEpochLengthRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetEpochLengthRequest) ProtoMessage()    {}
func (*QueryGetEpochLengthRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{4}
}
func (m *QueryGetEpochLengthRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEpochLengthRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEpochLengthRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEpochLengthRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEpochLengthRequest.Merge(m, src)
}
func (m *QueryGetEpochLengthRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEpochLengthRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEpochLengthRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEpochLengthRequest proto.InternalMessageInfo

type QueryGetEpochLengthResponse struct {
	EpochLength uint64 `protobuf:"varint,1,opt,name=epochLength,proto3" json:"epochLength,omitempty"`
}

func (m *QueryGetEpochLengthResponse) Reset()         { *m = QueryGetEpochLengthResponse{} }
func (m *QueryGetEpochLengthResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetEpochLengthResponse) ProtoMessage()    {}
func (*QueryGetEpochLengthResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{5}
}
func (m *QueryGetEpochLengthResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEpochLengthResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEpochLengthResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEpochLengthResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEpochLengthResponse.Merge(m, src)
}
func (m *QueryGetEpochLengthResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEpochLengthResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEpochLengthResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEpochLengthResponse proto.InternalMessageInfo

func (m *QueryGetEpochLengthResponse) GetEpochLength() uint64 {
	if m != nil {
		return m.EpochLength
	}
	return 0
}

type QueryGetCurrentEpochRequest struct {
}

func (m *QueryGetCurrentEpochRequest) Reset()         { *m = QueryGetCurrentEpochRequest{} }
func (m *QueryGetCurrentEpochRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCurrentEpochRequest) ProtoMessage()    {}
func (*QueryGetCurrentEpochRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{6}
}
func (m *QueryGetCurrentEpochRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCurrentEpochRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCurrentEpochRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCurrentEpochRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCurrentEpochRequest.Merge(m, src)
}
func (m *QueryGetCurrentEpochRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCurrentEpochRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCurrentEpochRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCurrentEpochRequest proto.InternalMessageInfo

type QueryGetCurrentEpochResponse struct {
	EpochInfo EpochInfo `protobuf:"bytes,1,opt,name=EpochInfo,proto3" json:"EpochInfo"`
}

func (m *QueryGetCurrentEpochResponse) Reset()         { *m = QueryGetCurrentEpochResponse{} }
func (m *QueryGetCurrentEpochResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCurrentEpochResponse) ProtoMessage()    {}
func (*QueryGetCurrentEpochResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{7}
}
func (m *QueryGetCurrentEpochResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCurrentEpochResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCurrentEpochResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCurrentEpochResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCurrentEpochResponse.Merge(m, src)
}
func (m *QueryGetCurrentEpochResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCurrentEpochResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCurrentEpochResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCurrentEpochResponse proto.InternalMessageInfo

func (m *QueryGetCurrentEpochResponse) GetEpochInfo() EpochInfo {
	if m != nil {
		return m.EpochInfo
	}
	return EpochInfo{}
}

type QueryGetPendingNextEpochRequest struct {
}

func (m *QueryGetPendingNextEpochRequest) Reset()         { *m = QueryGetPendingNextEpochRequest{} }
func (m *QueryGetPendingNextEpochRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPendingNextEpochRequest) ProtoMessage()    {}
func (*QueryGetPendingNextEpochRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{8}
}
func (m *QueryGetPendingNextEpochRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPendingNextEpochRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPendingNextEpochRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPendingNextEpochRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPendingNextEpochRequest.Merge(m, src)
}
func (m *QueryGetPendingNextEpochRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPendingNextEpochRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPendingNextEpochRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPendingNextEpochRequest proto.InternalMessageInfo

type QueryGetPendingNextEpochResponse struct {
	EpochInfo EpochInfo `protobuf:"bytes,1,opt,name=EpochInfo,proto3" json:"EpochInfo"`
}

func (m *QueryGetPendingNextEpochResponse) Reset()         { *m = QueryGetPendingNextEpochResponse{} }
func (m *QueryGetPendingNextEpochResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPendingNextEpochResponse) ProtoMessage()    {}
func (*QueryGetPendingNextEpochResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{9}
}
func (m *QueryGetPendingNextEpochResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPendingNextEpochResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPendingNextEpochResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPendingNextEpochResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPendingNextEpochResponse.Merge(m, src)
}
func (m *QueryGetPendingNextEpochResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPendingNextEpochResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPendingNextEpochResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPendingNextEpochResponse proto.InternalMessageInfo

func (m *QueryGetPendingNextEpochResponse) GetEpochInfo() EpochInfo {
	if m != nil {
		return m.EpochInfo
	}
	return EpochInfo{}
}

type QueryGetHistoryEpochRequest struct {
	EpochNumber uint64 `protobuf:"varint,1,opt,name=epochNumber,proto3" json:"epochNumber,omitempty"`
}

func (m *QueryGetHistoryEpochRequest) Reset()         { *m = QueryGetHistoryEpochRequest{} }
func (m *QueryGetHistoryEpochRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetHistoryEpochRequest) ProtoMessage()    {}
func (*QueryGetHistoryEpochRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{10}
}
func (m *QueryGetHistoryEpochRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetHistoryEpochRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetHistoryEpochRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetHistoryEpochRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetHistoryEpochRequest.Merge(m, src)
}
func (m *QueryGetHistoryEpochRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetHistoryEpochRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetHistoryEpochRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetHistoryEpochRequest proto.InternalMessageInfo

func (m *QueryGetHistoryEpochRequest) GetEpochNumber() uint64 {
	if m != nil {
		return m.EpochNumber
	}
	return 0
}

type QueryGetHistoryEpochResponse struct {
	EpochInfo EpochInfo `protobuf:"bytes,1,opt,name=EpochInfo,proto3" json:"EpochInfo"`
}

func (m *QueryGetHistoryEpochResponse) Reset()         { *m = QueryGetHistoryEpochResponse{} }
func (m *QueryGetHistoryEpochResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetHistoryEpochResponse) ProtoMessage()    {}
func (*QueryGetHistoryEpochResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{11}
}
func (m *QueryGetHistoryEpochResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetHistoryEpochResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetHistoryEpochResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetHistoryEpochResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetHistoryEpochResponse.Merge(m, src)
}
func (m *QueryGetHistoryEpochResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetHistoryEpochResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetHistoryEpochResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetHistoryEpochResponse proto.InternalMessageInfo

func (m *QueryGetHistoryEpochResponse) GetEpochInfo() EpochInfo {
	if m != nil {
		return m.EpochInfo
	}
	return EpochInfo{}
}

type QueryGetAllHistoryEpochRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllHistoryEpochRequest) Reset()         { *m = QueryGetAllHistoryEpochRequest{} }
func (m *QueryGetAllHistoryEpochRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllHistoryEpochRequest) ProtoMessage()    {}
func (*QueryGetAllHistoryEpochRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{12}
}
func (m *QueryGetAllHistoryEpochRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllHistoryEpochRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllHistoryEpochRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllHistoryEpochRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllHistoryEpochRequest.Merge(m, src)
}
func (m *QueryGetAllHistoryEpochRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllHistoryEpochRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllHistoryEpochRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllHistoryEpochRequest proto.InternalMessageInfo

func (m *QueryGetAllHistoryEpochRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetAllHistoryEpochResponse struct {
	EpochInfos []EpochInfo         `protobuf:"bytes,1,rep,name=EpochInfos,proto3" json:"EpochInfos"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllHistoryEpochResponse) Reset()         { *m = QueryGetAllHistoryEpochResponse{} }
func (m *QueryGetAllHistoryEpochResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllHistoryEpochResponse) ProtoMessage()    {}
func (*QueryGetAllHistoryEpochResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{13}
}
func (m *QueryGetAllHistoryEpochResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllHistoryEpochResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllHistoryEpochResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllHistoryEpochResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllHistoryEpochResponse.Merge(m, src)
}
func (m *QueryGetAllHistoryEpochResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllHistoryEpochResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllHistoryEpochResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllHistoryEpochResponse proto.InternalMessageInfo

func (m *QueryGetAllHistoryEpochResponse) GetEpochInfos() []EpochInfo {
	if m != nil {
		return m.EpochInfos
	}
	return nil
}

func (m *QueryGetAllHistoryEpochResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// //////////
type QueryGetNodeWorkloadRequest struct {
	Epoch  uint64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	NodeID string `protobuf:"bytes,2,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
}

func (m *QueryGetNodeWorkloadRequest) Reset()         { *m = QueryGetNodeWorkloadRequest{} }
func (m *QueryGetNodeWorkloadRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetNodeWorkloadRequest) ProtoMessage()    {}
func (*QueryGetNodeWorkloadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{14}
}
func (m *QueryGetNodeWorkloadRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNodeWorkloadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNodeWorkloadRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNodeWorkloadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNodeWorkloadRequest.Merge(m, src)
}
func (m *QueryGetNodeWorkloadRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNodeWorkloadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNodeWorkloadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNodeWorkloadRequest proto.InternalMessageInfo

func (m *QueryGetNodeWorkloadRequest) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *QueryGetNodeWorkloadRequest) GetNodeID() string {
	if m != nil {
		return m.NodeID
	}
	return ""
}

type QueryGetNodeWorkloadResponse struct {
	NodeWorkload NodeWorkload `protobuf:"bytes,1,opt,name=NodeWorkload,proto3" json:"NodeWorkload"`
}

func (m *QueryGetNodeWorkloadResponse) Reset()         { *m = QueryGetNodeWorkloadResponse{} }
func (m *QueryGetNodeWorkloadResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetNodeWorkloadResponse) ProtoMessage()    {}
func (*QueryGetNodeWorkloadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{15}
}
func (m *QueryGetNodeWorkloadResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNodeWorkloadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNodeWorkloadResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNodeWorkloadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNodeWorkloadResponse.Merge(m, src)
}
func (m *QueryGetNodeWorkloadResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNodeWorkloadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNodeWorkloadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNodeWorkloadResponse proto.InternalMessageInfo

func (m *QueryGetNodeWorkloadResponse) GetNodeWorkload() NodeWorkload {
	if m != nil {
		return m.NodeWorkload
	}
	return NodeWorkload{}
}

type QueryGetAllNodeWorkloadByEpochRequest struct {
	Epoch      uint64             `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllNodeWorkloadByEpochRequest) Reset()         { *m = QueryGetAllNodeWorkloadByEpochRequest{} }
func (m *QueryGetAllNodeWorkloadByEpochRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllNodeWorkloadByEpochRequest) ProtoMessage()    {}
func (*QueryGetAllNodeWorkloadByEpochRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{16}
}
func (m *QueryGetAllNodeWorkloadByEpochRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllNodeWorkloadByEpochRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllNodeWorkloadByEpochRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllNodeWorkloadByEpochRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllNodeWorkloadByEpochRequest.Merge(m, src)
}
func (m *QueryGetAllNodeWorkloadByEpochRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllNodeWorkloadByEpochRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllNodeWorkloadByEpochRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllNodeWorkloadByEpochRequest proto.InternalMessageInfo

func (m *QueryGetAllNodeWorkloadByEpochRequest) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *QueryGetAllNodeWorkloadByEpochRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetAllNodeWorkloadByEpochResponse struct {
	NodeWorkloads []NodeWorkload      `protobuf:"bytes,1,rep,name=NodeWorkloads,proto3" json:"NodeWorkloads"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllNodeWorkloadByEpochResponse) Reset() {
	*m = QueryGetAllNodeWorkloadByEpochResponse{}
}
func (m *QueryGetAllNodeWorkloadByEpochResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllNodeWorkloadByEpochResponse) ProtoMessage()    {}
func (*QueryGetAllNodeWorkloadByEpochResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{17}
}
func (m *QueryGetAllNodeWorkloadByEpochResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllNodeWorkloadByEpochResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllNodeWorkloadByEpochResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllNodeWorkloadByEpochResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllNodeWorkloadByEpochResponse.Merge(m, src)
}
func (m *QueryGetAllNodeWorkloadByEpochResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllNodeWorkloadByEpochResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllNodeWorkloadByEpochResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllNodeWorkloadByEpochResponse proto.InternalMessageInfo

func (m *QueryGetAllNodeWorkloadByEpochResponse) GetNodeWorkloads() []NodeWorkload {
	if m != nil {
		return m.NodeWorkloads
	}
	return nil
}

func (m *QueryGetAllNodeWorkloadByEpochResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// //////////
type QueryGetManagerWRWorkloadRequest struct {
	Epoch          uint64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	ManagerAccount string `protobuf:"bytes,2,opt,name=managerAccount,proto3" json:"managerAccount,omitempty"`
}

func (m *QueryGetManagerWRWorkloadRequest) Reset()         { *m = QueryGetManagerWRWorkloadRequest{} }
func (m *QueryGetManagerWRWorkloadRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetManagerWRWorkloadRequest) ProtoMessage()    {}
func (*QueryGetManagerWRWorkloadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{18}
}
func (m *QueryGetManagerWRWorkloadRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetManagerWRWorkloadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetManagerWRWorkloadRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetManagerWRWorkloadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetManagerWRWorkloadRequest.Merge(m, src)
}
func (m *QueryGetManagerWRWorkloadRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetManagerWRWorkloadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetManagerWRWorkloadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetManagerWRWorkloadRequest proto.InternalMessageInfo

func (m *QueryGetManagerWRWorkloadRequest) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *QueryGetManagerWRWorkloadRequest) GetManagerAccount() string {
	if m != nil {
		return m.ManagerAccount
	}
	return ""
}

type QueryGetManagerWRWorkloadResponse struct {
	ManagerWRWorkload ManagerWRWorkload `protobuf:"bytes,1,opt,name=ManagerWRWorkload,proto3" json:"ManagerWRWorkload"`
}

func (m *QueryGetManagerWRWorkloadResponse) Reset()         { *m = QueryGetManagerWRWorkloadResponse{} }
func (m *QueryGetManagerWRWorkloadResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetManagerWRWorkloadResponse) ProtoMessage()    {}
func (*QueryGetManagerWRWorkloadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{19}
}
func (m *QueryGetManagerWRWorkloadResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetManagerWRWorkloadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetManagerWRWorkloadResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetManagerWRWorkloadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetManagerWRWorkloadResponse.Merge(m, src)
}
func (m *QueryGetManagerWRWorkloadResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetManagerWRWorkloadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetManagerWRWorkloadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetManagerWRWorkloadResponse proto.InternalMessageInfo

func (m *QueryGetManagerWRWorkloadResponse) GetManagerWRWorkload() ManagerWRWorkload {
	if m != nil {
		return m.ManagerWRWorkload
	}
	return ManagerWRWorkload{}
}

type QueryGetAllManagerWRWorkloadByEpochRequest struct {
	Epoch      uint64             `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllManagerWRWorkloadByEpochRequest) Reset() {
	*m = QueryGetAllManagerWRWorkloadByEpochRequest{}
}
func (m *QueryGetAllManagerWRWorkloadByEpochRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetAllManagerWRWorkloadByEpochRequest) ProtoMessage() {}
func (*QueryGetAllManagerWRWorkloadByEpochRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{20}
}
func (m *QueryGetAllManagerWRWorkloadByEpochRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllManagerWRWorkloadByEpochRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllManagerWRWorkloadByEpochRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllManagerWRWorkloadByEpochRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllManagerWRWorkloadByEpochRequest.Merge(m, src)
}
func (m *QueryGetAllManagerWRWorkloadByEpochRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllManagerWRWorkloadByEpochRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllManagerWRWorkloadByEpochRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllManagerWRWorkloadByEpochRequest proto.InternalMessageInfo

func (m *QueryGetAllManagerWRWorkloadByEpochRequest) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *QueryGetAllManagerWRWorkloadByEpochRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetAllManagerWRWorkloadByEpochResponse struct {
	ManagerWRWorkloads []ManagerWRWorkload `protobuf:"bytes,1,rep,name=ManagerWRWorkloads,proto3" json:"ManagerWRWorkloads"`
	Pagination         *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllManagerWRWorkloadByEpochResponse) Reset() {
	*m = QueryGetAllManagerWRWorkloadByEpochResponse{}
}
func (m *QueryGetAllManagerWRWorkloadByEpochResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetAllManagerWRWorkloadByEpochResponse) ProtoMessage() {}
func (*QueryGetAllManagerWRWorkloadByEpochResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{21}
}
func (m *QueryGetAllManagerWRWorkloadByEpochResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllManagerWRWorkloadByEpochResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllManagerWRWorkloadByEpochResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllManagerWRWorkloadByEpochResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllManagerWRWorkloadByEpochResponse.Merge(m, src)
}
func (m *QueryGetAllManagerWRWorkloadByEpochResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllManagerWRWorkloadByEpochResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllManagerWRWorkloadByEpochResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllManagerWRWorkloadByEpochResponse proto.InternalMessageInfo

func (m *QueryGetAllManagerWRWorkloadByEpochResponse) GetManagerWRWorkloads() []ManagerWRWorkload {
	if m != nil {
		return m.ManagerWRWorkloads
	}
	return nil
}

func (m *QueryGetAllManagerWRWorkloadByEpochResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// //////////
type QueryGetManagerRPWorkloadRequest struct {
	Era            uint64 `protobuf:"varint,1,opt,name=era,proto3" json:"era,omitempty"`
	ManagerAccount string `protobuf:"bytes,2,opt,name=managerAccount,proto3" json:"managerAccount,omitempty"`
}

func (m *QueryGetManagerRPWorkloadRequest) Reset()         { *m = QueryGetManagerRPWorkloadRequest{} }
func (m *QueryGetManagerRPWorkloadRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetManagerRPWorkloadRequest) ProtoMessage()    {}
func (*QueryGetManagerRPWorkloadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{22}
}
func (m *QueryGetManagerRPWorkloadRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetManagerRPWorkloadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetManagerRPWorkloadRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetManagerRPWorkloadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetManagerRPWorkloadRequest.Merge(m, src)
}
func (m *QueryGetManagerRPWorkloadRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetManagerRPWorkloadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetManagerRPWorkloadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetManagerRPWorkloadRequest proto.InternalMessageInfo

func (m *QueryGetManagerRPWorkloadRequest) GetEra() uint64 {
	if m != nil {
		return m.Era
	}
	return 0
}

func (m *QueryGetManagerRPWorkloadRequest) GetManagerAccount() string {
	if m != nil {
		return m.ManagerAccount
	}
	return ""
}

type QueryGetManagerRPWorkloadResponse struct {
	ManagerRPWorkload ManagerRPWorkload `protobuf:"bytes,1,opt,name=ManagerRPWorkload,proto3" json:"ManagerRPWorkload"`
}

func (m *QueryGetManagerRPWorkloadResponse) Reset()         { *m = QueryGetManagerRPWorkloadResponse{} }
func (m *QueryGetManagerRPWorkloadResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetManagerRPWorkloadResponse) ProtoMessage()    {}
func (*QueryGetManagerRPWorkloadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{23}
}
func (m *QueryGetManagerRPWorkloadResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetManagerRPWorkloadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetManagerRPWorkloadResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetManagerRPWorkloadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetManagerRPWorkloadResponse.Merge(m, src)
}
func (m *QueryGetManagerRPWorkloadResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetManagerRPWorkloadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetManagerRPWorkloadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetManagerRPWorkloadResponse proto.InternalMessageInfo

func (m *QueryGetManagerRPWorkloadResponse) GetManagerRPWorkload() ManagerRPWorkload {
	if m != nil {
		return m.ManagerRPWorkload
	}
	return ManagerRPWorkload{}
}

type QueryGetAllManagerRPWorkloadByEraRequest struct {
	Era        uint64             `protobuf:"varint,1,opt,name=era,proto3" json:"era,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllManagerRPWorkloadByEraRequest) Reset() {
	*m = QueryGetAllManagerRPWorkloadByEraRequest{}
}
func (m *QueryGetAllManagerRPWorkloadByEraRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllManagerRPWorkloadByEraRequest) ProtoMessage()    {}
func (*QueryGetAllManagerRPWorkloadByEraRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{24}
}
func (m *QueryGetAllManagerRPWorkloadByEraRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllManagerRPWorkloadByEraRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllManagerRPWorkloadByEraRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllManagerRPWorkloadByEraRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllManagerRPWorkloadByEraRequest.Merge(m, src)
}
func (m *QueryGetAllManagerRPWorkloadByEraRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllManagerRPWorkloadByEraRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllManagerRPWorkloadByEraRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllManagerRPWorkloadByEraRequest proto.InternalMessageInfo

func (m *QueryGetAllManagerRPWorkloadByEraRequest) GetEra() uint64 {
	if m != nil {
		return m.Era
	}
	return 0
}

func (m *QueryGetAllManagerRPWorkloadByEraRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetAllManagerRPWorkloadByEraResponse struct {
	ManagerRPWorkloads []ManagerRPWorkload `protobuf:"bytes,1,rep,name=ManagerRPWorkloads,proto3" json:"ManagerRPWorkloads"`
	Pagination         *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllManagerRPWorkloadByEraResponse) Reset() {
	*m = QueryGetAllManagerRPWorkloadByEraResponse{}
}
func (m *QueryGetAllManagerRPWorkloadByEraResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetAllManagerRPWorkloadByEraResponse) ProtoMessage() {}
func (*QueryGetAllManagerRPWorkloadByEraResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{25}
}
func (m *QueryGetAllManagerRPWorkloadByEraResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllManagerRPWorkloadByEraResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllManagerRPWorkloadByEraResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllManagerRPWorkloadByEraResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllManagerRPWorkloadByEraResponse.Merge(m, src)
}
func (m *QueryGetAllManagerRPWorkloadByEraResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllManagerRPWorkloadByEraResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllManagerRPWorkloadByEraResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllManagerRPWorkloadByEraResponse proto.InternalMessageInfo

func (m *QueryGetAllManagerRPWorkloadByEraResponse) GetManagerRPWorkloads() []ManagerRPWorkload {
	if m != nil {
		return m.ManagerRPWorkloads
	}
	return nil
}

func (m *QueryGetAllManagerRPWorkloadByEraResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// //////////
type QueryGetManagerCSWorkloadRequest struct {
	Era            uint64 `protobuf:"varint,1,opt,name=era,proto3" json:"era,omitempty"`
	ManagerAccount string `protobuf:"bytes,2,opt,name=managerAccount,proto3" json:"managerAccount,omitempty"`
}

func (m *QueryGetManagerCSWorkloadRequest) Reset()         { *m = QueryGetManagerCSWorkloadRequest{} }
func (m *QueryGetManagerCSWorkloadRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetManagerCSWorkloadRequest) ProtoMessage()    {}
func (*QueryGetManagerCSWorkloadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{26}
}
func (m *QueryGetManagerCSWorkloadRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetManagerCSWorkloadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetManagerCSWorkloadRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetManagerCSWorkloadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetManagerCSWorkloadRequest.Merge(m, src)
}
func (m *QueryGetManagerCSWorkloadRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetManagerCSWorkloadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetManagerCSWorkloadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetManagerCSWorkloadRequest proto.InternalMessageInfo

func (m *QueryGetManagerCSWorkloadRequest) GetEra() uint64 {
	if m != nil {
		return m.Era
	}
	return 0
}

func (m *QueryGetManagerCSWorkloadRequest) GetManagerAccount() string {
	if m != nil {
		return m.ManagerAccount
	}
	return ""
}

type QueryGetManagerCSWorkloadResponse struct {
	ManagerCSWorkload ManagerCSWorkload `protobuf:"bytes,1,opt,name=ManagerCSWorkload,proto3" json:"ManagerCSWorkload"`
}

func (m *QueryGetManagerCSWorkloadResponse) Reset()         { *m = QueryGetManagerCSWorkloadResponse{} }
func (m *QueryGetManagerCSWorkloadResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetManagerCSWorkloadResponse) ProtoMessage()    {}
func (*QueryGetManagerCSWorkloadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{27}
}
func (m *QueryGetManagerCSWorkloadResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetManagerCSWorkloadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetManagerCSWorkloadResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetManagerCSWorkloadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetManagerCSWorkloadResponse.Merge(m, src)
}
func (m *QueryGetManagerCSWorkloadResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetManagerCSWorkloadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetManagerCSWorkloadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetManagerCSWorkloadResponse proto.InternalMessageInfo

func (m *QueryGetManagerCSWorkloadResponse) GetManagerCSWorkload() ManagerCSWorkload {
	if m != nil {
		return m.ManagerCSWorkload
	}
	return ManagerCSWorkload{}
}

type QueryGetAllManagerCSWorkloadByEraRequest struct {
	Era        uint64             `protobuf:"varint,1,opt,name=era,proto3" json:"era,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllManagerCSWorkloadByEraRequest) Reset() {
	*m = QueryGetAllManagerCSWorkloadByEraRequest{}
}
func (m *QueryGetAllManagerCSWorkloadByEraRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllManagerCSWorkloadByEraRequest) ProtoMessage()    {}
func (*QueryGetAllManagerCSWorkloadByEraRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{28}
}
func (m *QueryGetAllManagerCSWorkloadByEraRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllManagerCSWorkloadByEraRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllManagerCSWorkloadByEraRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllManagerCSWorkloadByEraRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllManagerCSWorkloadByEraRequest.Merge(m, src)
}
func (m *QueryGetAllManagerCSWorkloadByEraRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllManagerCSWorkloadByEraRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllManagerCSWorkloadByEraRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllManagerCSWorkloadByEraRequest proto.InternalMessageInfo

func (m *QueryGetAllManagerCSWorkloadByEraRequest) GetEra() uint64 {
	if m != nil {
		return m.Era
	}
	return 0
}

func (m *QueryGetAllManagerCSWorkloadByEraRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetAllManagerCSWorkloadByEraResponse struct {
	ManagerCSWorkloads []ManagerCSWorkload `protobuf:"bytes,1,rep,name=ManagerCSWorkloads,proto3" json:"ManagerCSWorkloads"`
	Pagination         *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllManagerCSWorkloadByEraResponse) Reset() {
	*m = QueryGetAllManagerCSWorkloadByEraResponse{}
}
func (m *QueryGetAllManagerCSWorkloadByEraResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetAllManagerCSWorkloadByEraResponse) ProtoMessage() {}
func (*QueryGetAllManagerCSWorkloadByEraResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{29}
}
func (m *QueryGetAllManagerCSWorkloadByEraResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllManagerCSWorkloadByEraResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllManagerCSWorkloadByEraResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllManagerCSWorkloadByEraResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllManagerCSWorkloadByEraResponse.Merge(m, src)
}
func (m *QueryGetAllManagerCSWorkloadByEraResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllManagerCSWorkloadByEraResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllManagerCSWorkloadByEraResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllManagerCSWorkloadByEraResponse proto.InternalMessageInfo

func (m *QueryGetAllManagerCSWorkloadByEraResponse) GetManagerCSWorkloads() []ManagerCSWorkload {
	if m != nil {
		return m.ManagerCSWorkloads
	}
	return nil
}

func (m *QueryGetAllManagerCSWorkloadByEraResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// //////////
type QueryGetWorkreportRequest struct {
	Epoch  uint64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	NodeID string `protobuf:"bytes,2,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
}

func (m *QueryGetWorkreportRequest) Reset()         { *m = QueryGetWorkreportRequest{} }
func (m *QueryGetWorkreportRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetWorkreportRequest) ProtoMessage()    {}
func (*QueryGetWorkreportRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{30}
}
func (m *QueryGetWorkreportRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetWorkreportRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetWorkreportRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetWorkreportRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetWorkreportRequest.Merge(m, src)
}
func (m *QueryGetWorkreportRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetWorkreportRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetWorkreportRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetWorkreportRequest proto.InternalMessageInfo

func (m *QueryGetWorkreportRequest) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *QueryGetWorkreportRequest) GetNodeID() string {
	if m != nil {
		return m.NodeID
	}
	return ""
}

type QueryGetWorkreportResponse struct {
	Workreport Workreport `protobuf:"bytes,1,opt,name=Workreport,proto3" json:"Workreport"`
}

func (m *QueryGetWorkreportResponse) Reset()         { *m = QueryGetWorkreportResponse{} }
func (m *QueryGetWorkreportResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetWorkreportResponse) ProtoMessage()    {}
func (*QueryGetWorkreportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{31}
}
func (m *QueryGetWorkreportResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetWorkreportResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetWorkreportResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetWorkreportResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetWorkreportResponse.Merge(m, src)
}
func (m *QueryGetWorkreportResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetWorkreportResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetWorkreportResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetWorkreportResponse proto.InternalMessageInfo

func (m *QueryGetWorkreportResponse) GetWorkreport() Workreport {
	if m != nil {
		return m.Workreport
	}
	return Workreport{}
}

type QueryGetAllWorkreportByEpochRequest struct {
	Epoch      uint64             `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllWorkreportByEpochRequest) Reset()         { *m = QueryGetAllWorkreportByEpochRequest{} }
func (m *QueryGetAllWorkreportByEpochRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllWorkreportByEpochRequest) ProtoMessage()    {}
func (*QueryGetAllWorkreportByEpochRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{32}
}
func (m *QueryGetAllWorkreportByEpochRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllWorkreportByEpochRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllWorkreportByEpochRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllWorkreportByEpochRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllWorkreportByEpochRequest.Merge(m, src)
}
func (m *QueryGetAllWorkreportByEpochRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllWorkreportByEpochRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllWorkreportByEpochRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllWorkreportByEpochRequest proto.InternalMessageInfo

func (m *QueryGetAllWorkreportByEpochRequest) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *QueryGetAllWorkreportByEpochRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetAllWorkreportByEpochResponse struct {
	Workreports []Workreport        `protobuf:"bytes,1,rep,name=Workreports,proto3" json:"Workreports"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllWorkreportByEpochResponse) Reset()         { *m = QueryGetAllWorkreportByEpochResponse{} }
func (m *QueryGetAllWorkreportByEpochResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllWorkreportByEpochResponse) ProtoMessage()    {}
func (*QueryGetAllWorkreportByEpochResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{33}
}
func (m *QueryGetAllWorkreportByEpochResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllWorkreportByEpochResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllWorkreportByEpochResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllWorkreportByEpochResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllWorkreportByEpochResponse.Merge(m, src)
}
func (m *QueryGetAllWorkreportByEpochResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllWorkreportByEpochResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllWorkreportByEpochResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllWorkreportByEpochResponse proto.InternalMessageInfo

func (m *QueryGetAllWorkreportByEpochResponse) GetWorkreports() []Workreport {
	if m != nil {
		return m.Workreports
	}
	return nil
}

func (m *QueryGetAllWorkreportByEpochResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// //////////
type QueryGetEpochProcessDataRequest struct {
	Epoch uint64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (m *QueryGetEpochProcessDataRequest) Reset()         { *m = QueryGetEpochProcessDataRequest{} }
func (m *QueryGetEpochProcessDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetEpochProcessDataRequest) ProtoMessage()    {}
func (*QueryGetEpochProcessDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{34}
}
func (m *QueryGetEpochProcessDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEpochProcessDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEpochProcessDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEpochProcessDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEpochProcessDataRequest.Merge(m, src)
}
func (m *QueryGetEpochProcessDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEpochProcessDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEpochProcessDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEpochProcessDataRequest proto.InternalMessageInfo

func (m *QueryGetEpochProcessDataRequest) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

type QueryGetEpochProcessDataResponse struct {
	EpochProcessData EpochProcessData `protobuf:"bytes,1,opt,name=EpochProcessData,proto3" json:"EpochProcessData"`
}

func (m *QueryGetEpochProcessDataResponse) Reset()         { *m = QueryGetEpochProcessDataResponse{} }
func (m *QueryGetEpochProcessDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetEpochProcessDataResponse) ProtoMessage()    {}
func (*QueryGetEpochProcessDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{35}
}
func (m *QueryGetEpochProcessDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEpochProcessDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEpochProcessDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEpochProcessDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEpochProcessDataResponse.Merge(m, src)
}
func (m *QueryGetEpochProcessDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEpochProcessDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEpochProcessDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEpochProcessDataResponse proto.InternalMessageInfo

func (m *QueryGetEpochProcessDataResponse) GetEpochProcessData() EpochProcessData {
	if m != nil {
		return m.EpochProcessData
	}
	return EpochProcessData{}
}

type QueryGetAllEpochProcessDataRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllEpochProcessDataRequest) Reset()         { *m = QueryGetAllEpochProcessDataRequest{} }
func (m *QueryGetAllEpochProcessDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllEpochProcessDataRequest) ProtoMessage()    {}
func (*QueryGetAllEpochProcessDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{36}
}
func (m *QueryGetAllEpochProcessDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllEpochProcessDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllEpochProcessDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllEpochProcessDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllEpochProcessDataRequest.Merge(m, src)
}
func (m *QueryGetAllEpochProcessDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllEpochProcessDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllEpochProcessDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllEpochProcessDataRequest proto.InternalMessageInfo

func (m *QueryGetAllEpochProcessDataRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetAllEpochProcessDataResponse struct {
	EpochProcessDatas []EpochProcessData  `protobuf:"bytes,1,rep,name=EpochProcessDatas,proto3" json:"EpochProcessDatas"`
	Pagination        *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllEpochProcessDataResponse) Reset()         { *m = QueryGetAllEpochProcessDataResponse{} }
func (m *QueryGetAllEpochProcessDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllEpochProcessDataResponse) ProtoMessage()    {}
func (*QueryGetAllEpochProcessDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{37}
}
func (m *QueryGetAllEpochProcessDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllEpochProcessDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllEpochProcessDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllEpochProcessDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllEpochProcessDataResponse.Merge(m, src)
}
func (m *QueryGetAllEpochProcessDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllEpochProcessDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllEpochProcessDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllEpochProcessDataResponse proto.InternalMessageInfo

func (m *QueryGetAllEpochProcessDataResponse) GetEpochProcessDatas() []EpochProcessData {
	if m != nil {
		return m.EpochProcessDatas
	}
	return nil
}

func (m *QueryGetAllEpochProcessDataResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// //////////
type QueryGetSuperiorRequest struct {
}

func (m *QueryGetSuperiorRequest) Reset()         { *m = QueryGetSuperiorRequest{} }
func (m *QueryGetSuperiorRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSuperiorRequest) ProtoMessage()    {}
func (*QueryGetSuperiorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{38}
}
func (m *QueryGetSuperiorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSuperiorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSuperiorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSuperiorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSuperiorRequest.Merge(m, src)
}
func (m *QueryGetSuperiorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSuperiorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSuperiorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSuperiorRequest proto.InternalMessageInfo

type QueryGetSuperiorResponse struct {
	Superior Superior `protobuf:"bytes,1,opt,name=Superior,proto3" json:"Superior"`
}

func (m *QueryGetSuperiorResponse) Reset()         { *m = QueryGetSuperiorResponse{} }
func (m *QueryGetSuperiorResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSuperiorResponse) ProtoMessage()    {}
func (*QueryGetSuperiorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{39}
}
func (m *QueryGetSuperiorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSuperiorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSuperiorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSuperiorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSuperiorResponse.Merge(m, src)
}
func (m *QueryGetSuperiorResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSuperiorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSuperiorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSuperiorResponse proto.InternalMessageInfo

func (m *QueryGetSuperiorResponse) GetSuperior() Superior {
	if m != nil {
		return m.Superior
	}
	return Superior{}
}

// //////////
type QueryGetEraLengthRequest struct {
}

func (m *QueryGetEraLengthRequest) Reset()         { *m = QueryGetEraLengthRequest{} }
func (m *QueryGetEraLengthRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetEraLengthRequest) ProtoMessage()    {}
func (*QueryGetEraLengthRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{40}
}
func (m *QueryGetEraLengthRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEraLengthRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEraLengthRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEraLengthRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEraLengthRequest.Merge(m, src)
}
func (m *QueryGetEraLengthRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEraLengthRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEraLengthRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEraLengthRequest proto.InternalMessageInfo

type QueryGetEraLengthResponse struct {
	EraLength uint64 `protobuf:"varint,1,opt,name=eraLength,proto3" json:"eraLength,omitempty"`
}

func (m *QueryGetEraLengthResponse) Reset()         { *m = QueryGetEraLengthResponse{} }
func (m *QueryGetEraLengthResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetEraLengthResponse) ProtoMessage()    {}
func (*QueryGetEraLengthResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{41}
}
func (m *QueryGetEraLengthResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEraLengthResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEraLengthResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEraLengthResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEraLengthResponse.Merge(m, src)
}
func (m *QueryGetEraLengthResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEraLengthResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEraLengthResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEraLengthResponse proto.InternalMessageInfo

func (m *QueryGetEraLengthResponse) GetEraLength() uint64 {
	if m != nil {
		return m.EraLength
	}
	return 0
}

type QueryGetCurrentEraRequest struct {
}

func (m *QueryGetCurrentEraRequest) Reset()         { *m = QueryGetCurrentEraRequest{} }
func (m *QueryGetCurrentEraRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCurrentEraRequest) ProtoMessage()    {}
func (*QueryGetCurrentEraRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{42}
}
func (m *QueryGetCurrentEraRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCurrentEraRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCurrentEraRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCurrentEraRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCurrentEraRequest.Merge(m, src)
}
func (m *QueryGetCurrentEraRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCurrentEraRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCurrentEraRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCurrentEraRequest proto.InternalMessageInfo

type QueryGetCurrentEraResponse struct {
	EraInfo EraInfo `protobuf:"bytes,1,opt,name=EraInfo,proto3" json:"EraInfo"`
}

func (m *QueryGetCurrentEraResponse) Reset()         { *m = QueryGetCurrentEraResponse{} }
func (m *QueryGetCurrentEraResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCurrentEraResponse) ProtoMessage()    {}
func (*QueryGetCurrentEraResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{43}
}
func (m *QueryGetCurrentEraResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCurrentEraResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCurrentEraResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCurrentEraResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCurrentEraResponse.Merge(m, src)
}
func (m *QueryGetCurrentEraResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCurrentEraResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCurrentEraResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCurrentEraResponse proto.InternalMessageInfo

func (m *QueryGetCurrentEraResponse) GetEraInfo() EraInfo {
	if m != nil {
		return m.EraInfo
	}
	return EraInfo{}
}

type QueryGetPendingNextEraRequest struct {
}

func (m *QueryGetPendingNextEraRequest) Reset()         { *m = QueryGetPendingNextEraRequest{} }
func (m *QueryGetPendingNextEraRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPendingNextEraRequest) ProtoMessage()    {}
func (*QueryGetPendingNextEraRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{44}
}
func (m *QueryGetPendingNextEraRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPendingNextEraRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPendingNextEraRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPendingNextEraRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPendingNextEraRequest.Merge(m, src)
}
func (m *QueryGetPendingNextEraRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPendingNextEraRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPendingNextEraRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPendingNextEraRequest proto.InternalMessageInfo

type QueryGetPendingNextEraResponse struct {
	EraInfo EraInfo `protobuf:"bytes,1,opt,name=EraInfo,proto3" json:"EraInfo"`
}

func (m *QueryGetPendingNextEraResponse) Reset()         { *m = QueryGetPendingNextEraResponse{} }
func (m *QueryGetPendingNextEraResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPendingNextEraResponse) ProtoMessage()    {}
func (*QueryGetPendingNextEraResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{45}
}
func (m *QueryGetPendingNextEraResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPendingNextEraResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPendingNextEraResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPendingNextEraResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPendingNextEraResponse.Merge(m, src)
}
func (m *QueryGetPendingNextEraResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPendingNextEraResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPendingNextEraResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPendingNextEraResponse proto.InternalMessageInfo

func (m *QueryGetPendingNextEraResponse) GetEraInfo() EraInfo {
	if m != nil {
		return m.EraInfo
	}
	return EraInfo{}
}

type QueryGetHistoryEraRequest struct {
	EraNumber uint64 `protobuf:"varint,1,opt,name=eraNumber,proto3" json:"eraNumber,omitempty"`
}

func (m *QueryGetHistoryEraRequest) Reset()         { *m = QueryGetHistoryEraRequest{} }
func (m *QueryGetHistoryEraRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetHistoryEraRequest) ProtoMessage()    {}
func (*QueryGetHistoryEraRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{46}
}
func (m *QueryGetHistoryEraRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetHistoryEraRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetHistoryEraRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetHistoryEraRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetHistoryEraRequest.Merge(m, src)
}
func (m *QueryGetHistoryEraRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetHistoryEraRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetHistoryEraRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetHistoryEraRequest proto.InternalMessageInfo

func (m *QueryGetHistoryEraRequest) GetEraNumber() uint64 {
	if m != nil {
		return m.EraNumber
	}
	return 0
}

type QueryGetHistoryEraResponse struct {
	EraInfo EraInfo `protobuf:"bytes,1,opt,name=EraInfo,proto3" json:"EraInfo"`
}

func (m *QueryGetHistoryEraResponse) Reset()         { *m = QueryGetHistoryEraResponse{} }
func (m *QueryGetHistoryEraResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetHistoryEraResponse) ProtoMessage()    {}
func (*QueryGetHistoryEraResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{47}
}
func (m *QueryGetHistoryEraResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetHistoryEraResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetHistoryEraResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetHistoryEraResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetHistoryEraResponse.Merge(m, src)
}
func (m *QueryGetHistoryEraResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetHistoryEraResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetHistoryEraResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetHistoryEraResponse proto.InternalMessageInfo

func (m *QueryGetHistoryEraResponse) GetEraInfo() EraInfo {
	if m != nil {
		return m.EraInfo
	}
	return EraInfo{}
}

type QueryGetAllHistoryEraRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllHistoryEraRequest) Reset()         { *m = QueryGetAllHistoryEraRequest{} }
func (m *QueryGetAllHistoryEraRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllHistoryEraRequest) ProtoMessage()    {}
func (*QueryGetAllHistoryEraRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{48}
}
func (m *QueryGetAllHistoryEraRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllHistoryEraRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllHistoryEraRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllHistoryEraRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllHistoryEraRequest.Merge(m, src)
}
func (m *QueryGetAllHistoryEraRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllHistoryEraRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllHistoryEraRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllHistoryEraRequest proto.InternalMessageInfo

func (m *QueryGetAllHistoryEraRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetAllHistoryEraResponse struct {
	EraInfos   []EraInfo           `protobuf:"bytes,1,rep,name=EraInfos,proto3" json:"EraInfos"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllHistoryEraResponse) Reset()         { *m = QueryGetAllHistoryEraResponse{} }
func (m *QueryGetAllHistoryEraResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllHistoryEraResponse) ProtoMessage()    {}
func (*QueryGetAllHistoryEraResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{49}
}
func (m *QueryGetAllHistoryEraResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllHistoryEraResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllHistoryEraResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllHistoryEraResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllHistoryEraResponse.Merge(m, src)
}
func (m *QueryGetAllHistoryEraResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllHistoryEraResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllHistoryEraResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllHistoryEraResponse proto.InternalMessageInfo

func (m *QueryGetAllHistoryEraResponse) GetEraInfos() []EraInfo {
	if m != nil {
		return m.EraInfos
	}
	return nil
}

func (m *QueryGetAllHistoryEraResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetReputationPointChangeDataRequest struct {
	Era    uint64 `protobuf:"varint,1,opt,name=era,proto3" json:"era,omitempty"`
	NodeID string `protobuf:"bytes,2,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
}

func (m *QueryGetReputationPointChangeDataRequest) Reset() {
	*m = QueryGetReputationPointChangeDataRequest{}
}
func (m *QueryGetReputationPointChangeDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetReputationPointChangeDataRequest) ProtoMessage()    {}
func (*QueryGetReputationPointChangeDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{50}
}
func (m *QueryGetReputationPointChangeDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetReputationPointChangeDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetReputationPointChangeDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetReputationPointChangeDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetReputationPointChangeDataRequest.Merge(m, src)
}
func (m *QueryGetReputationPointChangeDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetReputationPointChangeDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetReputationPointChangeDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetReputationPointChangeDataRequest proto.InternalMessageInfo

func (m *QueryGetReputationPointChangeDataRequest) GetEra() uint64 {
	if m != nil {
		return m.Era
	}
	return 0
}

func (m *QueryGetReputationPointChangeDataRequest) GetNodeID() string {
	if m != nil {
		return m.NodeID
	}
	return ""
}

type QueryGetReputationPointChangeDataResponse struct {
	ReputationPointChangeData ReputationPointChangeData `protobuf:"bytes,1,opt,name=ReputationPointChangeData,proto3" json:"ReputationPointChangeData"`
}

func (m *QueryGetReputationPointChangeDataResponse) Reset() {
	*m = QueryGetReputationPointChangeDataResponse{}
}
func (m *QueryGetReputationPointChangeDataResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetReputationPointChangeDataResponse) ProtoMessage() {}
func (*QueryGetReputationPointChangeDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{51}
}
func (m *QueryGetReputationPointChangeDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetReputationPointChangeDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetReputationPointChangeDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetReputationPointChangeDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetReputationPointChangeDataResponse.Merge(m, src)
}
func (m *QueryGetReputationPointChangeDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetReputationPointChangeDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetReputationPointChangeDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetReputationPointChangeDataResponse proto.InternalMessageInfo

func (m *QueryGetReputationPointChangeDataResponse) GetReputationPointChangeData() ReputationPointChangeData {
	if m != nil {
		return m.ReputationPointChangeData
	}
	return ReputationPointChangeData{}
}

type QueryGetAllReputationPointChangeDataByEraRequest struct {
	Era        uint64             `protobuf:"varint,1,opt,name=era,proto3" json:"era,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllReputationPointChangeDataByEraRequest) Reset() {
	*m = QueryGetAllReputationPointChangeDataByEraRequest{}
}
func (m *QueryGetAllReputationPointChangeDataByEraRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetAllReputationPointChangeDataByEraRequest) ProtoMessage() {}
func (*QueryGetAllReputationPointChangeDataByEraRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{52}
}
func (m *QueryGetAllReputationPointChangeDataByEraRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllReputationPointChangeDataByEraRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllReputationPointChangeDataByEraRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllReputationPointChangeDataByEraRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllReputationPointChangeDataByEraRequest.Merge(m, src)
}
func (m *QueryGetAllReputationPointChangeDataByEraRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllReputationPointChangeDataByEraRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllReputationPointChangeDataByEraRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllReputationPointChangeDataByEraRequest proto.InternalMessageInfo

func (m *QueryGetAllReputationPointChangeDataByEraRequest) GetEra() uint64 {
	if m != nil {
		return m.Era
	}
	return 0
}

func (m *QueryGetAllReputationPointChangeDataByEraRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetAllReputationPointChangeDataByEraResponse struct {
	ReputationPointChangeDatas []ReputationPointChangeData `protobuf:"bytes,1,rep,name=ReputationPointChangeDatas,proto3" json:"ReputationPointChangeDatas"`
	Pagination                 *query.PageResponse         `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllReputationPointChangeDataByEraResponse) Reset() {
	*m = QueryGetAllReputationPointChangeDataByEraResponse{}
}
func (m *QueryGetAllReputationPointChangeDataByEraResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetAllReputationPointChangeDataByEraResponse) ProtoMessage() {}
func (*QueryGetAllReputationPointChangeDataByEraResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{53}
}
func (m *QueryGetAllReputationPointChangeDataByEraResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllReputationPointChangeDataByEraResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllReputationPointChangeDataByEraResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllReputationPointChangeDataByEraResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllReputationPointChangeDataByEraResponse.Merge(m, src)
}
func (m *QueryGetAllReputationPointChangeDataByEraResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllReputationPointChangeDataByEraResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllReputationPointChangeDataByEraResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllReputationPointChangeDataByEraResponse proto.InternalMessageInfo

func (m *QueryGetAllReputationPointChangeDataByEraResponse) GetReputationPointChangeDatas() []ReputationPointChangeData {
	if m != nil {
		return m.ReputationPointChangeDatas
	}
	return nil
}

func (m *QueryGetAllReputationPointChangeDataByEraResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetReputationDeltaPointRequest struct {
	Era    uint64 `protobuf:"varint,1,opt,name=era,proto3" json:"era,omitempty"`
	NodeID string `protobuf:"bytes,2,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
}

func (m *QueryGetReputationDeltaPointRequest) Reset()         { *m = QueryGetReputationDeltaPointRequest{} }
func (m *QueryGetReputationDeltaPointRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetReputationDeltaPointRequest) ProtoMessage()    {}
func (*QueryGetReputationDeltaPointRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{54}
}
func (m *QueryGetReputationDeltaPointRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetReputationDeltaPointRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetReputationDeltaPointRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetReputationDeltaPointRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetReputationDeltaPointRequest.Merge(m, src)
}
func (m *QueryGetReputationDeltaPointRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetReputationDeltaPointRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetReputationDeltaPointRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetReputationDeltaPointRequest proto.InternalMessageInfo

func (m *QueryGetReputationDeltaPointRequest) GetEra() uint64 {
	if m != nil {
		return m.Era
	}
	return 0
}

func (m *QueryGetReputationDeltaPointRequest) GetNodeID() string {
	if m != nil {
		return m.NodeID
	}
	return ""
}

type QueryGetReputationDeltaPointResponse struct {
	ReputationDeltaPoint ReputationDeltaPoint `protobuf:"bytes,1,opt,name=ReputationDeltaPoint,proto3" json:"ReputationDeltaPoint"`
}

func (m *QueryGetReputationDeltaPointResponse) Reset()         { *m = QueryGetReputationDeltaPointResponse{} }
func (m *QueryGetReputationDeltaPointResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetReputationDeltaPointResponse) ProtoMessage()    {}
func (*QueryGetReputationDeltaPointResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{55}
}
func (m *QueryGetReputationDeltaPointResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetReputationDeltaPointResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetReputationDeltaPointResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetReputationDeltaPointResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetReputationDeltaPointResponse.Merge(m, src)
}
func (m *QueryGetReputationDeltaPointResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetReputationDeltaPointResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetReputationDeltaPointResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetReputationDeltaPointResponse proto.InternalMessageInfo

func (m *QueryGetReputationDeltaPointResponse) GetReputationDeltaPoint() ReputationDeltaPoint {
	if m != nil {
		return m.ReputationDeltaPoint
	}
	return ReputationDeltaPoint{}
}

type QueryGetAllReputationDeltaPointByEraRequest struct {
	Era        uint64             `protobuf:"varint,1,opt,name=era,proto3" json:"era,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllReputationDeltaPointByEraRequest) Reset() {
	*m = QueryGetAllReputationDeltaPointByEraRequest{}
}
func (m *QueryGetAllReputationDeltaPointByEraRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetAllReputationDeltaPointByEraRequest) ProtoMessage() {}
func (*QueryGetAllReputationDeltaPointByEraRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{56}
}
func (m *QueryGetAllReputationDeltaPointByEraRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllReputationDeltaPointByEraRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllReputationDeltaPointByEraRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllReputationDeltaPointByEraRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllReputationDeltaPointByEraRequest.Merge(m, src)
}
func (m *QueryGetAllReputationDeltaPointByEraRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllReputationDeltaPointByEraRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllReputationDeltaPointByEraRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllReputationDeltaPointByEraRequest proto.InternalMessageInfo

func (m *QueryGetAllReputationDeltaPointByEraRequest) GetEra() uint64 {
	if m != nil {
		return m.Era
	}
	return 0
}

func (m *QueryGetAllReputationDeltaPointByEraRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetAllReputationDeltaPointByEraResponse struct {
	ReputationDeltaPoints []ReputationDeltaPoint `protobuf:"bytes,1,rep,name=ReputationDeltaPoints,proto3" json:"ReputationDeltaPoints"`
	Pagination            *query.PageResponse    `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllReputationDeltaPointByEraResponse) Reset() {
	*m = QueryGetAllReputationDeltaPointByEraResponse{}
}
func (m *QueryGetAllReputationDeltaPointByEraResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetAllReputationDeltaPointByEraResponse) ProtoMessage() {}
func (*QueryGetAllReputationDeltaPointByEraResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{57}
}
func (m *QueryGetAllReputationDeltaPointByEraResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllReputationDeltaPointByEraResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllReputationDeltaPointByEraResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllReputationDeltaPointByEraResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllReputationDeltaPointByEraResponse.Merge(m, src)
}
func (m *QueryGetAllReputationDeltaPointByEraResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllReputationDeltaPointByEraResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllReputationDeltaPointByEraResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllReputationDeltaPointByEraResponse proto.InternalMessageInfo

func (m *QueryGetAllReputationDeltaPointByEraResponse) GetReputationDeltaPoints() []ReputationDeltaPoint {
	if m != nil {
		return m.ReputationDeltaPoints
	}
	return nil
}

func (m *QueryGetAllReputationDeltaPointByEraResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetEraProcessDataRequest struct {
	Era uint64 `protobuf:"varint,1,opt,name=era,proto3" json:"era,omitempty"`
}

func (m *QueryGetEraProcessDataRequest) Reset()         { *m = QueryGetEraProcessDataRequest{} }
func (m *QueryGetEraProcessDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetEraProcessDataRequest) ProtoMessage()    {}
func (*QueryGetEraProcessDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{58}
}
func (m *QueryGetEraProcessDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEraProcessDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEraProcessDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEraProcessDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEraProcessDataRequest.Merge(m, src)
}
func (m *QueryGetEraProcessDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEraProcessDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEraProcessDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEraProcessDataRequest proto.InternalMessageInfo

func (m *QueryGetEraProcessDataRequest) GetEra() uint64 {
	if m != nil {
		return m.Era
	}
	return 0
}

type QueryGetEraProcessDataResponse struct {
	EraProcessData EraProcessData `protobuf:"bytes,1,opt,name=EraProcessData,proto3" json:"EraProcessData"`
}

func (m *QueryGetEraProcessDataResponse) Reset()         { *m = QueryGetEraProcessDataResponse{} }
func (m *QueryGetEraProcessDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetEraProcessDataResponse) ProtoMessage()    {}
func (*QueryGetEraProcessDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{59}
}
func (m *QueryGetEraProcessDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEraProcessDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEraProcessDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEraProcessDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEraProcessDataResponse.Merge(m, src)
}
func (m *QueryGetEraProcessDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEraProcessDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEraProcessDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEraProcessDataResponse proto.InternalMessageInfo

func (m *QueryGetEraProcessDataResponse) GetEraProcessData() EraProcessData {
	if m != nil {
		return m.EraProcessData
	}
	return EraProcessData{}
}

type QueryGetAllEraProcessDataRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllEraProcessDataRequest) Reset()         { *m = QueryGetAllEraProcessDataRequest{} }
func (m *QueryGetAllEraProcessDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllEraProcessDataRequest) ProtoMessage()    {}
func (*QueryGetAllEraProcessDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{60}
}
func (m *QueryGetAllEraProcessDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllEraProcessDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllEraProcessDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllEraProcessDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllEraProcessDataRequest.Merge(m, src)
}
func (m *QueryGetAllEraProcessDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllEraProcessDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllEraProcessDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllEraProcessDataRequest proto.InternalMessageInfo

func (m *QueryGetAllEraProcessDataRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetAllEraProcessDataResponse struct {
	EraProcessDatas []EraProcessData    `protobuf:"bytes,1,rep,name=EraProcessDatas,proto3" json:"EraProcessDatas"`
	Pagination      *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllEraProcessDataResponse) Reset()         { *m = QueryGetAllEraProcessDataResponse{} }
func (m *QueryGetAllEraProcessDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllEraProcessDataResponse) ProtoMessage()    {}
func (*QueryGetAllEraProcessDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{61}
}
func (m *QueryGetAllEraProcessDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllEraProcessDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllEraProcessDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllEraProcessDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllEraProcessDataResponse.Merge(m, src)
}
func (m *QueryGetAllEraProcessDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllEraProcessDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllEraProcessDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllEraProcessDataResponse proto.InternalMessageInfo

func (m *QueryGetAllEraProcessDataResponse) GetEraProcessDatas() []EraProcessData {
	if m != nil {
		return m.EraProcessDatas
	}
	return nil
}

func (m *QueryGetAllEraProcessDataResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetCheatStatusCRDataRequest struct {
	Era    uint64 `protobuf:"varint,1,opt,name=era,proto3" json:"era,omitempty"`
	NodeID string `protobuf:"bytes,2,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
}

func (m *QueryGetCheatStatusCRDataRequest) Reset()         { *m = QueryGetCheatStatusCRDataRequest{} }
func (m *QueryGetCheatStatusCRDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCheatStatusCRDataRequest) ProtoMessage()    {}
func (*QueryGetCheatStatusCRDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{62}
}
func (m *QueryGetCheatStatusCRDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCheatStatusCRDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCheatStatusCRDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCheatStatusCRDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCheatStatusCRDataRequest.Merge(m, src)
}
func (m *QueryGetCheatStatusCRDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCheatStatusCRDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCheatStatusCRDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCheatStatusCRDataRequest proto.InternalMessageInfo

func (m *QueryGetCheatStatusCRDataRequest) GetEra() uint64 {
	if m != nil {
		return m.Era
	}
	return 0
}

func (m *QueryGetCheatStatusCRDataRequest) GetNodeID() string {
	if m != nil {
		return m.NodeID
	}
	return ""
}

type QueryGetCheatStatusCRDataResponse struct {
	CheatStatusCRData CheatStatusCRData `protobuf:"bytes,1,opt,name=CheatStatusCRData,proto3" json:"CheatStatusCRData"`
}

func (m *QueryGetCheatStatusCRDataResponse) Reset()         { *m = QueryGetCheatStatusCRDataResponse{} }
func (m *QueryGetCheatStatusCRDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCheatStatusCRDataResponse) ProtoMessage()    {}
func (*QueryGetCheatStatusCRDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{63}
}
func (m *QueryGetCheatStatusCRDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCheatStatusCRDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCheatStatusCRDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCheatStatusCRDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCheatStatusCRDataResponse.Merge(m, src)
}
func (m *QueryGetCheatStatusCRDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCheatStatusCRDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCheatStatusCRDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCheatStatusCRDataResponse proto.InternalMessageInfo

func (m *QueryGetCheatStatusCRDataResponse) GetCheatStatusCRData() CheatStatusCRData {
	if m != nil {
		return m.CheatStatusCRData
	}
	return CheatStatusCRData{}
}

type QueryGetAllCheatStatusCRDataByEraRequest struct {
	Era        uint64             `protobuf:"varint,1,opt,name=era,proto3" json:"era,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllCheatStatusCRDataByEraRequest) Reset() {
	*m = QueryGetAllCheatStatusCRDataByEraRequest{}
}
func (m *QueryGetAllCheatStatusCRDataByEraRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllCheatStatusCRDataByEraRequest) ProtoMessage()    {}
func (*QueryGetAllCheatStatusCRDataByEraRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{64}
}
func (m *QueryGetAllCheatStatusCRDataByEraRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllCheatStatusCRDataByEraRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllCheatStatusCRDataByEraRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllCheatStatusCRDataByEraRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllCheatStatusCRDataByEraRequest.Merge(m, src)
}
func (m *QueryGetAllCheatStatusCRDataByEraRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllCheatStatusCRDataByEraRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllCheatStatusCRDataByEraRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllCheatStatusCRDataByEraRequest proto.InternalMessageInfo

func (m *QueryGetAllCheatStatusCRDataByEraRequest) GetEra() uint64 {
	if m != nil {
		return m.Era
	}
	return 0
}

func (m *QueryGetAllCheatStatusCRDataByEraRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetAllCheatStatusCRDataByEraResponse struct {
	CheatStatusCRDatas []CheatStatusCRData `protobuf:"bytes,1,rep,name=CheatStatusCRDatas,proto3" json:"CheatStatusCRDatas"`
	Pagination         *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllCheatStatusCRDataByEraResponse) Reset() {
	*m = QueryGetAllCheatStatusCRDataByEraResponse{}
}
func (m *QueryGetAllCheatStatusCRDataByEraResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetAllCheatStatusCRDataByEraResponse) ProtoMessage() {}
func (*QueryGetAllCheatStatusCRDataByEraResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{65}
}
func (m *QueryGetAllCheatStatusCRDataByEraResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllCheatStatusCRDataByEraResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllCheatStatusCRDataByEraResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllCheatStatusCRDataByEraResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllCheatStatusCRDataByEraResponse.Merge(m, src)
}
func (m *QueryGetAllCheatStatusCRDataByEraResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllCheatStatusCRDataByEraResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllCheatStatusCRDataByEraResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllCheatStatusCRDataByEraResponse proto.InternalMessageInfo

func (m *QueryGetAllCheatStatusCRDataByEraResponse) GetCheatStatusCRDatas() []CheatStatusCRData {
	if m != nil {
		return m.CheatStatusCRDatas
	}
	return nil
}

func (m *QueryGetAllCheatStatusCRDataByEraResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// //////////
type QueryGetEraCheatStatusProcessDataRequest struct {
	Era uint64 `protobuf:"varint,1,opt,name=era,proto3" json:"era,omitempty"`
}

func (m *QueryGetEraCheatStatusProcessDataRequest) Reset() {
	*m = QueryGetEraCheatStatusProcessDataRequest{}
}
func (m *QueryGetEraCheatStatusProcessDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetEraCheatStatusProcessDataRequest) ProtoMessage()    {}
func (*QueryGetEraCheatStatusProcessDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{66}
}
func (m *QueryGetEraCheatStatusProcessDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEraCheatStatusProcessDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEraCheatStatusProcessDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEraCheatStatusProcessDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEraCheatStatusProcessDataRequest.Merge(m, src)
}
func (m *QueryGetEraCheatStatusProcessDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEraCheatStatusProcessDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEraCheatStatusProcessDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEraCheatStatusProcessDataRequest proto.InternalMessageInfo

func (m *QueryGetEraCheatStatusProcessDataRequest) GetEra() uint64 {
	if m != nil {
		return m.Era
	}
	return 0
}

type QueryGetEraCheatStatusProcessDataResponse struct {
	EraCheatStatusProcessData EraCheatStatusProcessData `protobuf:"bytes,1,opt,name=EraCheatStatusProcessData,proto3" json:"EraCheatStatusProcessData"`
}

func (m *QueryGetEraCheatStatusProcessDataResponse) Reset() {
	*m = QueryGetEraCheatStatusProcessDataResponse{}
}
func (m *QueryGetEraCheatStatusProcessDataResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetEraCheatStatusProcessDataResponse) ProtoMessage() {}
func (*QueryGetEraCheatStatusProcessDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{67}
}
func (m *QueryGetEraCheatStatusProcessDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEraCheatStatusProcessDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEraCheatStatusProcessDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEraCheatStatusProcessDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEraCheatStatusProcessDataResponse.Merge(m, src)
}
func (m *QueryGetEraCheatStatusProcessDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEraCheatStatusProcessDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEraCheatStatusProcessDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEraCheatStatusProcessDataResponse proto.InternalMessageInfo

func (m *QueryGetEraCheatStatusProcessDataResponse) GetEraCheatStatusProcessData() EraCheatStatusProcessData {
	if m != nil {
		return m.EraCheatStatusProcessData
	}
	return EraCheatStatusProcessData{}
}

type QueryGetAllEraCheatStatusProcessDataRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllEraCheatStatusProcessDataRequest) Reset() {
	*m = QueryGetAllEraCheatStatusProcessDataRequest{}
}
func (m *QueryGetAllEraCheatStatusProcessDataRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetAllEraCheatStatusProcessDataRequest) ProtoMessage() {}
func (*QueryGetAllEraCheatStatusProcessDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{68}
}
func (m *QueryGetAllEraCheatStatusProcessDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllEraCheatStatusProcessDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllEraCheatStatusProcessDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllEraCheatStatusProcessDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllEraCheatStatusProcessDataRequest.Merge(m, src)
}
func (m *QueryGetAllEraCheatStatusProcessDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllEraCheatStatusProcessDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllEraCheatStatusProcessDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllEraCheatStatusProcessDataRequest proto.InternalMessageInfo

func (m *QueryGetAllEraCheatStatusProcessDataRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetAllEraCheatStatusProcessDataResponse struct {
	EraCheatStatusProcessDatas []EraCheatStatusProcessData `protobuf:"bytes,1,rep,name=EraCheatStatusProcessDatas,proto3" json:"EraCheatStatusProcessDatas"`
	Pagination                 *query.PageResponse         `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllEraCheatStatusProcessDataResponse) Reset() {
	*m = QueryGetAllEraCheatStatusProcessDataResponse{}
}
func (m *QueryGetAllEraCheatStatusProcessDataResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetAllEraCheatStatusProcessDataResponse) ProtoMessage() {}
func (*QueryGetAllEraCheatStatusProcessDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{69}
}
func (m *QueryGetAllEraCheatStatusProcessDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllEraCheatStatusProcessDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllEraCheatStatusProcessDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllEraCheatStatusProcessDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllEraCheatStatusProcessDataResponse.Merge(m, src)
}
func (m *QueryGetAllEraCheatStatusProcessDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllEraCheatStatusProcessDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllEraCheatStatusProcessDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllEraCheatStatusProcessDataResponse proto.InternalMessageInfo

func (m *QueryGetAllEraCheatStatusProcessDataResponse) GetEraCheatStatusProcessDatas() []EraCheatStatusProcessData {
	if m != nil {
		return m.EraCheatStatusProcessDatas
	}
	return nil
}

func (m *QueryGetAllEraCheatStatusProcessDataResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamRequest)(nil), "enreach.workload.QueryParamRequest")
	proto.RegisterType((*QueryParamResponse)(nil), "enreach.workload.QueryParamResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "enreach.workload.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "enreach.workload.QueryParamsResponse")
	proto.RegisterType((*QueryGetEpochLengthRequest)(nil), "enreach.workload.QueryGetEpochLengthRequest")
	proto.RegisterType((*QueryGetEpochLengthResponse)(nil), "enreach.workload.QueryGetEpochLengthResponse")
	proto.RegisterType((*QueryGetCurrentEpochRequest)(nil), "enreach.workload.QueryGetCurrentEpochRequest")
	proto.RegisterType((*QueryGetCurrentEpochResponse)(nil), "enreach.workload.QueryGetCurrentEpochResponse")
	proto.RegisterType((*QueryGetPendingNextEpochRequest)(nil), "enreach.workload.QueryGetPendingNextEpochRequest")
	proto.RegisterType((*QueryGetPendingNextEpochResponse)(nil), "enreach.workload.QueryGetPendingNextEpochResponse")
	proto.RegisterType((*QueryGetHistoryEpochRequest)(nil), "enreach.workload.QueryGetHistoryEpochRequest")
	proto.RegisterType((*QueryGetHistoryEpochResponse)(nil), "enreach.workload.QueryGetHistoryEpochResponse")
	proto.RegisterType((*QueryGetAllHistoryEpochRequest)(nil), "enreach.workload.QueryGetAllHistoryEpochRequest")
	proto.RegisterType((*QueryGetAllHistoryEpochResponse)(nil), "enreach.workload.QueryGetAllHistoryEpochResponse")
	proto.RegisterType((*QueryGetNodeWorkloadRequest)(nil), "enreach.workload.QueryGetNodeWorkloadRequest")
	proto.RegisterType((*QueryGetNodeWorkloadResponse)(nil), "enreach.workload.QueryGetNodeWorkloadResponse")
	proto.RegisterType((*QueryGetAllNodeWorkloadByEpochRequest)(nil), "enreach.workload.QueryGetAllNodeWorkloadByEpochRequest")
	proto.RegisterType((*QueryGetAllNodeWorkloadByEpochResponse)(nil), "enreach.workload.QueryGetAllNodeWorkloadByEpochResponse")
	proto.RegisterType((*QueryGetManagerWRWorkloadRequest)(nil), "enreach.workload.QueryGetManagerWRWorkloadRequest")
	proto.RegisterType((*QueryGetManagerWRWorkloadResponse)(nil), "enreach.workload.QueryGetManagerWRWorkloadResponse")
	proto.RegisterType((*QueryGetAllManagerWRWorkloadByEpochRequest)(nil), "enreach.workload.QueryGetAllManagerWRWorkloadByEpochRequest")
	proto.RegisterType((*QueryGetAllManagerWRWorkloadByEpochResponse)(nil), "enreach.workload.QueryGetAllManagerWRWorkloadByEpochResponse")
	proto.RegisterType((*QueryGetManagerRPWorkloadRequest)(nil), "enreach.workload.QueryGetManagerRPWorkloadRequest")
	proto.RegisterType((*QueryGetManagerRPWorkloadResponse)(nil), "enreach.workload.QueryGetManagerRPWorkloadResponse")
	proto.RegisterType((*QueryGetAllManagerRPWorkloadByEraRequest)(nil), "enreach.workload.QueryGetAllManagerRPWorkloadByEraRequest")
	proto.RegisterType((*QueryGetAllManagerRPWorkloadByEraResponse)(nil), "enreach.workload.QueryGetAllManagerRPWorkloadByEraResponse")
	proto.RegisterType((*QueryGetManagerCSWorkloadRequest)(nil), "enreach.workload.QueryGetManagerCSWorkloadRequest")
	proto.RegisterType((*QueryGetManagerCSWorkloadResponse)(nil), "enreach.workload.QueryGetManagerCSWorkloadResponse")
	proto.RegisterType((*QueryGetAllManagerCSWorkloadByEraRequest)(nil), "enreach.workload.QueryGetAllManagerCSWorkloadByEraRequest")
	proto.RegisterType((*QueryGetAllManagerCSWorkloadByEraResponse)(nil), "enreach.workload.QueryGetAllManagerCSWorkloadByEraResponse")
	proto.RegisterType((*QueryGetWorkreportRequest)(nil), "enreach.workload.QueryGetWorkreportRequest")
	proto.RegisterType((*QueryGetWorkreportResponse)(nil), "enreach.workload.QueryGetWorkreportResponse")
	proto.RegisterType((*QueryGetAllWorkreportByEpochRequest)(nil), "enreach.workload.QueryGetAllWorkreportByEpochRequest")
	proto.RegisterType((*QueryGetAllWorkreportByEpochResponse)(nil), "enreach.workload.QueryGetAllWorkreportByEpochResponse")
	proto.RegisterType((*QueryGetEpochProcessDataRequest)(nil), "enreach.workload.QueryGetEpochProcessDataRequest")
	proto.RegisterType((*QueryGetEpochProcessDataResponse)(nil), "enreach.workload.QueryGetEpochProcessDataResponse")
	proto.RegisterType((*QueryGetAllEpochProcessDataRequest)(nil), "enreach.workload.QueryGetAllEpochProcessDataRequest")
	proto.RegisterType((*QueryGetAllEpochProcessDataResponse)(nil), "enreach.workload.QueryGetAllEpochProcessDataResponse")
	proto.RegisterType((*QueryGetSuperiorRequest)(nil), "enreach.workload.QueryGetSuperiorRequest")
	proto.RegisterType((*QueryGetSuperiorResponse)(nil), "enreach.workload.QueryGetSuperiorResponse")
	proto.RegisterType((*QueryGetEraLengthRequest)(nil), "enreach.workload.QueryGetEraLengthRequest")
	proto.RegisterType((*QueryGetEraLengthResponse)(nil), "enreach.workload.QueryGetEraLengthResponse")
	proto.RegisterType((*QueryGetCurrentEraRequest)(nil), "enreach.workload.QueryGetCurrentEraRequest")
	proto.RegisterType((*QueryGetCurrentEraResponse)(nil), "enreach.workload.QueryGetCurrentEraResponse")
	proto.RegisterType((*QueryGetPendingNextEraRequest)(nil), "enreach.workload.QueryGetPendingNextEraRequest")
	proto.RegisterType((*QueryGetPendingNextEraResponse)(nil), "enreach.workload.QueryGetPendingNextEraResponse")
	proto.RegisterType((*QueryGetHistoryEraRequest)(nil), "enreach.workload.QueryGetHistoryEraRequest")
	proto.RegisterType((*QueryGetHistoryEraResponse)(nil), "enreach.workload.QueryGetHistoryEraResponse")
	proto.RegisterType((*QueryGetAllHistoryEraRequest)(nil), "enreach.workload.QueryGetAllHistoryEraRequest")
	proto.RegisterType((*QueryGetAllHistoryEraResponse)(nil), "enreach.workload.QueryGetAllHistoryEraResponse")
	proto.RegisterType((*QueryGetReputationPointChangeDataRequest)(nil), "enreach.workload.QueryGetReputationPointChangeDataRequest")
	proto.RegisterType((*QueryGetReputationPointChangeDataResponse)(nil), "enreach.workload.QueryGetReputationPointChangeDataResponse")
	proto.RegisterType((*QueryGetAllReputationPointChangeDataByEraRequest)(nil), "enreach.workload.QueryGetAllReputationPointChangeDataByEraRequest")
	proto.RegisterType((*QueryGetAllReputationPointChangeDataByEraResponse)(nil), "enreach.workload.QueryGetAllReputationPointChangeDataByEraResponse")
	proto.RegisterType((*QueryGetReputationDeltaPointRequest)(nil), "enreach.workload.QueryGetReputationDeltaPointRequest")
	proto.RegisterType((*QueryGetReputationDeltaPointResponse)(nil), "enreach.workload.QueryGetReputationDeltaPointResponse")
	proto.RegisterType((*QueryGetAllReputationDeltaPointByEraRequest)(nil), "enreach.workload.QueryGetAllReputationDeltaPointByEraRequest")
	proto.RegisterType((*QueryGetAllReputationDeltaPointByEraResponse)(nil), "enreach.workload.QueryGetAllReputationDeltaPointByEraResponse")
	proto.RegisterType((*QueryGetEraProcessDataRequest)(nil), "enreach.workload.QueryGetEraProcessDataRequest")
	proto.RegisterType((*QueryGetEraProcessDataResponse)(nil), "enreach.workload.QueryGetEraProcessDataResponse")
	proto.RegisterType((*QueryGetAllEraProcessDataRequest)(nil), "enreach.workload.QueryGetAllEraProcessDataRequest")
	proto.RegisterType((*QueryGetAllEraProcessDataResponse)(nil), "enreach.workload.QueryGetAllEraProcessDataResponse")
	proto.RegisterType((*QueryGetCheatStatusCRDataRequest)(nil), "enreach.workload.QueryGetCheatStatusCRDataRequest")
	proto.RegisterType((*QueryGetCheatStatusCRDataResponse)(nil), "enreach.workload.QueryGetCheatStatusCRDataResponse")
	proto.RegisterType((*QueryGetAllCheatStatusCRDataByEraRequest)(nil), "enreach.workload.QueryGetAllCheatStatusCRDataByEraRequest")
	proto.RegisterType((*QueryGetAllCheatStatusCRDataByEraResponse)(nil), "enreach.workload.QueryGetAllCheatStatusCRDataByEraResponse")
	proto.RegisterType((*QueryGetEraCheatStatusProcessDataRequest)(nil), "enreach.workload.QueryGetEraCheatStatusProcessDataRequest")
	proto.RegisterType((*QueryGetEraCheatStatusProcessDataResponse)(nil), "enreach.workload.QueryGetEraCheatStatusProcessDataResponse")
	proto.RegisterType((*QueryGetAllEraCheatStatusProcessDataRequest)(nil), "enreach.workload.QueryGetAllEraCheatStatusProcessDataRequest")
	proto.RegisterType((*QueryGetAllEraCheatStatusProcessDataResponse)(nil), "enreach.workload.QueryGetAllEraCheatStatusProcessDataResponse")
}

func init() { proto.RegisterFile("enreach/workload/query.proto", fileDescriptor_4c31abfb63ab8d50) }

var fileDescriptor_4c31abfb63ab8d50 = []byte{
	// 2592 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x5b, 0xdd, 0x6f, 0x1c, 0x57,
	0x15, 0xcf, 0x6d, 0x9b, 0x10, 0x9f, 0xa4, 0x69, 0x72, 0x6b, 0x8a, 0x3d, 0x71, 0x36, 0xf6, 0x24,
	0x71, 0x13, 0xc7, 0xd9, 0xb1, 0x9d, 0xb8, 0x6e, 0x48, 0x9c, 0x34, 0xfe, 0x48, 0x13, 0x5a, 0x82,
	0xd9, 0x54, 0x35, 0x5f, 0xd2, 0x66, 0xbc, 0x9e, 0xac, 0x17, 0xec, 0x99, 0xcd, 0xcc, 0x2c, 0x89,
	0x15, 0xcc, 0x03, 0x50, 0x81, 0x2a, 0x1e, 0x50, 0x79, 0x8d, 0x78, 0x41, 0x7c, 0x08, 0xa9, 0x52,
	0x1f, 0xca, 0x0b, 0x50, 0x1e, 0x10, 0xaa, 0x2a, 0x5e, 0x28, 0x20, 0x21, 0xa4, 0x4a, 0x15, 0x4a,
	0x90, 0x90, 0xe0, 0x01, 0xf1, 0x1f, 0x54, 0x7b, 0xe7, 0xde, 0xbd, 0x77, 0xe6, 0x7e, 0xcc, 0xac,
	0xb3, 0x4d, 0x5f, 0x2c, 0x7b, 0xee, 0x39, 0xe7, 0xfe, 0x7e, 0xe7, 0x9c, 0xb9, 0x1f, 0xfb, 0x5b,
	0xc3, 0x90, 0xe7, 0x87, 0x9e, 0x5b, 0x5b, 0x73, 0x6e, 0x07, 0xe1, 0x37, 0xd6, 0x03, 0x77, 0xd5,
	0xb9, 0xd5, 0xf2, 0xc2, 0xcd, 0x72, 0x33, 0x0c, 0xe2, 0x00, 0xef, 0xa7, 0xa3, 0x65, 0x36, 0x6a,
	0x1d, 0x70, 0x37, 0x1a, 0x7e, 0xe0, 0x90, 0x9f, 0x89, 0x91, 0xd5, 0x5f, 0x0f, 0xea, 0x01, 0xf9,
	0xd5, 0x69, 0xff, 0x46, 0x9f, 0x0e, 0xd5, 0x83, 0xa0, 0xbe, 0xee, 0x39, 0x6e, 0xb3, 0xe1, 0xb8,
	0xbe, 0x1f, 0xc4, 0x6e, 0xdc, 0x08, 0xfc, 0x88, 0x8e, 0x8e, 0xd5, 0x82, 0x68, 0x23, 0x88, 0x9c,
	0x15, 0x37, 0xf2, 0x92, 0x19, 0x9d, 0x6f, 0x4e, 0xae, 0x78, 0xb1, 0x3b, 0xe9, 0x34, 0xdd, 0x7a,
	0xc3, 0x27, 0xc6, 0xd4, 0xf6, 0x90, 0x04, 0xb1, 0xe9, 0x86, 0xee, 0x06, 0x0b, 0x75, 0x58, 0x1a,
	0x66, 0xbf, 0x50, 0x83, 0x11, 0xa5, 0x41, 0xe8, 0x35, 0x83, 0x30, 0xd6, 0xc6, 0x88, 0x5a, 0x4d,
	0x2f, 0x6c, 0x04, 0x21, 0x35, 0x18, 0x95, 0x0c, 0x42, 0xaf, 0xd9, 0x4a, 0x38, 0x35, 0x83, 0x86,
	0x1f, 0x6b, 0xe7, 0xf2, 0x9a, 0x41, 0x6d, 0xad, 0xda, 0xf0, 0x6f, 0x06, 0xda, 0xb9, 0xbc, 0xd0,
	0x15, 0x0d, 0x8e, 0x48, 0x06, 0xb5, 0x35, 0xcf, 0x8d, 0xab, 0x51, 0xec, 0xc6, 0x2d, 0xca, 0xda,
	0x76, 0xe0, 0xc0, 0x17, 0xdb, 0x69, 0x5b, 0x6a, 0xa7, 0xa2, 0xe2, 0xdd, 0x6a, 0x79, 0x51, 0x8c,
	0x2d, 0xd8, 0x4d, 0x52, 0xf3, 0x92, 0xb7, 0x39, 0x80, 0x86, 0xd1, 0xf1, 0xbe, 0x4a, 0xe7, 0x6f,
	0xfb, 0x0c, 0x60, 0xd1, 0x21, 0x6a, 0x06, 0x7e, 0xe4, 0xe1, 0x12, 0x00, 0xb1, 0x78, 0xd5, 0x5d,
	0x6f, 0x79, 0xd4, 0x47, 0x78, 0x62, 0xf7, 0x8b, 0x5e, 0x11, 0x9d, 0xc7, 0xae, 0xc0, 0xd3, 0xa9,
	0xa7, 0x34, 0xd8, 0x39, 0xd8, 0x95, 0x54, 0x86, 0x04, 0xda, 0x33, 0x35, 0x50, 0xce, 0xb6, 0x4f,
	0x39, 0xf1, 0x98, 0xeb, 0x7b, 0xef, 0xc3, 0xc3, 0x3b, 0x7e, 0xf9, 0xef, 0xb7, 0xc6, 0x50, 0x85,
	0xba, 0xd8, 0x43, 0x60, 0x91, 0x98, 0x2f, 0x7a, 0xf1, 0x62, 0x3b, 0x65, 0x2f, 0x7b, 0x7e, 0x3d,
	0x5e, 0x63, 0x33, 0x5e, 0x84, 0x83, 0xca, 0x51, 0x3a, 0xf3, 0x30, 0xec, 0xf1, 0xf8, 0x63, 0x32,
	0xfd, 0x13, 0x15, 0xf1, 0x91, 0x7d, 0x88, 0x07, 0x98, 0x6f, 0x85, 0xa1, 0xe7, 0x27, 0x71, 0x58,
	0xfc, 0x2a, 0x0c, 0xa9, 0x87, 0xe9, 0x04, 0x17, 0xa1, 0x8f, 0x3c, 0xb8, 0xea, 0xdf, 0x0c, 0x28,
	0xbb, 0x83, 0x32, 0xbb, 0x8e, 0xc9, 0xdc, 0x13, 0x6d, 0x82, 0x15, 0xee, 0x63, 0x8f, 0xc0, 0x61,
	0x36, 0xc1, 0x92, 0xe7, 0xaf, 0x36, 0xfc, 0xfa, 0x35, 0xef, 0x4e, 0x1a, 0x43, 0x0d, 0x86, 0xf5,
	0x26, 0xbd, 0xc2, 0x21, 0x24, 0xf2, 0x4a, 0x23, 0x8a, 0x83, 0x70, 0x53, 0xc4, 0xd0, 0x49, 0xe4,
	0xb5, 0xd6, 0xc6, 0x8a, 0x17, 0xa6, 0x12, 0x99, 0x3c, 0x12, 0x33, 0x95, 0x0e, 0xd0, 0x2b, 0x84,
	0x6b, 0x50, 0x62, 0x13, 0x5c, 0x5a, 0x5f, 0x57, 0x81, 0xbc, 0xdc, 0x6e, 0x5a, 0xb6, 0x48, 0xd0,
	0x39, 0x46, 0xcb, 0xc9, 0x8a, 0x52, 0x6e, 0xaf, 0x28, 0xe5, 0x64, 0x0d, 0xa3, 0x2b, 0x4a, 0x79,
	0xc9, 0xad, 0x7b, 0xd4, 0xb7, 0x22, 0x78, 0xda, 0x6f, 0x22, 0x5e, 0x14, 0x69, 0x2a, 0x4a, 0xe7,
	0x12, 0x40, 0x07, 0x5a, 0xbb, 0xaf, 0x1f, 0x2f, 0xc6, 0x47, 0x70, 0xc2, 0x2f, 0xa6, 0xe0, 0x3e,
	0x46, 0xe0, 0x3e, 0x9b, 0x0b, 0x37, 0x99, 0x3f, 0x85, 0xf7, 0x25, 0x5e, 0xbb, 0x6b, 0xc1, 0xaa,
	0xb7, 0x4c, 0x27, 0x67, 0x69, 0xe9, 0x87, 0x9d, 0xa4, 0x50, 0xb4, 0x6a, 0xc9, 0x1f, 0xf8, 0x19,
	0xd8, 0xe5, 0x07, 0xab, 0xde, 0xd5, 0x05, 0x32, 0x73, 0x5f, 0x85, 0xfe, 0x65, 0xaf, 0xf1, 0x3a,
	0xa6, 0x83, 0x51, 0xe2, 0x57, 0x60, 0xaf, 0xf8, 0x9c, 0xa6, 0xb9, 0x24, 0x53, 0x17, 0xad, 0x28,
	0xfb, 0x94, 0xa7, 0xfd, 0x1a, 0x82, 0x63, 0x42, 0x9a, 0x53, 0xf6, 0xe9, 0xc2, 0xaa, 0x19, 0x5c,
	0x56, 0xe4, 0x6f, 0x3b, 0xe5, 0x7e, 0x07, 0xc1, 0x68, 0x1e, 0x0e, 0x4a, 0xfe, 0x73, 0xf0, 0xa4,
	0x38, 0xcc, 0x0a, 0x5f, 0x8c, 0x7d, 0xda, 0xb5, 0x77, 0xe5, 0xbf, 0xc1, 0xd7, 0x87, 0xcf, 0xbb,
	0xbe, 0x5b, 0xf7, 0xc2, 0xe5, 0x4a, 0xb1, 0x1e, 0x18, 0x85, 0x7d, 0x1b, 0x89, 0xc7, 0xa5, 0x5a,
	0x2d, 0x68, 0xf9, 0x31, 0xed, 0x85, 0xcc, 0x53, 0xfb, 0x5b, 0x30, 0x62, 0x98, 0x81, 0xe6, 0x66,
	0x19, 0x0e, 0x48, 0x83, 0xb4, 0x3b, 0x8e, 0xc8, 0xf9, 0x91, 0x4c, 0x69, 0x92, 0xe4, 0x18, 0xf6,
	0xeb, 0x08, 0xc6, 0x84, 0xfa, 0xc8, 0x9e, 0x8f, 0xb2, 0x59, 0xfe, 0x82, 0xe0, 0x64, 0x21, 0x30,
	0x34, 0x2b, 0x5f, 0x06, 0x2c, 0xd9, 0xb0, 0xb6, 0xe9, 0x22, 0x2d, 0x8a, 0x20, 0xbd, 0x6b, 0xa0,
	0xaf, 0x49, 0x0d, 0x54, 0x59, 0xca, 0x36, 0xd0, 0x7e, 0x78, 0xdc, 0x0b, 0x5d, 0x9a, 0xd3, 0xf6,
	0xaf, 0x0f, 0xd1, 0x3c, 0x62, 0x74, 0xa9, 0x79, 0xf8, 0x60, 0x6e, 0xf3, 0x70, 0xd3, 0x4c, 0xf3,
	0xf0, 0x01, 0xfb, 0x7b, 0x08, 0x8e, 0xcb, 0xf5, 0x12, 0x3c, 0x37, 0x17, 0x43, 0x57, 0x4f, 0xb2,
	0x57, 0x6d, 0xf3, 0x67, 0x04, 0x27, 0x0a, 0xc0, 0x90, 0x9a, 0x86, 0x5b, 0xe4, 0x37, 0x8d, 0x94,
	0x0e, 0x45, 0x90, 0x8f, 0xb3, 0x69, 0xe6, 0xaf, 0x7f, 0x9c, 0x4d, 0x23, 0x46, 0x97, 0x9a, 0x86,
	0x0f, 0xe6, 0x36, 0x0d, 0x37, 0xcd, 0x34, 0x0d, 0x1f, 0xd0, 0x34, 0x8d, 0xe0, 0xf9, 0x49, 0x36,
	0x8d, 0x04, 0x43, 0x6a, 0x1a, 0x6e, 0x91, 0xdf, 0x34, 0x52, 0x3a, 0x14, 0x41, 0x7a, 0xd7, 0x34,
	0x57, 0x61, 0x90, 0x11, 0x5a, 0xee, 0xdc, 0xb5, 0xb6, 0x77, 0x4e, 0xb9, 0xc1, 0xef, 0x05, 0x62,
	0x28, 0x9a, 0x8c, 0x39, 0x00, 0xfe, 0x94, 0xf6, 0xc4, 0x90, 0x9c, 0x04, 0x6e, 0xc3, 0xce, 0x67,
	0xfc, 0x89, 0xfd, 0x5d, 0x04, 0x47, 0x84, 0xf4, 0x0b, 0xb6, 0x8f, 0x72, 0xc3, 0xf9, 0x35, 0x82,
	0xa3, 0x66, 0x14, 0x94, 0xf2, 0x02, 0xec, 0xe1, 0x83, 0xac, 0xf0, 0x45, 0x38, 0x8b, 0x6e, 0xbd,
	0x2b, 0xf5, 0x0c, 0x3f, 0x43, 0x13, 0x9c, 0x4b, 0x61, 0x50, 0xf3, 0xa2, 0x68, 0xc1, 0x8d, 0x5d,
	0x63, 0xe2, 0xec, 0x3b, 0x7c, 0x61, 0x91, 0x1d, 0x29, 0xd7, 0x57, 0x60, 0x7f, 0x76, 0x8c, 0x16,
	0xd9, 0xd6, 0x9c, 0xc1, 0x05, 0x4b, 0x4a, 0x5b, 0x8a, 0x60, 0xaf, 0x83, 0x2d, 0x64, 0x5a, 0x87,
	0xba, 0x57, 0xb7, 0x8c, 0x77, 0xd3, 0xed, 0xa5, 0xe5, 0xfa, 0x2a, 0x1c, 0xc8, 0x8e, 0xb1, 0xea,
	0x16, 0x27, 0x2b, 0x87, 0xe8, 0x5d, 0xa5, 0x07, 0xe1, 0x33, 0x8c, 0xc7, 0x75, 0xfa, 0xe9, 0x08,
	0xbb, 0xba, 0x7e, 0x09, 0x06, 0xe4, 0x21, 0xca, 0xeb, 0x3c, 0xec, 0x66, 0xcf, 0x68, 0x16, 0x2d,
	0x99, 0x0e, 0xb3, 0xa0, 0x34, 0x3a, 0x1e, 0xb6, 0xc5, 0x23, 0x2f, 0x86, 0x6e, 0xfa, 0x43, 0x81,
	0xb3, 0x7c, 0x95, 0x11, 0xc6, 0xe8, 0xb4, 0x43, 0xd0, 0xe7, 0xb1, 0x87, 0xb4, 0xf1, 0xf8, 0x03,
	0xfb, 0x20, 0x77, 0x65, 0xf7, 0xfd, 0xce, 0x4a, 0x6f, 0x2f, 0xf3, 0x25, 0x47, 0x1c, 0xa4, 0x81,
	0xcf, 0xc2, 0xa7, 0x16, 0x43, 0x57, 0xb8, 0xde, 0x0e, 0x2a, 0xaa, 0x93, 0x18, 0x50, 0x36, 0xcc,
	0xde, 0x3e, 0x0c, 0x87, 0x54, 0x37, 0x7c, 0x3e, 0xf3, 0x57, 0xf9, 0xdd, 0x37, 0x6b, 0xf0, 0xf0,
	0xb3, 0x0b, 0xe9, 0x62, 0x57, 0x5d, 0xbe, 0xbb, 0x25, 0xe9, 0x4a, 0x5d, 0xfb, 0xf9, 0x03, 0x31,
	0x23, 0xa2, 0xeb, 0xc3, 0x63, 0xba, 0xc9, 0x6f, 0xa1, 0xc2, 0x0d, 0x3c, 0xec, 0xf9, 0x4b, 0xf8,
	0x33, 0xc4, 0x53, 0x9f, 0x99, 0xa8, 0xf3, 0xe1, 0xd5, 0x6e, 0x0a, 0x8a, 0xbd, 0x75, 0xb9, 0x2c,
	0x3a, 0x0e, 0xbd, 0x7b, 0xc7, 0x5e, 0xe1, 0x07, 0x92, 0x4a, 0xe7, 0x03, 0xc6, 0xa5, 0xa0, 0xe1,
	0xc7, 0xf3, 0x6b, 0xae, 0x5f, 0xf7, 0xc4, 0x05, 0x4a, 0x3e, 0x90, 0xe8, 0xf6, 0xd0, 0x7b, 0xc2,
	0x01, 0xc3, 0x10, 0x96, 0x66, 0x22, 0x80, 0x41, 0xad, 0x11, 0x2d, 0xc1, 0x49, 0x39, 0x35, 0x5a,
	0x17, 0x9a, 0x2c, 0x7d, 0x4c, 0xfb, 0x87, 0x08, 0x26, 0x84, 0xe2, 0xe8, 0x23, 0x3d, 0x9a, 0xe3,
	0xd8, 0xff, 0x10, 0x4c, 0x76, 0x01, 0x87, 0x66, 0xed, 0x16, 0x58, 0x5a, 0x4b, 0xd6, 0x51, 0xdb,
	0x48, 0x9b, 0x21, 0x68, 0xef, 0xba, 0xee, 0x0b, 0x7c, 0x87, 0xe2, 0xd3, 0x2d, 0x78, 0xeb, 0xb1,
	0x4b, 0xe6, 0xec, 0xbe, 0xe1, 0x7e, 0x20, 0x1c, 0x66, 0xd4, 0x11, 0x69, 0xd6, 0x6e, 0x40, 0xbf,
	0x6a, 0xbc, 0xf3, 0xa6, 0x1b, 0xf2, 0xc5, 0xad, 0x69, 0xaa, 0x94, 0x91, 0xec, 0xef, 0xa7, 0x2f,
	0xf2, 0x4a, 0xff, 0x47, 0xd3, 0x57, 0x1f, 0x20, 0x18, 0x2f, 0x86, 0x84, 0x26, 0x67, 0x05, 0x3e,
	0xad, 0x32, 0x62, 0xdd, 0xd4, 0x5d, 0x76, 0xd4, 0xa1, 0x7a, 0xd7, 0x43, 0x93, 0x7c, 0x81, 0x5d,
	0x0c, 0x5d, 0xc5, 0x79, 0x4a, 0x4a, 0xac, 0xdd, 0xe4, 0xbb, 0x5d, 0xd6, 0x85, 0x66, 0xe0, 0x1a,
	0xec, 0x4b, 0x8f, 0xd0, 0xc6, 0x18, 0x56, 0x2e, 0xcd, 0xf2, 0x71, 0x28, 0xe3, 0x6d, 0x7f, 0x9d,
	0x9f, 0x39, 0xdb, 0x47, 0x31, 0x25, 0xce, 0x5e, 0x6d, 0x39, 0xbf, 0x47, 0xfc, 0x6e, 0xab, 0x98,
	0x8c, 0x32, 0x5c, 0x82, 0xa7, 0xd2, 0x23, 0xac, 0xba, 0x45, 0x29, 0x66, 0xdd, 0x7b, 0x57, 0xd1,
	0x97, 0x79, 0xb2, 0xe6, 0xd7, 0x3c, 0x37, 0xbe, 0x4e, 0xf4, 0xa7, 0xf9, 0xca, 0xf6, 0xf6, 0x20,
	0xe1, 0xa6, 0xaf, 0x88, 0xc6, 0x6f, 0xfa, 0xd2, 0xa0, 0xfe, 0xa6, 0x2f, 0x99, 0xb2, 0x43, 0xb0,
	0x34, 0x90, 0xbd, 0xe9, 0xcb, 0x9e, 0x9f, 0xc8, 0x4d, 0x5f, 0x07, 0x83, 0xdf, 0xf4, 0x25, 0x0b,
	0xc3, 0x4d, 0x5f, 0x97, 0x0e, 0x45, 0x90, 0xde, 0x35, 0xc9, 0x79, 0x9e, 0xd7, 0xc5, 0xd0, 0x15,
	0x66, 0x2a, 0xb4, 0x02, 0x88, 0x07, 0x13, 0x83, 0x3b, 0x3f, 0x98, 0x68, 0x8d, 0xf4, 0x07, 0x13,
	0xad, 0x0b, 0x3b, 0x98, 0x68, 0x0d, 0xec, 0x56, 0x6a, 0xeb, 0xc8, 0xe5, 0xd7, 0xab, 0x95, 0xe3,
	0x3f, 0xe9, 0x8d, 0x22, 0x3f, 0x31, 0xb7, 0xc0, 0xd2, 0x1a, 0x19, 0xce, 0x1e, 0x79, 0x99, 0x31,
	0x04, 0xed, 0x59, 0x03, 0x4d, 0xfd, 0x7f, 0x12, 0x76, 0x12, 0xb2, 0xf8, 0xdb, 0xb0, 0x93, 0xc8,
	0xc3, 0x58, 0xd1, 0xdb, 0x92, 0xd6, 0x6d, 0x1d, 0x35, 0x1b, 0x25, 0x33, 0xd9, 0x63, 0xdf, 0xf9,
	0xdb, 0xbf, 0x7e, 0xfc, 0xd8, 0x51, 0x6c, 0x3b, 0x4c, 0x54, 0xf7, 0x56, 0xeb, 0x5e, 0x7b, 0x49,
	0x4a, 0xbe, 0x44, 0xe0, 0xdc, 0x65, 0x02, 0xf9, 0x16, 0xbe, 0x0d, 0xbb, 0x12, 0x79, 0x1a, 0x1b,
	0x63, 0x33, 0x15, 0xdc, 0x3a, 0x96, 0x63, 0x45, 0x21, 0x0c, 0x13, 0x08, 0x16, 0x1e, 0x70, 0x34,
	0xdf, 0x63, 0xc0, 0x6f, 0x20, 0xd8, 0x23, 0xa8, 0xda, 0x78, 0x5c, 0x13, 0x58, 0x29, 0x8d, 0x5b,
	0xa7, 0x0a, 0x5a, 0x53, 0x38, 0xa3, 0x04, 0xce, 0x30, 0x2e, 0x39, 0xea, 0xaf, 0x2a, 0x38, 0xeb,
	0x09, 0x88, 0x7b, 0x08, 0xf6, 0x8a, 0x52, 0x38, 0x36, 0xcc, 0xa3, 0x50, 0xd4, 0xad, 0x72, 0x51,
	0x73, 0x8a, 0xeb, 0x14, 0xc1, 0xf5, 0x2c, 0x3e, 0xa6, 0xc3, 0x55, 0x4b, 0xbc, 0xaa, 0xc9, 0xc7,
	0x6e, 0x6f, 0x22, 0xd8, 0x9f, 0x55, 0xc9, 0xf1, 0xa4, 0x7e, 0x4e, 0x8d, 0xe8, 0x6e, 0x4d, 0x75,
	0xe3, 0x42, 0xa1, 0x4e, 0x11, 0xa8, 0xe3, 0x78, 0x4c, 0x07, 0xb5, 0x99, 0x78, 0x56, 0x7d, 0xef,
	0x0e, 0xc3, 0xfb, 0x2b, 0x04, 0x7b, 0x45, 0x81, 0xd9, 0x94, 0x4e, 0x85, 0xe6, 0x6d, 0x4a, 0xa7,
	0x4a, 0xb7, 0xb6, 0xcf, 0x11, 0x8c, 0xd3, 0xf8, 0xb4, 0x0e, 0xe3, 0x5a, 0xe2, 0x95, 0xc0, 0x73,
	0xee, 0x0a, 0x12, 0xff, 0x16, 0xfe, 0x39, 0x82, 0xa7, 0x32, 0x82, 0x38, 0x9e, 0xd0, 0x03, 0x50,
	0xcb, 0xf4, 0xd6, 0x64, 0x17, 0x1e, 0x14, 0x75, 0x99, 0xa0, 0x3e, 0x8e, 0x47, 0x0b, 0xa1, 0x8e,
	0xf0, 0x2f, 0x50, 0x5a, 0xa5, 0x36, 0x65, 0x55, 0x21, 0x99, 0x9b, 0xb2, 0xaa, 0x12, 0xc5, 0xed,
	0xe7, 0x09, 0xbe, 0x29, 0x3c, 0x21, 0xe3, 0x6b, 0xaf, 0x29, 0xd5, 0xce, 0x5f, 0x49, 0x3e, 0xb7,
	0x9c, 0xbb, 0xc9, 0xe9, 0x67, 0x0b, 0xbf, 0x83, 0xe0, 0x19, 0xb5, 0xe8, 0x8c, 0x67, 0x8c, 0x79,
	0xd2, 0xcb, 0xe5, 0xd6, 0xf3, 0xdd, 0x3b, 0x52, 0x1e, 0x13, 0x84, 0xc7, 0x18, 0x3e, 0x9e, 0xc3,
	0x23, 0x62, 0x44, 0xf0, 0x1f, 0x91, 0x42, 0xf6, 0xc5, 0x86, 0xb7, 0x47, 0x27, 0x51, 0x5b, 0xa7,
	0xbb, 0xf2, 0xa1, 0x80, 0x2f, 0x13, 0xc0, 0x2f, 0xe0, 0x0b, 0x32, 0x60, 0xaa, 0x28, 0x55, 0x6f,
	0x87, 0x8a, 0xf4, 0xa7, 0xe5, 0xa6, 0x2d, 0xfc, 0x57, 0x04, 0x07, 0x0d, 0x72, 0x2e, 0x3e, 0x6f,
	0x4c, 0x69, 0x8e, 0x24, 0x6d, 0xcd, 0x6e, 0xd3, 0x9b, 0x92, 0x7c, 0x8e, 0x90, 0x9c, 0xc0, 0xe5,
	0x42, 0x24, 0x79, 0x6d, 0xfe, 0x80, 0x14, 0xaa, 0x6a, 0x81, 0xda, 0x48, 0xea, 0x6f, 0x81, 0xda,
	0xc8, 0x9a, 0xae, 0xbd, 0x40, 0x60, 0x5f, 0xc0, 0xe7, 0xf5, 0xb0, 0xc3, 0xa6, 0x58, 0x9b, 0xd0,
	0x55, 0x54, 0xe6, 0x4f, 0x08, 0x06, 0xb5, 0x8a, 0x29, 0xfe, 0x6c, 0x91, 0xcc, 0xaa, 0xd5, 0x5e,
	0xeb, 0xdc, 0xb6, 0x7c, 0x29, 0xb9, 0x33, 0x84, 0x5c, 0x19, 0x8f, 0x17, 0x22, 0x17, 0x25, 0xec,
	0xc4, 0x8a, 0x70, 0x7d, 0xad, 0x40, 0x45, 0x24, 0x69, 0xb5, 0x40, 0x45, 0x64, 0xc1, 0xb4, 0x48,
	0x45, 0x6a, 0x51, 0x97, 0x15, 0xc9, 0xc8, 0x91, 0xc5, 0x2a, 0xa2, 0x96, 0x52, 0x8b, 0x55, 0x44,
	0xa3, 0x7f, 0x16, 0xa9, 0x88, 0x40, 0x8e, 0x55, 0xe4, 0x27, 0x48, 0x54, 0x0a, 0xf1, 0x49, 0x3d,
	0x02, 0x49, 0xb0, 0xb4, 0xc6, 0x8b, 0x19, 0x53, 0x7c, 0xd3, 0x04, 0x9f, 0x83, 0x4f, 0x39, 0x86,
	0xef, 0x9d, 0xca, 0x1b, 0xc4, 0xdb, 0x08, 0xfa, 0x55, 0xba, 0x1f, 0x9e, 0x36, 0x26, 0x4b, 0xa7,
	0x56, 0x5a, 0xcf, 0x75, 0xeb, 0x96, 0x7f, 0x0e, 0xe3, 0xf0, 0xf9, 0xda, 0xf3, 0x1b, 0x24, 0x4b,
	0x74, 0xa6, 0x73, 0x98, 0x46, 0x6d, 0x33, 0x9d, 0xc3, 0x74, 0x8a, 0x99, 0x7d, 0x91, 0x40, 0x3d,
	0x8b, 0x67, 0x8c, 0x99, 0x4e, 0xbe, 0x80, 0xdb, 0x4c, 0xfc, 0xab, 0xab, 0x6e, 0xec, 0x76, 0xc0,
	0xff, 0x0e, 0xc1, 0xd3, 0x0a, 0x49, 0x0e, 0x9f, 0x31, 0xe6, 0x4e, 0x47, 0x61, 0xba, 0x4b, 0xaf,
	0xfc, 0x33, 0x85, 0x91, 0x45, 0x84, 0x5f, 0x43, 0x5c, 0x5a, 0xc3, 0x27, 0xf4, 0xb3, 0x67, 0xd4,
	0x3a, 0x6b, 0xac, 0x88, 0x29, 0x45, 0x67, 0x13, 0x74, 0x43, 0xd8, 0x72, 0xb4, 0x5f, 0x91, 0xc6,
	0xaf, 0x23, 0xe8, 0xeb, 0x08, 0x70, 0xd8, 0x10, 0x3d, 0xab, 0xe0, 0x59, 0x27, 0x0b, 0xd9, 0x52,
	0x28, 0x47, 0x09, 0x94, 0x12, 0x1e, 0x72, 0x54, 0xdf, 0xa0, 0x66, 0xf7, 0x96, 0x37, 0x10, 0x00,
	0x57, 0xed, 0x4c, 0x2f, 0xba, 0x24, 0xfc, 0x99, 0x5e, 0x74, 0x59, 0x08, 0xb4, 0x4f, 0x10, 0x3c,
	0x47, 0xf0, 0x88, 0x1a, 0x4f, 0xe7, 0xbe, 0x12, 0xba, 0xf8, 0xa7, 0x08, 0xf6, 0xa5, 0x05, 0x3d,
	0xec, 0x14, 0xbb, 0x78, 0x70, 0x70, 0x13, 0xc5, 0x1d, 0x0a, 0x9c, 0xa6, 0x43, 0x37, 0x73, 0x4b,
	0x09, 0x5d, 0xb2, 0x46, 0x72, 0x65, 0xcc, 0x94, 0x3a, 0x49, 0xa8, 0x33, 0xa5, 0x4e, 0x16, 0xdb,
	0x4c, 0x6b, 0x64, 0x1b, 0x59, 0xe7, 0x94, 0x1f, 0xba, 0x64, 0xf9, 0x66, 0xf7, 0x92, 0x7b, 0x08,
	0x9e, 0x4c, 0xa9, 0x77, 0xb8, 0x5c, 0xe8, 0x8e, 0xc1, 0x61, 0x3a, 0x85, 0xed, 0xb5, 0x1f, 0x20,
	0xe8, 0x90, 0x46, 0xf8, 0x03, 0x64, 0x50, 0xce, 0x4c, 0x1b, 0x66, 0x9e, 0xd4, 0x67, 0xda, 0x30,
	0x73, 0xf5, 0x3c, 0x7b, 0x91, 0x50, 0xb8, 0x88, 0x67, 0x1d, 0xc3, 0x3f, 0x31, 0x54, 0xc9, 0x7f,
	0x31, 0x54, 0x6b, 0xc4, 0x9d, 0xad, 0x92, 0xe4, 0x58, 0xc0, 0x36, 0xa8, 0xff, 0x22, 0x18, 0xc9,
	0x95, 0xc3, 0xf0, 0x9c, 0x31, 0xc1, 0x85, 0xa4, 0x3d, 0x6b, 0xfe, 0xa1, 0x62, 0x50, 0xd6, 0xb3,
	0x84, 0xf5, 0x0c, 0x9e, 0xee, 0x8e, 0x35, 0x3b, 0x2f, 0xbc, 0x8b, 0xd4, 0xca, 0x94, 0x69, 0x3b,
	0x36, 0x68, 0x67, 0xa6, 0xed, 0xd8, 0x24, 0x90, 0x99, 0xf6, 0x38, 0x81, 0xc6, 0x6a, 0xdb, 0x31,
	0x21, 0x93, 0x2d, 0xdb, 0xdf, 0x11, 0x0c, 0x99, 0xd4, 0x26, 0x3c, 0x5b, 0x30, 0xdb, 0x6a, 0xbd,
	0xcc, 0xba, 0xb0, 0x5d, 0x77, 0x4a, 0x70, 0x86, 0x10, 0x9c, 0xc4, 0x4e, 0x51, 0x82, 0xac, 0x42,
	0x6f, 0xa1, 0xac, 0x38, 0x64, 0x5a, 0x53, 0x95, 0x5a, 0x8f, 0x69, 0x4d, 0x55, 0xeb, 0x35, 0xa6,
	0xcf, 0x55, 0xc4, 0xdd, 0x3a, 0x74, 0xb3, 0x27, 0x8e, 0x36, 0xe4, 0xb7, 0x11, 0x1c, 0x90, 0xa4,
	0x20, 0xd3, 0xb5, 0x40, 0x27, 0x52, 0x99, 0xae, 0x05, 0x5a, 0xad, 0xc9, 0x74, 0xbf, 0x34, 0x60,
	0x8f, 0xf0, 0x6f, 0x91, 0x42, 0x96, 0x31, 0xc1, 0xd6, 0xc9, 0x45, 0x26, 0xd8, 0x5a, 0x51, 0xc8,
	0xf4, 0x26, 0x8b, 0xff, 0x18, 0x55, 0xad, 0x85, 0xca, 0x75, 0x8b, 0x5e, 0x63, 0xd4, 0x5a, 0x4b,
	0xce, 0x35, 0xc6, 0xa8, 0x13, 0xe5, 0x5c, 0x63, 0xcc, 0xe2, 0x8e, 0xe9, 0x1a, 0xa3, 0x67, 0x85,
	0x3f, 0x44, 0x06, 0x0d, 0xc4, 0x44, 0x26, 0x4f, 0xbc, 0x30, 0x91, 0xc9, 0x15, 0x20, 0xec, 0x2b,
	0x84, 0xcc, 0x1c, 0x7e, 0x21, 0xb7, 0xb3, 0x52, 0xdc, 0x14, 0xaf, 0xc8, 0xfd, 0x64, 0xb9, 0xd2,
	0x73, 0x9c, 0xcd, 0xeb, 0x7c, 0x33, 0xcd, 0x0b, 0xdb, 0x75, 0xa7, 0x4c, 0xe7, 0x09, 0xd3, 0x59,
	0x7c, 0x6e, 0xfb, 0x4c, 0xa3, 0xb9, 0xa9, 0xf7, 0xee, 0x97, 0xd0, 0xfb, 0xf7, 0x4b, 0xe8, 0x9f,
	0xf7, 0x4b, 0xe8, 0x47, 0x0f, 0x4a, 0x3b, 0xde, 0x7f, 0x50, 0xda, 0xf1, 0x8f, 0x07, 0xa5, 0x1d,
	0x5f, 0x19, 0x60, 0x51, 0xef, 0xf0, 0xb8, 0xf1, 0x66, 0xd3, 0x8b, 0x56, 0x76, 0x91, 0xff, 0xfb,
	0x3b, 0xfd, 0x51, 0x00, 0x00, 0x00, 0xff, 0xff, 0x81, 0x96, 0xf7, 0xfd, 0xb1, 0x39, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Param(ctx context.Context, in *QueryParamRequest, opts ...grpc.CallOption) (*QueryParamResponse, error)
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries epoch
	EpochLength(ctx context.Context, in *QueryGetEpochLengthRequest, opts ...grpc.CallOption) (*QueryGetEpochLengthResponse, error)
	CurrentEpoch(ctx context.Context, in *QueryGetCurrentEpochRequest, opts ...grpc.CallOption) (*QueryGetCurrentEpochResponse, error)
	PendingNextEpoch(ctx context.Context, in *QueryGetPendingNextEpochRequest, opts ...grpc.CallOption) (*QueryGetPendingNextEpochResponse, error)
	HistoryEpoch(ctx context.Context, in *QueryGetHistoryEpochRequest, opts ...grpc.CallOption) (*QueryGetHistoryEpochResponse, error)
	AllHistoryEpoch(ctx context.Context, in *QueryGetAllHistoryEpochRequest, opts ...grpc.CallOption) (*QueryGetAllHistoryEpochResponse, error)
	// Queries a list of Node Workload items.
	NodeWorkload(ctx context.Context, in *QueryGetNodeWorkloadRequest, opts ...grpc.CallOption) (*QueryGetNodeWorkloadResponse, error)
	AllNodeWorkloadByEpoch(ctx context.Context, in *QueryGetAllNodeWorkloadByEpochRequest, opts ...grpc.CallOption) (*QueryGetAllNodeWorkloadByEpochResponse, error)
	// Queries a list of Manager Workload items.
	ManagerWRWorkload(ctx context.Context, in *QueryGetManagerWRWorkloadRequest, opts ...grpc.CallOption) (*QueryGetManagerWRWorkloadResponse, error)
	AllManagerWRWorkloadByEpoch(ctx context.Context, in *QueryGetAllManagerWRWorkloadByEpochRequest, opts ...grpc.CallOption) (*QueryGetAllManagerWRWorkloadByEpochResponse, error)
	ManagerRPWorkload(ctx context.Context, in *QueryGetManagerRPWorkloadRequest, opts ...grpc.CallOption) (*QueryGetManagerRPWorkloadResponse, error)
	AllManagerRPWorkloadByEra(ctx context.Context, in *QueryGetAllManagerRPWorkloadByEraRequest, opts ...grpc.CallOption) (*QueryGetAllManagerRPWorkloadByEraResponse, error)
	ManagerCSWorkload(ctx context.Context, in *QueryGetManagerCSWorkloadRequest, opts ...grpc.CallOption) (*QueryGetManagerCSWorkloadResponse, error)
	AllManagerCSWorkloadByEra(ctx context.Context, in *QueryGetAllManagerCSWorkloadByEraRequest, opts ...grpc.CallOption) (*QueryGetAllManagerCSWorkloadByEraResponse, error)
	// Queries a list of Workreport items.
	Workreport(ctx context.Context, in *QueryGetWorkreportRequest, opts ...grpc.CallOption) (*QueryGetWorkreportResponse, error)
	AllWorkreportByEpoch(ctx context.Context, in *QueryGetAllWorkreportByEpochRequest, opts ...grpc.CallOption) (*QueryGetAllWorkreportByEpochResponse, error)
	EpochProcessData(ctx context.Context, in *QueryGetEpochProcessDataRequest, opts ...grpc.CallOption) (*QueryGetEpochProcessDataResponse, error)
	AllEpochProcessData(ctx context.Context, in *QueryGetAllEpochProcessDataRequest, opts ...grpc.CallOption) (*QueryGetAllEpochProcessDataResponse, error)
	// Queries a Superior
	Superior(ctx context.Context, in *QueryGetSuperiorRequest, opts ...grpc.CallOption) (*QueryGetSuperiorResponse, error)
	// Queries era
	EraLength(ctx context.Context, in *QueryGetEraLengthRequest, opts ...grpc.CallOption) (*QueryGetEraLengthResponse, error)
	CurrentEra(ctx context.Context, in *QueryGetCurrentEraRequest, opts ...grpc.CallOption) (*QueryGetCurrentEraResponse, error)
	PendingNextEra(ctx context.Context, in *QueryGetPendingNextEraRequest, opts ...grpc.CallOption) (*QueryGetPendingNextEraResponse, error)
	HistoryEra(ctx context.Context, in *QueryGetHistoryEraRequest, opts ...grpc.CallOption) (*QueryGetHistoryEraResponse, error)
	AllHistoryEra(ctx context.Context, in *QueryGetAllHistoryEraRequest, opts ...grpc.CallOption) (*QueryGetAllHistoryEraResponse, error)
	// Queries a list of ReputationPointChangeData items.
	ReputationPointChangeData(ctx context.Context, in *QueryGetReputationPointChangeDataRequest, opts ...grpc.CallOption) (*QueryGetReputationPointChangeDataResponse, error)
	AllReputationPointChangeDataByEra(ctx context.Context, in *QueryGetAllReputationPointChangeDataByEraRequest, opts ...grpc.CallOption) (*QueryGetAllReputationPointChangeDataByEraResponse, error)
	// Queries a list of ReputationPoint items.
	ReputationDeltaPoint(ctx context.Context, in *QueryGetReputationDeltaPointRequest, opts ...grpc.CallOption) (*QueryGetReputationDeltaPointResponse, error)
	AllReputationDeltaPointByEra(ctx context.Context, in *QueryGetAllReputationDeltaPointByEraRequest, opts ...grpc.CallOption) (*QueryGetAllReputationDeltaPointByEraResponse, error)
	// Queries a list of EraProcessData items.
	EraProcessData(ctx context.Context, in *QueryGetEraProcessDataRequest, opts ...grpc.CallOption) (*QueryGetEraProcessDataResponse, error)
	AllEraProcessData(ctx context.Context, in *QueryGetAllEraProcessDataRequest, opts ...grpc.CallOption) (*QueryGetAllEraProcessDataResponse, error)
	// Queries a list of CheatStatusPRData items.
	CheatStatusCRData(ctx context.Context, in *QueryGetCheatStatusCRDataRequest, opts ...grpc.CallOption) (*QueryGetCheatStatusCRDataResponse, error)
	AllCheatStatusCRDataByEra(ctx context.Context, in *QueryGetAllCheatStatusCRDataByEraRequest, opts ...grpc.CallOption) (*QueryGetAllCheatStatusCRDataByEraResponse, error)
	// Queries a list of EraCheatStatusProcessData items.
	EraCheatStatusProcessData(ctx context.Context, in *QueryGetEraCheatStatusProcessDataRequest, opts ...grpc.CallOption) (*QueryGetEraCheatStatusProcessDataResponse, error)
	AllEraCheatStatusProcessData(ctx context.Context, in *QueryGetAllEraCheatStatusProcessDataRequest, opts ...grpc.CallOption) (*QueryGetAllEraCheatStatusProcessDataResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Param(ctx context.Context, in *QueryParamRequest, opts ...grpc.CallOption) (*QueryParamResponse, error) {
	out := new(QueryParamResponse)
	err := c.cc.Invoke(ctx, "/enreach.workload.Query/Param", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/enreach.workload.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EpochLength(ctx context.Context, in *QueryGetEpochLengthRequest, opts ...grpc.CallOption) (*QueryGetEpochLengthResponse, error) {
	out := new(QueryGetEpochLengthResponse)
	err := c.cc.Invoke(ctx, "/enreach.workload.Query/EpochLength", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CurrentEpoch(ctx context.Context, in *QueryGetCurrentEpochRequest, opts ...grpc.CallOption) (*QueryGetCurrentEpochResponse, error) {
	out := new(QueryGetCurrentEpochResponse)
	err := c.cc.Invoke(ctx, "/enreach.workload.Query/CurrentEpoch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PendingNextEpoch(ctx context.Context, in *QueryGetPendingNextEpochRequest, opts ...grpc.CallOption) (*QueryGetPendingNextEpochResponse, error) {
	out := new(QueryGetPendingNextEpochResponse)
	err := c.cc.Invoke(ctx, "/enreach.workload.Query/PendingNextEpoch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HistoryEpoch(ctx context.Context, in *QueryGetHistoryEpochRequest, opts ...grpc.CallOption) (*QueryGetHistoryEpochResponse, error) {
	out := new(QueryGetHistoryEpochResponse)
	err := c.cc.Invoke(ctx, "/enreach.workload.Query/HistoryEpoch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllHistoryEpoch(ctx context.Context, in *QueryGetAllHistoryEpochRequest, opts ...grpc.CallOption) (*QueryGetAllHistoryEpochResponse, error) {
	out := new(QueryGetAllHistoryEpochResponse)
	err := c.cc.Invoke(ctx, "/enreach.workload.Query/AllHistoryEpoch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NodeWorkload(ctx context.Context, in *QueryGetNodeWorkloadRequest, opts ...grpc.CallOption) (*QueryGetNodeWorkloadResponse, error) {
	out := new(QueryGetNodeWorkloadResponse)
	err := c.cc.Invoke(ctx, "/enreach.workload.Query/NodeWorkload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllNodeWorkloadByEpoch(ctx context.Context, in *QueryGetAllNodeWorkloadByEpochRequest, opts ...grpc.CallOption) (*QueryGetAllNodeWorkloadByEpochResponse, error) {
	out := new(QueryGetAllNodeWorkloadByEpochResponse)
	err := c.cc.Invoke(ctx, "/enreach.workload.Query/AllNodeWorkloadByEpoch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ManagerWRWorkload(ctx context.Context, in *QueryGetManagerWRWorkloadRequest, opts ...grpc.CallOption) (*QueryGetManagerWRWorkloadResponse, error) {
	out := new(QueryGetManagerWRWorkloadResponse)
	err := c.cc.Invoke(ctx, "/enreach.workload.Query/ManagerWRWorkload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllManagerWRWorkloadByEpoch(ctx context.Context, in *QueryGetAllManagerWRWorkloadByEpochRequest, opts ...grpc.CallOption) (*QueryGetAllManagerWRWorkloadByEpochResponse, error) {
	out := new(QueryGetAllManagerWRWorkloadByEpochResponse)
	err := c.cc.Invoke(ctx, "/enreach.workload.Query/AllManagerWRWorkloadByEpoch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ManagerRPWorkload(ctx context.Context, in *QueryGetManagerRPWorkloadRequest, opts ...grpc.CallOption) (*QueryGetManagerRPWorkloadResponse, error) {
	out := new(QueryGetManagerRPWorkloadResponse)
	err := c.cc.Invoke(ctx, "/enreach.workload.Query/ManagerRPWorkload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllManagerRPWorkloadByEra(ctx context.Context, in *QueryGetAllManagerRPWorkloadByEraRequest, opts ...grpc.CallOption) (*QueryGetAllManagerRPWorkloadByEraResponse, error) {
	out := new(QueryGetAllManagerRPWorkloadByEraResponse)
	err := c.cc.Invoke(ctx, "/enreach.workload.Query/AllManagerRPWorkloadByEra", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ManagerCSWorkload(ctx context.Context, in *QueryGetManagerCSWorkloadRequest, opts ...grpc.CallOption) (*QueryGetManagerCSWorkloadResponse, error) {
	out := new(QueryGetManagerCSWorkloadResponse)
	err := c.cc.Invoke(ctx, "/enreach.workload.Query/ManagerCSWorkload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllManagerCSWorkloadByEra(ctx context.Context, in *QueryGetAllManagerCSWorkloadByEraRequest, opts ...grpc.CallOption) (*QueryGetAllManagerCSWorkloadByEraResponse, error) {
	out := new(QueryGetAllManagerCSWorkloadByEraResponse)
	err := c.cc.Invoke(ctx, "/enreach.workload.Query/AllManagerCSWorkloadByEra", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Workreport(ctx context.Context, in *QueryGetWorkreportRequest, opts ...grpc.CallOption) (*QueryGetWorkreportResponse, error) {
	out := new(QueryGetWorkreportResponse)
	err := c.cc.Invoke(ctx, "/enreach.workload.Query/Workreport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllWorkreportByEpoch(ctx context.Context, in *QueryGetAllWorkreportByEpochRequest, opts ...grpc.CallOption) (*QueryGetAllWorkreportByEpochResponse, error) {
	out := new(QueryGetAllWorkreportByEpochResponse)
	err := c.cc.Invoke(ctx, "/enreach.workload.Query/AllWorkreportByEpoch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EpochProcessData(ctx context.Context, in *QueryGetEpochProcessDataRequest, opts ...grpc.CallOption) (*QueryGetEpochProcessDataResponse, error) {
	out := new(QueryGetEpochProcessDataResponse)
	err := c.cc.Invoke(ctx, "/enreach.workload.Query/EpochProcessData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllEpochProcessData(ctx context.Context, in *QueryGetAllEpochProcessDataRequest, opts ...grpc.CallOption) (*QueryGetAllEpochProcessDataResponse, error) {
	out := new(QueryGetAllEpochProcessDataResponse)
	err := c.cc.Invoke(ctx, "/enreach.workload.Query/AllEpochProcessData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Superior(ctx context.Context, in *QueryGetSuperiorRequest, opts ...grpc.CallOption) (*QueryGetSuperiorResponse, error) {
	out := new(QueryGetSuperiorResponse)
	err := c.cc.Invoke(ctx, "/enreach.workload.Query/Superior", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EraLength(ctx context.Context, in *QueryGetEraLengthRequest, opts ...grpc.CallOption) (*QueryGetEraLengthResponse, error) {
	out := new(QueryGetEraLengthResponse)
	err := c.cc.Invoke(ctx, "/enreach.workload.Query/EraLength", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CurrentEra(ctx context.Context, in *QueryGetCurrentEraRequest, opts ...grpc.CallOption) (*QueryGetCurrentEraResponse, error) {
	out := new(QueryGetCurrentEraResponse)
	err := c.cc.Invoke(ctx, "/enreach.workload.Query/CurrentEra", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PendingNextEra(ctx context.Context, in *QueryGetPendingNextEraRequest, opts ...grpc.CallOption) (*QueryGetPendingNextEraResponse, error) {
	out := new(QueryGetPendingNextEraResponse)
	err := c.cc.Invoke(ctx, "/enreach.workload.Query/PendingNextEra", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HistoryEra(ctx context.Context, in *QueryGetHistoryEraRequest, opts ...grpc.CallOption) (*QueryGetHistoryEraResponse, error) {
	out := new(QueryGetHistoryEraResponse)
	err := c.cc.Invoke(ctx, "/enreach.workload.Query/HistoryEra", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllHistoryEra(ctx context.Context, in *QueryGetAllHistoryEraRequest, opts ...grpc.CallOption) (*QueryGetAllHistoryEraResponse, error) {
	out := new(QueryGetAllHistoryEraResponse)
	err := c.cc.Invoke(ctx, "/enreach.workload.Query/AllHistoryEra", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ReputationPointChangeData(ctx context.Context, in *QueryGetReputationPointChangeDataRequest, opts ...grpc.CallOption) (*QueryGetReputationPointChangeDataResponse, error) {
	out := new(QueryGetReputationPointChangeDataResponse)
	err := c.cc.Invoke(ctx, "/enreach.workload.Query/ReputationPointChangeData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllReputationPointChangeDataByEra(ctx context.Context, in *QueryGetAllReputationPointChangeDataByEraRequest, opts ...grpc.CallOption) (*QueryGetAllReputationPointChangeDataByEraResponse, error) {
	out := new(QueryGetAllReputationPointChangeDataByEraResponse)
	err := c.cc.Invoke(ctx, "/enreach.workload.Query/AllReputationPointChangeDataByEra", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ReputationDeltaPoint(ctx context.Context, in *QueryGetReputationDeltaPointRequest, opts ...grpc.CallOption) (*QueryGetReputationDeltaPointResponse, error) {
	out := new(QueryGetReputationDeltaPointResponse)
	err := c.cc.Invoke(ctx, "/enreach.workload.Query/ReputationDeltaPoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllReputationDeltaPointByEra(ctx context.Context, in *QueryGetAllReputationDeltaPointByEraRequest, opts ...grpc.CallOption) (*QueryGetAllReputationDeltaPointByEraResponse, error) {
	out := new(QueryGetAllReputationDeltaPointByEraResponse)
	err := c.cc.Invoke(ctx, "/enreach.workload.Query/AllReputationDeltaPointByEra", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EraProcessData(ctx context.Context, in *QueryGetEraProcessDataRequest, opts ...grpc.CallOption) (*QueryGetEraProcessDataResponse, error) {
	out := new(QueryGetEraProcessDataResponse)
	err := c.cc.Invoke(ctx, "/enreach.workload.Query/EraProcessData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllEraProcessData(ctx context.Context, in *QueryGetAllEraProcessDataRequest, opts ...grpc.CallOption) (*QueryGetAllEraProcessDataResponse, error) {
	out := new(QueryGetAllEraProcessDataResponse)
	err := c.cc.Invoke(ctx, "/enreach.workload.Query/AllEraProcessData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CheatStatusCRData(ctx context.Context, in *QueryGetCheatStatusCRDataRequest, opts ...grpc.CallOption) (*QueryGetCheatStatusCRDataResponse, error) {
	out := new(QueryGetCheatStatusCRDataResponse)
	err := c.cc.Invoke(ctx, "/enreach.workload.Query/CheatStatusCRData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllCheatStatusCRDataByEra(ctx context.Context, in *QueryGetAllCheatStatusCRDataByEraRequest, opts ...grpc.CallOption) (*QueryGetAllCheatStatusCRDataByEraResponse, error) {
	out := new(QueryGetAllCheatStatusCRDataByEraResponse)
	err := c.cc.Invoke(ctx, "/enreach.workload.Query/AllCheatStatusCRDataByEra", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EraCheatStatusProcessData(ctx context.Context, in *QueryGetEraCheatStatusProcessDataRequest, opts ...grpc.CallOption) (*QueryGetEraCheatStatusProcessDataResponse, error) {
	out := new(QueryGetEraCheatStatusProcessDataResponse)
	err := c.cc.Invoke(ctx, "/enreach.workload.Query/EraCheatStatusProcessData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllEraCheatStatusProcessData(ctx context.Context, in *QueryGetAllEraCheatStatusProcessDataRequest, opts ...grpc.CallOption) (*QueryGetAllEraCheatStatusProcessDataResponse, error) {
	out := new(QueryGetAllEraCheatStatusProcessDataResponse)
	err := c.cc.Invoke(ctx, "/enreach.workload.Query/AllEraCheatStatusProcessData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Param(context.Context, *QueryParamRequest) (*QueryParamResponse, error)
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries epoch
	EpochLength(context.Context, *QueryGetEpochLengthRequest) (*QueryGetEpochLengthResponse, error)
	CurrentEpoch(context.Context, *QueryGetCurrentEpochRequest) (*QueryGetCurrentEpochResponse, error)
	PendingNextEpoch(context.Context, *QueryGetPendingNextEpochRequest) (*QueryGetPendingNextEpochResponse, error)
	HistoryEpoch(context.Context, *QueryGetHistoryEpochRequest) (*QueryGetHistoryEpochResponse, error)
	AllHistoryEpoch(context.Context, *QueryGetAllHistoryEpochRequest) (*QueryGetAllHistoryEpochResponse, error)
	// Queries a list of Node Workload items.
	NodeWorkload(context.Context, *QueryGetNodeWorkloadRequest) (*QueryGetNodeWorkloadResponse, error)
	AllNodeWorkloadByEpoch(context.Context, *QueryGetAllNodeWorkloadByEpochRequest) (*QueryGetAllNodeWorkloadByEpochResponse, error)
	// Queries a list of Manager Workload items.
	ManagerWRWorkload(context.Context, *QueryGetManagerWRWorkloadRequest) (*QueryGetManagerWRWorkloadResponse, error)
	AllManagerWRWorkloadByEpoch(context.Context, *QueryGetAllManagerWRWorkloadByEpochRequest) (*QueryGetAllManagerWRWorkloadByEpochResponse, error)
	ManagerRPWorkload(context.Context, *QueryGetManagerRPWorkloadRequest) (*QueryGetManagerRPWorkloadResponse, error)
	AllManagerRPWorkloadByEra(context.Context, *QueryGetAllManagerRPWorkloadByEraRequest) (*QueryGetAllManagerRPWorkloadByEraResponse, error)
	ManagerCSWorkload(context.Context, *QueryGetManagerCSWorkloadRequest) (*QueryGetManagerCSWorkloadResponse, error)
	AllManagerCSWorkloadByEra(context.Context, *QueryGetAllManagerCSWorkloadByEraRequest) (*QueryGetAllManagerCSWorkloadByEraResponse, error)
	// Queries a list of Workreport items.
	Workreport(context.Context, *QueryGetWorkreportRequest) (*QueryGetWorkreportResponse, error)
	AllWorkreportByEpoch(context.Context, *QueryGetAllWorkreportByEpochRequest) (*QueryGetAllWorkreportByEpochResponse, error)
	EpochProcessData(context.Context, *QueryGetEpochProcessDataRequest) (*QueryGetEpochProcessDataResponse, error)
	AllEpochProcessData(context.Context, *QueryGetAllEpochProcessDataRequest) (*QueryGetAllEpochProcessDataResponse, error)
	// Queries a Superior
	Superior(context.Context, *QueryGetSuperiorRequest) (*QueryGetSuperiorResponse, error)
	// Queries era
	EraLength(context.Context, *QueryGetEraLengthRequest) (*QueryGetEraLengthResponse, error)
	CurrentEra(context.Context, *QueryGetCurrentEraRequest) (*QueryGetCurrentEraResponse, error)
	PendingNextEra(context.Context, *QueryGetPendingNextEraRequest) (*QueryGetPendingNextEraResponse, error)
	HistoryEra(context.Context, *QueryGetHistoryEraRequest) (*QueryGetHistoryEraResponse, error)
	AllHistoryEra(context.Context, *QueryGetAllHistoryEraRequest) (*QueryGetAllHistoryEraResponse, error)
	// Queries a list of ReputationPointChangeData items.
	ReputationPointChangeData(context.Context, *QueryGetReputationPointChangeDataRequest) (*QueryGetReputationPointChangeDataResponse, error)
	AllReputationPointChangeDataByEra(context.Context, *QueryGetAllReputationPointChangeDataByEraRequest) (*QueryGetAllReputationPointChangeDataByEraResponse, error)
	// Queries a list of ReputationPoint items.
	ReputationDeltaPoint(context.Context, *QueryGetReputationDeltaPointRequest) (*QueryGetReputationDeltaPointResponse, error)
	AllReputationDeltaPointByEra(context.Context, *QueryGetAllReputationDeltaPointByEraRequest) (*QueryGetAllReputationDeltaPointByEraResponse, error)
	// Queries a list of EraProcessData items.
	EraProcessData(context.Context, *QueryGetEraProcessDataRequest) (*QueryGetEraProcessDataResponse, error)
	AllEraProcessData(context.Context, *QueryGetAllEraProcessDataRequest) (*QueryGetAllEraProcessDataResponse, error)
	// Queries a list of CheatStatusPRData items.
	CheatStatusCRData(context.Context, *QueryGetCheatStatusCRDataRequest) (*QueryGetCheatStatusCRDataResponse, error)
	AllCheatStatusCRDataByEra(context.Context, *QueryGetAllCheatStatusCRDataByEraRequest) (*QueryGetAllCheatStatusCRDataByEraResponse, error)
	// Queries a list of EraCheatStatusProcessData items.
	EraCheatStatusProcessData(context.Context, *QueryGetEraCheatStatusProcessDataRequest) (*QueryGetEraCheatStatusProcessDataResponse, error)
	AllEraCheatStatusProcessData(context.Context, *QueryGetAllEraCheatStatusProcessDataRequest) (*QueryGetAllEraCheatStatusProcessDataResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Param(ctx context.Context, req *QueryParamRequest) (*QueryParamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Param not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) EpochLength(ctx context.Context, req *QueryGetEpochLengthRequest) (*QueryGetEpochLengthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EpochLength not implemented")
}
func (*UnimplementedQueryServer) CurrentEpoch(ctx context.Context, req *QueryGetCurrentEpochRequest) (*QueryGetCurrentEpochResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentEpoch not implemented")
}
func (*UnimplementedQueryServer) PendingNextEpoch(ctx context.Context, req *QueryGetPendingNextEpochRequest) (*QueryGetPendingNextEpochResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PendingNextEpoch not implemented")
}
func (*UnimplementedQueryServer) HistoryEpoch(ctx context.Context, req *QueryGetHistoryEpochRequest) (*QueryGetHistoryEpochResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HistoryEpoch not implemented")
}
func (*UnimplementedQueryServer) AllHistoryEpoch(ctx context.Context, req *QueryGetAllHistoryEpochRequest) (*QueryGetAllHistoryEpochResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllHistoryEpoch not implemented")
}
func (*UnimplementedQueryServer) NodeWorkload(ctx context.Context, req *QueryGetNodeWorkloadRequest) (*QueryGetNodeWorkloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeWorkload not implemented")
}
func (*UnimplementedQueryServer) AllNodeWorkloadByEpoch(ctx context.Context, req *QueryGetAllNodeWorkloadByEpochRequest) (*QueryGetAllNodeWorkloadByEpochResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllNodeWorkloadByEpoch not implemented")
}
func (*UnimplementedQueryServer) ManagerWRWorkload(ctx context.Context, req *QueryGetManagerWRWorkloadRequest) (*QueryGetManagerWRWorkloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManagerWRWorkload not implemented")
}
func (*UnimplementedQueryServer) AllManagerWRWorkloadByEpoch(ctx context.Context, req *QueryGetAllManagerWRWorkloadByEpochRequest) (*QueryGetAllManagerWRWorkloadByEpochResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllManagerWRWorkloadByEpoch not implemented")
}
func (*UnimplementedQueryServer) ManagerRPWorkload(ctx context.Context, req *QueryGetManagerRPWorkloadRequest) (*QueryGetManagerRPWorkloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManagerRPWorkload not implemented")
}
func (*UnimplementedQueryServer) AllManagerRPWorkloadByEra(ctx context.Context, req *QueryGetAllManagerRPWorkloadByEraRequest) (*QueryGetAllManagerRPWorkloadByEraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllManagerRPWorkloadByEra not implemented")
}
func (*UnimplementedQueryServer) ManagerCSWorkload(ctx context.Context, req *QueryGetManagerCSWorkloadRequest) (*QueryGetManagerCSWorkloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManagerCSWorkload not implemented")
}
func (*UnimplementedQueryServer) AllManagerCSWorkloadByEra(ctx context.Context, req *QueryGetAllManagerCSWorkloadByEraRequest) (*QueryGetAllManagerCSWorkloadByEraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllManagerCSWorkloadByEra not implemented")
}
func (*UnimplementedQueryServer) Workreport(ctx context.Context, req *QueryGetWorkreportRequest) (*QueryGetWorkreportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Workreport not implemented")
}
func (*UnimplementedQueryServer) AllWorkreportByEpoch(ctx context.Context, req *QueryGetAllWorkreportByEpochRequest) (*QueryGetAllWorkreportByEpochResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllWorkreportByEpoch not implemented")
}
func (*UnimplementedQueryServer) EpochProcessData(ctx context.Context, req *QueryGetEpochProcessDataRequest) (*QueryGetEpochProcessDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EpochProcessData not implemented")
}
func (*UnimplementedQueryServer) AllEpochProcessData(ctx context.Context, req *QueryGetAllEpochProcessDataRequest) (*QueryGetAllEpochProcessDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllEpochProcessData not implemented")
}
func (*UnimplementedQueryServer) Superior(ctx context.Context, req *QueryGetSuperiorRequest) (*QueryGetSuperiorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Superior not implemented")
}
func (*UnimplementedQueryServer) EraLength(ctx context.Context, req *QueryGetEraLengthRequest) (*QueryGetEraLengthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EraLength not implemented")
}
func (*UnimplementedQueryServer) CurrentEra(ctx context.Context, req *QueryGetCurrentEraRequest) (*QueryGetCurrentEraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentEra not implemented")
}
func (*UnimplementedQueryServer) PendingNextEra(ctx context.Context, req *QueryGetPendingNextEraRequest) (*QueryGetPendingNextEraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PendingNextEra not implemented")
}
func (*UnimplementedQueryServer) HistoryEra(ctx context.Context, req *QueryGetHistoryEraRequest) (*QueryGetHistoryEraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HistoryEra not implemented")
}
func (*UnimplementedQueryServer) AllHistoryEra(ctx context.Context, req *QueryGetAllHistoryEraRequest) (*QueryGetAllHistoryEraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllHistoryEra not implemented")
}
func (*UnimplementedQueryServer) ReputationPointChangeData(ctx context.Context, req *QueryGetReputationPointChangeDataRequest) (*QueryGetReputationPointChangeDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReputationPointChangeData not implemented")
}
func (*UnimplementedQueryServer) AllReputationPointChangeDataByEra(ctx context.Context, req *QueryGetAllReputationPointChangeDataByEraRequest) (*QueryGetAllReputationPointChangeDataByEraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllReputationPointChangeDataByEra not implemented")
}
func (*UnimplementedQueryServer) ReputationDeltaPoint(ctx context.Context, req *QueryGetReputationDeltaPointRequest) (*QueryGetReputationDeltaPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReputationDeltaPoint not implemented")
}
func (*UnimplementedQueryServer) AllReputationDeltaPointByEra(ctx context.Context, req *QueryGetAllReputationDeltaPointByEraRequest) (*QueryGetAllReputationDeltaPointByEraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllReputationDeltaPointByEra not implemented")
}
func (*UnimplementedQueryServer) EraProcessData(ctx context.Context, req *QueryGetEraProcessDataRequest) (*QueryGetEraProcessDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EraProcessData not implemented")
}
func (*UnimplementedQueryServer) AllEraProcessData(ctx context.Context, req *QueryGetAllEraProcessDataRequest) (*QueryGetAllEraProcessDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllEraProcessData not implemented")
}
func (*UnimplementedQueryServer) CheatStatusCRData(ctx context.Context, req *QueryGetCheatStatusCRDataRequest) (*QueryGetCheatStatusCRDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheatStatusCRData not implemented")
}
func (*UnimplementedQueryServer) AllCheatStatusCRDataByEra(ctx context.Context, req *QueryGetAllCheatStatusCRDataByEraRequest) (*QueryGetAllCheatStatusCRDataByEraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllCheatStatusCRDataByEra not implemented")
}
func (*UnimplementedQueryServer) EraCheatStatusProcessData(ctx context.Context, req *QueryGetEraCheatStatusProcessDataRequest) (*QueryGetEraCheatStatusProcessDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EraCheatStatusProcessData not implemented")
}
func (*UnimplementedQueryServer) AllEraCheatStatusProcessData(ctx context.Context, req *QueryGetAllEraCheatStatusProcessDataRequest) (*QueryGetAllEraCheatStatusProcessDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllEraCheatStatusProcessData not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Param_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Param(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.workload.Query/Param",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Param(ctx, req.(*QueryParamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.workload.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EpochLength_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetEpochLengthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EpochLength(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.workload.Query/EpochLength",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EpochLength(ctx, req.(*QueryGetEpochLengthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CurrentEpoch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCurrentEpochRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CurrentEpoch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.workload.Query/CurrentEpoch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CurrentEpoch(ctx, req.(*QueryGetCurrentEpochRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PendingNextEpoch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPendingNextEpochRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PendingNextEpoch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.workload.Query/PendingNextEpoch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PendingNextEpoch(ctx, req.(*QueryGetPendingNextEpochRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HistoryEpoch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetHistoryEpochRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HistoryEpoch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.workload.Query/HistoryEpoch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HistoryEpoch(ctx, req.(*QueryGetHistoryEpochRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllHistoryEpoch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAllHistoryEpochRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllHistoryEpoch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.workload.Query/AllHistoryEpoch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllHistoryEpoch(ctx, req.(*QueryGetAllHistoryEpochRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NodeWorkload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetNodeWorkloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NodeWorkload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.workload.Query/NodeWorkload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NodeWorkload(ctx, req.(*QueryGetNodeWorkloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllNodeWorkloadByEpoch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAllNodeWorkloadByEpochRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllNodeWorkloadByEpoch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.workload.Query/AllNodeWorkloadByEpoch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllNodeWorkloadByEpoch(ctx, req.(*QueryGetAllNodeWorkloadByEpochRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ManagerWRWorkload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetManagerWRWorkloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ManagerWRWorkload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.workload.Query/ManagerWRWorkload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ManagerWRWorkload(ctx, req.(*QueryGetManagerWRWorkloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllManagerWRWorkloadByEpoch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAllManagerWRWorkloadByEpochRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllManagerWRWorkloadByEpoch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.workload.Query/AllManagerWRWorkloadByEpoch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllManagerWRWorkloadByEpoch(ctx, req.(*QueryGetAllManagerWRWorkloadByEpochRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ManagerRPWorkload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetManagerRPWorkloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ManagerRPWorkload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.workload.Query/ManagerRPWorkload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ManagerRPWorkload(ctx, req.(*QueryGetManagerRPWorkloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllManagerRPWorkloadByEra_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAllManagerRPWorkloadByEraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllManagerRPWorkloadByEra(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.workload.Query/AllManagerRPWorkloadByEra",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllManagerRPWorkloadByEra(ctx, req.(*QueryGetAllManagerRPWorkloadByEraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ManagerCSWorkload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetManagerCSWorkloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ManagerCSWorkload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.workload.Query/ManagerCSWorkload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ManagerCSWorkload(ctx, req.(*QueryGetManagerCSWorkloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllManagerCSWorkloadByEra_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAllManagerCSWorkloadByEraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllManagerCSWorkloadByEra(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.workload.Query/AllManagerCSWorkloadByEra",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllManagerCSWorkloadByEra(ctx, req.(*QueryGetAllManagerCSWorkloadByEraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Workreport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetWorkreportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Workreport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.workload.Query/Workreport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Workreport(ctx, req.(*QueryGetWorkreportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllWorkreportByEpoch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAllWorkreportByEpochRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllWorkreportByEpoch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.workload.Query/AllWorkreportByEpoch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllWorkreportByEpoch(ctx, req.(*QueryGetAllWorkreportByEpochRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EpochProcessData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetEpochProcessDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EpochProcessData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.workload.Query/EpochProcessData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EpochProcessData(ctx, req.(*QueryGetEpochProcessDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllEpochProcessData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAllEpochProcessDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllEpochProcessData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.workload.Query/AllEpochProcessData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllEpochProcessData(ctx, req.(*QueryGetAllEpochProcessDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Superior_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSuperiorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Superior(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.workload.Query/Superior",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Superior(ctx, req.(*QueryGetSuperiorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EraLength_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetEraLengthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EraLength(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.workload.Query/EraLength",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EraLength(ctx, req.(*QueryGetEraLengthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CurrentEra_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCurrentEraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CurrentEra(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.workload.Query/CurrentEra",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CurrentEra(ctx, req.(*QueryGetCurrentEraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PendingNextEra_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPendingNextEraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PendingNextEra(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.workload.Query/PendingNextEra",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PendingNextEra(ctx, req.(*QueryGetPendingNextEraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HistoryEra_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetHistoryEraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HistoryEra(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.workload.Query/HistoryEra",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HistoryEra(ctx, req.(*QueryGetHistoryEraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllHistoryEra_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAllHistoryEraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllHistoryEra(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.workload.Query/AllHistoryEra",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllHistoryEra(ctx, req.(*QueryGetAllHistoryEraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ReputationPointChangeData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetReputationPointChangeDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ReputationPointChangeData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.workload.Query/ReputationPointChangeData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ReputationPointChangeData(ctx, req.(*QueryGetReputationPointChangeDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllReputationPointChangeDataByEra_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAllReputationPointChangeDataByEraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllReputationPointChangeDataByEra(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.workload.Query/AllReputationPointChangeDataByEra",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllReputationPointChangeDataByEra(ctx, req.(*QueryGetAllReputationPointChangeDataByEraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ReputationDeltaPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetReputationDeltaPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ReputationDeltaPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.workload.Query/ReputationDeltaPoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ReputationDeltaPoint(ctx, req.(*QueryGetReputationDeltaPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllReputationDeltaPointByEra_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAllReputationDeltaPointByEraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllReputationDeltaPointByEra(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.workload.Query/AllReputationDeltaPointByEra",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllReputationDeltaPointByEra(ctx, req.(*QueryGetAllReputationDeltaPointByEraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EraProcessData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetEraProcessDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EraProcessData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.workload.Query/EraProcessData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EraProcessData(ctx, req.(*QueryGetEraProcessDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllEraProcessData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAllEraProcessDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllEraProcessData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.workload.Query/AllEraProcessData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllEraProcessData(ctx, req.(*QueryGetAllEraProcessDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CheatStatusCRData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCheatStatusCRDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CheatStatusCRData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.workload.Query/CheatStatusCRData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CheatStatusCRData(ctx, req.(*QueryGetCheatStatusCRDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllCheatStatusCRDataByEra_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAllCheatStatusCRDataByEraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllCheatStatusCRDataByEra(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.workload.Query/AllCheatStatusCRDataByEra",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllCheatStatusCRDataByEra(ctx, req.(*QueryGetAllCheatStatusCRDataByEraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EraCheatStatusProcessData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetEraCheatStatusProcessDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EraCheatStatusProcessData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.workload.Query/EraCheatStatusProcessData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EraCheatStatusProcessData(ctx, req.(*QueryGetEraCheatStatusProcessDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllEraCheatStatusProcessData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAllEraCheatStatusProcessDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllEraCheatStatusProcessData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.workload.Query/AllEraCheatStatusProcessData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllEraCheatStatusProcessData(ctx, req.(*QueryGetAllEraCheatStatusProcessDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "enreach.workload.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Param",
			Handler:    _Query_Param_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "EpochLength",
			Handler:    _Query_EpochLength_Handler,
		},
		{
			MethodName: "CurrentEpoch",
			Handler:    _Query_CurrentEpoch_Handler,
		},
		{
			MethodName: "PendingNextEpoch",
			Handler:    _Query_PendingNextEpoch_Handler,
		},
		{
			MethodName: "HistoryEpoch",
			Handler:    _Query_HistoryEpoch_Handler,
		},
		{
			MethodName: "AllHistoryEpoch",
			Handler:    _Query_AllHistoryEpoch_Handler,
		},
		{
			MethodName: "NodeWorkload",
			Handler:    _Query_NodeWorkload_Handler,
		},
		{
			MethodName: "AllNodeWorkloadByEpoch",
			Handler:    _Query_AllNodeWorkloadByEpoch_Handler,
		},
		{
			MethodName: "ManagerWRWorkload",
			Handler:    _Query_ManagerWRWorkload_Handler,
		},
		{
			MethodName: "AllManagerWRWorkloadByEpoch",
			Handler:    _Query_AllManagerWRWorkloadByEpoch_Handler,
		},
		{
			MethodName: "ManagerRPWorkload",
			Handler:    _Query_ManagerRPWorkload_Handler,
		},
		{
			MethodName: "AllManagerRPWorkloadByEra",
			Handler:    _Query_AllManagerRPWorkloadByEra_Handler,
		},
		{
			MethodName: "ManagerCSWorkload",
			Handler:    _Query_ManagerCSWorkload_Handler,
		},
		{
			MethodName: "AllManagerCSWorkloadByEra",
			Handler:    _Query_AllManagerCSWorkloadByEra_Handler,
		},
		{
			MethodName: "Workreport",
			Handler:    _Query_Workreport_Handler,
		},
		{
			MethodName: "AllWorkreportByEpoch",
			Handler:    _Query_AllWorkreportByEpoch_Handler,
		},
		{
			MethodName: "EpochProcessData",
			Handler:    _Query_EpochProcessData_Handler,
		},
		{
			MethodName: "AllEpochProcessData",
			Handler:    _Query_AllEpochProcessData_Handler,
		},
		{
			MethodName: "Superior",
			Handler:    _Query_Superior_Handler,
		},
		{
			MethodName: "EraLength",
			Handler:    _Query_EraLength_Handler,
		},
		{
			MethodName: "CurrentEra",
			Handler:    _Query_CurrentEra_Handler,
		},
		{
			MethodName: "PendingNextEra",
			Handler:    _Query_PendingNextEra_Handler,
		},
		{
			MethodName: "HistoryEra",
			Handler:    _Query_HistoryEra_Handler,
		},
		{
			MethodName: "AllHistoryEra",
			Handler:    _Query_AllHistoryEra_Handler,
		},
		{
			MethodName: "ReputationPointChangeData",
			Handler:    _Query_ReputationPointChangeData_Handler,
		},
		{
			MethodName: "AllReputationPointChangeDataByEra",
			Handler:    _Query_AllReputationPointChangeDataByEra_Handler,
		},
		{
			MethodName: "ReputationDeltaPoint",
			Handler:    _Query_ReputationDeltaPoint_Handler,
		},
		{
			MethodName: "AllReputationDeltaPointByEra",
			Handler:    _Query_AllReputationDeltaPointByEra_Handler,
		},
		{
			MethodName: "EraProcessData",
			Handler:    _Query_EraProcessData_Handler,
		},
		{
			MethodName: "AllEraProcessData",
			Handler:    _Query_AllEraProcessData_Handler,
		},
		{
			MethodName: "CheatStatusCRData",
			Handler:    _Query_CheatStatusCRData_Handler,
		},
		{
			MethodName: "AllCheatStatusCRDataByEra",
			Handler:    _Query_AllCheatStatusCRDataByEra_Handler,
		},
		{
			MethodName: "EraCheatStatusProcessData",
			Handler:    _Query_EraCheatStatusProcessData_Handler,
		},
		{
			MethodName: "AllEraCheatStatusProcessData",
			Handler:    _Query_AllEraCheatStatusProcessData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "enreach/workload/query.proto",
}

func (m *QueryParamRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ParamKey) > 0 {
		i -= len(m.ParamKey)
		copy(dAtA[i:], m.ParamKey)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ParamKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ParamValue) > 0 {
		i -= len(m.ParamValue)
		copy(dAtA[i:], m.ParamValue)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ParamValue)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetEpochLengthRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEpochLengthRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEpochLengthRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetEpochLengthResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEpochLengthResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEpochLengthResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EpochLength != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EpochLength))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCurrentEpochRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCurrentEpochRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCurrentEpochRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetCurrentEpochResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCurrentEpochResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCurrentEpochResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.EpochInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetPendingNextEpochRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPendingNextEpochRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPendingNextEpochRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetPendingNextEpochResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPendingNextEpochResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPendingNextEpochResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.EpochInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetHistoryEpochRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetHistoryEpochRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetHistoryEpochRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EpochNumber != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EpochNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetHistoryEpochResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetHistoryEpochResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetHistoryEpochResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.EpochInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetAllHistoryEpochRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllHistoryEpochRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllHistoryEpochRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllHistoryEpochResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllHistoryEpochResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllHistoryEpochResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.EpochInfos) > 0 {
		for iNdEx := len(m.EpochInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EpochInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNodeWorkloadRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNodeWorkloadRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNodeWorkloadRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NodeID) > 0 {
		i -= len(m.NodeID)
		copy(dAtA[i:], m.NodeID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.NodeID)))
		i--
		dAtA[i] = 0x12
	}
	if m.Epoch != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNodeWorkloadResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNodeWorkloadResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNodeWorkloadResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.NodeWorkload.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetAllNodeWorkloadByEpochRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllNodeWorkloadByEpochRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllNodeWorkloadByEpochRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Epoch != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllNodeWorkloadByEpochResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllNodeWorkloadByEpochResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllNodeWorkloadByEpochResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NodeWorkloads) > 0 {
		for iNdEx := len(m.NodeWorkloads) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NodeWorkloads[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetManagerWRWorkloadRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetManagerWRWorkloadRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetManagerWRWorkloadRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ManagerAccount) > 0 {
		i -= len(m.ManagerAccount)
		copy(dAtA[i:], m.ManagerAccount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ManagerAccount)))
		i--
		dAtA[i] = 0x12
	}
	if m.Epoch != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetManagerWRWorkloadResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetManagerWRWorkloadResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetManagerWRWorkloadResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ManagerWRWorkload.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetAllManagerWRWorkloadByEpochRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllManagerWRWorkloadByEpochRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllManagerWRWorkloadByEpochRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Epoch != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllManagerWRWorkloadByEpochResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllManagerWRWorkloadByEpochResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllManagerWRWorkloadByEpochResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ManagerWRWorkloads) > 0 {
		for iNdEx := len(m.ManagerWRWorkloads) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ManagerWRWorkloads[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetManagerRPWorkloadRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetManagerRPWorkloadRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetManagerRPWorkloadRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ManagerAccount) > 0 {
		i -= len(m.ManagerAccount)
		copy(dAtA[i:], m.ManagerAccount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ManagerAccount)))
		i--
		dAtA[i] = 0x12
	}
	if m.Era != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Era))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetManagerRPWorkloadResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetManagerRPWorkloadResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetManagerRPWorkloadResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ManagerRPWorkload.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetAllManagerRPWorkloadByEraRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllManagerRPWorkloadByEraRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllManagerRPWorkloadByEraRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Era != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Era))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllManagerRPWorkloadByEraResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllManagerRPWorkloadByEraResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllManagerRPWorkloadByEraResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ManagerRPWorkloads) > 0 {
		for iNdEx := len(m.ManagerRPWorkloads) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ManagerRPWorkloads[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetManagerCSWorkloadRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetManagerCSWorkloadRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetManagerCSWorkloadRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ManagerAccount) > 0 {
		i -= len(m.ManagerAccount)
		copy(dAtA[i:], m.ManagerAccount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ManagerAccount)))
		i--
		dAtA[i] = 0x12
	}
	if m.Era != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Era))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetManagerCSWorkloadResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetManagerCSWorkloadResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetManagerCSWorkloadResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ManagerCSWorkload.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetAllManagerCSWorkloadByEraRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllManagerCSWorkloadByEraRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllManagerCSWorkloadByEraRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Era != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Era))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllManagerCSWorkloadByEraResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllManagerCSWorkloadByEraResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllManagerCSWorkloadByEraResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ManagerCSWorkloads) > 0 {
		for iNdEx := len(m.ManagerCSWorkloads) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ManagerCSWorkloads[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetWorkreportRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetWorkreportRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetWorkreportRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NodeID) > 0 {
		i -= len(m.NodeID)
		copy(dAtA[i:], m.NodeID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.NodeID)))
		i--
		dAtA[i] = 0x12
	}
	if m.Epoch != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetWorkreportResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetWorkreportResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetWorkreportResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Workreport.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetAllWorkreportByEpochRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllWorkreportByEpochRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllWorkreportByEpochRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Epoch != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllWorkreportByEpochResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllWorkreportByEpochResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllWorkreportByEpochResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Workreports) > 0 {
		for iNdEx := len(m.Workreports) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Workreports[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEpochProcessDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEpochProcessDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEpochProcessDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Epoch != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEpochProcessDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEpochProcessDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEpochProcessDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.EpochProcessData.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetAllEpochProcessDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllEpochProcessDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllEpochProcessDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllEpochProcessDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllEpochProcessDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllEpochProcessDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.EpochProcessDatas) > 0 {
		for iNdEx := len(m.EpochProcessDatas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EpochProcessDatas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSuperiorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSuperiorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSuperiorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetSuperiorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSuperiorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSuperiorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Superior.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetEraLengthRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEraLengthRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEraLengthRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetEraLengthResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEraLengthResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEraLengthResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EraLength != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EraLength))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCurrentEraRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCurrentEraRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCurrentEraRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetCurrentEraResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCurrentEraResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCurrentEraResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.EraInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetPendingNextEraRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPendingNextEraRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPendingNextEraRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetPendingNextEraResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPendingNextEraResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPendingNextEraResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.EraInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetHistoryEraRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetHistoryEraRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetHistoryEraRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EraNumber != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EraNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetHistoryEraResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetHistoryEraResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetHistoryEraResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.EraInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetAllHistoryEraRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllHistoryEraRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllHistoryEraRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllHistoryEraResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllHistoryEraResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllHistoryEraResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.EraInfos) > 0 {
		for iNdEx := len(m.EraInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EraInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetReputationPointChangeDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetReputationPointChangeDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetReputationPointChangeDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NodeID) > 0 {
		i -= len(m.NodeID)
		copy(dAtA[i:], m.NodeID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.NodeID)))
		i--
		dAtA[i] = 0x12
	}
	if m.Era != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Era))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetReputationPointChangeDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetReputationPointChangeDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetReputationPointChangeDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ReputationPointChangeData.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetAllReputationPointChangeDataByEraRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllReputationPointChangeDataByEraRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllReputationPointChangeDataByEraRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Era != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Era))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllReputationPointChangeDataByEraResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllReputationPointChangeDataByEraResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllReputationPointChangeDataByEraResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ReputationPointChangeDatas) > 0 {
		for iNdEx := len(m.ReputationPointChangeDatas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReputationPointChangeDatas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetReputationDeltaPointRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetReputationDeltaPointRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetReputationDeltaPointRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NodeID) > 0 {
		i -= len(m.NodeID)
		copy(dAtA[i:], m.NodeID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.NodeID)))
		i--
		dAtA[i] = 0x12
	}
	if m.Era != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Era))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetReputationDeltaPointResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetReputationDeltaPointResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetReputationDeltaPointResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ReputationDeltaPoint.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetAllReputationDeltaPointByEraRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllReputationDeltaPointByEraRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllReputationDeltaPointByEraRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Era != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Era))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllReputationDeltaPointByEraResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllReputationDeltaPointByEraResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllReputationDeltaPointByEraResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ReputationDeltaPoints) > 0 {
		for iNdEx := len(m.ReputationDeltaPoints) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReputationDeltaPoints[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEraProcessDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEraProcessDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEraProcessDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Era != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Era))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEraProcessDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEraProcessDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEraProcessDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.EraProcessData.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetAllEraProcessDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllEraProcessDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllEraProcessDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllEraProcessDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllEraProcessDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllEraProcessDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.EraProcessDatas) > 0 {
		for iNdEx := len(m.EraProcessDatas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EraProcessDatas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCheatStatusCRDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCheatStatusCRDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCheatStatusCRDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NodeID) > 0 {
		i -= len(m.NodeID)
		copy(dAtA[i:], m.NodeID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.NodeID)))
		i--
		dAtA[i] = 0x12
	}
	if m.Era != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Era))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCheatStatusCRDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCheatStatusCRDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCheatStatusCRDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CheatStatusCRData.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetAllCheatStatusCRDataByEraRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllCheatStatusCRDataByEraRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllCheatStatusCRDataByEraRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Era != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Era))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllCheatStatusCRDataByEraResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllCheatStatusCRDataByEraResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllCheatStatusCRDataByEraResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CheatStatusCRDatas) > 0 {
		for iNdEx := len(m.CheatStatusCRDatas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CheatStatusCRDatas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEraCheatStatusProcessDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEraCheatStatusProcessDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEraCheatStatusProcessDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Era != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Era))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEraCheatStatusProcessDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEraCheatStatusProcessDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEraCheatStatusProcessDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.EraCheatStatusProcessData.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetAllEraCheatStatusProcessDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllEraCheatStatusProcessDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllEraCheatStatusProcessDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllEraCheatStatusProcessDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllEraCheatStatusProcessDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllEraCheatStatusProcessDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.EraCheatStatusProcessDatas) > 0 {
		for iNdEx := len(m.EraCheatStatusProcessDatas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EraCheatStatusProcessDatas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ParamKey)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryParamResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ParamValue)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetEpochLengthRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetEpochLengthResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochLength != 0 {
		n += 1 + sovQuery(uint64(m.EpochLength))
	}
	return n
}

func (m *QueryGetCurrentEpochRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetCurrentEpochResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.EpochInfo.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetPendingNextEpochRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetPendingNextEpochResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.EpochInfo.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetHistoryEpochRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochNumber != 0 {
		n += 1 + sovQuery(uint64(m.EpochNumber))
	}
	return n
}

func (m *QueryGetHistoryEpochResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.EpochInfo.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetAllHistoryEpochRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAllHistoryEpochResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EpochInfos) > 0 {
		for _, e := range m.EpochInfos {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetNodeWorkloadRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovQuery(uint64(m.Epoch))
	}
	l = len(m.NodeID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetNodeWorkloadResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.NodeWorkload.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetAllNodeWorkloadByEpochRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovQuery(uint64(m.Epoch))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAllNodeWorkloadByEpochResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NodeWorkloads) > 0 {
		for _, e := range m.NodeWorkloads {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetManagerWRWorkloadRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovQuery(uint64(m.Epoch))
	}
	l = len(m.ManagerAccount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetManagerWRWorkloadResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ManagerWRWorkload.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetAllManagerWRWorkloadByEpochRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovQuery(uint64(m.Epoch))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAllManagerWRWorkloadByEpochResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ManagerWRWorkloads) > 0 {
		for _, e := range m.ManagerWRWorkloads {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetManagerRPWorkloadRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Era != 0 {
		n += 1 + sovQuery(uint64(m.Era))
	}
	l = len(m.ManagerAccount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetManagerRPWorkloadResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ManagerRPWorkload.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetAllManagerRPWorkloadByEraRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Era != 0 {
		n += 1 + sovQuery(uint64(m.Era))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAllManagerRPWorkloadByEraResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ManagerRPWorkloads) > 0 {
		for _, e := range m.ManagerRPWorkloads {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetManagerCSWorkloadRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Era != 0 {
		n += 1 + sovQuery(uint64(m.Era))
	}
	l = len(m.ManagerAccount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetManagerCSWorkloadResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ManagerCSWorkload.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetAllManagerCSWorkloadByEraRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Era != 0 {
		n += 1 + sovQuery(uint64(m.Era))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAllManagerCSWorkloadByEraResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ManagerCSWorkloads) > 0 {
		for _, e := range m.ManagerCSWorkloads {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetWorkreportRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovQuery(uint64(m.Epoch))
	}
	l = len(m.NodeID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetWorkreportResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Workreport.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetAllWorkreportByEpochRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovQuery(uint64(m.Epoch))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAllWorkreportByEpochResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Workreports) > 0 {
		for _, e := range m.Workreports {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetEpochProcessDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovQuery(uint64(m.Epoch))
	}
	return n
}

func (m *QueryGetEpochProcessDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.EpochProcessData.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetAllEpochProcessDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAllEpochProcessDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EpochProcessDatas) > 0 {
		for _, e := range m.EpochProcessDatas {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSuperiorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetSuperiorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Superior.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetEraLengthRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetEraLengthResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EraLength != 0 {
		n += 1 + sovQuery(uint64(m.EraLength))
	}
	return n
}

func (m *QueryGetCurrentEraRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetCurrentEraResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.EraInfo.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetPendingNextEraRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetPendingNextEraResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.EraInfo.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetHistoryEraRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EraNumber != 0 {
		n += 1 + sovQuery(uint64(m.EraNumber))
	}
	return n
}

func (m *QueryGetHistoryEraResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.EraInfo.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetAllHistoryEraRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAllHistoryEraResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EraInfos) > 0 {
		for _, e := range m.EraInfos {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetReputationPointChangeDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Era != 0 {
		n += 1 + sovQuery(uint64(m.Era))
	}
	l = len(m.NodeID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetReputationPointChangeDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ReputationPointChangeData.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetAllReputationPointChangeDataByEraRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Era != 0 {
		n += 1 + sovQuery(uint64(m.Era))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAllReputationPointChangeDataByEraResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ReputationPointChangeDatas) > 0 {
		for _, e := range m.ReputationPointChangeDatas {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetReputationDeltaPointRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Era != 0 {
		n += 1 + sovQuery(uint64(m.Era))
	}
	l = len(m.NodeID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetReputationDeltaPointResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ReputationDeltaPoint.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetAllReputationDeltaPointByEraRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Era != 0 {
		n += 1 + sovQuery(uint64(m.Era))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAllReputationDeltaPointByEraResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ReputationDeltaPoints) > 0 {
		for _, e := range m.ReputationDeltaPoints {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetEraProcessDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Era != 0 {
		n += 1 + sovQuery(uint64(m.Era))
	}
	return n
}

func (m *QueryGetEraProcessDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.EraProcessData.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetAllEraProcessDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAllEraProcessDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EraProcessDatas) > 0 {
		for _, e := range m.EraProcessDatas {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCheatStatusCRDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Era != 0 {
		n += 1 + sovQuery(uint64(m.Era))
	}
	l = len(m.NodeID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCheatStatusCRDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CheatStatusCRData.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetAllCheatStatusCRDataByEraRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Era != 0 {
		n += 1 + sovQuery(uint64(m.Era))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAllCheatStatusCRDataByEraResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CheatStatusCRDatas) > 0 {
		for _, e := range m.CheatStatusCRDatas {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetEraCheatStatusProcessDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Era != 0 {
		n += 1 + sovQuery(uint64(m.Era))
	}
	return n
}

func (m *QueryGetEraCheatStatusProcessDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.EraCheatStatusProcessData.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetAllEraCheatStatusProcessDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAllEraCheatStatusProcessDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EraCheatStatusProcessDatas) > 0 {
		for _, e := range m.EraCheatStatusProcessDatas {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParamKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParamKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParamValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParamValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEpochLengthRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEpochLengthRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEpochLengthRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEpochLengthResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEpochLengthResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEpochLengthResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochLength", wireType)
			}
			m.EpochLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochLength |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCurrentEpochRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCurrentEpochRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCurrentEpochRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCurrentEpochResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCurrentEpochResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCurrentEpochResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EpochInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPendingNextEpochRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPendingNextEpochRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPendingNextEpochRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPendingNextEpochResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPendingNextEpochResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPendingNextEpochResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EpochInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetHistoryEpochRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetHistoryEpochRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetHistoryEpochRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochNumber", wireType)
			}
			m.EpochNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetHistoryEpochResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetHistoryEpochResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetHistoryEpochResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EpochInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllHistoryEpochRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllHistoryEpochRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllHistoryEpochRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllHistoryEpochResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllHistoryEpochResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllHistoryEpochResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EpochInfos = append(m.EpochInfos, EpochInfo{})
			if err := m.EpochInfos[len(m.EpochInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNodeWorkloadRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNodeWorkloadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNodeWorkloadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNodeWorkloadResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNodeWorkloadResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNodeWorkloadResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeWorkload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NodeWorkload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllNodeWorkloadByEpochRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllNodeWorkloadByEpochRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllNodeWorkloadByEpochRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllNodeWorkloadByEpochResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllNodeWorkloadByEpochResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllNodeWorkloadByEpochResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeWorkloads", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeWorkloads = append(m.NodeWorkloads, NodeWorkload{})
			if err := m.NodeWorkloads[len(m.NodeWorkloads)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetManagerWRWorkloadRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetManagerWRWorkloadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetManagerWRWorkloadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagerAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ManagerAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetManagerWRWorkloadResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetManagerWRWorkloadResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetManagerWRWorkloadResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagerWRWorkload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ManagerWRWorkload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllManagerWRWorkloadByEpochRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllManagerWRWorkloadByEpochRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllManagerWRWorkloadByEpochRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllManagerWRWorkloadByEpochResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllManagerWRWorkloadByEpochResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllManagerWRWorkloadByEpochResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagerWRWorkloads", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ManagerWRWorkloads = append(m.ManagerWRWorkloads, ManagerWRWorkload{})
			if err := m.ManagerWRWorkloads[len(m.ManagerWRWorkloads)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetManagerRPWorkloadRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetManagerRPWorkloadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetManagerRPWorkloadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Era", wireType)
			}
			m.Era = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Era |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagerAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ManagerAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetManagerRPWorkloadResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetManagerRPWorkloadResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetManagerRPWorkloadResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagerRPWorkload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ManagerRPWorkload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllManagerRPWorkloadByEraRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllManagerRPWorkloadByEraRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllManagerRPWorkloadByEraRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Era", wireType)
			}
			m.Era = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Era |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllManagerRPWorkloadByEraResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllManagerRPWorkloadByEraResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllManagerRPWorkloadByEraResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagerRPWorkloads", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ManagerRPWorkloads = append(m.ManagerRPWorkloads, ManagerRPWorkload{})
			if err := m.ManagerRPWorkloads[len(m.ManagerRPWorkloads)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetManagerCSWorkloadRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetManagerCSWorkloadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetManagerCSWorkloadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Era", wireType)
			}
			m.Era = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Era |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagerAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ManagerAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetManagerCSWorkloadResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetManagerCSWorkloadResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetManagerCSWorkloadResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagerCSWorkload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ManagerCSWorkload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllManagerCSWorkloadByEraRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllManagerCSWorkloadByEraRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllManagerCSWorkloadByEraRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Era", wireType)
			}
			m.Era = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Era |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllManagerCSWorkloadByEraResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllManagerCSWorkloadByEraResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllManagerCSWorkloadByEraResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagerCSWorkloads", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ManagerCSWorkloads = append(m.ManagerCSWorkloads, ManagerCSWorkload{})
			if err := m.ManagerCSWorkloads[len(m.ManagerCSWorkloads)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetWorkreportRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetWorkreportRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetWorkreportRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetWorkreportResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetWorkreportResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetWorkreportResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workreport", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Workreport.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllWorkreportByEpochRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllWorkreportByEpochRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllWorkreportByEpochRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllWorkreportByEpochResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllWorkreportByEpochResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllWorkreportByEpochResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workreports", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Workreports = append(m.Workreports, Workreport{})
			if err := m.Workreports[len(m.Workreports)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEpochProcessDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEpochProcessDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEpochProcessDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEpochProcessDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEpochProcessDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEpochProcessDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochProcessData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EpochProcessData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllEpochProcessDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllEpochProcessDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllEpochProcessDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllEpochProcessDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllEpochProcessDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllEpochProcessDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochProcessDatas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EpochProcessDatas = append(m.EpochProcessDatas, EpochProcessData{})
			if err := m.EpochProcessDatas[len(m.EpochProcessDatas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSuperiorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSuperiorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSuperiorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSuperiorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSuperiorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSuperiorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Superior", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Superior.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEraLengthRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEraLengthRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEraLengthRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEraLengthResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEraLengthResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEraLengthResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EraLength", wireType)
			}
			m.EraLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EraLength |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCurrentEraRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCurrentEraRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCurrentEraRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCurrentEraResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCurrentEraResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCurrentEraResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EraInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EraInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPendingNextEraRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPendingNextEraRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPendingNextEraRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPendingNextEraResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPendingNextEraResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPendingNextEraResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EraInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EraInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetHistoryEraRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetHistoryEraRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetHistoryEraRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EraNumber", wireType)
			}
			m.EraNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EraNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetHistoryEraResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetHistoryEraResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetHistoryEraResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EraInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EraInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllHistoryEraRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllHistoryEraRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllHistoryEraRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllHistoryEraResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllHistoryEraResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllHistoryEraResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EraInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EraInfos = append(m.EraInfos, EraInfo{})
			if err := m.EraInfos[len(m.EraInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetReputationPointChangeDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetReputationPointChangeDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetReputationPointChangeDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Era", wireType)
			}
			m.Era = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Era |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetReputationPointChangeDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetReputationPointChangeDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetReputationPointChangeDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReputationPointChangeData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReputationPointChangeData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllReputationPointChangeDataByEraRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllReputationPointChangeDataByEraRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllReputationPointChangeDataByEraRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Era", wireType)
			}
			m.Era = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Era |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllReputationPointChangeDataByEraResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllReputationPointChangeDataByEraResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllReputationPointChangeDataByEraResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReputationPointChangeDatas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReputationPointChangeDatas = append(m.ReputationPointChangeDatas, ReputationPointChangeData{})
			if err := m.ReputationPointChangeDatas[len(m.ReputationPointChangeDatas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetReputationDeltaPointRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetReputationDeltaPointRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetReputationDeltaPointRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Era", wireType)
			}
			m.Era = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Era |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetReputationDeltaPointResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetReputationDeltaPointResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetReputationDeltaPointResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReputationDeltaPoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReputationDeltaPoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllReputationDeltaPointByEraRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllReputationDeltaPointByEraRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllReputationDeltaPointByEraRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Era", wireType)
			}
			m.Era = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Era |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllReputationDeltaPointByEraResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllReputationDeltaPointByEraResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllReputationDeltaPointByEraResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReputationDeltaPoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReputationDeltaPoints = append(m.ReputationDeltaPoints, ReputationDeltaPoint{})
			if err := m.ReputationDeltaPoints[len(m.ReputationDeltaPoints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEraProcessDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEraProcessDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEraProcessDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Era", wireType)
			}
			m.Era = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Era |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEraProcessDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEraProcessDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEraProcessDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EraProcessData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EraProcessData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllEraProcessDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllEraProcessDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllEraProcessDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllEraProcessDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllEraProcessDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllEraProcessDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EraProcessDatas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EraProcessDatas = append(m.EraProcessDatas, EraProcessData{})
			if err := m.EraProcessDatas[len(m.EraProcessDatas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCheatStatusCRDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCheatStatusCRDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCheatStatusCRDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Era", wireType)
			}
			m.Era = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Era |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCheatStatusCRDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCheatStatusCRDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCheatStatusCRDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheatStatusCRData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CheatStatusCRData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllCheatStatusCRDataByEraRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllCheatStatusCRDataByEraRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllCheatStatusCRDataByEraRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Era", wireType)
			}
			m.Era = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Era |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllCheatStatusCRDataByEraResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllCheatStatusCRDataByEraResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllCheatStatusCRDataByEraResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheatStatusCRDatas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CheatStatusCRDatas = append(m.CheatStatusCRDatas, CheatStatusCRData{})
			if err := m.CheatStatusCRDatas[len(m.CheatStatusCRDatas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEraCheatStatusProcessDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEraCheatStatusProcessDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEraCheatStatusProcessDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Era", wireType)
			}
			m.Era = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Era |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEraCheatStatusProcessDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEraCheatStatusProcessDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEraCheatStatusProcessDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EraCheatStatusProcessData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EraCheatStatusProcessData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllEraCheatStatusProcessDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllEraCheatStatusProcessDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllEraCheatStatusProcessDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllEraCheatStatusProcessDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllEraCheatStatusProcessDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllEraCheatStatusProcessDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EraCheatStatusProcessDatas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EraCheatStatusProcessDatas = append(m.EraCheatStatusProcessDatas, EraCheatStatusProcessData{})
			if err := m.EraCheatStatusProcessDatas[len(m.EraCheatStatusProcessDatas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
