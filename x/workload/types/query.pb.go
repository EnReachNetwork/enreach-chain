// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: enreach/workload/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetEpochLengthRequest struct {
}

func (m *QueryGetEpochLengthRequest) Reset()         { *m = QueryGetEpochLengthRequest{} }
func (m *QueryGetEpochLengthRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetEpochLengthRequest) ProtoMessage()    {}
func (*QueryGetEpochLengthRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{2}
}
func (m *QueryGetEpochLengthRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEpochLengthRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEpochLengthRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEpochLengthRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEpochLengthRequest.Merge(m, src)
}
func (m *QueryGetEpochLengthRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEpochLengthRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEpochLengthRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEpochLengthRequest proto.InternalMessageInfo

type QueryGetEpochLengthResponse struct {
	EpochLength uint64 `protobuf:"varint,1,opt,name=epochLength,proto3" json:"epochLength,omitempty"`
}

func (m *QueryGetEpochLengthResponse) Reset()         { *m = QueryGetEpochLengthResponse{} }
func (m *QueryGetEpochLengthResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetEpochLengthResponse) ProtoMessage()    {}
func (*QueryGetEpochLengthResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{3}
}
func (m *QueryGetEpochLengthResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEpochLengthResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEpochLengthResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEpochLengthResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEpochLengthResponse.Merge(m, src)
}
func (m *QueryGetEpochLengthResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEpochLengthResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEpochLengthResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEpochLengthResponse proto.InternalMessageInfo

func (m *QueryGetEpochLengthResponse) GetEpochLength() uint64 {
	if m != nil {
		return m.EpochLength
	}
	return 0
}

type QueryGetCurrentEpochRequest struct {
}

func (m *QueryGetCurrentEpochRequest) Reset()         { *m = QueryGetCurrentEpochRequest{} }
func (m *QueryGetCurrentEpochRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCurrentEpochRequest) ProtoMessage()    {}
func (*QueryGetCurrentEpochRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{4}
}
func (m *QueryGetCurrentEpochRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCurrentEpochRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCurrentEpochRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCurrentEpochRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCurrentEpochRequest.Merge(m, src)
}
func (m *QueryGetCurrentEpochRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCurrentEpochRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCurrentEpochRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCurrentEpochRequest proto.InternalMessageInfo

type QueryGetCurrentEpochResponse struct {
	CurrentEpoch uint64 `protobuf:"varint,1,opt,name=currentEpoch,proto3" json:"currentEpoch,omitempty"`
}

func (m *QueryGetCurrentEpochResponse) Reset()         { *m = QueryGetCurrentEpochResponse{} }
func (m *QueryGetCurrentEpochResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCurrentEpochResponse) ProtoMessage()    {}
func (*QueryGetCurrentEpochResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{5}
}
func (m *QueryGetCurrentEpochResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCurrentEpochResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCurrentEpochResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCurrentEpochResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCurrentEpochResponse.Merge(m, src)
}
func (m *QueryGetCurrentEpochResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCurrentEpochResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCurrentEpochResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCurrentEpochResponse proto.InternalMessageInfo

func (m *QueryGetCurrentEpochResponse) GetCurrentEpoch() uint64 {
	if m != nil {
		return m.CurrentEpoch
	}
	return 0
}

type QueryGetNodeWorkloadRequest struct {
	Epoch  uint64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	NodeID string `protobuf:"bytes,2,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
}

func (m *QueryGetNodeWorkloadRequest) Reset()         { *m = QueryGetNodeWorkloadRequest{} }
func (m *QueryGetNodeWorkloadRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetNodeWorkloadRequest) ProtoMessage()    {}
func (*QueryGetNodeWorkloadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{6}
}
func (m *QueryGetNodeWorkloadRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNodeWorkloadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNodeWorkloadRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNodeWorkloadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNodeWorkloadRequest.Merge(m, src)
}
func (m *QueryGetNodeWorkloadRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNodeWorkloadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNodeWorkloadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNodeWorkloadRequest proto.InternalMessageInfo

func (m *QueryGetNodeWorkloadRequest) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *QueryGetNodeWorkloadRequest) GetNodeID() string {
	if m != nil {
		return m.NodeID
	}
	return ""
}

type QueryGetNodeWorkloadResponse struct {
	NodeWorkload NodeWorkload `protobuf:"bytes,1,opt,name=NodeWorkload,proto3" json:"NodeWorkload"`
}

func (m *QueryGetNodeWorkloadResponse) Reset()         { *m = QueryGetNodeWorkloadResponse{} }
func (m *QueryGetNodeWorkloadResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetNodeWorkloadResponse) ProtoMessage()    {}
func (*QueryGetNodeWorkloadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{7}
}
func (m *QueryGetNodeWorkloadResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNodeWorkloadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNodeWorkloadResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNodeWorkloadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNodeWorkloadResponse.Merge(m, src)
}
func (m *QueryGetNodeWorkloadResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNodeWorkloadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNodeWorkloadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNodeWorkloadResponse proto.InternalMessageInfo

func (m *QueryGetNodeWorkloadResponse) GetNodeWorkload() NodeWorkload {
	if m != nil {
		return m.NodeWorkload
	}
	return NodeWorkload{}
}

type QueryGetAllNodeWorkloadByEpochRequest struct {
	Epoch      uint64             `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllNodeWorkloadByEpochRequest) Reset()         { *m = QueryGetAllNodeWorkloadByEpochRequest{} }
func (m *QueryGetAllNodeWorkloadByEpochRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllNodeWorkloadByEpochRequest) ProtoMessage()    {}
func (*QueryGetAllNodeWorkloadByEpochRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{8}
}
func (m *QueryGetAllNodeWorkloadByEpochRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllNodeWorkloadByEpochRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllNodeWorkloadByEpochRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllNodeWorkloadByEpochRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllNodeWorkloadByEpochRequest.Merge(m, src)
}
func (m *QueryGetAllNodeWorkloadByEpochRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllNodeWorkloadByEpochRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllNodeWorkloadByEpochRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllNodeWorkloadByEpochRequest proto.InternalMessageInfo

func (m *QueryGetAllNodeWorkloadByEpochRequest) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *QueryGetAllNodeWorkloadByEpochRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetAllNodeWorkloadByEpochResponse struct {
	NodeWorkloads []NodeWorkload      `protobuf:"bytes,1,rep,name=NodeWorkloads,proto3" json:"NodeWorkloads"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllNodeWorkloadByEpochResponse) Reset() {
	*m = QueryGetAllNodeWorkloadByEpochResponse{}
}
func (m *QueryGetAllNodeWorkloadByEpochResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllNodeWorkloadByEpochResponse) ProtoMessage()    {}
func (*QueryGetAllNodeWorkloadByEpochResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{9}
}
func (m *QueryGetAllNodeWorkloadByEpochResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllNodeWorkloadByEpochResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllNodeWorkloadByEpochResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllNodeWorkloadByEpochResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllNodeWorkloadByEpochResponse.Merge(m, src)
}
func (m *QueryGetAllNodeWorkloadByEpochResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllNodeWorkloadByEpochResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllNodeWorkloadByEpochResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllNodeWorkloadByEpochResponse proto.InternalMessageInfo

func (m *QueryGetAllNodeWorkloadByEpochResponse) GetNodeWorkloads() []NodeWorkload {
	if m != nil {
		return m.NodeWorkloads
	}
	return nil
}

func (m *QueryGetAllNodeWorkloadByEpochResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetManagerWorkloadRequest struct {
	Epoch          uint64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	ManagerAccount string `protobuf:"bytes,2,opt,name=managerAccount,proto3" json:"managerAccount,omitempty"`
}

func (m *QueryGetManagerWorkloadRequest) Reset()         { *m = QueryGetManagerWorkloadRequest{} }
func (m *QueryGetManagerWorkloadRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetManagerWorkloadRequest) ProtoMessage()    {}
func (*QueryGetManagerWorkloadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{10}
}
func (m *QueryGetManagerWorkloadRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetManagerWorkloadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetManagerWorkloadRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetManagerWorkloadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetManagerWorkloadRequest.Merge(m, src)
}
func (m *QueryGetManagerWorkloadRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetManagerWorkloadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetManagerWorkloadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetManagerWorkloadRequest proto.InternalMessageInfo

func (m *QueryGetManagerWorkloadRequest) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *QueryGetManagerWorkloadRequest) GetManagerAccount() string {
	if m != nil {
		return m.ManagerAccount
	}
	return ""
}

type QueryGetManagerWorkloadResponse struct {
	ManagerWorkload ManagerWorkload `protobuf:"bytes,1,opt,name=ManagerWorkload,proto3" json:"ManagerWorkload"`
}

func (m *QueryGetManagerWorkloadResponse) Reset()         { *m = QueryGetManagerWorkloadResponse{} }
func (m *QueryGetManagerWorkloadResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetManagerWorkloadResponse) ProtoMessage()    {}
func (*QueryGetManagerWorkloadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{11}
}
func (m *QueryGetManagerWorkloadResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetManagerWorkloadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetManagerWorkloadResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetManagerWorkloadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetManagerWorkloadResponse.Merge(m, src)
}
func (m *QueryGetManagerWorkloadResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetManagerWorkloadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetManagerWorkloadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetManagerWorkloadResponse proto.InternalMessageInfo

func (m *QueryGetManagerWorkloadResponse) GetManagerWorkload() ManagerWorkload {
	if m != nil {
		return m.ManagerWorkload
	}
	return ManagerWorkload{}
}

type QueryGetAllManagerWorkloadByEpochRequest struct {
	Epoch      uint64             `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllManagerWorkloadByEpochRequest) Reset() {
	*m = QueryGetAllManagerWorkloadByEpochRequest{}
}
func (m *QueryGetAllManagerWorkloadByEpochRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllManagerWorkloadByEpochRequest) ProtoMessage()    {}
func (*QueryGetAllManagerWorkloadByEpochRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{12}
}
func (m *QueryGetAllManagerWorkloadByEpochRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllManagerWorkloadByEpochRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllManagerWorkloadByEpochRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllManagerWorkloadByEpochRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllManagerWorkloadByEpochRequest.Merge(m, src)
}
func (m *QueryGetAllManagerWorkloadByEpochRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllManagerWorkloadByEpochRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllManagerWorkloadByEpochRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllManagerWorkloadByEpochRequest proto.InternalMessageInfo

func (m *QueryGetAllManagerWorkloadByEpochRequest) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *QueryGetAllManagerWorkloadByEpochRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetAllManagerWorkloadByEpochResponse struct {
	ManagerWorkloads []ManagerWorkload   `protobuf:"bytes,1,rep,name=ManagerWorkloads,proto3" json:"ManagerWorkloads"`
	Pagination       *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllManagerWorkloadByEpochResponse) Reset() {
	*m = QueryGetAllManagerWorkloadByEpochResponse{}
}
func (m *QueryGetAllManagerWorkloadByEpochResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetAllManagerWorkloadByEpochResponse) ProtoMessage() {}
func (*QueryGetAllManagerWorkloadByEpochResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{13}
}
func (m *QueryGetAllManagerWorkloadByEpochResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllManagerWorkloadByEpochResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllManagerWorkloadByEpochResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllManagerWorkloadByEpochResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllManagerWorkloadByEpochResponse.Merge(m, src)
}
func (m *QueryGetAllManagerWorkloadByEpochResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllManagerWorkloadByEpochResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllManagerWorkloadByEpochResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllManagerWorkloadByEpochResponse proto.InternalMessageInfo

func (m *QueryGetAllManagerWorkloadByEpochResponse) GetManagerWorkloads() []ManagerWorkload {
	if m != nil {
		return m.ManagerWorkloads
	}
	return nil
}

func (m *QueryGetAllManagerWorkloadByEpochResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetWorkreportRequest struct {
	Epoch  uint64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	NodeID string `protobuf:"bytes,2,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
}

func (m *QueryGetWorkreportRequest) Reset()         { *m = QueryGetWorkreportRequest{} }
func (m *QueryGetWorkreportRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetWorkreportRequest) ProtoMessage()    {}
func (*QueryGetWorkreportRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{14}
}
func (m *QueryGetWorkreportRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetWorkreportRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetWorkreportRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetWorkreportRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetWorkreportRequest.Merge(m, src)
}
func (m *QueryGetWorkreportRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetWorkreportRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetWorkreportRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetWorkreportRequest proto.InternalMessageInfo

func (m *QueryGetWorkreportRequest) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *QueryGetWorkreportRequest) GetNodeID() string {
	if m != nil {
		return m.NodeID
	}
	return ""
}

type QueryGetWorkreportResponse struct {
	Workreport Workreport `protobuf:"bytes,1,opt,name=Workreport,proto3" json:"Workreport"`
}

func (m *QueryGetWorkreportResponse) Reset()         { *m = QueryGetWorkreportResponse{} }
func (m *QueryGetWorkreportResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetWorkreportResponse) ProtoMessage()    {}
func (*QueryGetWorkreportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{15}
}
func (m *QueryGetWorkreportResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetWorkreportResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetWorkreportResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetWorkreportResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetWorkreportResponse.Merge(m, src)
}
func (m *QueryGetWorkreportResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetWorkreportResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetWorkreportResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetWorkreportResponse proto.InternalMessageInfo

func (m *QueryGetWorkreportResponse) GetWorkreport() Workreport {
	if m != nil {
		return m.Workreport
	}
	return Workreport{}
}

type QueryGetAllWorkreportByEpochRequest struct {
	Epoch      uint64             `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllWorkreportByEpochRequest) Reset()         { *m = QueryGetAllWorkreportByEpochRequest{} }
func (m *QueryGetAllWorkreportByEpochRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllWorkreportByEpochRequest) ProtoMessage()    {}
func (*QueryGetAllWorkreportByEpochRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{16}
}
func (m *QueryGetAllWorkreportByEpochRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllWorkreportByEpochRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllWorkreportByEpochRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllWorkreportByEpochRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllWorkreportByEpochRequest.Merge(m, src)
}
func (m *QueryGetAllWorkreportByEpochRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllWorkreportByEpochRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllWorkreportByEpochRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllWorkreportByEpochRequest proto.InternalMessageInfo

func (m *QueryGetAllWorkreportByEpochRequest) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *QueryGetAllWorkreportByEpochRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetAllWorkreportByEpochResponse struct {
	Workreports []Workreport        `protobuf:"bytes,1,rep,name=Workreports,proto3" json:"Workreports"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllWorkreportByEpochResponse) Reset()         { *m = QueryGetAllWorkreportByEpochResponse{} }
func (m *QueryGetAllWorkreportByEpochResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllWorkreportByEpochResponse) ProtoMessage()    {}
func (*QueryGetAllWorkreportByEpochResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{17}
}
func (m *QueryGetAllWorkreportByEpochResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllWorkreportByEpochResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllWorkreportByEpochResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllWorkreportByEpochResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllWorkreportByEpochResponse.Merge(m, src)
}
func (m *QueryGetAllWorkreportByEpochResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllWorkreportByEpochResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllWorkreportByEpochResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllWorkreportByEpochResponse proto.InternalMessageInfo

func (m *QueryGetAllWorkreportByEpochResponse) GetWorkreports() []Workreport {
	if m != nil {
		return m.Workreports
	}
	return nil
}

func (m *QueryGetAllWorkreportByEpochResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetWorkreportProcessBatchSizeRequest struct {
}

func (m *QueryGetWorkreportProcessBatchSizeRequest) Reset() {
	*m = QueryGetWorkreportProcessBatchSizeRequest{}
}
func (m *QueryGetWorkreportProcessBatchSizeRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetWorkreportProcessBatchSizeRequest) ProtoMessage() {}
func (*QueryGetWorkreportProcessBatchSizeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{18}
}
func (m *QueryGetWorkreportProcessBatchSizeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetWorkreportProcessBatchSizeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetWorkreportProcessBatchSizeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetWorkreportProcessBatchSizeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetWorkreportProcessBatchSizeRequest.Merge(m, src)
}
func (m *QueryGetWorkreportProcessBatchSizeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetWorkreportProcessBatchSizeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetWorkreportProcessBatchSizeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetWorkreportProcessBatchSizeRequest proto.InternalMessageInfo

type QueryGetWorkreportProcessBatchSizeResponse struct {
	BatchSize uint64 `protobuf:"varint,1,opt,name=batchSize,proto3" json:"batchSize,omitempty"`
}

func (m *QueryGetWorkreportProcessBatchSizeResponse) Reset() {
	*m = QueryGetWorkreportProcessBatchSizeResponse{}
}
func (m *QueryGetWorkreportProcessBatchSizeResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetWorkreportProcessBatchSizeResponse) ProtoMessage() {}
func (*QueryGetWorkreportProcessBatchSizeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{19}
}
func (m *QueryGetWorkreportProcessBatchSizeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetWorkreportProcessBatchSizeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetWorkreportProcessBatchSizeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetWorkreportProcessBatchSizeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetWorkreportProcessBatchSizeResponse.Merge(m, src)
}
func (m *QueryGetWorkreportProcessBatchSizeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetWorkreportProcessBatchSizeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetWorkreportProcessBatchSizeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetWorkreportProcessBatchSizeResponse proto.InternalMessageInfo

func (m *QueryGetWorkreportProcessBatchSizeResponse) GetBatchSize() uint64 {
	if m != nil {
		return m.BatchSize
	}
	return 0
}

type QueryGetHistoryEpochDataDepthRequest struct {
}

func (m *QueryGetHistoryEpochDataDepthRequest) Reset()         { *m = QueryGetHistoryEpochDataDepthRequest{} }
func (m *QueryGetHistoryEpochDataDepthRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetHistoryEpochDataDepthRequest) ProtoMessage()    {}
func (*QueryGetHistoryEpochDataDepthRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{20}
}
func (m *QueryGetHistoryEpochDataDepthRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetHistoryEpochDataDepthRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetHistoryEpochDataDepthRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetHistoryEpochDataDepthRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetHistoryEpochDataDepthRequest.Merge(m, src)
}
func (m *QueryGetHistoryEpochDataDepthRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetHistoryEpochDataDepthRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetHistoryEpochDataDepthRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetHistoryEpochDataDepthRequest proto.InternalMessageInfo

type QueryGetHistoryEpochDataDepthResponse struct {
	Depth uint64 `protobuf:"varint,1,opt,name=depth,proto3" json:"depth,omitempty"`
}

func (m *QueryGetHistoryEpochDataDepthResponse) Reset()         { *m = QueryGetHistoryEpochDataDepthResponse{} }
func (m *QueryGetHistoryEpochDataDepthResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetHistoryEpochDataDepthResponse) ProtoMessage()    {}
func (*QueryGetHistoryEpochDataDepthResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{21}
}
func (m *QueryGetHistoryEpochDataDepthResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetHistoryEpochDataDepthResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetHistoryEpochDataDepthResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetHistoryEpochDataDepthResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetHistoryEpochDataDepthResponse.Merge(m, src)
}
func (m *QueryGetHistoryEpochDataDepthResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetHistoryEpochDataDepthResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetHistoryEpochDataDepthResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetHistoryEpochDataDepthResponse proto.InternalMessageInfo

func (m *QueryGetHistoryEpochDataDepthResponse) GetDepth() uint64 {
	if m != nil {
		return m.Depth
	}
	return 0
}

type QueryGetEpochProcessDataRequest struct {
	Epoch uint64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (m *QueryGetEpochProcessDataRequest) Reset()         { *m = QueryGetEpochProcessDataRequest{} }
func (m *QueryGetEpochProcessDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetEpochProcessDataRequest) ProtoMessage()    {}
func (*QueryGetEpochProcessDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{22}
}
func (m *QueryGetEpochProcessDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEpochProcessDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEpochProcessDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEpochProcessDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEpochProcessDataRequest.Merge(m, src)
}
func (m *QueryGetEpochProcessDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEpochProcessDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEpochProcessDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEpochProcessDataRequest proto.InternalMessageInfo

func (m *QueryGetEpochProcessDataRequest) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

type QueryGetEpochProcessDataResponse struct {
	EpochProcessData EpochProcessData `protobuf:"bytes,1,opt,name=EpochProcessData,proto3" json:"EpochProcessData"`
}

func (m *QueryGetEpochProcessDataResponse) Reset()         { *m = QueryGetEpochProcessDataResponse{} }
func (m *QueryGetEpochProcessDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetEpochProcessDataResponse) ProtoMessage()    {}
func (*QueryGetEpochProcessDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{23}
}
func (m *QueryGetEpochProcessDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEpochProcessDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEpochProcessDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEpochProcessDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEpochProcessDataResponse.Merge(m, src)
}
func (m *QueryGetEpochProcessDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEpochProcessDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEpochProcessDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEpochProcessDataResponse proto.InternalMessageInfo

func (m *QueryGetEpochProcessDataResponse) GetEpochProcessData() EpochProcessData {
	if m != nil {
		return m.EpochProcessData
	}
	return EpochProcessData{}
}

type QueryGetAllEpochProcessDataRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllEpochProcessDataRequest) Reset()         { *m = QueryGetAllEpochProcessDataRequest{} }
func (m *QueryGetAllEpochProcessDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllEpochProcessDataRequest) ProtoMessage()    {}
func (*QueryGetAllEpochProcessDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{24}
}
func (m *QueryGetAllEpochProcessDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllEpochProcessDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllEpochProcessDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllEpochProcessDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllEpochProcessDataRequest.Merge(m, src)
}
func (m *QueryGetAllEpochProcessDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllEpochProcessDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllEpochProcessDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllEpochProcessDataRequest proto.InternalMessageInfo

func (m *QueryGetAllEpochProcessDataRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetAllEpochProcessDataResponse struct {
	EpochProcessDatas []EpochProcessData  `protobuf:"bytes,1,rep,name=EpochProcessDatas,proto3" json:"EpochProcessDatas"`
	Pagination        *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllEpochProcessDataResponse) Reset()         { *m = QueryGetAllEpochProcessDataResponse{} }
func (m *QueryGetAllEpochProcessDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllEpochProcessDataResponse) ProtoMessage()    {}
func (*QueryGetAllEpochProcessDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{25}
}
func (m *QueryGetAllEpochProcessDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllEpochProcessDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllEpochProcessDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllEpochProcessDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllEpochProcessDataResponse.Merge(m, src)
}
func (m *QueryGetAllEpochProcessDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllEpochProcessDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllEpochProcessDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllEpochProcessDataResponse proto.InternalMessageInfo

func (m *QueryGetAllEpochProcessDataResponse) GetEpochProcessDatas() []EpochProcessData {
	if m != nil {
		return m.EpochProcessDatas
	}
	return nil
}

func (m *QueryGetAllEpochProcessDataResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetSuperiorRequest struct {
}

func (m *QueryGetSuperiorRequest) Reset()         { *m = QueryGetSuperiorRequest{} }
func (m *QueryGetSuperiorRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSuperiorRequest) ProtoMessage()    {}
func (*QueryGetSuperiorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{26}
}
func (m *QueryGetSuperiorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSuperiorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSuperiorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSuperiorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSuperiorRequest.Merge(m, src)
}
func (m *QueryGetSuperiorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSuperiorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSuperiorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSuperiorRequest proto.InternalMessageInfo

type QueryGetSuperiorResponse struct {
	Superior Superior `protobuf:"bytes,1,opt,name=Superior,proto3" json:"Superior"`
}

func (m *QueryGetSuperiorResponse) Reset()         { *m = QueryGetSuperiorResponse{} }
func (m *QueryGetSuperiorResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSuperiorResponse) ProtoMessage()    {}
func (*QueryGetSuperiorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{27}
}
func (m *QueryGetSuperiorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSuperiorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSuperiorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSuperiorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSuperiorResponse.Merge(m, src)
}
func (m *QueryGetSuperiorResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSuperiorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSuperiorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSuperiorResponse proto.InternalMessageInfo

func (m *QueryGetSuperiorResponse) GetSuperior() Superior {
	if m != nil {
		return m.Superior
	}
	return Superior{}
}

type QueryGetEraLengthRequest struct {
}

func (m *QueryGetEraLengthRequest) Reset()         { *m = QueryGetEraLengthRequest{} }
func (m *QueryGetEraLengthRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetEraLengthRequest) ProtoMessage()    {}
func (*QueryGetEraLengthRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{28}
}
func (m *QueryGetEraLengthRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEraLengthRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEraLengthRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEraLengthRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEraLengthRequest.Merge(m, src)
}
func (m *QueryGetEraLengthRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEraLengthRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEraLengthRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEraLengthRequest proto.InternalMessageInfo

type QueryGetEraLengthResponse struct {
	EraLength uint64 `protobuf:"varint,1,opt,name=eraLength,proto3" json:"eraLength,omitempty"`
}

func (m *QueryGetEraLengthResponse) Reset()         { *m = QueryGetEraLengthResponse{} }
func (m *QueryGetEraLengthResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetEraLengthResponse) ProtoMessage()    {}
func (*QueryGetEraLengthResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{29}
}
func (m *QueryGetEraLengthResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEraLengthResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEraLengthResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEraLengthResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEraLengthResponse.Merge(m, src)
}
func (m *QueryGetEraLengthResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEraLengthResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEraLengthResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEraLengthResponse proto.InternalMessageInfo

func (m *QueryGetEraLengthResponse) GetEraLength() uint64 {
	if m != nil {
		return m.EraLength
	}
	return 0
}

type QueryGetCurrentEraRequest struct {
}

func (m *QueryGetCurrentEraRequest) Reset()         { *m = QueryGetCurrentEraRequest{} }
func (m *QueryGetCurrentEraRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCurrentEraRequest) ProtoMessage()    {}
func (*QueryGetCurrentEraRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{30}
}
func (m *QueryGetCurrentEraRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCurrentEraRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCurrentEraRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCurrentEraRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCurrentEraRequest.Merge(m, src)
}
func (m *QueryGetCurrentEraRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCurrentEraRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCurrentEraRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCurrentEraRequest proto.InternalMessageInfo

type QueryGetCurrentEraResponse struct {
	CurrentEra uint64 `protobuf:"varint,1,opt,name=currentEra,proto3" json:"currentEra,omitempty"`
}

func (m *QueryGetCurrentEraResponse) Reset()         { *m = QueryGetCurrentEraResponse{} }
func (m *QueryGetCurrentEraResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCurrentEraResponse) ProtoMessage()    {}
func (*QueryGetCurrentEraResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{31}
}
func (m *QueryGetCurrentEraResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCurrentEraResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCurrentEraResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCurrentEraResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCurrentEraResponse.Merge(m, src)
}
func (m *QueryGetCurrentEraResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCurrentEraResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCurrentEraResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCurrentEraResponse proto.InternalMessageInfo

func (m *QueryGetCurrentEraResponse) GetCurrentEra() uint64 {
	if m != nil {
		return m.CurrentEra
	}
	return 0
}

type QueryGetReputationPointChangeDataRequest struct {
	Era    uint64 `protobuf:"varint,1,opt,name=era,proto3" json:"era,omitempty"`
	NodeID string `protobuf:"bytes,2,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
}

func (m *QueryGetReputationPointChangeDataRequest) Reset() {
	*m = QueryGetReputationPointChangeDataRequest{}
}
func (m *QueryGetReputationPointChangeDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetReputationPointChangeDataRequest) ProtoMessage()    {}
func (*QueryGetReputationPointChangeDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{32}
}
func (m *QueryGetReputationPointChangeDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetReputationPointChangeDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetReputationPointChangeDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetReputationPointChangeDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetReputationPointChangeDataRequest.Merge(m, src)
}
func (m *QueryGetReputationPointChangeDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetReputationPointChangeDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetReputationPointChangeDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetReputationPointChangeDataRequest proto.InternalMessageInfo

func (m *QueryGetReputationPointChangeDataRequest) GetEra() uint64 {
	if m != nil {
		return m.Era
	}
	return 0
}

func (m *QueryGetReputationPointChangeDataRequest) GetNodeID() string {
	if m != nil {
		return m.NodeID
	}
	return ""
}

type QueryGetReputationPointChangeDataResponse struct {
	ReputationPointChangeData ReputationPointChangeData `protobuf:"bytes,1,opt,name=ReputationPointChangeData,proto3" json:"ReputationPointChangeData"`
}

func (m *QueryGetReputationPointChangeDataResponse) Reset() {
	*m = QueryGetReputationPointChangeDataResponse{}
}
func (m *QueryGetReputationPointChangeDataResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetReputationPointChangeDataResponse) ProtoMessage() {}
func (*QueryGetReputationPointChangeDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{33}
}
func (m *QueryGetReputationPointChangeDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetReputationPointChangeDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetReputationPointChangeDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetReputationPointChangeDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetReputationPointChangeDataResponse.Merge(m, src)
}
func (m *QueryGetReputationPointChangeDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetReputationPointChangeDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetReputationPointChangeDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetReputationPointChangeDataResponse proto.InternalMessageInfo

func (m *QueryGetReputationPointChangeDataResponse) GetReputationPointChangeData() ReputationPointChangeData {
	if m != nil {
		return m.ReputationPointChangeData
	}
	return ReputationPointChangeData{}
}

type QueryGetAllReputationPointChangeDataByEraRequest struct {
	Era        uint64             `protobuf:"varint,1,opt,name=era,proto3" json:"era,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllReputationPointChangeDataByEraRequest) Reset() {
	*m = QueryGetAllReputationPointChangeDataByEraRequest{}
}
func (m *QueryGetAllReputationPointChangeDataByEraRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetAllReputationPointChangeDataByEraRequest) ProtoMessage() {}
func (*QueryGetAllReputationPointChangeDataByEraRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{34}
}
func (m *QueryGetAllReputationPointChangeDataByEraRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllReputationPointChangeDataByEraRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllReputationPointChangeDataByEraRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllReputationPointChangeDataByEraRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllReputationPointChangeDataByEraRequest.Merge(m, src)
}
func (m *QueryGetAllReputationPointChangeDataByEraRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllReputationPointChangeDataByEraRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllReputationPointChangeDataByEraRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllReputationPointChangeDataByEraRequest proto.InternalMessageInfo

func (m *QueryGetAllReputationPointChangeDataByEraRequest) GetEra() uint64 {
	if m != nil {
		return m.Era
	}
	return 0
}

func (m *QueryGetAllReputationPointChangeDataByEraRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetAllReputationPointChangeDataByEraResponse struct {
	ReputationPointChangeDatas []ReputationPointChangeData `protobuf:"bytes,1,rep,name=ReputationPointChangeDatas,proto3" json:"ReputationPointChangeDatas"`
	Pagination                 *query.PageResponse         `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllReputationPointChangeDataByEraResponse) Reset() {
	*m = QueryGetAllReputationPointChangeDataByEraResponse{}
}
func (m *QueryGetAllReputationPointChangeDataByEraResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetAllReputationPointChangeDataByEraResponse) ProtoMessage() {}
func (*QueryGetAllReputationPointChangeDataByEraResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{35}
}
func (m *QueryGetAllReputationPointChangeDataByEraResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllReputationPointChangeDataByEraResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllReputationPointChangeDataByEraResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllReputationPointChangeDataByEraResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllReputationPointChangeDataByEraResponse.Merge(m, src)
}
func (m *QueryGetAllReputationPointChangeDataByEraResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllReputationPointChangeDataByEraResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllReputationPointChangeDataByEraResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllReputationPointChangeDataByEraResponse proto.InternalMessageInfo

func (m *QueryGetAllReputationPointChangeDataByEraResponse) GetReputationPointChangeDatas() []ReputationPointChangeData {
	if m != nil {
		return m.ReputationPointChangeDatas
	}
	return nil
}

func (m *QueryGetAllReputationPointChangeDataByEraResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetReputationPointRequest struct {
	Era    uint64 `protobuf:"varint,1,opt,name=era,proto3" json:"era,omitempty"`
	NodeID string `protobuf:"bytes,2,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
}

func (m *QueryGetReputationPointRequest) Reset()         { *m = QueryGetReputationPointRequest{} }
func (m *QueryGetReputationPointRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetReputationPointRequest) ProtoMessage()    {}
func (*QueryGetReputationPointRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{36}
}
func (m *QueryGetReputationPointRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetReputationPointRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetReputationPointRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetReputationPointRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetReputationPointRequest.Merge(m, src)
}
func (m *QueryGetReputationPointRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetReputationPointRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetReputationPointRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetReputationPointRequest proto.InternalMessageInfo

func (m *QueryGetReputationPointRequest) GetEra() uint64 {
	if m != nil {
		return m.Era
	}
	return 0
}

func (m *QueryGetReputationPointRequest) GetNodeID() string {
	if m != nil {
		return m.NodeID
	}
	return ""
}

type QueryGetReputationPointResponse struct {
	ReputationPoint ReputationPoint `protobuf:"bytes,1,opt,name=ReputationPoint,proto3" json:"ReputationPoint"`
}

func (m *QueryGetReputationPointResponse) Reset()         { *m = QueryGetReputationPointResponse{} }
func (m *QueryGetReputationPointResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetReputationPointResponse) ProtoMessage()    {}
func (*QueryGetReputationPointResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{37}
}
func (m *QueryGetReputationPointResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetReputationPointResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetReputationPointResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetReputationPointResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetReputationPointResponse.Merge(m, src)
}
func (m *QueryGetReputationPointResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetReputationPointResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetReputationPointResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetReputationPointResponse proto.InternalMessageInfo

func (m *QueryGetReputationPointResponse) GetReputationPoint() ReputationPoint {
	if m != nil {
		return m.ReputationPoint
	}
	return ReputationPoint{}
}

type QueryGetLatestReputationPointRequest struct {
	NodeID string `protobuf:"bytes,1,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
}

func (m *QueryGetLatestReputationPointRequest) Reset()         { *m = QueryGetLatestReputationPointRequest{} }
func (m *QueryGetLatestReputationPointRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetLatestReputationPointRequest) ProtoMessage()    {}
func (*QueryGetLatestReputationPointRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{38}
}
func (m *QueryGetLatestReputationPointRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLatestReputationPointRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLatestReputationPointRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLatestReputationPointRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLatestReputationPointRequest.Merge(m, src)
}
func (m *QueryGetLatestReputationPointRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLatestReputationPointRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLatestReputationPointRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLatestReputationPointRequest proto.InternalMessageInfo

func (m *QueryGetLatestReputationPointRequest) GetNodeID() string {
	if m != nil {
		return m.NodeID
	}
	return ""
}

type QueryGetLatestReputationPointResponse struct {
	ReputationPoint ReputationPoint `protobuf:"bytes,1,opt,name=ReputationPoint,proto3" json:"ReputationPoint"`
}

func (m *QueryGetLatestReputationPointResponse) Reset()         { *m = QueryGetLatestReputationPointResponse{} }
func (m *QueryGetLatestReputationPointResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetLatestReputationPointResponse) ProtoMessage()    {}
func (*QueryGetLatestReputationPointResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{39}
}
func (m *QueryGetLatestReputationPointResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLatestReputationPointResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLatestReputationPointResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLatestReputationPointResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLatestReputationPointResponse.Merge(m, src)
}
func (m *QueryGetLatestReputationPointResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLatestReputationPointResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLatestReputationPointResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLatestReputationPointResponse proto.InternalMessageInfo

func (m *QueryGetLatestReputationPointResponse) GetReputationPoint() ReputationPoint {
	if m != nil {
		return m.ReputationPoint
	}
	return ReputationPoint{}
}

type QueryGetAllReputationPointByEraRequest struct {
	Era        uint64             `protobuf:"varint,1,opt,name=era,proto3" json:"era,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllReputationPointByEraRequest) Reset() {
	*m = QueryGetAllReputationPointByEraRequest{}
}
func (m *QueryGetAllReputationPointByEraRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllReputationPointByEraRequest) ProtoMessage()    {}
func (*QueryGetAllReputationPointByEraRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{40}
}
func (m *QueryGetAllReputationPointByEraRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllReputationPointByEraRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllReputationPointByEraRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllReputationPointByEraRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllReputationPointByEraRequest.Merge(m, src)
}
func (m *QueryGetAllReputationPointByEraRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllReputationPointByEraRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllReputationPointByEraRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllReputationPointByEraRequest proto.InternalMessageInfo

func (m *QueryGetAllReputationPointByEraRequest) GetEra() uint64 {
	if m != nil {
		return m.Era
	}
	return 0
}

func (m *QueryGetAllReputationPointByEraRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetAllReputationPointByEraResponse struct {
	ReputationPoints []ReputationPoint   `protobuf:"bytes,1,rep,name=ReputationPoints,proto3" json:"ReputationPoints"`
	Pagination       *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllReputationPointByEraResponse) Reset() {
	*m = QueryGetAllReputationPointByEraResponse{}
}
func (m *QueryGetAllReputationPointByEraResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllReputationPointByEraResponse) ProtoMessage()    {}
func (*QueryGetAllReputationPointByEraResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{41}
}
func (m *QueryGetAllReputationPointByEraResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllReputationPointByEraResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllReputationPointByEraResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllReputationPointByEraResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllReputationPointByEraResponse.Merge(m, src)
}
func (m *QueryGetAllReputationPointByEraResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllReputationPointByEraResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllReputationPointByEraResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllReputationPointByEraResponse proto.InternalMessageInfo

func (m *QueryGetAllReputationPointByEraResponse) GetReputationPoints() []ReputationPoint {
	if m != nil {
		return m.ReputationPoints
	}
	return nil
}

func (m *QueryGetAllReputationPointByEraResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetEraProcessDataRequest struct {
	Era uint64 `protobuf:"varint,1,opt,name=era,proto3" json:"era,omitempty"`
}

func (m *QueryGetEraProcessDataRequest) Reset()         { *m = QueryGetEraProcessDataRequest{} }
func (m *QueryGetEraProcessDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetEraProcessDataRequest) ProtoMessage()    {}
func (*QueryGetEraProcessDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{42}
}
func (m *QueryGetEraProcessDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEraProcessDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEraProcessDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEraProcessDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEraProcessDataRequest.Merge(m, src)
}
func (m *QueryGetEraProcessDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEraProcessDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEraProcessDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEraProcessDataRequest proto.InternalMessageInfo

func (m *QueryGetEraProcessDataRequest) GetEra() uint64 {
	if m != nil {
		return m.Era
	}
	return 0
}

type QueryGetEraProcessDataResponse struct {
	EraProcessData EraProcessData `protobuf:"bytes,1,opt,name=EraProcessData,proto3" json:"EraProcessData"`
}

func (m *QueryGetEraProcessDataResponse) Reset()         { *m = QueryGetEraProcessDataResponse{} }
func (m *QueryGetEraProcessDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetEraProcessDataResponse) ProtoMessage()    {}
func (*QueryGetEraProcessDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{43}
}
func (m *QueryGetEraProcessDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEraProcessDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEraProcessDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEraProcessDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEraProcessDataResponse.Merge(m, src)
}
func (m *QueryGetEraProcessDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEraProcessDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEraProcessDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEraProcessDataResponse proto.InternalMessageInfo

func (m *QueryGetEraProcessDataResponse) GetEraProcessData() EraProcessData {
	if m != nil {
		return m.EraProcessData
	}
	return EraProcessData{}
}

type QueryGetAllEraProcessDataRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllEraProcessDataRequest) Reset()         { *m = QueryGetAllEraProcessDataRequest{} }
func (m *QueryGetAllEraProcessDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllEraProcessDataRequest) ProtoMessage()    {}
func (*QueryGetAllEraProcessDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{44}
}
func (m *QueryGetAllEraProcessDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllEraProcessDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllEraProcessDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllEraProcessDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllEraProcessDataRequest.Merge(m, src)
}
func (m *QueryGetAllEraProcessDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllEraProcessDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllEraProcessDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllEraProcessDataRequest proto.InternalMessageInfo

func (m *QueryGetAllEraProcessDataRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetAllEraProcessDataResponse struct {
	EraProcessDatas []EraProcessData    `protobuf:"bytes,1,rep,name=EraProcessDatas,proto3" json:"EraProcessDatas"`
	Pagination      *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllEraProcessDataResponse) Reset()         { *m = QueryGetAllEraProcessDataResponse{} }
func (m *QueryGetAllEraProcessDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllEraProcessDataResponse) ProtoMessage()    {}
func (*QueryGetAllEraProcessDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c31abfb63ab8d50, []int{45}
}
func (m *QueryGetAllEraProcessDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllEraProcessDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllEraProcessDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllEraProcessDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllEraProcessDataResponse.Merge(m, src)
}
func (m *QueryGetAllEraProcessDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllEraProcessDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllEraProcessDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllEraProcessDataResponse proto.InternalMessageInfo

func (m *QueryGetAllEraProcessDataResponse) GetEraProcessDatas() []EraProcessData {
	if m != nil {
		return m.EraProcessDatas
	}
	return nil
}

func (m *QueryGetAllEraProcessDataResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "enreach.workload.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "enreach.workload.QueryParamsResponse")
	proto.RegisterType((*QueryGetEpochLengthRequest)(nil), "enreach.workload.QueryGetEpochLengthRequest")
	proto.RegisterType((*QueryGetEpochLengthResponse)(nil), "enreach.workload.QueryGetEpochLengthResponse")
	proto.RegisterType((*QueryGetCurrentEpochRequest)(nil), "enreach.workload.QueryGetCurrentEpochRequest")
	proto.RegisterType((*QueryGetCurrentEpochResponse)(nil), "enreach.workload.QueryGetCurrentEpochResponse")
	proto.RegisterType((*QueryGetNodeWorkloadRequest)(nil), "enreach.workload.QueryGetNodeWorkloadRequest")
	proto.RegisterType((*QueryGetNodeWorkloadResponse)(nil), "enreach.workload.QueryGetNodeWorkloadResponse")
	proto.RegisterType((*QueryGetAllNodeWorkloadByEpochRequest)(nil), "enreach.workload.QueryGetAllNodeWorkloadByEpochRequest")
	proto.RegisterType((*QueryGetAllNodeWorkloadByEpochResponse)(nil), "enreach.workload.QueryGetAllNodeWorkloadByEpochResponse")
	proto.RegisterType((*QueryGetManagerWorkloadRequest)(nil), "enreach.workload.QueryGetManagerWorkloadRequest")
	proto.RegisterType((*QueryGetManagerWorkloadResponse)(nil), "enreach.workload.QueryGetManagerWorkloadResponse")
	proto.RegisterType((*QueryGetAllManagerWorkloadByEpochRequest)(nil), "enreach.workload.QueryGetAllManagerWorkloadByEpochRequest")
	proto.RegisterType((*QueryGetAllManagerWorkloadByEpochResponse)(nil), "enreach.workload.QueryGetAllManagerWorkloadByEpochResponse")
	proto.RegisterType((*QueryGetWorkreportRequest)(nil), "enreach.workload.QueryGetWorkreportRequest")
	proto.RegisterType((*QueryGetWorkreportResponse)(nil), "enreach.workload.QueryGetWorkreportResponse")
	proto.RegisterType((*QueryGetAllWorkreportByEpochRequest)(nil), "enreach.workload.QueryGetAllWorkreportByEpochRequest")
	proto.RegisterType((*QueryGetAllWorkreportByEpochResponse)(nil), "enreach.workload.QueryGetAllWorkreportByEpochResponse")
	proto.RegisterType((*QueryGetWorkreportProcessBatchSizeRequest)(nil), "enreach.workload.QueryGetWorkreportProcessBatchSizeRequest")
	proto.RegisterType((*QueryGetWorkreportProcessBatchSizeResponse)(nil), "enreach.workload.QueryGetWorkreportProcessBatchSizeResponse")
	proto.RegisterType((*QueryGetHistoryEpochDataDepthRequest)(nil), "enreach.workload.QueryGetHistoryEpochDataDepthRequest")
	proto.RegisterType((*QueryGetHistoryEpochDataDepthResponse)(nil), "enreach.workload.QueryGetHistoryEpochDataDepthResponse")
	proto.RegisterType((*QueryGetEpochProcessDataRequest)(nil), "enreach.workload.QueryGetEpochProcessDataRequest")
	proto.RegisterType((*QueryGetEpochProcessDataResponse)(nil), "enreach.workload.QueryGetEpochProcessDataResponse")
	proto.RegisterType((*QueryGetAllEpochProcessDataRequest)(nil), "enreach.workload.QueryGetAllEpochProcessDataRequest")
	proto.RegisterType((*QueryGetAllEpochProcessDataResponse)(nil), "enreach.workload.QueryGetAllEpochProcessDataResponse")
	proto.RegisterType((*QueryGetSuperiorRequest)(nil), "enreach.workload.QueryGetSuperiorRequest")
	proto.RegisterType((*QueryGetSuperiorResponse)(nil), "enreach.workload.QueryGetSuperiorResponse")
	proto.RegisterType((*QueryGetEraLengthRequest)(nil), "enreach.workload.QueryGetEraLengthRequest")
	proto.RegisterType((*QueryGetEraLengthResponse)(nil), "enreach.workload.QueryGetEraLengthResponse")
	proto.RegisterType((*QueryGetCurrentEraRequest)(nil), "enreach.workload.QueryGetCurrentEraRequest")
	proto.RegisterType((*QueryGetCurrentEraResponse)(nil), "enreach.workload.QueryGetCurrentEraResponse")
	proto.RegisterType((*QueryGetReputationPointChangeDataRequest)(nil), "enreach.workload.QueryGetReputationPointChangeDataRequest")
	proto.RegisterType((*QueryGetReputationPointChangeDataResponse)(nil), "enreach.workload.QueryGetReputationPointChangeDataResponse")
	proto.RegisterType((*QueryGetAllReputationPointChangeDataByEraRequest)(nil), "enreach.workload.QueryGetAllReputationPointChangeDataByEraRequest")
	proto.RegisterType((*QueryGetAllReputationPointChangeDataByEraResponse)(nil), "enreach.workload.QueryGetAllReputationPointChangeDataByEraResponse")
	proto.RegisterType((*QueryGetReputationPointRequest)(nil), "enreach.workload.QueryGetReputationPointRequest")
	proto.RegisterType((*QueryGetReputationPointResponse)(nil), "enreach.workload.QueryGetReputationPointResponse")
	proto.RegisterType((*QueryGetLatestReputationPointRequest)(nil), "enreach.workload.QueryGetLatestReputationPointRequest")
	proto.RegisterType((*QueryGetLatestReputationPointResponse)(nil), "enreach.workload.QueryGetLatestReputationPointResponse")
	proto.RegisterType((*QueryGetAllReputationPointByEraRequest)(nil), "enreach.workload.QueryGetAllReputationPointByEraRequest")
	proto.RegisterType((*QueryGetAllReputationPointByEraResponse)(nil), "enreach.workload.QueryGetAllReputationPointByEraResponse")
	proto.RegisterType((*QueryGetEraProcessDataRequest)(nil), "enreach.workload.QueryGetEraProcessDataRequest")
	proto.RegisterType((*QueryGetEraProcessDataResponse)(nil), "enreach.workload.QueryGetEraProcessDataResponse")
	proto.RegisterType((*QueryGetAllEraProcessDataRequest)(nil), "enreach.workload.QueryGetAllEraProcessDataRequest")
	proto.RegisterType((*QueryGetAllEraProcessDataResponse)(nil), "enreach.workload.QueryGetAllEraProcessDataResponse")
}

func init() { proto.RegisterFile("enreach/workload/query.proto", fileDescriptor_4c31abfb63ab8d50) }

var fileDescriptor_4c31abfb63ab8d50 = []byte{
	// 1885 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x5a, 0xdf, 0x6f, 0x54, 0x4f,
	0x15, 0xef, 0xf0, 0xa3, 0xb1, 0xa7, 0x08, 0x65, 0x28, 0xd0, 0x5e, 0x96, 0x65, 0x3b, 0x96, 0x52,
	0x5a, 0xba, 0xb7, 0xbb, 0xa5, 0x94, 0x52, 0x2a, 0xa1, 0x2d, 0xf2, 0x43, 0x24, 0x65, 0x21, 0x62,
	0x7c, 0x70, 0xbd, 0xdd, 0xde, 0x6c, 0x57, 0xdb, 0xbd, 0xcb, 0xbd, 0xb7, 0x42, 0x21, 0xbc, 0x60,
	0x48, 0x8c, 0xf1, 0xc1, 0x1f, 0x8f, 0x1a, 0x5f, 0xf5, 0x11, 0x13, 0xf4, 0x41, 0xc5, 0xc4, 0xc4,
	0x08, 0xbc, 0x91, 0xf8, 0x62, 0x62, 0x62, 0x0c, 0x98, 0xf8, 0xe0, 0x83, 0xff, 0x82, 0xd9, 0xb9,
	0x67, 0x76, 0xee, 0xcf, 0xd9, 0xbb, 0xfd, 0xee, 0x97, 0x17, 0xb2, 0x3b, 0x73, 0xce, 0x99, 0xcf,
	0xe7, 0xcc, 0x99, 0x99, 0xd3, 0xcf, 0x02, 0x19, 0xb3, 0x6e, 0x9b, 0x46, 0x65, 0x43, 0x7f, 0x64,
	0xd9, 0xdf, 0xdd, 0xb4, 0x8c, 0x75, 0xfd, 0xe1, 0xb6, 0x69, 0xef, 0xe4, 0x1b, 0xb6, 0xe5, 0x5a,
	0x74, 0x00, 0x67, 0xf3, 0x62, 0x56, 0x3b, 0x6c, 0x6c, 0xd5, 0xea, 0x96, 0xce, 0xff, 0xf5, 0x8c,
	0xb4, 0xc1, 0xaa, 0x55, 0xb5, 0xf8, 0x47, 0xbd, 0xf9, 0x09, 0x47, 0x33, 0x55, 0xcb, 0xaa, 0x6e,
	0x9a, 0xba, 0xd1, 0xa8, 0xe9, 0x46, 0xbd, 0x6e, 0xb9, 0x86, 0x5b, 0xb3, 0xea, 0x0e, 0xce, 0x4e,
	0x54, 0x2c, 0x67, 0xcb, 0x72, 0xf4, 0x35, 0xc3, 0x31, 0xbd, 0x15, 0xf5, 0xef, 0x15, 0xd6, 0x4c,
	0xd7, 0x28, 0xe8, 0x0d, 0xa3, 0x5a, 0xab, 0x73, 0x63, 0xb4, 0x3d, 0x19, 0x81, 0xd8, 0x30, 0x6c,
	0x63, 0x4b, 0x84, 0x3a, 0x15, 0x99, 0x16, 0x1f, 0xd0, 0x60, 0x24, 0xd6, 0xc0, 0x36, 0x1b, 0x96,
	0xed, 0x26, 0xc6, 0x70, 0xb6, 0x1b, 0xa6, 0x5d, 0xb3, 0x6c, 0x34, 0x18, 0x8b, 0x18, 0xd8, 0x66,
	0x63, 0xdb, 0xe3, 0xd4, 0xb0, 0x6a, 0x75, 0x0c, 0xc4, 0x06, 0x81, 0xde, 0x6d, 0xb2, 0x59, 0xe5,
	0x08, 0x4b, 0xe6, 0xc3, 0x6d, 0xd3, 0x71, 0x59, 0x09, 0x8e, 0x04, 0x46, 0x9d, 0x86, 0x55, 0x77,
	0x4c, 0xba, 0x00, 0xbd, 0x1e, 0x93, 0x21, 0x92, 0x23, 0xe3, 0xfd, 0xc5, 0xa1, 0x7c, 0x38, 0xdd,
	0x79, 0xcf, 0x63, 0xa9, 0xef, 0xed, 0x3f, 0x4f, 0xf5, 0xfc, 0xfa, 0x3f, 0x2f, 0x27, 0x48, 0x09,
	0x5d, 0x58, 0x06, 0x34, 0x1e, 0xf3, 0xba, 0xe9, 0x5e, 0x6b, 0x58, 0x95, 0x8d, 0xdb, 0x66, 0xbd,
	0xea, 0x6e, 0x88, 0x15, 0xaf, 0xc0, 0x89, 0xd8, 0x59, 0x5c, 0x39, 0x07, 0xfd, 0xa6, 0x1c, 0xe6,
	0xcb, 0xef, 0x2b, 0xf9, 0x87, 0xd8, 0x49, 0x19, 0x60, 0x79, 0xdb, 0xb6, 0xcd, 0xba, 0x17, 0x47,
	0xc4, 0x5f, 0x82, 0x4c, 0xfc, 0x34, 0x2e, 0xc0, 0xe0, 0x40, 0xc5, 0x37, 0x8e, 0x2b, 0x04, 0xc6,
	0xd8, 0x57, 0xe5, 0x12, 0x77, 0xac, 0x75, 0xf3, 0x01, 0x72, 0xc6, 0x25, 0xe8, 0x20, 0xec, 0x37,
	0x7d, 0xbe, 0xde, 0x17, 0x7a, 0x0c, 0x7a, 0xeb, 0xd6, 0xba, 0x79, 0x73, 0x65, 0x68, 0x4f, 0x8e,
	0x8c, 0xf7, 0x95, 0xf0, 0x1b, 0xdb, 0x90, 0x80, 0x82, 0xc1, 0x10, 0xd0, 0x0d, 0x38, 0xe0, 0x1f,
	0xc7, 0x8c, 0x67, 0xa3, 0x19, 0xf7, 0x5b, 0x2d, 0xed, 0x6b, 0xe6, 0xbd, 0x14, 0xf0, 0x64, 0x2f,
	0x08, 0x9c, 0x16, 0x4b, 0x5d, 0xdd, 0xdc, 0x0c, 0xd8, 0xef, 0xf8, 0x93, 0x94, 0xc0, 0xe0, 0x2b,
	0x00, 0xb2, 0xc4, 0x39, 0x8b, 0xfe, 0xe2, 0x58, 0xde, 0x3b, 0x0f, 0xf9, 0xe6, 0x79, 0xc8, 0x7b,
	0x27, 0x10, 0xcf, 0x43, 0x7e, 0xd5, 0xa8, 0x9a, 0x18, 0xb1, 0xe4, 0xf3, 0x64, 0xaf, 0x09, 0x8c,
	0xb5, 0xc3, 0x81, 0xe4, 0x6f, 0xc1, 0x17, 0xfd, 0xd3, 0xcd, 0x7a, 0xdb, 0x9b, 0x9a, 0x7d, 0xd0,
	0x95, 0x5e, 0x8f, 0x81, 0x7f, 0xa6, 0x2d, 0x7c, 0x0f, 0x48, 0x00, 0xff, 0xb7, 0x20, 0x2b, 0xe0,
	0x7f, 0xcd, 0xa8, 0x1b, 0x55, 0xd3, 0x4e, 0x57, 0x01, 0x63, 0x70, 0x70, 0xcb, 0xb3, 0xbf, 0x5a,
	0xa9, 0x58, 0xdb, 0x75, 0x17, 0x2b, 0x21, 0x34, 0xca, 0x5c, 0x38, 0x95, 0x18, 0x1f, 0xf3, 0x72,
	0x17, 0x0e, 0x85, 0xa6, 0xb0, 0x2e, 0x46, 0xa2, 0x99, 0x09, 0x19, 0x62, 0x72, 0xc2, 0xfe, 0xec,
	0x07, 0x04, 0xc6, 0x7d, 0xbb, 0x12, 0xf6, 0xfa, 0x94, 0x05, 0xf2, 0x8e, 0xc0, 0xd9, 0x14, 0x50,
	0x30, 0x17, 0xf7, 0x60, 0x20, 0x64, 0x21, 0xca, 0x24, 0x75, 0x32, 0x22, 0x01, 0xba, 0x57, 0x2c,
	0x37, 0x61, 0x58, 0x50, 0x79, 0xd0, 0xba, 0xbc, 0x77, 0x77, 0x53, 0x7c, 0x5b, 0x5e, 0x9c, 0xfe,
	0x50, 0x98, 0x86, 0x25, 0x00, 0x39, 0x8a, 0xd5, 0x90, 0x89, 0x26, 0x40, 0xda, 0x20, 0x77, 0x9f,
	0x17, 0xfb, 0x3e, 0x81, 0x2f, 0xf9, 0x12, 0xef, 0xb3, 0xfd, 0x94, 0xdb, 0xff, 0x5b, 0x02, 0xa3,
	0x6a, 0x14, 0x48, 0x79, 0x05, 0xfa, 0xe5, 0xa4, 0xd8, 0xf4, 0x34, 0x9c, 0xfd, 0x6e, 0xdd, 0xdb,
	0xea, 0x49, 0x59, 0xb5, 0x32, 0xfe, 0xaa, 0x6d, 0x55, 0x4c, 0xc7, 0x59, 0x32, 0xdc, 0xca, 0xc6,
	0xbd, 0xda, 0x13, 0x41, 0x98, 0xdd, 0x82, 0x89, 0x34, 0xc6, 0xc8, 0x34, 0x03, 0x7d, 0x6b, 0x62,
	0x10, 0x93, 0x2e, 0x07, 0xd8, 0x98, 0xcc, 0xd7, 0x8d, 0x9a, 0xe3, 0x5a, 0xb6, 0x97, 0xa7, 0x15,
	0xc3, 0x35, 0x56, 0xcc, 0x86, 0x7c, 0x5b, 0x17, 0xe5, 0xfd, 0x9f, 0x60, 0x87, 0xcb, 0x0d, 0xc2,
	0xfe, 0xf5, 0xe6, 0x80, 0xd8, 0x5f, 0xfe, 0x85, 0xcd, 0xc9, 0x7b, 0x89, 0xfb, 0x21, 0xda, 0xa6,
	0xbb, 0xb2, 0x30, 0xd8, 0x63, 0xc8, 0x25, 0x3b, 0xe2, 0x92, 0xf7, 0x61, 0x20, 0x3c, 0x87, 0x45,
	0xcc, 0xa2, 0x1b, 0x1a, 0xb6, 0x14, 0xc7, 0x38, 0x3c, 0xce, 0x36, 0x81, 0xf9, 0x2a, 0x29, 0x09,
	0x75, 0xb0, 0x70, 0xc9, 0xae, 0x0b, 0xf7, 0xaf, 0xc1, 0xe3, 0x93, 0xc8, 0xf5, 0xeb, 0x70, 0x38,
	0x3c, 0x27, 0xaa, 0x37, 0x3d, 0xd9, 0x68, 0x88, 0xee, 0x55, 0xf2, 0x30, 0x1c, 0x17, 0x3c, 0xee,
	0x61, 0x3b, 0x29, 0x6a, 0xe8, 0x1b, 0x30, 0x14, 0x9d, 0x42, 0x5e, 0x97, 0xe1, 0x0b, 0x62, 0x0c,
	0xb3, 0xa8, 0x45, 0xe9, 0x08, 0x0b, 0xa4, 0xd1, 0xf2, 0x60, 0x9a, 0x8c, 0x7c, 0xcd, 0x36, 0x82,
	0x5d, 0xe1, 0xbc, 0xbc, 0x45, 0x7d, 0x73, 0xf2, 0x70, 0x98, 0x62, 0x50, 0x1c, 0x8e, 0xd6, 0x00,
	0x3b, 0x21, 0x5d, 0x45, 0xc3, 0x67, 0x8b, 0x9d, 0x67, 0x97, 0xe5, 0x95, 0xea, 0x9f, 0xc4, 0xc0,
	0x59, 0x80, 0x4a, 0x6b, 0x14, 0x23, 0xfb, 0x46, 0xd8, 0x7d, 0xf9, 0x62, 0x96, 0x5a, 0x4d, 0xf5,
	0x6a, 0xb3, 0xa9, 0x5e, 0xde, 0x30, 0xea, 0x55, 0xd3, 0x5f, 0x63, 0x03, 0xb0, 0xd7, 0x6c, 0x05,
	0x69, 0x7e, 0x4c, 0xbc, 0xe6, 0x7f, 0xe1, 0x7b, 0xfd, 0x14, 0x61, 0x11, 0xa3, 0x05, 0xc3, 0x89,
	0x46, 0xb8, 0x09, 0x93, 0xd1, 0x4d, 0x48, 0x74, 0xc1, 0x5d, 0x49, 0x8e, 0xc9, 0x7e, 0x44, 0x60,
	0xda, 0x57, 0xe4, 0xc9, 0x91, 0x76, 0x64, 0x9e, 0x63, 0xd8, 0x77, 0xeb, 0xb1, 0xf8, 0x1f, 0x81,
	0x42, 0x07, 0x70, 0x30, 0x6b, 0x0f, 0x41, 0x4b, 0xb4, 0x14, 0x47, 0x71, 0x17, 0x69, 0x53, 0x04,
	0xed, 0xde, 0xe1, 0xbc, 0x25, 0xdb, 0xcf, 0xd0, 0x72, 0x9d, 0xd7, 0x9a, 0xaf, 0xd5, 0x8c, 0xc4,
	0x92, 0xad, 0x66, 0x68, 0x2a, 0xb9, 0xd5, 0x0c, 0x19, 0x8a, 0x56, 0x33, 0x34, 0xcc, 0xbe, 0x2c,
	0xdf, 0xab, 0xdb, 0x86, 0xdb, 0xdc, 0xd1, 0x78, 0x1e, 0x12, 0x35, 0x09, 0xa0, 0x7e, 0x22, 0xdf,
	0xb1, 0x04, 0xff, 0xcf, 0x0f, 0xfb, 0xf3, 0xe0, 0x1f, 0x2f, 0x61, 0xaf, 0x4f, 0x53, 0xf4, 0x6f,
	0x08, 0x9c, 0x69, 0x0b, 0x42, 0xb6, 0xc7, 0xa1, 0x79, 0x45, 0x7b, 0x1c, 0x9f, 0x84, 0x48, 0x80,
	0xee, 0x15, 0x73, 0x01, 0x4e, 0xfa, 0x2e, 0xf6, 0x98, 0xb7, 0x39, 0x92, 0x44, 0xd6, 0x90, 0xf5,
	0x1f, 0x76, 0x41, 0xca, 0x77, 0xe0, 0x60, 0x70, 0x06, 0x77, 0x3d, 0x17, 0xf3, 0xb8, 0x06, 0xec,
	0x90, 0x6f, 0xc8, 0x9b, 0x7d, 0x47, 0xf6, 0x2f, 0xcd, 0x67, 0x3d, 0x16, 0x67, 0xb7, 0x7a, 0x88,
	0x3f, 0x11, 0x18, 0x51, 0x2c, 0x86, 0x0c, 0x57, 0xe1, 0x50, 0x70, 0x46, 0xec, 0x69, 0x5a, 0x8a,
	0x61, 0xf7, 0xae, 0xed, 0x68, 0xf1, 0x77, 0x39, 0xd8, 0xcf, 0x09, 0xd0, 0x47, 0xd0, 0xeb, 0xa9,
	0x40, 0x74, 0x34, 0x8a, 0x2a, 0x2a, 0x36, 0x69, 0xa7, 0xdb, 0x58, 0x79, 0x8b, 0xb1, 0xdc, 0xf3,
	0xbf, 0xfd, 0xfb, 0x67, 0x7b, 0x34, 0x3a, 0xa4, 0x27, 0xc8, 0x6b, 0xf4, 0xa7, 0x04, 0xfa, 0x7d,
	0xe2, 0x11, 0x3d, 0x97, 0x10, 0x38, 0x56, 0x81, 0xd2, 0xa6, 0x52, 0x5a, 0x23, 0x9c, 0x31, 0x0e,
	0x27, 0x47, 0xb3, 0x51, 0x38, 0xbc, 0xfb, 0xd5, 0x37, 0x3d, 0x10, 0x3f, 0x27, 0x70, 0xc0, 0xaf,
	0x38, 0x51, 0xc5, 0x3a, 0x31, 0xc2, 0x95, 0x96, 0x4f, 0x6b, 0x8e, 0xb8, 0xce, 0x71, 0x5c, 0x63,
	0x74, 0x34, 0x09, 0x17, 0x36, 0x32, 0xde, 0xdf, 0x6e, 0xbf, 0x22, 0x41, 0x99, 0x49, 0x85, 0x2e,
	0x46, 0xf3, 0x52, 0xa1, 0x8b, 0x53, 0xb5, 0xd8, 0x45, 0x8e, 0xae, 0x48, 0xa7, 0xa3, 0xe8, 0x9a,
	0x97, 0x7c, 0xb9, 0xf5, 0xed, 0x29, 0xc7, 0xf7, 0x4c, 0x7f, 0xea, 0xdd, 0xfd, 0xcf, 0xe8, 0x6b,
	0x02, 0xc7, 0xe2, 0x55, 0x23, 0x3a, 0x97, 0x0c, 0x42, 0xa9, 0x77, 0x69, 0x17, 0x3b, 0x77, 0x44,
	0x1e, 0xd3, 0x9c, 0xc7, 0x04, 0x1d, 0x6f, 0xc3, 0xc3, 0x11, 0x44, 0xe8, 0x1f, 0x48, 0x44, 0xbb,
	0xa1, 0xd3, 0xc9, 0xeb, 0xc7, 0x2b, 0x4c, 0x5a, 0xa1, 0x03, 0x0f, 0x84, 0xba, 0xcc, 0xa1, 0x2e,
	0xd2, 0x85, 0x28, 0x54, 0x14, 0xa0, 0x62, 0xb2, 0x1e, 0x94, 0xa6, 0x9e, 0xd1, 0x77, 0x04, 0x86,
	0x13, 0x25, 0x19, 0x7a, 0x49, 0x99, 0x47, 0xa5, 0xa4, 0xa4, 0x2d, 0xec, 0xca, 0x17, 0xb9, 0xcd,
	0x70, 0x6e, 0x53, 0x74, 0xb2, 0x3d, 0x37, 0xb9, 0x13, 0xbf, 0x24, 0x7e, 0xc9, 0x84, 0x4e, 0x26,
	0x03, 0x88, 0x28, 0x37, 0xda, 0xb9, 0x74, 0xc6, 0x08, 0x6f, 0x96, 0xc3, 0xd3, 0xe9, 0x94, 0xae,
	0x50, 0xf4, 0xa3, 0xa5, 0xfe, 0x8a, 0xc0, 0x60, 0x9c, 0x00, 0x42, 0x67, 0x95, 0xb9, 0x4a, 0x92,
	0x6d, 0xb4, 0x0b, 0x9d, 0xba, 0x21, 0xfc, 0x29, 0x0e, 0xff, 0x0c, 0x3d, 0xad, 0x82, 0x2f, 0xf3,
	0xfa, 0x9e, 0x80, 0x96, 0xac, 0x69, 0xd0, 0x85, 0x34, 0xa9, 0x4b, 0x90, 0x4d, 0xb4, 0xcb, 0xbb,
	0x73, 0x46, 0x22, 0x73, 0x9c, 0x48, 0x81, 0xea, 0xca, 0x7d, 0x68, 0x78, 0xee, 0x65, 0x2e, 0xb0,
	0x94, 0x9d, 0x26, 0xe6, 0x37, 0x04, 0x8e, 0xc6, 0x4a, 0x26, 0x54, 0x91, 0x53, 0x95, 0x16, 0xa3,
	0xcd, 0x75, 0xec, 0x87, 0x1c, 0x16, 0x39, 0x87, 0x39, 0x3a, 0xab, 0xe4, 0xb0, 0xe1, 0xc5, 0x28,
	0xf3, 0x2d, 0x29, 0xaf, 0x1b, 0xae, 0x51, 0xe6, 0x22, 0x0e, 0xfd, 0x3d, 0x89, 0x0a, 0x2d, 0xb4,
	0xd0, 0xe6, 0xc9, 0x8b, 0xf6, 0x3b, 0x5a, 0xb1, 0x13, 0x17, 0x84, 0x7e, 0x85, 0x43, 0x9f, 0xa7,
	0x73, 0x4a, 0xe8, 0x1e, 0x64, 0xb1, 0x09, 0x4d, 0xe8, 0xad, 0xca, 0xfa, 0x23, 0x81, 0x23, 0x31,
	0xc2, 0x0a, 0x3d, 0xaf, 0x2c, 0xec, 0x24, 0x0a, 0xb3, 0x1d, 0x7a, 0xb5, 0x7f, 0xba, 0x94, 0x2c,
	0x1c, 0xfa, 0x82, 0x48, 0x81, 0x84, 0x9e, 0x4d, 0x5e, 0x3d, 0xa4, 0xb9, 0x68, 0x13, 0x69, 0x4c,
	0x11, 0x1d, 0xe3, 0xe8, 0x32, 0x54, 0xd3, 0x13, 0x7f, 0x19, 0xa4, 0x3f, 0x24, 0xd0, 0xd7, 0x92,
	0x51, 0xa8, 0x22, 0x7a, 0x58, 0x87, 0xd1, 0x26, 0x53, 0xd9, 0x22, 0x94, 0x51, 0x0e, 0x25, 0x4b,
	0x33, 0x31, 0x1d, 0x88, 0x6d, 0x88, 0xbe, 0xe8, 0x27, 0x04, 0x40, 0x6a, 0x2f, 0xaa, 0x5b, 0x38,
	0x22, 0xdf, 0xa8, 0x6e, 0xe1, 0xa8, 0x9c, 0xc3, 0xc6, 0x39, 0x1e, 0x46, 0x73, 0xf1, 0x78, 0x44,
	0x3f, 0x64, 0x1b, 0xf4, 0x1f, 0x44, 0xa1, 0xaa, 0xa8, 0x5e, 0xb9, 0x76, 0x32, 0x90, 0xea, 0x95,
	0x6b, 0xab, 0xf5, 0xb0, 0x6b, 0x9c, 0xc0, 0x15, 0xba, 0xa8, 0x2b, 0x7e, 0xd4, 0x2d, 0xf3, 0x5f,
	0x75, 0xcb, 0x15, 0xee, 0x2e, 0x8e, 0x8f, 0x6d, 0xf8, 0x9e, 0x95, 0xff, 0x12, 0x18, 0x69, 0x2b,
	0x95, 0xd0, 0x25, 0xe5, 0xe9, 0x48, 0x25, 0xfb, 0x68, 0xcb, 0x9f, 0x29, 0x46, 0xfb, 0x0b, 0x4f,
	0xc5, 0xda, 0xf1, 0x68, 0xd3, 0xdf, 0x90, 0x88, 0x08, 0xa0, 0xea, 0xb7, 0xe2, 0xa5, 0x08, 0x55,
	0xbf, 0x95, 0x20, 0x3e, 0xb0, 0x79, 0x8e, 0x7b, 0x86, 0x16, 0xda, 0xe3, 0x0e, 0xef, 0xd0, 0x5f,
	0x08, 0x1c, 0x8d, 0x55, 0x36, 0x54, 0xcf, 0x8d, 0x4a, 0x4a, 0x51, 0x3d, 0x37, 0x4a, 0x09, 0x85,
	0x5d, 0xe2, 0x2c, 0xce, 0xd3, 0x62, 0x94, 0xc5, 0x26, 0x77, 0x2c, 0x47, 0xc9, 0x08, 0x1a, 0x7f,
	0x26, 0x70, 0x3c, 0x41, 0x9e, 0xa0, 0x17, 0x3b, 0x29, 0x8d, 0x40, 0x51, 0xcd, 0xef, 0xc2, 0x13,
	0xc9, 0x14, 0x38, 0x99, 0x49, 0x7a, 0xb6, 0xfd, 0x96, 0x88, 0xf2, 0x79, 0x49, 0xc2, 0x62, 0x02,
	0xd5, 0x95, 0x97, 0x60, 0xcc, 0x43, 0x33, 0x9d, 0xde, 0x01, 0x81, 0x2e, 0x70, 0xa0, 0xb3, 0x74,
	0x46, 0xfd, 0xc6, 0xd8, 0x46, 0xf8, 0x9d, 0x6c, 0x42, 0x7e, 0x45, 0xe0, 0x70, 0x44, 0x3a, 0xa0,
	0x45, 0xf5, 0x6b, 0x17, 0x0b, 0x7c, 0xa6, 0x23, 0x1f, 0xc4, 0x7e, 0x81, 0x63, 0x9f, 0xa6, 0xf9,
	0x8e, 0xb0, 0x3b, 0x4b, 0xc5, 0xb7, 0x1f, 0xb2, 0xe4, 0xfd, 0x87, 0x2c, 0xf9, 0xd7, 0x87, 0x2c,
	0xf9, 0xf1, 0xc7, 0x6c, 0xcf, 0xfb, 0x8f, 0xd9, 0x9e, 0xbf, 0x7f, 0xcc, 0xf6, 0x7c, 0x73, 0x48,
	0x04, 0x7a, 0x2c, 0x43, 0xb9, 0x3b, 0x0d, 0xd3, 0x59, 0xeb, 0xe5, 0xff, 0x79, 0x65, 0xe6, 0xff,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x99, 0x0b, 0x62, 0x65, 0x0d, 0x24, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries epoch
	EpochLength(ctx context.Context, in *QueryGetEpochLengthRequest, opts ...grpc.CallOption) (*QueryGetEpochLengthResponse, error)
	CurrentEpoch(ctx context.Context, in *QueryGetCurrentEpochRequest, opts ...grpc.CallOption) (*QueryGetCurrentEpochResponse, error)
	// Queries a list of Node Workload items.
	NodeWorkload(ctx context.Context, in *QueryGetNodeWorkloadRequest, opts ...grpc.CallOption) (*QueryGetNodeWorkloadResponse, error)
	AllNodeWorkloadByEpoch(ctx context.Context, in *QueryGetAllNodeWorkloadByEpochRequest, opts ...grpc.CallOption) (*QueryGetAllNodeWorkloadByEpochResponse, error)
	// Queries a list of Manager Workload items.
	ManagerWorkload(ctx context.Context, in *QueryGetManagerWorkloadRequest, opts ...grpc.CallOption) (*QueryGetManagerWorkloadResponse, error)
	AllManagerWorkloadByEpoch(ctx context.Context, in *QueryGetAllManagerWorkloadByEpochRequest, opts ...grpc.CallOption) (*QueryGetAllManagerWorkloadByEpochResponse, error)
	// Queries a list of Workreport items.
	Workreport(ctx context.Context, in *QueryGetWorkreportRequest, opts ...grpc.CallOption) (*QueryGetWorkreportResponse, error)
	AllWorkreportByEpoch(ctx context.Context, in *QueryGetAllWorkreportByEpochRequest, opts ...grpc.CallOption) (*QueryGetAllWorkreportByEpochResponse, error)
	// Queries some param settings
	WorkreportProcessBatchSize(ctx context.Context, in *QueryGetWorkreportProcessBatchSizeRequest, opts ...grpc.CallOption) (*QueryGetWorkreportProcessBatchSizeResponse, error)
	HistoryEpochDataDepth(ctx context.Context, in *QueryGetHistoryEpochDataDepthRequest, opts ...grpc.CallOption) (*QueryGetHistoryEpochDataDepthResponse, error)
	EpochProcessData(ctx context.Context, in *QueryGetEpochProcessDataRequest, opts ...grpc.CallOption) (*QueryGetEpochProcessDataResponse, error)
	AllEpochProcessData(ctx context.Context, in *QueryGetAllEpochProcessDataRequest, opts ...grpc.CallOption) (*QueryGetAllEpochProcessDataResponse, error)
	// Queries a Superior
	Superior(ctx context.Context, in *QueryGetSuperiorRequest, opts ...grpc.CallOption) (*QueryGetSuperiorResponse, error)
	// Queries era
	EraLength(ctx context.Context, in *QueryGetEraLengthRequest, opts ...grpc.CallOption) (*QueryGetEraLengthResponse, error)
	CurrentEra(ctx context.Context, in *QueryGetCurrentEraRequest, opts ...grpc.CallOption) (*QueryGetCurrentEraResponse, error)
	// Queries a list of ReputationPointChangeData items.
	ReputationPointChangeData(ctx context.Context, in *QueryGetReputationPointChangeDataRequest, opts ...grpc.CallOption) (*QueryGetReputationPointChangeDataResponse, error)
	AllReputationPointChangeDataByEra(ctx context.Context, in *QueryGetAllReputationPointChangeDataByEraRequest, opts ...grpc.CallOption) (*QueryGetAllReputationPointChangeDataByEraResponse, error)
	// Queries a list of ReputationPoint items.
	ReputationPoint(ctx context.Context, in *QueryGetReputationPointRequest, opts ...grpc.CallOption) (*QueryGetReputationPointResponse, error)
	LatestReputationPoint(ctx context.Context, in *QueryGetLatestReputationPointRequest, opts ...grpc.CallOption) (*QueryGetLatestReputationPointResponse, error)
	AllReputationPointByEra(ctx context.Context, in *QueryGetAllReputationPointByEraRequest, opts ...grpc.CallOption) (*QueryGetAllReputationPointByEraResponse, error)
	// Queries a list of EpochProcessData items.
	EraProcessData(ctx context.Context, in *QueryGetEraProcessDataRequest, opts ...grpc.CallOption) (*QueryGetEraProcessDataResponse, error)
	AllEraProcessData(ctx context.Context, in *QueryGetAllEraProcessDataRequest, opts ...grpc.CallOption) (*QueryGetAllEraProcessDataResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/enreach.workload.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EpochLength(ctx context.Context, in *QueryGetEpochLengthRequest, opts ...grpc.CallOption) (*QueryGetEpochLengthResponse, error) {
	out := new(QueryGetEpochLengthResponse)
	err := c.cc.Invoke(ctx, "/enreach.workload.Query/EpochLength", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CurrentEpoch(ctx context.Context, in *QueryGetCurrentEpochRequest, opts ...grpc.CallOption) (*QueryGetCurrentEpochResponse, error) {
	out := new(QueryGetCurrentEpochResponse)
	err := c.cc.Invoke(ctx, "/enreach.workload.Query/CurrentEpoch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NodeWorkload(ctx context.Context, in *QueryGetNodeWorkloadRequest, opts ...grpc.CallOption) (*QueryGetNodeWorkloadResponse, error) {
	out := new(QueryGetNodeWorkloadResponse)
	err := c.cc.Invoke(ctx, "/enreach.workload.Query/NodeWorkload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllNodeWorkloadByEpoch(ctx context.Context, in *QueryGetAllNodeWorkloadByEpochRequest, opts ...grpc.CallOption) (*QueryGetAllNodeWorkloadByEpochResponse, error) {
	out := new(QueryGetAllNodeWorkloadByEpochResponse)
	err := c.cc.Invoke(ctx, "/enreach.workload.Query/AllNodeWorkloadByEpoch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ManagerWorkload(ctx context.Context, in *QueryGetManagerWorkloadRequest, opts ...grpc.CallOption) (*QueryGetManagerWorkloadResponse, error) {
	out := new(QueryGetManagerWorkloadResponse)
	err := c.cc.Invoke(ctx, "/enreach.workload.Query/ManagerWorkload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllManagerWorkloadByEpoch(ctx context.Context, in *QueryGetAllManagerWorkloadByEpochRequest, opts ...grpc.CallOption) (*QueryGetAllManagerWorkloadByEpochResponse, error) {
	out := new(QueryGetAllManagerWorkloadByEpochResponse)
	err := c.cc.Invoke(ctx, "/enreach.workload.Query/AllManagerWorkloadByEpoch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Workreport(ctx context.Context, in *QueryGetWorkreportRequest, opts ...grpc.CallOption) (*QueryGetWorkreportResponse, error) {
	out := new(QueryGetWorkreportResponse)
	err := c.cc.Invoke(ctx, "/enreach.workload.Query/Workreport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllWorkreportByEpoch(ctx context.Context, in *QueryGetAllWorkreportByEpochRequest, opts ...grpc.CallOption) (*QueryGetAllWorkreportByEpochResponse, error) {
	out := new(QueryGetAllWorkreportByEpochResponse)
	err := c.cc.Invoke(ctx, "/enreach.workload.Query/AllWorkreportByEpoch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) WorkreportProcessBatchSize(ctx context.Context, in *QueryGetWorkreportProcessBatchSizeRequest, opts ...grpc.CallOption) (*QueryGetWorkreportProcessBatchSizeResponse, error) {
	out := new(QueryGetWorkreportProcessBatchSizeResponse)
	err := c.cc.Invoke(ctx, "/enreach.workload.Query/WorkreportProcessBatchSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HistoryEpochDataDepth(ctx context.Context, in *QueryGetHistoryEpochDataDepthRequest, opts ...grpc.CallOption) (*QueryGetHistoryEpochDataDepthResponse, error) {
	out := new(QueryGetHistoryEpochDataDepthResponse)
	err := c.cc.Invoke(ctx, "/enreach.workload.Query/HistoryEpochDataDepth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EpochProcessData(ctx context.Context, in *QueryGetEpochProcessDataRequest, opts ...grpc.CallOption) (*QueryGetEpochProcessDataResponse, error) {
	out := new(QueryGetEpochProcessDataResponse)
	err := c.cc.Invoke(ctx, "/enreach.workload.Query/EpochProcessData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllEpochProcessData(ctx context.Context, in *QueryGetAllEpochProcessDataRequest, opts ...grpc.CallOption) (*QueryGetAllEpochProcessDataResponse, error) {
	out := new(QueryGetAllEpochProcessDataResponse)
	err := c.cc.Invoke(ctx, "/enreach.workload.Query/AllEpochProcessData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Superior(ctx context.Context, in *QueryGetSuperiorRequest, opts ...grpc.CallOption) (*QueryGetSuperiorResponse, error) {
	out := new(QueryGetSuperiorResponse)
	err := c.cc.Invoke(ctx, "/enreach.workload.Query/Superior", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EraLength(ctx context.Context, in *QueryGetEraLengthRequest, opts ...grpc.CallOption) (*QueryGetEraLengthResponse, error) {
	out := new(QueryGetEraLengthResponse)
	err := c.cc.Invoke(ctx, "/enreach.workload.Query/EraLength", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CurrentEra(ctx context.Context, in *QueryGetCurrentEraRequest, opts ...grpc.CallOption) (*QueryGetCurrentEraResponse, error) {
	out := new(QueryGetCurrentEraResponse)
	err := c.cc.Invoke(ctx, "/enreach.workload.Query/CurrentEra", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ReputationPointChangeData(ctx context.Context, in *QueryGetReputationPointChangeDataRequest, opts ...grpc.CallOption) (*QueryGetReputationPointChangeDataResponse, error) {
	out := new(QueryGetReputationPointChangeDataResponse)
	err := c.cc.Invoke(ctx, "/enreach.workload.Query/ReputationPointChangeData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllReputationPointChangeDataByEra(ctx context.Context, in *QueryGetAllReputationPointChangeDataByEraRequest, opts ...grpc.CallOption) (*QueryGetAllReputationPointChangeDataByEraResponse, error) {
	out := new(QueryGetAllReputationPointChangeDataByEraResponse)
	err := c.cc.Invoke(ctx, "/enreach.workload.Query/AllReputationPointChangeDataByEra", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ReputationPoint(ctx context.Context, in *QueryGetReputationPointRequest, opts ...grpc.CallOption) (*QueryGetReputationPointResponse, error) {
	out := new(QueryGetReputationPointResponse)
	err := c.cc.Invoke(ctx, "/enreach.workload.Query/ReputationPoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LatestReputationPoint(ctx context.Context, in *QueryGetLatestReputationPointRequest, opts ...grpc.CallOption) (*QueryGetLatestReputationPointResponse, error) {
	out := new(QueryGetLatestReputationPointResponse)
	err := c.cc.Invoke(ctx, "/enreach.workload.Query/LatestReputationPoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllReputationPointByEra(ctx context.Context, in *QueryGetAllReputationPointByEraRequest, opts ...grpc.CallOption) (*QueryGetAllReputationPointByEraResponse, error) {
	out := new(QueryGetAllReputationPointByEraResponse)
	err := c.cc.Invoke(ctx, "/enreach.workload.Query/AllReputationPointByEra", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EraProcessData(ctx context.Context, in *QueryGetEraProcessDataRequest, opts ...grpc.CallOption) (*QueryGetEraProcessDataResponse, error) {
	out := new(QueryGetEraProcessDataResponse)
	err := c.cc.Invoke(ctx, "/enreach.workload.Query/EraProcessData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllEraProcessData(ctx context.Context, in *QueryGetAllEraProcessDataRequest, opts ...grpc.CallOption) (*QueryGetAllEraProcessDataResponse, error) {
	out := new(QueryGetAllEraProcessDataResponse)
	err := c.cc.Invoke(ctx, "/enreach.workload.Query/AllEraProcessData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries epoch
	EpochLength(context.Context, *QueryGetEpochLengthRequest) (*QueryGetEpochLengthResponse, error)
	CurrentEpoch(context.Context, *QueryGetCurrentEpochRequest) (*QueryGetCurrentEpochResponse, error)
	// Queries a list of Node Workload items.
	NodeWorkload(context.Context, *QueryGetNodeWorkloadRequest) (*QueryGetNodeWorkloadResponse, error)
	AllNodeWorkloadByEpoch(context.Context, *QueryGetAllNodeWorkloadByEpochRequest) (*QueryGetAllNodeWorkloadByEpochResponse, error)
	// Queries a list of Manager Workload items.
	ManagerWorkload(context.Context, *QueryGetManagerWorkloadRequest) (*QueryGetManagerWorkloadResponse, error)
	AllManagerWorkloadByEpoch(context.Context, *QueryGetAllManagerWorkloadByEpochRequest) (*QueryGetAllManagerWorkloadByEpochResponse, error)
	// Queries a list of Workreport items.
	Workreport(context.Context, *QueryGetWorkreportRequest) (*QueryGetWorkreportResponse, error)
	AllWorkreportByEpoch(context.Context, *QueryGetAllWorkreportByEpochRequest) (*QueryGetAllWorkreportByEpochResponse, error)
	// Queries some param settings
	WorkreportProcessBatchSize(context.Context, *QueryGetWorkreportProcessBatchSizeRequest) (*QueryGetWorkreportProcessBatchSizeResponse, error)
	HistoryEpochDataDepth(context.Context, *QueryGetHistoryEpochDataDepthRequest) (*QueryGetHistoryEpochDataDepthResponse, error)
	EpochProcessData(context.Context, *QueryGetEpochProcessDataRequest) (*QueryGetEpochProcessDataResponse, error)
	AllEpochProcessData(context.Context, *QueryGetAllEpochProcessDataRequest) (*QueryGetAllEpochProcessDataResponse, error)
	// Queries a Superior
	Superior(context.Context, *QueryGetSuperiorRequest) (*QueryGetSuperiorResponse, error)
	// Queries era
	EraLength(context.Context, *QueryGetEraLengthRequest) (*QueryGetEraLengthResponse, error)
	CurrentEra(context.Context, *QueryGetCurrentEraRequest) (*QueryGetCurrentEraResponse, error)
	// Queries a list of ReputationPointChangeData items.
	ReputationPointChangeData(context.Context, *QueryGetReputationPointChangeDataRequest) (*QueryGetReputationPointChangeDataResponse, error)
	AllReputationPointChangeDataByEra(context.Context, *QueryGetAllReputationPointChangeDataByEraRequest) (*QueryGetAllReputationPointChangeDataByEraResponse, error)
	// Queries a list of ReputationPoint items.
	ReputationPoint(context.Context, *QueryGetReputationPointRequest) (*QueryGetReputationPointResponse, error)
	LatestReputationPoint(context.Context, *QueryGetLatestReputationPointRequest) (*QueryGetLatestReputationPointResponse, error)
	AllReputationPointByEra(context.Context, *QueryGetAllReputationPointByEraRequest) (*QueryGetAllReputationPointByEraResponse, error)
	// Queries a list of EpochProcessData items.
	EraProcessData(context.Context, *QueryGetEraProcessDataRequest) (*QueryGetEraProcessDataResponse, error)
	AllEraProcessData(context.Context, *QueryGetAllEraProcessDataRequest) (*QueryGetAllEraProcessDataResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) EpochLength(ctx context.Context, req *QueryGetEpochLengthRequest) (*QueryGetEpochLengthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EpochLength not implemented")
}
func (*UnimplementedQueryServer) CurrentEpoch(ctx context.Context, req *QueryGetCurrentEpochRequest) (*QueryGetCurrentEpochResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentEpoch not implemented")
}
func (*UnimplementedQueryServer) NodeWorkload(ctx context.Context, req *QueryGetNodeWorkloadRequest) (*QueryGetNodeWorkloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeWorkload not implemented")
}
func (*UnimplementedQueryServer) AllNodeWorkloadByEpoch(ctx context.Context, req *QueryGetAllNodeWorkloadByEpochRequest) (*QueryGetAllNodeWorkloadByEpochResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllNodeWorkloadByEpoch not implemented")
}
func (*UnimplementedQueryServer) ManagerWorkload(ctx context.Context, req *QueryGetManagerWorkloadRequest) (*QueryGetManagerWorkloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManagerWorkload not implemented")
}
func (*UnimplementedQueryServer) AllManagerWorkloadByEpoch(ctx context.Context, req *QueryGetAllManagerWorkloadByEpochRequest) (*QueryGetAllManagerWorkloadByEpochResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllManagerWorkloadByEpoch not implemented")
}
func (*UnimplementedQueryServer) Workreport(ctx context.Context, req *QueryGetWorkreportRequest) (*QueryGetWorkreportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Workreport not implemented")
}
func (*UnimplementedQueryServer) AllWorkreportByEpoch(ctx context.Context, req *QueryGetAllWorkreportByEpochRequest) (*QueryGetAllWorkreportByEpochResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllWorkreportByEpoch not implemented")
}
func (*UnimplementedQueryServer) WorkreportProcessBatchSize(ctx context.Context, req *QueryGetWorkreportProcessBatchSizeRequest) (*QueryGetWorkreportProcessBatchSizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorkreportProcessBatchSize not implemented")
}
func (*UnimplementedQueryServer) HistoryEpochDataDepth(ctx context.Context, req *QueryGetHistoryEpochDataDepthRequest) (*QueryGetHistoryEpochDataDepthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HistoryEpochDataDepth not implemented")
}
func (*UnimplementedQueryServer) EpochProcessData(ctx context.Context, req *QueryGetEpochProcessDataRequest) (*QueryGetEpochProcessDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EpochProcessData not implemented")
}
func (*UnimplementedQueryServer) AllEpochProcessData(ctx context.Context, req *QueryGetAllEpochProcessDataRequest) (*QueryGetAllEpochProcessDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllEpochProcessData not implemented")
}
func (*UnimplementedQueryServer) Superior(ctx context.Context, req *QueryGetSuperiorRequest) (*QueryGetSuperiorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Superior not implemented")
}
func (*UnimplementedQueryServer) EraLength(ctx context.Context, req *QueryGetEraLengthRequest) (*QueryGetEraLengthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EraLength not implemented")
}
func (*UnimplementedQueryServer) CurrentEra(ctx context.Context, req *QueryGetCurrentEraRequest) (*QueryGetCurrentEraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentEra not implemented")
}
func (*UnimplementedQueryServer) ReputationPointChangeData(ctx context.Context, req *QueryGetReputationPointChangeDataRequest) (*QueryGetReputationPointChangeDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReputationPointChangeData not implemented")
}
func (*UnimplementedQueryServer) AllReputationPointChangeDataByEra(ctx context.Context, req *QueryGetAllReputationPointChangeDataByEraRequest) (*QueryGetAllReputationPointChangeDataByEraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllReputationPointChangeDataByEra not implemented")
}
func (*UnimplementedQueryServer) ReputationPoint(ctx context.Context, req *QueryGetReputationPointRequest) (*QueryGetReputationPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReputationPoint not implemented")
}
func (*UnimplementedQueryServer) LatestReputationPoint(ctx context.Context, req *QueryGetLatestReputationPointRequest) (*QueryGetLatestReputationPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LatestReputationPoint not implemented")
}
func (*UnimplementedQueryServer) AllReputationPointByEra(ctx context.Context, req *QueryGetAllReputationPointByEraRequest) (*QueryGetAllReputationPointByEraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllReputationPointByEra not implemented")
}
func (*UnimplementedQueryServer) EraProcessData(ctx context.Context, req *QueryGetEraProcessDataRequest) (*QueryGetEraProcessDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EraProcessData not implemented")
}
func (*UnimplementedQueryServer) AllEraProcessData(ctx context.Context, req *QueryGetAllEraProcessDataRequest) (*QueryGetAllEraProcessDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllEraProcessData not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.workload.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EpochLength_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetEpochLengthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EpochLength(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.workload.Query/EpochLength",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EpochLength(ctx, req.(*QueryGetEpochLengthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CurrentEpoch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCurrentEpochRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CurrentEpoch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.workload.Query/CurrentEpoch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CurrentEpoch(ctx, req.(*QueryGetCurrentEpochRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NodeWorkload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetNodeWorkloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NodeWorkload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.workload.Query/NodeWorkload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NodeWorkload(ctx, req.(*QueryGetNodeWorkloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllNodeWorkloadByEpoch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAllNodeWorkloadByEpochRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllNodeWorkloadByEpoch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.workload.Query/AllNodeWorkloadByEpoch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllNodeWorkloadByEpoch(ctx, req.(*QueryGetAllNodeWorkloadByEpochRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ManagerWorkload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetManagerWorkloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ManagerWorkload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.workload.Query/ManagerWorkload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ManagerWorkload(ctx, req.(*QueryGetManagerWorkloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllManagerWorkloadByEpoch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAllManagerWorkloadByEpochRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllManagerWorkloadByEpoch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.workload.Query/AllManagerWorkloadByEpoch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllManagerWorkloadByEpoch(ctx, req.(*QueryGetAllManagerWorkloadByEpochRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Workreport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetWorkreportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Workreport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.workload.Query/Workreport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Workreport(ctx, req.(*QueryGetWorkreportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllWorkreportByEpoch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAllWorkreportByEpochRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllWorkreportByEpoch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.workload.Query/AllWorkreportByEpoch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllWorkreportByEpoch(ctx, req.(*QueryGetAllWorkreportByEpochRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_WorkreportProcessBatchSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetWorkreportProcessBatchSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).WorkreportProcessBatchSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.workload.Query/WorkreportProcessBatchSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).WorkreportProcessBatchSize(ctx, req.(*QueryGetWorkreportProcessBatchSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HistoryEpochDataDepth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetHistoryEpochDataDepthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HistoryEpochDataDepth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.workload.Query/HistoryEpochDataDepth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HistoryEpochDataDepth(ctx, req.(*QueryGetHistoryEpochDataDepthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EpochProcessData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetEpochProcessDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EpochProcessData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.workload.Query/EpochProcessData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EpochProcessData(ctx, req.(*QueryGetEpochProcessDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllEpochProcessData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAllEpochProcessDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllEpochProcessData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.workload.Query/AllEpochProcessData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllEpochProcessData(ctx, req.(*QueryGetAllEpochProcessDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Superior_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSuperiorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Superior(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.workload.Query/Superior",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Superior(ctx, req.(*QueryGetSuperiorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EraLength_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetEraLengthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EraLength(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.workload.Query/EraLength",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EraLength(ctx, req.(*QueryGetEraLengthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CurrentEra_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCurrentEraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CurrentEra(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.workload.Query/CurrentEra",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CurrentEra(ctx, req.(*QueryGetCurrentEraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ReputationPointChangeData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetReputationPointChangeDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ReputationPointChangeData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.workload.Query/ReputationPointChangeData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ReputationPointChangeData(ctx, req.(*QueryGetReputationPointChangeDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllReputationPointChangeDataByEra_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAllReputationPointChangeDataByEraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllReputationPointChangeDataByEra(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.workload.Query/AllReputationPointChangeDataByEra",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllReputationPointChangeDataByEra(ctx, req.(*QueryGetAllReputationPointChangeDataByEraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ReputationPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetReputationPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ReputationPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.workload.Query/ReputationPoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ReputationPoint(ctx, req.(*QueryGetReputationPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LatestReputationPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetLatestReputationPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LatestReputationPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.workload.Query/LatestReputationPoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LatestReputationPoint(ctx, req.(*QueryGetLatestReputationPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllReputationPointByEra_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAllReputationPointByEraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllReputationPointByEra(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.workload.Query/AllReputationPointByEra",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllReputationPointByEra(ctx, req.(*QueryGetAllReputationPointByEraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EraProcessData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetEraProcessDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EraProcessData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.workload.Query/EraProcessData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EraProcessData(ctx, req.(*QueryGetEraProcessDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllEraProcessData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAllEraProcessDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllEraProcessData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.workload.Query/AllEraProcessData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllEraProcessData(ctx, req.(*QueryGetAllEraProcessDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "enreach.workload.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "EpochLength",
			Handler:    _Query_EpochLength_Handler,
		},
		{
			MethodName: "CurrentEpoch",
			Handler:    _Query_CurrentEpoch_Handler,
		},
		{
			MethodName: "NodeWorkload",
			Handler:    _Query_NodeWorkload_Handler,
		},
		{
			MethodName: "AllNodeWorkloadByEpoch",
			Handler:    _Query_AllNodeWorkloadByEpoch_Handler,
		},
		{
			MethodName: "ManagerWorkload",
			Handler:    _Query_ManagerWorkload_Handler,
		},
		{
			MethodName: "AllManagerWorkloadByEpoch",
			Handler:    _Query_AllManagerWorkloadByEpoch_Handler,
		},
		{
			MethodName: "Workreport",
			Handler:    _Query_Workreport_Handler,
		},
		{
			MethodName: "AllWorkreportByEpoch",
			Handler:    _Query_AllWorkreportByEpoch_Handler,
		},
		{
			MethodName: "WorkreportProcessBatchSize",
			Handler:    _Query_WorkreportProcessBatchSize_Handler,
		},
		{
			MethodName: "HistoryEpochDataDepth",
			Handler:    _Query_HistoryEpochDataDepth_Handler,
		},
		{
			MethodName: "EpochProcessData",
			Handler:    _Query_EpochProcessData_Handler,
		},
		{
			MethodName: "AllEpochProcessData",
			Handler:    _Query_AllEpochProcessData_Handler,
		},
		{
			MethodName: "Superior",
			Handler:    _Query_Superior_Handler,
		},
		{
			MethodName: "EraLength",
			Handler:    _Query_EraLength_Handler,
		},
		{
			MethodName: "CurrentEra",
			Handler:    _Query_CurrentEra_Handler,
		},
		{
			MethodName: "ReputationPointChangeData",
			Handler:    _Query_ReputationPointChangeData_Handler,
		},
		{
			MethodName: "AllReputationPointChangeDataByEra",
			Handler:    _Query_AllReputationPointChangeDataByEra_Handler,
		},
		{
			MethodName: "ReputationPoint",
			Handler:    _Query_ReputationPoint_Handler,
		},
		{
			MethodName: "LatestReputationPoint",
			Handler:    _Query_LatestReputationPoint_Handler,
		},
		{
			MethodName: "AllReputationPointByEra",
			Handler:    _Query_AllReputationPointByEra_Handler,
		},
		{
			MethodName: "EraProcessData",
			Handler:    _Query_EraProcessData_Handler,
		},
		{
			MethodName: "AllEraProcessData",
			Handler:    _Query_AllEraProcessData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "enreach/workload/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetEpochLengthRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEpochLengthRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEpochLengthRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetEpochLengthResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEpochLengthResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEpochLengthResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EpochLength != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EpochLength))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCurrentEpochRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCurrentEpochRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCurrentEpochRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetCurrentEpochResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCurrentEpochResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCurrentEpochResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CurrentEpoch != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CurrentEpoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNodeWorkloadRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNodeWorkloadRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNodeWorkloadRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NodeID) > 0 {
		i -= len(m.NodeID)
		copy(dAtA[i:], m.NodeID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.NodeID)))
		i--
		dAtA[i] = 0x12
	}
	if m.Epoch != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNodeWorkloadResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNodeWorkloadResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNodeWorkloadResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.NodeWorkload.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetAllNodeWorkloadByEpochRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllNodeWorkloadByEpochRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllNodeWorkloadByEpochRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Epoch != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllNodeWorkloadByEpochResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllNodeWorkloadByEpochResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllNodeWorkloadByEpochResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NodeWorkloads) > 0 {
		for iNdEx := len(m.NodeWorkloads) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NodeWorkloads[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetManagerWorkloadRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetManagerWorkloadRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetManagerWorkloadRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ManagerAccount) > 0 {
		i -= len(m.ManagerAccount)
		copy(dAtA[i:], m.ManagerAccount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ManagerAccount)))
		i--
		dAtA[i] = 0x12
	}
	if m.Epoch != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetManagerWorkloadResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetManagerWorkloadResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetManagerWorkloadResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ManagerWorkload.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetAllManagerWorkloadByEpochRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllManagerWorkloadByEpochRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllManagerWorkloadByEpochRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Epoch != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllManagerWorkloadByEpochResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllManagerWorkloadByEpochResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllManagerWorkloadByEpochResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ManagerWorkloads) > 0 {
		for iNdEx := len(m.ManagerWorkloads) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ManagerWorkloads[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetWorkreportRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetWorkreportRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetWorkreportRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NodeID) > 0 {
		i -= len(m.NodeID)
		copy(dAtA[i:], m.NodeID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.NodeID)))
		i--
		dAtA[i] = 0x12
	}
	if m.Epoch != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetWorkreportResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetWorkreportResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetWorkreportResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Workreport.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetAllWorkreportByEpochRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllWorkreportByEpochRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllWorkreportByEpochRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Epoch != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllWorkreportByEpochResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllWorkreportByEpochResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllWorkreportByEpochResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Workreports) > 0 {
		for iNdEx := len(m.Workreports) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Workreports[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetWorkreportProcessBatchSizeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetWorkreportProcessBatchSizeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetWorkreportProcessBatchSizeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetWorkreportProcessBatchSizeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetWorkreportProcessBatchSizeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetWorkreportProcessBatchSizeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BatchSize != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BatchSize))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetHistoryEpochDataDepthRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetHistoryEpochDataDepthRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetHistoryEpochDataDepthRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetHistoryEpochDataDepthResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetHistoryEpochDataDepthResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetHistoryEpochDataDepthResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Depth != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Depth))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEpochProcessDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEpochProcessDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEpochProcessDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Epoch != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEpochProcessDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEpochProcessDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEpochProcessDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.EpochProcessData.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetAllEpochProcessDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllEpochProcessDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllEpochProcessDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllEpochProcessDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllEpochProcessDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllEpochProcessDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.EpochProcessDatas) > 0 {
		for iNdEx := len(m.EpochProcessDatas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EpochProcessDatas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSuperiorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSuperiorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSuperiorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetSuperiorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSuperiorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSuperiorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Superior.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetEraLengthRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEraLengthRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEraLengthRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetEraLengthResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEraLengthResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEraLengthResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EraLength != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EraLength))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCurrentEraRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCurrentEraRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCurrentEraRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetCurrentEraResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCurrentEraResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCurrentEraResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CurrentEra != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CurrentEra))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetReputationPointChangeDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetReputationPointChangeDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetReputationPointChangeDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NodeID) > 0 {
		i -= len(m.NodeID)
		copy(dAtA[i:], m.NodeID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.NodeID)))
		i--
		dAtA[i] = 0x12
	}
	if m.Era != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Era))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetReputationPointChangeDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetReputationPointChangeDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetReputationPointChangeDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ReputationPointChangeData.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetAllReputationPointChangeDataByEraRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllReputationPointChangeDataByEraRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllReputationPointChangeDataByEraRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Era != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Era))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllReputationPointChangeDataByEraResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllReputationPointChangeDataByEraResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllReputationPointChangeDataByEraResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ReputationPointChangeDatas) > 0 {
		for iNdEx := len(m.ReputationPointChangeDatas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReputationPointChangeDatas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetReputationPointRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetReputationPointRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetReputationPointRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NodeID) > 0 {
		i -= len(m.NodeID)
		copy(dAtA[i:], m.NodeID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.NodeID)))
		i--
		dAtA[i] = 0x12
	}
	if m.Era != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Era))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetReputationPointResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetReputationPointResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetReputationPointResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ReputationPoint.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetLatestReputationPointRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLatestReputationPointRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLatestReputationPointRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NodeID) > 0 {
		i -= len(m.NodeID)
		copy(dAtA[i:], m.NodeID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.NodeID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLatestReputationPointResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLatestReputationPointResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLatestReputationPointResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ReputationPoint.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetAllReputationPointByEraRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllReputationPointByEraRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllReputationPointByEraRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Era != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Era))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllReputationPointByEraResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllReputationPointByEraResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllReputationPointByEraResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ReputationPoints) > 0 {
		for iNdEx := len(m.ReputationPoints) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReputationPoints[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEraProcessDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEraProcessDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEraProcessDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Era != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Era))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEraProcessDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEraProcessDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEraProcessDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.EraProcessData.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetAllEraProcessDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllEraProcessDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllEraProcessDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllEraProcessDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllEraProcessDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllEraProcessDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.EraProcessDatas) > 0 {
		for iNdEx := len(m.EraProcessDatas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EraProcessDatas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetEpochLengthRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetEpochLengthResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochLength != 0 {
		n += 1 + sovQuery(uint64(m.EpochLength))
	}
	return n
}

func (m *QueryGetCurrentEpochRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetCurrentEpochResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentEpoch != 0 {
		n += 1 + sovQuery(uint64(m.CurrentEpoch))
	}
	return n
}

func (m *QueryGetNodeWorkloadRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovQuery(uint64(m.Epoch))
	}
	l = len(m.NodeID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetNodeWorkloadResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.NodeWorkload.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetAllNodeWorkloadByEpochRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovQuery(uint64(m.Epoch))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAllNodeWorkloadByEpochResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NodeWorkloads) > 0 {
		for _, e := range m.NodeWorkloads {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetManagerWorkloadRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovQuery(uint64(m.Epoch))
	}
	l = len(m.ManagerAccount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetManagerWorkloadResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ManagerWorkload.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetAllManagerWorkloadByEpochRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovQuery(uint64(m.Epoch))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAllManagerWorkloadByEpochResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ManagerWorkloads) > 0 {
		for _, e := range m.ManagerWorkloads {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetWorkreportRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovQuery(uint64(m.Epoch))
	}
	l = len(m.NodeID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetWorkreportResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Workreport.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetAllWorkreportByEpochRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovQuery(uint64(m.Epoch))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAllWorkreportByEpochResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Workreports) > 0 {
		for _, e := range m.Workreports {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetWorkreportProcessBatchSizeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetWorkreportProcessBatchSizeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BatchSize != 0 {
		n += 1 + sovQuery(uint64(m.BatchSize))
	}
	return n
}

func (m *QueryGetHistoryEpochDataDepthRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetHistoryEpochDataDepthResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Depth != 0 {
		n += 1 + sovQuery(uint64(m.Depth))
	}
	return n
}

func (m *QueryGetEpochProcessDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovQuery(uint64(m.Epoch))
	}
	return n
}

func (m *QueryGetEpochProcessDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.EpochProcessData.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetAllEpochProcessDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAllEpochProcessDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EpochProcessDatas) > 0 {
		for _, e := range m.EpochProcessDatas {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSuperiorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetSuperiorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Superior.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetEraLengthRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetEraLengthResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EraLength != 0 {
		n += 1 + sovQuery(uint64(m.EraLength))
	}
	return n
}

func (m *QueryGetCurrentEraRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetCurrentEraResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentEra != 0 {
		n += 1 + sovQuery(uint64(m.CurrentEra))
	}
	return n
}

func (m *QueryGetReputationPointChangeDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Era != 0 {
		n += 1 + sovQuery(uint64(m.Era))
	}
	l = len(m.NodeID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetReputationPointChangeDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ReputationPointChangeData.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetAllReputationPointChangeDataByEraRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Era != 0 {
		n += 1 + sovQuery(uint64(m.Era))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAllReputationPointChangeDataByEraResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ReputationPointChangeDatas) > 0 {
		for _, e := range m.ReputationPointChangeDatas {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetReputationPointRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Era != 0 {
		n += 1 + sovQuery(uint64(m.Era))
	}
	l = len(m.NodeID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetReputationPointResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ReputationPoint.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetLatestReputationPointRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetLatestReputationPointResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ReputationPoint.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetAllReputationPointByEraRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Era != 0 {
		n += 1 + sovQuery(uint64(m.Era))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAllReputationPointByEraResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ReputationPoints) > 0 {
		for _, e := range m.ReputationPoints {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetEraProcessDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Era != 0 {
		n += 1 + sovQuery(uint64(m.Era))
	}
	return n
}

func (m *QueryGetEraProcessDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.EraProcessData.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetAllEraProcessDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAllEraProcessDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EraProcessDatas) > 0 {
		for _, e := range m.EraProcessDatas {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEpochLengthRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEpochLengthRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEpochLengthRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEpochLengthResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEpochLengthResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEpochLengthResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochLength", wireType)
			}
			m.EpochLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochLength |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCurrentEpochRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCurrentEpochRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCurrentEpochRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCurrentEpochResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCurrentEpochResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCurrentEpochResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentEpoch", wireType)
			}
			m.CurrentEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentEpoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNodeWorkloadRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNodeWorkloadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNodeWorkloadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNodeWorkloadResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNodeWorkloadResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNodeWorkloadResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeWorkload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NodeWorkload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllNodeWorkloadByEpochRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllNodeWorkloadByEpochRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllNodeWorkloadByEpochRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllNodeWorkloadByEpochResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllNodeWorkloadByEpochResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllNodeWorkloadByEpochResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeWorkloads", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeWorkloads = append(m.NodeWorkloads, NodeWorkload{})
			if err := m.NodeWorkloads[len(m.NodeWorkloads)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetManagerWorkloadRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetManagerWorkloadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetManagerWorkloadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagerAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ManagerAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetManagerWorkloadResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetManagerWorkloadResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetManagerWorkloadResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagerWorkload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ManagerWorkload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllManagerWorkloadByEpochRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllManagerWorkloadByEpochRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllManagerWorkloadByEpochRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllManagerWorkloadByEpochResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllManagerWorkloadByEpochResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllManagerWorkloadByEpochResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagerWorkloads", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ManagerWorkloads = append(m.ManagerWorkloads, ManagerWorkload{})
			if err := m.ManagerWorkloads[len(m.ManagerWorkloads)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetWorkreportRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetWorkreportRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetWorkreportRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetWorkreportResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetWorkreportResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetWorkreportResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workreport", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Workreport.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllWorkreportByEpochRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllWorkreportByEpochRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllWorkreportByEpochRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllWorkreportByEpochResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllWorkreportByEpochResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllWorkreportByEpochResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workreports", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Workreports = append(m.Workreports, Workreport{})
			if err := m.Workreports[len(m.Workreports)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetWorkreportProcessBatchSizeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetWorkreportProcessBatchSizeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetWorkreportProcessBatchSizeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetWorkreportProcessBatchSizeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetWorkreportProcessBatchSizeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetWorkreportProcessBatchSizeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchSize", wireType)
			}
			m.BatchSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetHistoryEpochDataDepthRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetHistoryEpochDataDepthRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetHistoryEpochDataDepthRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetHistoryEpochDataDepthResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetHistoryEpochDataDepthResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetHistoryEpochDataDepthResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Depth", wireType)
			}
			m.Depth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Depth |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEpochProcessDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEpochProcessDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEpochProcessDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEpochProcessDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEpochProcessDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEpochProcessDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochProcessData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EpochProcessData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllEpochProcessDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllEpochProcessDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllEpochProcessDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllEpochProcessDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllEpochProcessDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllEpochProcessDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochProcessDatas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EpochProcessDatas = append(m.EpochProcessDatas, EpochProcessData{})
			if err := m.EpochProcessDatas[len(m.EpochProcessDatas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSuperiorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSuperiorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSuperiorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSuperiorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSuperiorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSuperiorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Superior", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Superior.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEraLengthRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEraLengthRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEraLengthRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEraLengthResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEraLengthResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEraLengthResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EraLength", wireType)
			}
			m.EraLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EraLength |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCurrentEraRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCurrentEraRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCurrentEraRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCurrentEraResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCurrentEraResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCurrentEraResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentEra", wireType)
			}
			m.CurrentEra = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentEra |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetReputationPointChangeDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetReputationPointChangeDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetReputationPointChangeDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Era", wireType)
			}
			m.Era = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Era |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetReputationPointChangeDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetReputationPointChangeDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetReputationPointChangeDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReputationPointChangeData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReputationPointChangeData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllReputationPointChangeDataByEraRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllReputationPointChangeDataByEraRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllReputationPointChangeDataByEraRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Era", wireType)
			}
			m.Era = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Era |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllReputationPointChangeDataByEraResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllReputationPointChangeDataByEraResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllReputationPointChangeDataByEraResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReputationPointChangeDatas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReputationPointChangeDatas = append(m.ReputationPointChangeDatas, ReputationPointChangeData{})
			if err := m.ReputationPointChangeDatas[len(m.ReputationPointChangeDatas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetReputationPointRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetReputationPointRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetReputationPointRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Era", wireType)
			}
			m.Era = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Era |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetReputationPointResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetReputationPointResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetReputationPointResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReputationPoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReputationPoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLatestReputationPointRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLatestReputationPointRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLatestReputationPointRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLatestReputationPointResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLatestReputationPointResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLatestReputationPointResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReputationPoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReputationPoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllReputationPointByEraRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllReputationPointByEraRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllReputationPointByEraRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Era", wireType)
			}
			m.Era = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Era |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllReputationPointByEraResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllReputationPointByEraResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllReputationPointByEraResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReputationPoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReputationPoints = append(m.ReputationPoints, ReputationPoint{})
			if err := m.ReputationPoints[len(m.ReputationPoints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEraProcessDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEraProcessDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEraProcessDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Era", wireType)
			}
			m.Era = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Era |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEraProcessDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEraProcessDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEraProcessDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EraProcessData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EraProcessData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllEraProcessDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllEraProcessDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllEraProcessDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllEraProcessDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllEraProcessDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllEraProcessDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EraProcessDatas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EraProcessDatas = append(m.EraProcessDatas, EraProcessData{})
			if err := m.EraProcessDatas[len(m.EraProcessDatas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
