// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: enreach/workload/workreport.proto

package types

import (
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type NodeScore struct {
	NodeID string `protobuf:"bytes,1,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	Score  uint64 `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`
}

func (m *NodeScore) Reset()         { *m = NodeScore{} }
func (m *NodeScore) String() string { return proto.CompactTextString(m) }
func (*NodeScore) ProtoMessage()    {}
func (*NodeScore) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9ac088b512d79e6, []int{0}
}
func (m *NodeScore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeScore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeScore.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeScore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeScore.Merge(m, src)
}
func (m *NodeScore) XXX_Size() int {
	return m.Size()
}
func (m *NodeScore) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeScore.DiscardUnknown(m)
}

var xxx_messageInfo_NodeScore proto.InternalMessageInfo

func (m *NodeScore) GetNodeID() string {
	if m != nil {
		return m.NodeID
	}
	return ""
}

func (m *NodeScore) GetScore() uint64 {
	if m != nil {
		return m.Score
	}
	return 0
}

type NodeScoreDB struct {
	Score    uint64 `protobuf:"varint,1,opt,name=score,proto3" json:"score,omitempty"`
	CreateAt uint64 `protobuf:"varint,2,opt,name=createAt,proto3" json:"createAt,omitempty"`
	UpdateAt uint64 `protobuf:"varint,3,opt,name=updateAt,proto3" json:"updateAt,omitempty"`
}

func (m *NodeScoreDB) Reset()         { *m = NodeScoreDB{} }
func (m *NodeScoreDB) String() string { return proto.CompactTextString(m) }
func (*NodeScoreDB) ProtoMessage()    {}
func (*NodeScoreDB) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9ac088b512d79e6, []int{1}
}
func (m *NodeScoreDB) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeScoreDB) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeScoreDB.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeScoreDB) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeScoreDB.Merge(m, src)
}
func (m *NodeScoreDB) XXX_Size() int {
	return m.Size()
}
func (m *NodeScoreDB) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeScoreDB.DiscardUnknown(m)
}

var xxx_messageInfo_NodeScoreDB proto.InternalMessageInfo

func (m *NodeScoreDB) GetScore() uint64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *NodeScoreDB) GetCreateAt() uint64 {
	if m != nil {
		return m.CreateAt
	}
	return 0
}

func (m *NodeScoreDB) GetUpdateAt() uint64 {
	if m != nil {
		return m.UpdateAt
	}
	return 0
}

type ManagerNodeScoreMap struct {
	ManagerScoreMap map[string]*NodeScoreDB `protobuf:"bytes,1,rep,name=managerScoreMap,proto3" json:"managerScoreMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *ManagerNodeScoreMap) Reset()         { *m = ManagerNodeScoreMap{} }
func (m *ManagerNodeScoreMap) String() string { return proto.CompactTextString(m) }
func (*ManagerNodeScoreMap) ProtoMessage()    {}
func (*ManagerNodeScoreMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9ac088b512d79e6, []int{2}
}
func (m *ManagerNodeScoreMap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ManagerNodeScoreMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ManagerNodeScoreMap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ManagerNodeScoreMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ManagerNodeScoreMap.Merge(m, src)
}
func (m *ManagerNodeScoreMap) XXX_Size() int {
	return m.Size()
}
func (m *ManagerNodeScoreMap) XXX_DiscardUnknown() {
	xxx_messageInfo_ManagerNodeScoreMap.DiscardUnknown(m)
}

var xxx_messageInfo_ManagerNodeScoreMap proto.InternalMessageInfo

func (m *ManagerNodeScoreMap) GetManagerScoreMap() map[string]*NodeScoreDB {
	if m != nil {
		return m.ManagerScoreMap
	}
	return nil
}

type Workreport struct {
	Epoch           uint64                  `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	NodeID          string                  `protobuf:"bytes,2,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	ManagerScoreMap map[string]*NodeScoreDB `protobuf:"bytes,3,rep,name=managerScoreMap,proto3" json:"managerScoreMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Workreport) Reset()         { *m = Workreport{} }
func (m *Workreport) String() string { return proto.CompactTextString(m) }
func (*Workreport) ProtoMessage()    {}
func (*Workreport) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9ac088b512d79e6, []int{3}
}
func (m *Workreport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Workreport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Workreport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Workreport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Workreport.Merge(m, src)
}
func (m *Workreport) XXX_Size() int {
	return m.Size()
}
func (m *Workreport) XXX_DiscardUnknown() {
	xxx_messageInfo_Workreport.DiscardUnknown(m)
}

var xxx_messageInfo_Workreport proto.InternalMessageInfo

func (m *Workreport) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *Workreport) GetNodeID() string {
	if m != nil {
		return m.NodeID
	}
	return ""
}

func (m *Workreport) GetManagerScoreMap() map[string]*NodeScoreDB {
	if m != nil {
		return m.ManagerScoreMap
	}
	return nil
}

type EpochProcessData struct {
	Epoch               uint64              `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	TotalNodesCount     uint64              `protobuf:"varint,2,opt,name=totalNodesCount,proto3" json:"totalNodesCount,omitempty"`
	ProcessedNodesCount uint64              `protobuf:"varint,3,opt,name=processedNodesCount,proto3" json:"processedNodesCount,omitempty"`
	StartAt             uint64              `protobuf:"varint,4,opt,name=startAt,proto3" json:"startAt,omitempty"`
	UpdateAt            uint64              `protobuf:"varint,5,opt,name=updateAt,proto3" json:"updateAt,omitempty"`
	Status              string              `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	Pagination          *query.PageResponse `protobuf:"bytes,7,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *EpochProcessData) Reset()         { *m = EpochProcessData{} }
func (m *EpochProcessData) String() string { return proto.CompactTextString(m) }
func (*EpochProcessData) ProtoMessage()    {}
func (*EpochProcessData) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9ac088b512d79e6, []int{4}
}
func (m *EpochProcessData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EpochProcessData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EpochProcessData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EpochProcessData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EpochProcessData.Merge(m, src)
}
func (m *EpochProcessData) XXX_Size() int {
	return m.Size()
}
func (m *EpochProcessData) XXX_DiscardUnknown() {
	xxx_messageInfo_EpochProcessData.DiscardUnknown(m)
}

var xxx_messageInfo_EpochProcessData proto.InternalMessageInfo

func (m *EpochProcessData) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *EpochProcessData) GetTotalNodesCount() uint64 {
	if m != nil {
		return m.TotalNodesCount
	}
	return 0
}

func (m *EpochProcessData) GetProcessedNodesCount() uint64 {
	if m != nil {
		return m.ProcessedNodesCount
	}
	return 0
}

func (m *EpochProcessData) GetStartAt() uint64 {
	if m != nil {
		return m.StartAt
	}
	return 0
}

func (m *EpochProcessData) GetUpdateAt() uint64 {
	if m != nil {
		return m.UpdateAt
	}
	return 0
}

func (m *EpochProcessData) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *EpochProcessData) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*NodeScore)(nil), "enreach.workload.NodeScore")
	proto.RegisterType((*NodeScoreDB)(nil), "enreach.workload.NodeScoreDB")
	proto.RegisterType((*ManagerNodeScoreMap)(nil), "enreach.workload.ManagerNodeScoreMap")
	proto.RegisterMapType((map[string]*NodeScoreDB)(nil), "enreach.workload.ManagerNodeScoreMap.ManagerScoreMapEntry")
	proto.RegisterType((*Workreport)(nil), "enreach.workload.Workreport")
	proto.RegisterMapType((map[string]*NodeScoreDB)(nil), "enreach.workload.Workreport.ManagerScoreMapEntry")
	proto.RegisterType((*EpochProcessData)(nil), "enreach.workload.EpochProcessData")
}

func init() { proto.RegisterFile("enreach/workload/workreport.proto", fileDescriptor_f9ac088b512d79e6) }

var fileDescriptor_f9ac088b512d79e6 = []byte{
	// 484 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x54, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xcd, 0x26, 0x4d, 0x4a, 0x27, 0x87, 0x46, 0xdb, 0x0a, 0x59, 0x91, 0xb0, 0x42, 0x2e, 0x44,
	0x1c, 0x6c, 0x92, 0x5e, 0xa0, 0xb7, 0x96, 0x54, 0x88, 0x43, 0x51, 0x65, 0x0e, 0x48, 0xf4, 0x34,
	0xb1, 0x47, 0x69, 0xd5, 0xd4, 0x6b, 0x76, 0xd7, 0x85, 0xfc, 0x0b, 0xee, 0xfc, 0x21, 0x8e, 0x39,
	0x72, 0x42, 0x28, 0xf9, 0x17, 0x9c, 0x90, 0xbd, 0xde, 0xc4, 0xf9, 0xe0, 0xde, 0x9b, 0xdf, 0xcc,
	0x9b, 0x1d, 0xef, 0x9b, 0x79, 0x0b, 0xcf, 0x29, 0x96, 0x84, 0xe1, 0x8d, 0xff, 0x55, 0xc8, 0xbb,
	0x89, 0xc0, 0x28, 0xff, 0x90, 0x94, 0x08, 0xa9, 0xbd, 0x44, 0x0a, 0x2d, 0x78, 0xab, 0xa0, 0x78,
	0x96, 0xd2, 0x7e, 0x19, 0x0a, 0x75, 0x2f, 0x94, 0x3f, 0x42, 0x45, 0xfe, 0x97, 0x94, 0xe4, 0xd4,
	0x7f, 0xe8, 0x8f, 0x48, 0x63, 0xdf, 0x4f, 0x70, 0x7c, 0x1b, 0xa3, 0xbe, 0x15, 0xb1, 0xa9, 0xee,
	0xbe, 0x81, 0x83, 0x0f, 0x22, 0xa2, 0x8f, 0xa1, 0x90, 0xc4, 0x9f, 0x42, 0x23, 0x16, 0x11, 0xbd,
	0x1f, 0x3a, 0xac, 0xc3, 0x7a, 0x07, 0x41, 0x81, 0xf8, 0x31, 0xd4, 0x55, 0x46, 0x70, 0xaa, 0x1d,
	0xd6, 0xdb, 0x0b, 0x0c, 0xe8, 0x5e, 0x43, 0x73, 0x59, 0x3a, 0x3c, 0x5f, 0x91, 0x58, 0x89, 0xc4,
	0xdb, 0xf0, 0x24, 0x94, 0x84, 0x9a, 0xce, 0x74, 0x51, 0xbd, 0xc4, 0x59, 0x2e, 0x4d, 0x22, 0x93,
	0xab, 0x99, 0x9c, 0xc5, 0xdd, 0xdf, 0x0c, 0x8e, 0x2e, 0x31, 0xc6, 0x31, 0xc9, 0x65, 0x93, 0x4b,
	0x4c, 0x78, 0x04, 0x87, 0xf7, 0x26, 0x6c, 0x43, 0x0e, 0xeb, 0xd4, 0x7a, 0xcd, 0xc1, 0xa9, 0xb7,
	0xa9, 0x83, 0xb7, 0xa3, 0xde, 0xc6, 0x2c, 0xbe, 0x88, 0xb5, 0x9c, 0x06, 0x9b, 0x47, 0xb6, 0x11,
	0x8e, 0x77, 0x11, 0x79, 0x0b, 0x6a, 0x77, 0x34, 0x2d, 0xd4, 0xc9, 0x3e, 0xf9, 0x09, 0xd4, 0x1f,
	0x70, 0x92, 0x1a, 0x69, 0x9a, 0x83, 0x67, 0xdb, 0x7f, 0x51, 0xd2, 0x28, 0x30, 0xdc, 0xd3, 0xea,
	0x6b, 0xd6, 0xfd, 0xcb, 0x00, 0x3e, 0x2d, 0x67, 0x99, 0xa9, 0x47, 0x89, 0x08, 0x6f, 0xac, 0x7a,
	0x39, 0x28, 0x0d, 0xa4, 0xba, 0x36, 0x90, 0xeb, 0x6d, 0x15, 0x6a, 0xb9, 0x0a, 0xfd, 0xed, 0xfe,
	0xab, 0x26, 0x8f, 0xe7, 0xf2, 0x3f, 0xaa, 0xd0, 0xba, 0xc8, 0x6e, 0x78, 0x25, 0x45, 0x48, 0x4a,
	0x0d, 0x51, 0xe3, 0x7f, 0x24, 0xe8, 0xc1, 0xa1, 0x16, 0x1a, 0x27, 0xd9, 0x49, 0xea, 0xad, 0x48,
	0x63, 0xbb, 0x47, 0x9b, 0x61, 0xfe, 0x0a, 0x8e, 0x12, 0x73, 0x1c, 0x45, 0x25, 0xb6, 0xd9, 0xac,
	0x5d, 0x29, 0xee, 0xc0, 0xbe, 0xd2, 0x28, 0xf5, 0x99, 0x76, 0xf6, 0x72, 0x96, 0x85, 0x6b, 0xab,
	0x59, 0x5f, 0x5f, 0xcd, 0x6c, 0x28, 0x4a, 0xa3, 0x4e, 0x95, 0xd3, 0x30, 0x43, 0x31, 0x88, 0xbf,
	0x03, 0x58, 0xd9, 0xcb, 0xd9, 0xcf, 0x25, 0x79, 0xe1, 0x19, 0x2f, 0x7a, 0x99, 0x17, 0xbd, 0xdc,
	0x8b, 0x5e, 0xe1, 0x45, 0xef, 0x0a, 0xc7, 0x14, 0x90, 0x4a, 0x44, 0xac, 0x28, 0x28, 0x95, 0x9e,
	0x0f, 0x7e, 0xce, 0x5d, 0x36, 0x9b, 0xbb, 0xec, 0xcf, 0xdc, 0x65, 0xdf, 0x17, 0x6e, 0x65, 0xb6,
	0x70, 0x2b, 0xbf, 0x16, 0x6e, 0xe5, 0xb3, 0x63, 0x9f, 0x83, 0x6f, 0xab, 0x07, 0x41, 0x4f, 0x13,
	0x52, 0xa3, 0x46, 0x6e, 0xe7, 0x93, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x87, 0x5c, 0x83, 0xae,
	0x31, 0x04, 0x00, 0x00,
}

func (m *NodeScore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeScore) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeScore) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Score != 0 {
		i = encodeVarintWorkreport(dAtA, i, uint64(m.Score))
		i--
		dAtA[i] = 0x10
	}
	if len(m.NodeID) > 0 {
		i -= len(m.NodeID)
		copy(dAtA[i:], m.NodeID)
		i = encodeVarintWorkreport(dAtA, i, uint64(len(m.NodeID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodeScoreDB) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeScoreDB) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeScoreDB) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdateAt != 0 {
		i = encodeVarintWorkreport(dAtA, i, uint64(m.UpdateAt))
		i--
		dAtA[i] = 0x18
	}
	if m.CreateAt != 0 {
		i = encodeVarintWorkreport(dAtA, i, uint64(m.CreateAt))
		i--
		dAtA[i] = 0x10
	}
	if m.Score != 0 {
		i = encodeVarintWorkreport(dAtA, i, uint64(m.Score))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ManagerNodeScoreMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ManagerNodeScoreMap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ManagerNodeScoreMap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ManagerScoreMap) > 0 {
		for k := range m.ManagerScoreMap {
			v := m.ManagerScoreMap[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintWorkreport(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintWorkreport(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintWorkreport(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Workreport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Workreport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Workreport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ManagerScoreMap) > 0 {
		for k := range m.ManagerScoreMap {
			v := m.ManagerScoreMap[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintWorkreport(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintWorkreport(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintWorkreport(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.NodeID) > 0 {
		i -= len(m.NodeID)
		copy(dAtA[i:], m.NodeID)
		i = encodeVarintWorkreport(dAtA, i, uint64(len(m.NodeID)))
		i--
		dAtA[i] = 0x12
	}
	if m.Epoch != 0 {
		i = encodeVarintWorkreport(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EpochProcessData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EpochProcessData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EpochProcessData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWorkreport(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintWorkreport(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x32
	}
	if m.UpdateAt != 0 {
		i = encodeVarintWorkreport(dAtA, i, uint64(m.UpdateAt))
		i--
		dAtA[i] = 0x28
	}
	if m.StartAt != 0 {
		i = encodeVarintWorkreport(dAtA, i, uint64(m.StartAt))
		i--
		dAtA[i] = 0x20
	}
	if m.ProcessedNodesCount != 0 {
		i = encodeVarintWorkreport(dAtA, i, uint64(m.ProcessedNodesCount))
		i--
		dAtA[i] = 0x18
	}
	if m.TotalNodesCount != 0 {
		i = encodeVarintWorkreport(dAtA, i, uint64(m.TotalNodesCount))
		i--
		dAtA[i] = 0x10
	}
	if m.Epoch != 0 {
		i = encodeVarintWorkreport(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintWorkreport(dAtA []byte, offset int, v uint64) int {
	offset -= sovWorkreport(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NodeScore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeID)
	if l > 0 {
		n += 1 + l + sovWorkreport(uint64(l))
	}
	if m.Score != 0 {
		n += 1 + sovWorkreport(uint64(m.Score))
	}
	return n
}

func (m *NodeScoreDB) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Score != 0 {
		n += 1 + sovWorkreport(uint64(m.Score))
	}
	if m.CreateAt != 0 {
		n += 1 + sovWorkreport(uint64(m.CreateAt))
	}
	if m.UpdateAt != 0 {
		n += 1 + sovWorkreport(uint64(m.UpdateAt))
	}
	return n
}

func (m *ManagerNodeScoreMap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ManagerScoreMap) > 0 {
		for k, v := range m.ManagerScoreMap {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovWorkreport(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovWorkreport(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovWorkreport(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Workreport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovWorkreport(uint64(m.Epoch))
	}
	l = len(m.NodeID)
	if l > 0 {
		n += 1 + l + sovWorkreport(uint64(l))
	}
	if len(m.ManagerScoreMap) > 0 {
		for k, v := range m.ManagerScoreMap {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovWorkreport(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovWorkreport(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovWorkreport(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *EpochProcessData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovWorkreport(uint64(m.Epoch))
	}
	if m.TotalNodesCount != 0 {
		n += 1 + sovWorkreport(uint64(m.TotalNodesCount))
	}
	if m.ProcessedNodesCount != 0 {
		n += 1 + sovWorkreport(uint64(m.ProcessedNodesCount))
	}
	if m.StartAt != 0 {
		n += 1 + sovWorkreport(uint64(m.StartAt))
	}
	if m.UpdateAt != 0 {
		n += 1 + sovWorkreport(uint64(m.UpdateAt))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovWorkreport(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovWorkreport(uint64(l))
	}
	return n
}

func sovWorkreport(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWorkreport(x uint64) (n int) {
	return sovWorkreport(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NodeScore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkreport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeScore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeScore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkreport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkreport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkreport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkreport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWorkreport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkreport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeScoreDB) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkreport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeScoreDB: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeScoreDB: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkreport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			m.CreateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkreport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateAt", wireType)
			}
			m.UpdateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkreport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWorkreport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkreport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ManagerNodeScoreMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkreport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ManagerNodeScoreMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ManagerNodeScoreMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagerScoreMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkreport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkreport
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkreport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ManagerScoreMap == nil {
				m.ManagerScoreMap = make(map[string]*NodeScoreDB)
			}
			var mapkey string
			var mapvalue *NodeScoreDB
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWorkreport
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWorkreport
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthWorkreport
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthWorkreport
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWorkreport
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthWorkreport
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthWorkreport
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &NodeScoreDB{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipWorkreport(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthWorkreport
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ManagerScoreMap[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkreport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkreport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Workreport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkreport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Workreport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Workreport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkreport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkreport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkreport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkreport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagerScoreMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkreport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkreport
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkreport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ManagerScoreMap == nil {
				m.ManagerScoreMap = make(map[string]*NodeScoreDB)
			}
			var mapkey string
			var mapvalue *NodeScoreDB
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWorkreport
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWorkreport
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthWorkreport
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthWorkreport
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWorkreport
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthWorkreport
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthWorkreport
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &NodeScoreDB{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipWorkreport(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthWorkreport
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ManagerScoreMap[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkreport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkreport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EpochProcessData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkreport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EpochProcessData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EpochProcessData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkreport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalNodesCount", wireType)
			}
			m.TotalNodesCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkreport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalNodesCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessedNodesCount", wireType)
			}
			m.ProcessedNodesCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkreport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProcessedNodesCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartAt", wireType)
			}
			m.StartAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkreport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateAt", wireType)
			}
			m.UpdateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkreport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkreport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkreport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkreport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkreport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkreport
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkreport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkreport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkreport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWorkreport(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWorkreport
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWorkreport
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWorkreport
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWorkreport
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWorkreport
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWorkreport
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWorkreport        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWorkreport          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWorkreport = fmt.Errorf("proto: unexpected end of group")
)
