// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: enreach/workload/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ///////////////////////////////////////////////////////////////
type MsgUpdateParam struct {
	Signer     string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	ParamKey   string `protobuf:"bytes,2,opt,name=paramKey,proto3" json:"paramKey,omitempty"`
	ParamValue string `protobuf:"bytes,3,opt,name=paramValue,proto3" json:"paramValue,omitempty"`
}

func (m *MsgUpdateParam) Reset()         { *m = MsgUpdateParam{} }
func (m *MsgUpdateParam) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParam) ProtoMessage()    {}
func (*MsgUpdateParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f9ce97a9c861bfc, []int{0}
}
func (m *MsgUpdateParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParam.Merge(m, src)
}
func (m *MsgUpdateParam) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParam) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParam.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParam proto.InternalMessageInfo

func (m *MsgUpdateParam) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgUpdateParam) GetParamKey() string {
	if m != nil {
		return m.ParamKey
	}
	return ""
}

func (m *MsgUpdateParam) GetParamValue() string {
	if m != nil {
		return m.ParamValue
	}
	return ""
}

type MsgUpdateParamResponse struct {
}

func (m *MsgUpdateParamResponse) Reset()         { *m = MsgUpdateParamResponse{} }
func (m *MsgUpdateParamResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamResponse) ProtoMessage()    {}
func (*MsgUpdateParamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f9ce97a9c861bfc, []int{1}
}
func (m *MsgUpdateParamResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamResponse.Merge(m, src)
}
func (m *MsgUpdateParamResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamResponse proto.InternalMessageInfo

// ////////////////
type MsgSubmitWorkreports struct {
	ManagerAccount string       `protobuf:"bytes,1,opt,name=managerAccount,proto3" json:"managerAccount,omitempty"`
	Epoch          uint64       `protobuf:"varint,2,opt,name=epoch,proto3" json:"epoch,omitempty"`
	NodeScores     []*NodeScore `protobuf:"bytes,3,rep,name=nodeScores,proto3" json:"nodeScores,omitempty"`
}

func (m *MsgSubmitWorkreports) Reset()         { *m = MsgSubmitWorkreports{} }
func (m *MsgSubmitWorkreports) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitWorkreports) ProtoMessage()    {}
func (*MsgSubmitWorkreports) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f9ce97a9c861bfc, []int{2}
}
func (m *MsgSubmitWorkreports) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitWorkreports) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitWorkreports.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitWorkreports) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitWorkreports.Merge(m, src)
}
func (m *MsgSubmitWorkreports) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitWorkreports) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitWorkreports.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitWorkreports proto.InternalMessageInfo

func (m *MsgSubmitWorkreports) GetManagerAccount() string {
	if m != nil {
		return m.ManagerAccount
	}
	return ""
}

func (m *MsgSubmitWorkreports) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *MsgSubmitWorkreports) GetNodeScores() []*NodeScore {
	if m != nil {
		return m.NodeScores
	}
	return nil
}

type MsgSubmitWorkreportsResponse struct {
}

func (m *MsgSubmitWorkreportsResponse) Reset()         { *m = MsgSubmitWorkreportsResponse{} }
func (m *MsgSubmitWorkreportsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitWorkreportsResponse) ProtoMessage()    {}
func (*MsgSubmitWorkreportsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f9ce97a9c861bfc, []int{3}
}
func (m *MsgSubmitWorkreportsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitWorkreportsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitWorkreportsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitWorkreportsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitWorkreportsResponse.Merge(m, src)
}
func (m *MsgSubmitWorkreportsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitWorkreportsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitWorkreportsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitWorkreportsResponse proto.InternalMessageInfo

// ///////////////
type MsgCreateSuperior struct {
	Signer  string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	Account string `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
}

func (m *MsgCreateSuperior) Reset()         { *m = MsgCreateSuperior{} }
func (m *MsgCreateSuperior) String() string { return proto.CompactTextString(m) }
func (*MsgCreateSuperior) ProtoMessage()    {}
func (*MsgCreateSuperior) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f9ce97a9c861bfc, []int{4}
}
func (m *MsgCreateSuperior) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateSuperior) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateSuperior.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateSuperior) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateSuperior.Merge(m, src)
}
func (m *MsgCreateSuperior) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateSuperior) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateSuperior.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateSuperior proto.InternalMessageInfo

func (m *MsgCreateSuperior) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgCreateSuperior) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

type MsgCreateSuperiorResponse struct {
}

func (m *MsgCreateSuperiorResponse) Reset()         { *m = MsgCreateSuperiorResponse{} }
func (m *MsgCreateSuperiorResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateSuperiorResponse) ProtoMessage()    {}
func (*MsgCreateSuperiorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f9ce97a9c861bfc, []int{5}
}
func (m *MsgCreateSuperiorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateSuperiorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateSuperiorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateSuperiorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateSuperiorResponse.Merge(m, src)
}
func (m *MsgCreateSuperiorResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateSuperiorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateSuperiorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateSuperiorResponse proto.InternalMessageInfo

type MsgUpdateSuperior struct {
	Signer  string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	Account string `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
}

func (m *MsgUpdateSuperior) Reset()         { *m = MsgUpdateSuperior{} }
func (m *MsgUpdateSuperior) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateSuperior) ProtoMessage()    {}
func (*MsgUpdateSuperior) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f9ce97a9c861bfc, []int{6}
}
func (m *MsgUpdateSuperior) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateSuperior) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateSuperior.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateSuperior) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateSuperior.Merge(m, src)
}
func (m *MsgUpdateSuperior) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateSuperior) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateSuperior.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateSuperior proto.InternalMessageInfo

func (m *MsgUpdateSuperior) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgUpdateSuperior) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

type MsgUpdateSuperiorResponse struct {
}

func (m *MsgUpdateSuperiorResponse) Reset()         { *m = MsgUpdateSuperiorResponse{} }
func (m *MsgUpdateSuperiorResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateSuperiorResponse) ProtoMessage()    {}
func (*MsgUpdateSuperiorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f9ce97a9c861bfc, []int{7}
}
func (m *MsgUpdateSuperiorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateSuperiorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateSuperiorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateSuperiorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateSuperiorResponse.Merge(m, src)
}
func (m *MsgUpdateSuperiorResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateSuperiorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateSuperiorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateSuperiorResponse proto.InternalMessageInfo

// ////////////////
type MsgSubmitReputationPointChangeData struct {
	ManagerAccount string                          `protobuf:"bytes,1,opt,name=managerAccount,proto3" json:"managerAccount,omitempty"`
	Era            uint64                          `protobuf:"varint,2,opt,name=era,proto3" json:"era,omitempty"`
	NodePoints     []*ReputationPointChangeRawData `protobuf:"bytes,3,rep,name=nodePoints,proto3" json:"nodePoints,omitempty"`
}

func (m *MsgSubmitReputationPointChangeData) Reset()         { *m = MsgSubmitReputationPointChangeData{} }
func (m *MsgSubmitReputationPointChangeData) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitReputationPointChangeData) ProtoMessage()    {}
func (*MsgSubmitReputationPointChangeData) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f9ce97a9c861bfc, []int{8}
}
func (m *MsgSubmitReputationPointChangeData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitReputationPointChangeData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitReputationPointChangeData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitReputationPointChangeData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitReputationPointChangeData.Merge(m, src)
}
func (m *MsgSubmitReputationPointChangeData) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitReputationPointChangeData) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitReputationPointChangeData.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitReputationPointChangeData proto.InternalMessageInfo

func (m *MsgSubmitReputationPointChangeData) GetManagerAccount() string {
	if m != nil {
		return m.ManagerAccount
	}
	return ""
}

func (m *MsgSubmitReputationPointChangeData) GetEra() uint64 {
	if m != nil {
		return m.Era
	}
	return 0
}

func (m *MsgSubmitReputationPointChangeData) GetNodePoints() []*ReputationPointChangeRawData {
	if m != nil {
		return m.NodePoints
	}
	return nil
}

type MsgSubmitReputationPointChangeDataResponse struct {
}

func (m *MsgSubmitReputationPointChangeDataResponse) Reset() {
	*m = MsgSubmitReputationPointChangeDataResponse{}
}
func (m *MsgSubmitReputationPointChangeDataResponse) String() string {
	return proto.CompactTextString(m)
}
func (*MsgSubmitReputationPointChangeDataResponse) ProtoMessage() {}
func (*MsgSubmitReputationPointChangeDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f9ce97a9c861bfc, []int{9}
}
func (m *MsgSubmitReputationPointChangeDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitReputationPointChangeDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitReputationPointChangeDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitReputationPointChangeDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitReputationPointChangeDataResponse.Merge(m, src)
}
func (m *MsgSubmitReputationPointChangeDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitReputationPointChangeDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitReputationPointChangeDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitReputationPointChangeDataResponse proto.InternalMessageInfo

type MsgSubmitCheatStatusCR struct {
	ManagerAccount string           `protobuf:"bytes,1,opt,name=managerAccount,proto3" json:"managerAccount,omitempty"`
	Era            uint64           `protobuf:"varint,2,opt,name=era,proto3" json:"era,omitempty"`
	NodeDatas      []*CheatStatusCR `protobuf:"bytes,3,rep,name=nodeDatas,proto3" json:"nodeDatas,omitempty"`
}

func (m *MsgSubmitCheatStatusCR) Reset()         { *m = MsgSubmitCheatStatusCR{} }
func (m *MsgSubmitCheatStatusCR) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitCheatStatusCR) ProtoMessage()    {}
func (*MsgSubmitCheatStatusCR) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f9ce97a9c861bfc, []int{10}
}
func (m *MsgSubmitCheatStatusCR) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitCheatStatusCR) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitCheatStatusCR.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitCheatStatusCR) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitCheatStatusCR.Merge(m, src)
}
func (m *MsgSubmitCheatStatusCR) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitCheatStatusCR) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitCheatStatusCR.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitCheatStatusCR proto.InternalMessageInfo

func (m *MsgSubmitCheatStatusCR) GetManagerAccount() string {
	if m != nil {
		return m.ManagerAccount
	}
	return ""
}

func (m *MsgSubmitCheatStatusCR) GetEra() uint64 {
	if m != nil {
		return m.Era
	}
	return 0
}

func (m *MsgSubmitCheatStatusCR) GetNodeDatas() []*CheatStatusCR {
	if m != nil {
		return m.NodeDatas
	}
	return nil
}

type MsgSubmitCheatStatusCRResponse struct {
}

func (m *MsgSubmitCheatStatusCRResponse) Reset()         { *m = MsgSubmitCheatStatusCRResponse{} }
func (m *MsgSubmitCheatStatusCRResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitCheatStatusCRResponse) ProtoMessage()    {}
func (*MsgSubmitCheatStatusCRResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f9ce97a9c861bfc, []int{11}
}
func (m *MsgSubmitCheatStatusCRResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitCheatStatusCRResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitCheatStatusCRResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitCheatStatusCRResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitCheatStatusCRResponse.Merge(m, src)
}
func (m *MsgSubmitCheatStatusCRResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitCheatStatusCRResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitCheatStatusCRResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitCheatStatusCRResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgUpdateParam)(nil), "enreach.workload.MsgUpdateParam")
	proto.RegisterType((*MsgUpdateParamResponse)(nil), "enreach.workload.MsgUpdateParamResponse")
	proto.RegisterType((*MsgSubmitWorkreports)(nil), "enreach.workload.MsgSubmitWorkreports")
	proto.RegisterType((*MsgSubmitWorkreportsResponse)(nil), "enreach.workload.MsgSubmitWorkreportsResponse")
	proto.RegisterType((*MsgCreateSuperior)(nil), "enreach.workload.MsgCreateSuperior")
	proto.RegisterType((*MsgCreateSuperiorResponse)(nil), "enreach.workload.MsgCreateSuperiorResponse")
	proto.RegisterType((*MsgUpdateSuperior)(nil), "enreach.workload.MsgUpdateSuperior")
	proto.RegisterType((*MsgUpdateSuperiorResponse)(nil), "enreach.workload.MsgUpdateSuperiorResponse")
	proto.RegisterType((*MsgSubmitReputationPointChangeData)(nil), "enreach.workload.MsgSubmitReputationPointChangeData")
	proto.RegisterType((*MsgSubmitReputationPointChangeDataResponse)(nil), "enreach.workload.MsgSubmitReputationPointChangeDataResponse")
	proto.RegisterType((*MsgSubmitCheatStatusCR)(nil), "enreach.workload.MsgSubmitCheatStatusCR")
	proto.RegisterType((*MsgSubmitCheatStatusCRResponse)(nil), "enreach.workload.MsgSubmitCheatStatusCRResponse")
}

func init() { proto.RegisterFile("enreach/workload/tx.proto", fileDescriptor_4f9ce97a9c861bfc) }

var fileDescriptor_4f9ce97a9c861bfc = []byte{
	// 668 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x4f, 0x4f, 0xd4, 0x40,
	0x14, 0xa7, 0xae, 0xa0, 0x3c, 0x12, 0x02, 0x85, 0x60, 0x29, 0x5a, 0xd6, 0x25, 0x21, 0x1b, 0x34,
	0xad, 0xa2, 0x27, 0xd4, 0x83, 0xae, 0x37, 0xb3, 0x84, 0x74, 0xa3, 0x46, 0x2f, 0x64, 0x28, 0x93,
	0x6e, 0x03, 0xed, 0x94, 0x99, 0xa9, 0xc0, 0xcd, 0xf8, 0x09, 0xbc, 0xf8, 0x15, 0xf4, 0xca, 0x77,
	0xf0, 0xe2, 0x91, 0xa3, 0x47, 0x03, 0x07, 0xbe, 0x86, 0x69, 0x3b, 0x53, 0xfb, 0x6f, 0xff, 0x44,
	0xbd, 0xc0, 0xbc, 0x79, 0xbf, 0x79, 0xbf, 0xf7, 0x7b, 0x7f, 0xd2, 0x85, 0x65, 0x1c, 0x50, 0x8c,
	0x9c, 0xbe, 0x75, 0x4c, 0xe8, 0xc1, 0x21, 0x41, 0xfb, 0x16, 0x3f, 0x31, 0x43, 0x4a, 0x38, 0x51,
	0xe7, 0x84, 0xcb, 0x94, 0x2e, 0x7d, 0x1e, 0xf9, 0x5e, 0x40, 0xac, 0xe4, 0x6f, 0x0a, 0xd2, 0x6f,
	0x39, 0x84, 0xf9, 0x84, 0x59, 0x3e, 0x73, 0xad, 0x0f, 0x0f, 0xe3, 0x7f, 0xc2, 0xb1, 0x9c, 0x3a,
	0x76, 0x13, 0xcb, 0x4a, 0x0d, 0xe1, 0x5a, 0x74, 0x89, 0x4b, 0xd2, 0xfb, 0xf8, 0x24, 0x6e, 0xef,
	0x54, 0x32, 0x09, 0x11, 0x45, 0xbe, 0x7c, 0xb4, 0x5a, 0x71, 0xcb, 0x83, 0x00, 0xdc, 0xad, 0x05,
	0x50, 0x1c, 0x12, 0xca, 0x07, 0xc6, 0x60, 0x51, 0x88, 0xa9, 0x47, 0xa8, 0x00, 0xac, 0x57, 0x00,
	0x14, 0x87, 0x11, 0x47, 0xdc, 0x23, 0x41, 0x48, 0xbc, 0x40, 0x06, 0x5a, 0xab, 0xe0, 0x9c, 0x3e,
	0x46, 0x7c, 0x97, 0x71, 0xc4, 0x23, 0x91, 0x71, 0xeb, 0x08, 0x66, 0xbb, 0xcc, 0x7d, 0x1d, 0xee,
	0x23, 0x8e, 0x77, 0x62, 0x29, 0xea, 0x12, 0x4c, 0x31, 0xcf, 0x0d, 0x30, 0xd5, 0x94, 0xa6, 0xd2,
	0x9e, 0xb6, 0x85, 0xa5, 0xea, 0x70, 0x33, 0xd1, 0xfa, 0x0a, 0x9f, 0x6a, 0xd7, 0x12, 0x4f, 0x66,
	0xab, 0x06, 0x40, 0x72, 0x7e, 0x83, 0x0e, 0x23, 0xac, 0x35, 0x12, 0x6f, 0xee, 0x66, 0x6b, 0xe6,
	0xd3, 0xd5, 0xd9, 0x86, 0x08, 0xd4, 0xd2, 0x60, 0xa9, 0x48, 0x69, 0x63, 0x16, 0x92, 0x80, 0xe1,
	0xd6, 0x57, 0x05, 0x16, 0xbb, 0xcc, 0xed, 0x45, 0x7b, 0xbe, 0xc7, 0xdf, 0x66, 0x85, 0x61, 0xea,
	0x3a, 0xcc, 0xfa, 0x28, 0x40, 0x2e, 0xa6, 0xcf, 0x1d, 0x87, 0x44, 0x01, 0x17, 0xb9, 0x95, 0x6e,
	0xd5, 0x45, 0x98, 0xc4, 0x21, 0x71, 0xfa, 0x49, 0x82, 0xd7, 0xed, 0xd4, 0x50, 0x9f, 0x00, 0x04,
	0x64, 0x1f, 0xf7, 0x1c, 0x42, 0x31, 0xd3, 0x1a, 0xcd, 0x46, 0x7b, 0x66, 0x73, 0xc5, 0x2c, 0x0f,
	0x8e, 0xb9, 0x2d, 0x31, 0x76, 0x0e, 0xbe, 0xb5, 0x10, 0xa7, 0x5e, 0xe2, 0x69, 0x19, 0x70, 0xbb,
	0x2e, 0xcf, 0x4c, 0x88, 0x0d, 0xf3, 0x5d, 0xe6, 0x76, 0x28, 0x46, 0x1c, 0xf7, 0x44, 0xf7, 0x06,
	0x16, 0x56, 0x83, 0x1b, 0x48, 0xa8, 0x4a, 0xeb, 0x2a, 0xcd, 0x62, 0xd9, 0x56, 0x60, 0xb9, 0x12,
	0xb3, 0x44, 0x98, 0xd6, 0xf4, 0xff, 0x12, 0x16, 0x63, 0x66, 0x84, 0xdf, 0x15, 0x68, 0x65, 0x25,
	0xb0, 0xb3, 0xf9, 0xdb, 0x89, 0xe7, 0xaf, 0xd3, 0x47, 0x81, 0x8b, 0x5f, 0x22, 0x8e, 0xc6, 0x6e,
	0xdc, 0x1c, 0x34, 0x30, 0x45, 0xa2, 0x6d, 0xf1, 0x51, 0xdd, 0x4e, 0x9b, 0x96, 0x04, 0x94, 0x4d,
	0x33, 0xab, 0x4d, 0xab, 0xa5, 0xb6, 0xd1, 0x71, 0xcc, 0x6e, 0xe7, 0x22, 0xd4, 0xf7, 0xf1, 0x3e,
	0x6c, 0x8c, 0x16, 0x91, 0x1f, 0xcf, 0xa5, 0x0c, 0xde, 0x89, 0x77, 0xa9, 0x97, 0xac, 0x52, 0xc7,
	0xfe, 0x07, 0x9d, 0xcf, 0x60, 0x3a, 0xce, 0x32, 0x26, 0x92, 0x32, 0x57, 0xab, 0x32, 0x0b, 0x6c,
	0xf6, 0x9f, 0x17, 0xf5, 0xb2, 0x9a, 0x60, 0xd4, 0xe7, 0x29, 0xa5, 0x6c, 0x7e, 0x9b, 0x84, 0x46,
	0x97, 0xb9, 0xea, 0x3b, 0x98, 0xc9, 0xef, 0x7e, 0xb3, 0xca, 0x5c, 0x5c, 0x55, 0xbd, 0x3d, 0x0a,
	0x21, 0x29, 0xd4, 0x03, 0x98, 0xaf, 0x59, 0xe4, 0xda, 0xe7, 0x15, 0x9c, 0x6e, 0x8e, 0x87, 0xcb,
	0xc8, 0xf6, 0x60, 0xb6, 0xb4, 0x6d, 0x6b, 0xb5, 0x11, 0x8a, 0x20, 0xfd, 0xde, 0x18, 0xa0, 0x3c,
	0x47, 0x69, 0xc1, 0xd6, 0x86, 0x14, 0x63, 0x04, 0x47, 0xfd, 0x5a, 0xa9, 0x5f, 0x14, 0x58, 0x1d,
	0xb5, 0x53, 0x8f, 0x87, 0xd4, 0x66, 0xe0, 0x2b, 0xfd, 0xe9, 0xdf, 0xbc, 0xca, 0xf2, 0x3a, 0x82,
	0x85, 0xba, 0xb1, 0x6f, 0x0f, 0x09, 0x5a, 0x40, 0xea, 0x0f, 0xc6, 0x45, 0x4a, 0x4a, 0x7d, 0xf2,
	0xe3, 0xd5, 0xd9, 0x86, 0xf2, 0x62, 0xf3, 0xc7, 0x85, 0xa1, 0x9c, 0x5f, 0x18, 0xca, 0xaf, 0x0b,
	0x43, 0xf9, 0x7c, 0x69, 0x4c, 0x9c, 0x5f, 0x1a, 0x13, 0x3f, 0x2f, 0x8d, 0x89, 0xf7, 0x9a, 0xfc,
	0xbe, 0x9d, 0xe4, 0x7e, 0x17, 0x9c, 0x86, 0x98, 0xed, 0x4d, 0x25, 0xdf, 0xb6, 0x47, 0xbf, 0x03,
	0x00, 0x00, 0xff, 0xff, 0x55, 0x5a, 0xcd, 0x2c, 0x38, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParam(ctx context.Context, in *MsgUpdateParam, opts ...grpc.CallOption) (*MsgUpdateParamResponse, error)
	SubmitWorkreports(ctx context.Context, in *MsgSubmitWorkreports, opts ...grpc.CallOption) (*MsgSubmitWorkreportsResponse, error)
	CreateSuperior(ctx context.Context, in *MsgCreateSuperior, opts ...grpc.CallOption) (*MsgCreateSuperiorResponse, error)
	UpdateSuperior(ctx context.Context, in *MsgUpdateSuperior, opts ...grpc.CallOption) (*MsgUpdateSuperiorResponse, error)
	SubmitReputationPointChangeData(ctx context.Context, in *MsgSubmitReputationPointChangeData, opts ...grpc.CallOption) (*MsgSubmitReputationPointChangeDataResponse, error)
	SubmitCheatStatusCR(ctx context.Context, in *MsgSubmitCheatStatusCR, opts ...grpc.CallOption) (*MsgSubmitCheatStatusCRResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParam(ctx context.Context, in *MsgUpdateParam, opts ...grpc.CallOption) (*MsgUpdateParamResponse, error) {
	out := new(MsgUpdateParamResponse)
	err := c.cc.Invoke(ctx, "/enreach.workload.Msg/UpdateParam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitWorkreports(ctx context.Context, in *MsgSubmitWorkreports, opts ...grpc.CallOption) (*MsgSubmitWorkreportsResponse, error) {
	out := new(MsgSubmitWorkreportsResponse)
	err := c.cc.Invoke(ctx, "/enreach.workload.Msg/SubmitWorkreports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateSuperior(ctx context.Context, in *MsgCreateSuperior, opts ...grpc.CallOption) (*MsgCreateSuperiorResponse, error) {
	out := new(MsgCreateSuperiorResponse)
	err := c.cc.Invoke(ctx, "/enreach.workload.Msg/CreateSuperior", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateSuperior(ctx context.Context, in *MsgUpdateSuperior, opts ...grpc.CallOption) (*MsgUpdateSuperiorResponse, error) {
	out := new(MsgUpdateSuperiorResponse)
	err := c.cc.Invoke(ctx, "/enreach.workload.Msg/UpdateSuperior", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitReputationPointChangeData(ctx context.Context, in *MsgSubmitReputationPointChangeData, opts ...grpc.CallOption) (*MsgSubmitReputationPointChangeDataResponse, error) {
	out := new(MsgSubmitReputationPointChangeDataResponse)
	err := c.cc.Invoke(ctx, "/enreach.workload.Msg/SubmitReputationPointChangeData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitCheatStatusCR(ctx context.Context, in *MsgSubmitCheatStatusCR, opts ...grpc.CallOption) (*MsgSubmitCheatStatusCRResponse, error) {
	out := new(MsgSubmitCheatStatusCRResponse)
	err := c.cc.Invoke(ctx, "/enreach.workload.Msg/SubmitCheatStatusCR", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParam(context.Context, *MsgUpdateParam) (*MsgUpdateParamResponse, error)
	SubmitWorkreports(context.Context, *MsgSubmitWorkreports) (*MsgSubmitWorkreportsResponse, error)
	CreateSuperior(context.Context, *MsgCreateSuperior) (*MsgCreateSuperiorResponse, error)
	UpdateSuperior(context.Context, *MsgUpdateSuperior) (*MsgUpdateSuperiorResponse, error)
	SubmitReputationPointChangeData(context.Context, *MsgSubmitReputationPointChangeData) (*MsgSubmitReputationPointChangeDataResponse, error)
	SubmitCheatStatusCR(context.Context, *MsgSubmitCheatStatusCR) (*MsgSubmitCheatStatusCRResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) UpdateParam(ctx context.Context, req *MsgUpdateParam) (*MsgUpdateParamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParam not implemented")
}
func (*UnimplementedMsgServer) SubmitWorkreports(ctx context.Context, req *MsgSubmitWorkreports) (*MsgSubmitWorkreportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitWorkreports not implemented")
}
func (*UnimplementedMsgServer) CreateSuperior(ctx context.Context, req *MsgCreateSuperior) (*MsgCreateSuperiorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSuperior not implemented")
}
func (*UnimplementedMsgServer) UpdateSuperior(ctx context.Context, req *MsgUpdateSuperior) (*MsgUpdateSuperiorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSuperior not implemented")
}
func (*UnimplementedMsgServer) SubmitReputationPointChangeData(ctx context.Context, req *MsgSubmitReputationPointChangeData) (*MsgSubmitReputationPointChangeDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitReputationPointChangeData not implemented")
}
func (*UnimplementedMsgServer) SubmitCheatStatusCR(ctx context.Context, req *MsgSubmitCheatStatusCR) (*MsgSubmitCheatStatusCRResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitCheatStatusCR not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_UpdateParam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.workload.Msg/UpdateParam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParam(ctx, req.(*MsgUpdateParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitWorkreports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitWorkreports)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitWorkreports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.workload.Msg/SubmitWorkreports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitWorkreports(ctx, req.(*MsgSubmitWorkreports))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateSuperior_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateSuperior)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateSuperior(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.workload.Msg/CreateSuperior",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateSuperior(ctx, req.(*MsgCreateSuperior))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateSuperior_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateSuperior)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateSuperior(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.workload.Msg/UpdateSuperior",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateSuperior(ctx, req.(*MsgUpdateSuperior))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitReputationPointChangeData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitReputationPointChangeData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitReputationPointChangeData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.workload.Msg/SubmitReputationPointChangeData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitReputationPointChangeData(ctx, req.(*MsgSubmitReputationPointChangeData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitCheatStatusCR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitCheatStatusCR)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitCheatStatusCR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.workload.Msg/SubmitCheatStatusCR",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitCheatStatusCR(ctx, req.(*MsgSubmitCheatStatusCR))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "enreach.workload.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParam",
			Handler:    _Msg_UpdateParam_Handler,
		},
		{
			MethodName: "SubmitWorkreports",
			Handler:    _Msg_SubmitWorkreports_Handler,
		},
		{
			MethodName: "CreateSuperior",
			Handler:    _Msg_CreateSuperior_Handler,
		},
		{
			MethodName: "UpdateSuperior",
			Handler:    _Msg_UpdateSuperior_Handler,
		},
		{
			MethodName: "SubmitReputationPointChangeData",
			Handler:    _Msg_SubmitReputationPointChangeData_Handler,
		},
		{
			MethodName: "SubmitCheatStatusCR",
			Handler:    _Msg_SubmitCheatStatusCR_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "enreach/workload/tx.proto",
}

func (m *MsgUpdateParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ParamValue) > 0 {
		i -= len(m.ParamValue)
		copy(dAtA[i:], m.ParamValue)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ParamValue)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ParamKey) > 0 {
		i -= len(m.ParamKey)
		copy(dAtA[i:], m.ParamKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ParamKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSubmitWorkreports) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitWorkreports) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitWorkreports) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NodeScores) > 0 {
		for iNdEx := len(m.NodeScores) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NodeScores[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Epoch != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ManagerAccount) > 0 {
		i -= len(m.ManagerAccount)
		copy(dAtA[i:], m.ManagerAccount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ManagerAccount)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitWorkreportsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitWorkreportsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitWorkreportsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateSuperior) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateSuperior) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateSuperior) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateSuperiorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateSuperiorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateSuperiorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateSuperior) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateSuperior) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateSuperior) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateSuperiorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateSuperiorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateSuperiorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSubmitReputationPointChangeData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitReputationPointChangeData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitReputationPointChangeData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NodePoints) > 0 {
		for iNdEx := len(m.NodePoints) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NodePoints[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Era != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Era))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ManagerAccount) > 0 {
		i -= len(m.ManagerAccount)
		copy(dAtA[i:], m.ManagerAccount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ManagerAccount)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitReputationPointChangeDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitReputationPointChangeDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitReputationPointChangeDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSubmitCheatStatusCR) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitCheatStatusCR) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitCheatStatusCR) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NodeDatas) > 0 {
		for iNdEx := len(m.NodeDatas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NodeDatas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Era != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Era))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ManagerAccount) > 0 {
		i -= len(m.ManagerAccount)
		copy(dAtA[i:], m.ManagerAccount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ManagerAccount)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitCheatStatusCRResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitCheatStatusCRResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitCheatStatusCRResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgUpdateParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ParamKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ParamValue)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateParamResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSubmitWorkreports) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ManagerAccount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Epoch != 0 {
		n += 1 + sovTx(uint64(m.Epoch))
	}
	if len(m.NodeScores) > 0 {
		for _, e := range m.NodeScores {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgSubmitWorkreportsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateSuperior) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateSuperiorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateSuperior) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateSuperiorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSubmitReputationPointChangeData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ManagerAccount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Era != 0 {
		n += 1 + sovTx(uint64(m.Era))
	}
	if len(m.NodePoints) > 0 {
		for _, e := range m.NodePoints {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgSubmitReputationPointChangeDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSubmitCheatStatusCR) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ManagerAccount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Era != 0 {
		n += 1 + sovTx(uint64(m.Era))
	}
	if len(m.NodeDatas) > 0 {
		for _, e := range m.NodeDatas {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgSubmitCheatStatusCRResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgUpdateParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParamKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParamKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParamValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParamValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitWorkreports) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitWorkreports: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitWorkreports: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagerAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ManagerAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeScores", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeScores = append(m.NodeScores, &NodeScore{})
			if err := m.NodeScores[len(m.NodeScores)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitWorkreportsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitWorkreportsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitWorkreportsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateSuperior) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateSuperior: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateSuperior: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateSuperiorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateSuperiorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateSuperiorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateSuperior) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateSuperior: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateSuperior: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateSuperiorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateSuperiorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateSuperiorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitReputationPointChangeData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitReputationPointChangeData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitReputationPointChangeData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagerAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ManagerAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Era", wireType)
			}
			m.Era = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Era |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodePoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodePoints = append(m.NodePoints, &ReputationPointChangeRawData{})
			if err := m.NodePoints[len(m.NodePoints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitReputationPointChangeDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitReputationPointChangeDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitReputationPointChangeDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitCheatStatusCR) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitCheatStatusCR: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitCheatStatusCR: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagerAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ManagerAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Era", wireType)
			}
			m.Era = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Era |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeDatas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeDatas = append(m.NodeDatas, &CheatStatusCR{})
			if err := m.NodeDatas[len(m.NodeDatas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitCheatStatusCRResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitCheatStatusCRResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitCheatStatusCRResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
