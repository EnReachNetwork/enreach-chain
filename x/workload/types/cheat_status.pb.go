// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: enreach/workload/cheat_status.proto

package types

import (
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// CR -> Change Request
type CheatStatusCR struct {
	NodeID      string `protobuf:"bytes,1,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	CheatStatus string `protobuf:"bytes,2,opt,name=cheatStatus,proto3" json:"cheatStatus,omitempty"`
}

func (m *CheatStatusCR) Reset()         { *m = CheatStatusCR{} }
func (m *CheatStatusCR) String() string { return proto.CompactTextString(m) }
func (*CheatStatusCR) ProtoMessage()    {}
func (*CheatStatusCR) Descriptor() ([]byte, []int) {
	return fileDescriptor_68c57a090931d4e9, []int{0}
}
func (m *CheatStatusCR) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheatStatusCR) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheatStatusCR.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheatStatusCR) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheatStatusCR.Merge(m, src)
}
func (m *CheatStatusCR) XXX_Size() int {
	return m.Size()
}
func (m *CheatStatusCR) XXX_DiscardUnknown() {
	xxx_messageInfo_CheatStatusCR.DiscardUnknown(m)
}

var xxx_messageInfo_CheatStatusCR proto.InternalMessageInfo

func (m *CheatStatusCR) GetNodeID() string {
	if m != nil {
		return m.NodeID
	}
	return ""
}

func (m *CheatStatusCR) GetCheatStatus() string {
	if m != nil {
		return m.CheatStatus
	}
	return ""
}

type CheatStatusCRDB struct {
	CheatStatus string `protobuf:"bytes,1,opt,name=cheatStatus,proto3" json:"cheatStatus,omitempty"`
	CreateAt    uint64 `protobuf:"varint,2,opt,name=createAt,proto3" json:"createAt,omitempty"`
	UpdateAt    uint64 `protobuf:"varint,3,opt,name=updateAt,proto3" json:"updateAt,omitempty"`
}

func (m *CheatStatusCRDB) Reset()         { *m = CheatStatusCRDB{} }
func (m *CheatStatusCRDB) String() string { return proto.CompactTextString(m) }
func (*CheatStatusCRDB) ProtoMessage()    {}
func (*CheatStatusCRDB) Descriptor() ([]byte, []int) {
	return fileDescriptor_68c57a090931d4e9, []int{1}
}
func (m *CheatStatusCRDB) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheatStatusCRDB) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheatStatusCRDB.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheatStatusCRDB) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheatStatusCRDB.Merge(m, src)
}
func (m *CheatStatusCRDB) XXX_Size() int {
	return m.Size()
}
func (m *CheatStatusCRDB) XXX_DiscardUnknown() {
	xxx_messageInfo_CheatStatusCRDB.DiscardUnknown(m)
}

var xxx_messageInfo_CheatStatusCRDB proto.InternalMessageInfo

func (m *CheatStatusCRDB) GetCheatStatus() string {
	if m != nil {
		return m.CheatStatus
	}
	return ""
}

func (m *CheatStatusCRDB) GetCreateAt() uint64 {
	if m != nil {
		return m.CreateAt
	}
	return 0
}

func (m *CheatStatusCRDB) GetUpdateAt() uint64 {
	if m != nil {
		return m.UpdateAt
	}
	return 0
}

type CheatStatusCRMapDB struct {
	Data map[string]*CheatStatusCRDB `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *CheatStatusCRMapDB) Reset()         { *m = CheatStatusCRMapDB{} }
func (m *CheatStatusCRMapDB) String() string { return proto.CompactTextString(m) }
func (*CheatStatusCRMapDB) ProtoMessage()    {}
func (*CheatStatusCRMapDB) Descriptor() ([]byte, []int) {
	return fileDescriptor_68c57a090931d4e9, []int{2}
}
func (m *CheatStatusCRMapDB) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheatStatusCRMapDB) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheatStatusCRMapDB.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheatStatusCRMapDB) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheatStatusCRMapDB.Merge(m, src)
}
func (m *CheatStatusCRMapDB) XXX_Size() int {
	return m.Size()
}
func (m *CheatStatusCRMapDB) XXX_DiscardUnknown() {
	xxx_messageInfo_CheatStatusCRMapDB.DiscardUnknown(m)
}

var xxx_messageInfo_CheatStatusCRMapDB proto.InternalMessageInfo

func (m *CheatStatusCRMapDB) GetData() map[string]*CheatStatusCRDB {
	if m != nil {
		return m.Data
	}
	return nil
}

type CheatStatusCRData struct {
	Era    uint64                      `protobuf:"varint,1,opt,name=era,proto3" json:"era,omitempty"`
	NodeID string                      `protobuf:"bytes,2,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	Data   map[string]*CheatStatusCRDB `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *CheatStatusCRData) Reset()         { *m = CheatStatusCRData{} }
func (m *CheatStatusCRData) String() string { return proto.CompactTextString(m) }
func (*CheatStatusCRData) ProtoMessage()    {}
func (*CheatStatusCRData) Descriptor() ([]byte, []int) {
	return fileDescriptor_68c57a090931d4e9, []int{3}
}
func (m *CheatStatusCRData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheatStatusCRData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheatStatusCRData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheatStatusCRData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheatStatusCRData.Merge(m, src)
}
func (m *CheatStatusCRData) XXX_Size() int {
	return m.Size()
}
func (m *CheatStatusCRData) XXX_DiscardUnknown() {
	xxx_messageInfo_CheatStatusCRData.DiscardUnknown(m)
}

var xxx_messageInfo_CheatStatusCRData proto.InternalMessageInfo

func (m *CheatStatusCRData) GetEra() uint64 {
	if m != nil {
		return m.Era
	}
	return 0
}

func (m *CheatStatusCRData) GetNodeID() string {
	if m != nil {
		return m.NodeID
	}
	return ""
}

func (m *CheatStatusCRData) GetData() map[string]*CheatStatusCRDB {
	if m != nil {
		return m.Data
	}
	return nil
}

type EraCheatStatusProcessData struct {
	Era                 uint64              `protobuf:"varint,1,opt,name=era,proto3" json:"era,omitempty"`
	TotalNodesCount     uint64              `protobuf:"varint,2,opt,name=totalNodesCount,proto3" json:"totalNodesCount,omitempty"`
	ProcessedNodesCount uint64              `protobuf:"varint,3,opt,name=processedNodesCount,proto3" json:"processedNodesCount,omitempty"`
	StartAt             uint64              `protobuf:"varint,4,opt,name=startAt,proto3" json:"startAt,omitempty"`
	UpdateAt            uint64              `protobuf:"varint,5,opt,name=updateAt,proto3" json:"updateAt,omitempty"`
	Status              string              `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	Pagination          *query.PageResponse `protobuf:"bytes,7,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *EraCheatStatusProcessData) Reset()         { *m = EraCheatStatusProcessData{} }
func (m *EraCheatStatusProcessData) String() string { return proto.CompactTextString(m) }
func (*EraCheatStatusProcessData) ProtoMessage()    {}
func (*EraCheatStatusProcessData) Descriptor() ([]byte, []int) {
	return fileDescriptor_68c57a090931d4e9, []int{4}
}
func (m *EraCheatStatusProcessData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EraCheatStatusProcessData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EraCheatStatusProcessData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EraCheatStatusProcessData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EraCheatStatusProcessData.Merge(m, src)
}
func (m *EraCheatStatusProcessData) XXX_Size() int {
	return m.Size()
}
func (m *EraCheatStatusProcessData) XXX_DiscardUnknown() {
	xxx_messageInfo_EraCheatStatusProcessData.DiscardUnknown(m)
}

var xxx_messageInfo_EraCheatStatusProcessData proto.InternalMessageInfo

func (m *EraCheatStatusProcessData) GetEra() uint64 {
	if m != nil {
		return m.Era
	}
	return 0
}

func (m *EraCheatStatusProcessData) GetTotalNodesCount() uint64 {
	if m != nil {
		return m.TotalNodesCount
	}
	return 0
}

func (m *EraCheatStatusProcessData) GetProcessedNodesCount() uint64 {
	if m != nil {
		return m.ProcessedNodesCount
	}
	return 0
}

func (m *EraCheatStatusProcessData) GetStartAt() uint64 {
	if m != nil {
		return m.StartAt
	}
	return 0
}

func (m *EraCheatStatusProcessData) GetUpdateAt() uint64 {
	if m != nil {
		return m.UpdateAt
	}
	return 0
}

func (m *EraCheatStatusProcessData) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *EraCheatStatusProcessData) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*CheatStatusCR)(nil), "enreach.workload.CheatStatusCR")
	proto.RegisterType((*CheatStatusCRDB)(nil), "enreach.workload.CheatStatusCRDB")
	proto.RegisterType((*CheatStatusCRMapDB)(nil), "enreach.workload.CheatStatusCRMapDB")
	proto.RegisterMapType((map[string]*CheatStatusCRDB)(nil), "enreach.workload.CheatStatusCRMapDB.DataEntry")
	proto.RegisterType((*CheatStatusCRData)(nil), "enreach.workload.CheatStatusCRData")
	proto.RegisterMapType((map[string]*CheatStatusCRDB)(nil), "enreach.workload.CheatStatusCRData.DataEntry")
	proto.RegisterType((*EraCheatStatusProcessData)(nil), "enreach.workload.EraCheatStatusProcessData")
}

func init() {
	proto.RegisterFile("enreach/workload/cheat_status.proto", fileDescriptor_68c57a090931d4e9)
}

var fileDescriptor_68c57a090931d4e9 = []byte{
	// 482 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x53, 0xbd, 0x6e, 0x13, 0x41,
	0x10, 0xf6, 0xda, 0x8e, 0x43, 0xd6, 0x42, 0x09, 0x8b, 0x84, 0x0e, 0x17, 0x27, 0x63, 0x0a, 0x2c,
	0x24, 0xf6, 0x88, 0x29, 0x40, 0x74, 0xfe, 0x89, 0x50, 0x0a, 0x50, 0x74, 0x74, 0x69, 0xd0, 0xf8,
	0x6e, 0x94, 0x44, 0x36, 0xb7, 0xc7, 0xee, 0x38, 0xe0, 0xb7, 0xe0, 0x11, 0x78, 0x08, 0x1e, 0x82,
	0x32, 0x25, 0x05, 0x05, 0xb2, 0x5f, 0x04, 0xdd, 0xee, 0x5d, 0x7c, 0xe7, 0x80, 0xd2, 0xd1, 0xed,
	0xec, 0xf7, 0x7d, 0x33, 0x3b, 0xb3, 0xf3, 0xf1, 0xc7, 0x98, 0x68, 0x84, 0xe8, 0x3c, 0xf8, 0xac,
	0xf4, 0x6c, 0xae, 0x20, 0x0e, 0xa2, 0x73, 0x04, 0xfa, 0x60, 0x08, 0x68, 0x61, 0x64, 0xaa, 0x15,
	0x29, 0x71, 0x90, 0x93, 0x64, 0x41, 0xea, 0x3c, 0x8d, 0x94, 0xf9, 0xa8, 0x4c, 0x30, 0x05, 0x83,
	0xc1, 0xa7, 0x05, 0xea, 0x65, 0x70, 0x79, 0x38, 0x45, 0x82, 0xc3, 0x20, 0x85, 0xb3, 0x8b, 0x04,
	0xe8, 0x42, 0x25, 0x4e, 0xdd, 0x3b, 0xe6, 0x77, 0xc7, 0x59, 0xce, 0xf7, 0x36, 0xe5, 0x38, 0x14,
	0x0f, 0x78, 0x2b, 0x51, 0x31, 0x1e, 0x4f, 0x3c, 0xd6, 0x65, 0xfd, 0xbd, 0x30, 0x8f, 0x44, 0x97,
	0xb7, 0xa3, 0x0d, 0xd1, 0xab, 0x5b, 0xb0, 0x7c, 0xd5, 0x9b, 0xf1, 0xfd, 0x4a, 0xaa, 0xc9, 0x68,
	0x5b, 0xc4, 0x6e, 0x88, 0x44, 0x87, 0xdf, 0x89, 0x34, 0x02, 0xe1, 0x90, 0x6c, 0xce, 0x66, 0x78,
	0x1d, 0x67, 0xd8, 0x22, 0x8d, 0x1d, 0xd6, 0x70, 0x58, 0x11, 0xf7, 0xbe, 0x33, 0x2e, 0x2a, 0xd5,
	0xde, 0x42, 0x3a, 0x19, 0x89, 0x11, 0x6f, 0xc6, 0x40, 0xe0, 0xb1, 0x6e, 0xa3, 0xdf, 0x1e, 0x48,
	0xb9, 0x3d, 0x1b, 0x79, 0x53, 0x23, 0x27, 0x40, 0x70, 0x94, 0x90, 0x5e, 0x86, 0x56, 0xdb, 0x39,
	0xe5, 0x7b, 0xd7, 0x57, 0xe2, 0x80, 0x37, 0x66, 0xb8, 0xcc, 0x5f, 0x9e, 0x1d, 0xc5, 0x4b, 0xbe,
	0x73, 0x09, 0xf3, 0x05, 0xda, 0xe7, 0xb6, 0x07, 0x8f, 0x6e, 0xa9, 0x31, 0x19, 0x85, 0x8e, 0xff,
	0xba, 0xfe, 0x8a, 0xf5, 0x7e, 0x31, 0x7e, 0xaf, 0x0a, 0x03, 0x41, 0x56, 0x04, 0x35, 0xd8, 0x22,
	0xcd, 0x30, 0x3b, 0x96, 0x7e, 0xa1, 0x5e, 0xf9, 0x85, 0x61, 0xde, 0x5f, 0xc3, 0xf6, 0xf7, 0xec,
	0xb6, 0xda, 0x40, 0xf0, 0x5f, 0xdb, 0xfb, 0x56, 0xe7, 0x0f, 0x8f, 0x34, 0x94, 0x18, 0x27, 0x5a,
	0x45, 0x68, 0xcc, 0x3f, 0xda, 0xec, 0xf3, 0x7d, 0x52, 0x04, 0xf3, 0x77, 0x2a, 0x46, 0x33, 0x56,
	0x8b, 0xa4, 0x58, 0x82, 0xed, 0x6b, 0xf1, 0x9c, 0xdf, 0x4f, 0x5d, 0x2a, 0x8c, 0x4b, 0x6c, 0xb7,
	0x16, 0x7f, 0x83, 0x84, 0xc7, 0x77, 0x0d, 0x81, 0xa6, 0x21, 0x79, 0x4d, 0xcb, 0x2a, 0xc2, 0xca,
	0x5e, 0xed, 0x54, 0xf7, 0x2a, 0x1b, 0xbc, 0x73, 0x97, 0xd7, 0x72, 0x83, 0x77, 0x91, 0x78, 0xc3,
	0xf9, 0xc6, 0x3b, 0xde, 0xae, 0x9d, 0xcd, 0x13, 0xe9, 0x8c, 0x26, 0x33, 0xa3, 0x49, 0x6b, 0x34,
	0x99, 0x1b, 0x4d, 0x9e, 0xc0, 0x19, 0x86, 0x68, 0x52, 0x95, 0x18, 0x0c, 0x4b, 0xd2, 0xd1, 0xe0,
	0xc7, 0xca, 0x67, 0x57, 0x2b, 0x9f, 0xfd, 0x5e, 0xf9, 0xec, 0xeb, 0xda, 0xaf, 0x5d, 0xad, 0xfd,
	0xda, 0xcf, 0xb5, 0x5f, 0x3b, 0xf5, 0x0a, 0xb7, 0x7f, 0xd9, 0xf8, 0x9d, 0x96, 0x29, 0x9a, 0x69,
	0xcb, 0x7a, 0xf5, 0xc5, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x6d, 0xe1, 0xfa, 0x63, 0x10, 0x04,
	0x00, 0x00,
}

func (m *CheatStatusCR) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheatStatusCR) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheatStatusCR) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CheatStatus) > 0 {
		i -= len(m.CheatStatus)
		copy(dAtA[i:], m.CheatStatus)
		i = encodeVarintCheatStatus(dAtA, i, uint64(len(m.CheatStatus)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NodeID) > 0 {
		i -= len(m.NodeID)
		copy(dAtA[i:], m.NodeID)
		i = encodeVarintCheatStatus(dAtA, i, uint64(len(m.NodeID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CheatStatusCRDB) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheatStatusCRDB) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheatStatusCRDB) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdateAt != 0 {
		i = encodeVarintCheatStatus(dAtA, i, uint64(m.UpdateAt))
		i--
		dAtA[i] = 0x18
	}
	if m.CreateAt != 0 {
		i = encodeVarintCheatStatus(dAtA, i, uint64(m.CreateAt))
		i--
		dAtA[i] = 0x10
	}
	if len(m.CheatStatus) > 0 {
		i -= len(m.CheatStatus)
		copy(dAtA[i:], m.CheatStatus)
		i = encodeVarintCheatStatus(dAtA, i, uint64(len(m.CheatStatus)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CheatStatusCRMapDB) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheatStatusCRMapDB) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheatStatusCRMapDB) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for k := range m.Data {
			v := m.Data[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintCheatStatus(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCheatStatus(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCheatStatus(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CheatStatusCRData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheatStatusCRData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheatStatusCRData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for k := range m.Data {
			v := m.Data[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintCheatStatus(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCheatStatus(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCheatStatus(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.NodeID) > 0 {
		i -= len(m.NodeID)
		copy(dAtA[i:], m.NodeID)
		i = encodeVarintCheatStatus(dAtA, i, uint64(len(m.NodeID)))
		i--
		dAtA[i] = 0x12
	}
	if m.Era != 0 {
		i = encodeVarintCheatStatus(dAtA, i, uint64(m.Era))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EraCheatStatusProcessData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EraCheatStatusProcessData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EraCheatStatusProcessData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCheatStatus(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintCheatStatus(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x32
	}
	if m.UpdateAt != 0 {
		i = encodeVarintCheatStatus(dAtA, i, uint64(m.UpdateAt))
		i--
		dAtA[i] = 0x28
	}
	if m.StartAt != 0 {
		i = encodeVarintCheatStatus(dAtA, i, uint64(m.StartAt))
		i--
		dAtA[i] = 0x20
	}
	if m.ProcessedNodesCount != 0 {
		i = encodeVarintCheatStatus(dAtA, i, uint64(m.ProcessedNodesCount))
		i--
		dAtA[i] = 0x18
	}
	if m.TotalNodesCount != 0 {
		i = encodeVarintCheatStatus(dAtA, i, uint64(m.TotalNodesCount))
		i--
		dAtA[i] = 0x10
	}
	if m.Era != 0 {
		i = encodeVarintCheatStatus(dAtA, i, uint64(m.Era))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCheatStatus(dAtA []byte, offset int, v uint64) int {
	offset -= sovCheatStatus(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CheatStatusCR) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeID)
	if l > 0 {
		n += 1 + l + sovCheatStatus(uint64(l))
	}
	l = len(m.CheatStatus)
	if l > 0 {
		n += 1 + l + sovCheatStatus(uint64(l))
	}
	return n
}

func (m *CheatStatusCRDB) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CheatStatus)
	if l > 0 {
		n += 1 + l + sovCheatStatus(uint64(l))
	}
	if m.CreateAt != 0 {
		n += 1 + sovCheatStatus(uint64(m.CreateAt))
	}
	if m.UpdateAt != 0 {
		n += 1 + sovCheatStatus(uint64(m.UpdateAt))
	}
	return n
}

func (m *CheatStatusCRMapDB) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for k, v := range m.Data {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovCheatStatus(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovCheatStatus(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovCheatStatus(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *CheatStatusCRData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Era != 0 {
		n += 1 + sovCheatStatus(uint64(m.Era))
	}
	l = len(m.NodeID)
	if l > 0 {
		n += 1 + l + sovCheatStatus(uint64(l))
	}
	if len(m.Data) > 0 {
		for k, v := range m.Data {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovCheatStatus(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovCheatStatus(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovCheatStatus(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *EraCheatStatusProcessData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Era != 0 {
		n += 1 + sovCheatStatus(uint64(m.Era))
	}
	if m.TotalNodesCount != 0 {
		n += 1 + sovCheatStatus(uint64(m.TotalNodesCount))
	}
	if m.ProcessedNodesCount != 0 {
		n += 1 + sovCheatStatus(uint64(m.ProcessedNodesCount))
	}
	if m.StartAt != 0 {
		n += 1 + sovCheatStatus(uint64(m.StartAt))
	}
	if m.UpdateAt != 0 {
		n += 1 + sovCheatStatus(uint64(m.UpdateAt))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovCheatStatus(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovCheatStatus(uint64(l))
	}
	return n
}

func sovCheatStatus(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCheatStatus(x uint64) (n int) {
	return sovCheatStatus(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CheatStatusCR) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheatStatus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatStatusCR: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatStatusCR: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheatStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheatStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCheatStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheatStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheatStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheatStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCheatStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CheatStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheatStatus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCheatStatus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheatStatusCRDB) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheatStatus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatStatusCRDB: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatStatusCRDB: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheatStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheatStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheatStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCheatStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CheatStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			m.CreateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheatStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateAt", wireType)
			}
			m.UpdateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheatStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCheatStatus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCheatStatus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheatStatusCRMapDB) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheatStatus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatStatusCRMapDB: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatStatusCRMapDB: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheatStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheatStatus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCheatStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = make(map[string]*CheatStatusCRDB)
			}
			var mapkey string
			var mapvalue *CheatStatusCRDB
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCheatStatus
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCheatStatus
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCheatStatus
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCheatStatus
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCheatStatus
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthCheatStatus
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthCheatStatus
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &CheatStatusCRDB{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCheatStatus(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCheatStatus
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Data[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheatStatus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCheatStatus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheatStatusCRData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheatStatus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheatStatusCRData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheatStatusCRData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Era", wireType)
			}
			m.Era = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheatStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Era |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheatStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheatStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCheatStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheatStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheatStatus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCheatStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = make(map[string]*CheatStatusCRDB)
			}
			var mapkey string
			var mapvalue *CheatStatusCRDB
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCheatStatus
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCheatStatus
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCheatStatus
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCheatStatus
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCheatStatus
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthCheatStatus
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthCheatStatus
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &CheatStatusCRDB{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCheatStatus(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCheatStatus
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Data[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheatStatus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCheatStatus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EraCheatStatusProcessData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheatStatus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EraCheatStatusProcessData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EraCheatStatusProcessData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Era", wireType)
			}
			m.Era = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheatStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Era |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalNodesCount", wireType)
			}
			m.TotalNodesCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheatStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalNodesCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessedNodesCount", wireType)
			}
			m.ProcessedNodesCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheatStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProcessedNodesCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartAt", wireType)
			}
			m.StartAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheatStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateAt", wireType)
			}
			m.UpdateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheatStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheatStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheatStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCheatStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheatStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheatStatus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCheatStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheatStatus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCheatStatus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCheatStatus(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCheatStatus
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCheatStatus
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCheatStatus
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCheatStatus
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCheatStatus
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCheatStatus
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCheatStatus        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCheatStatus          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCheatStatus = fmt.Errorf("proto: unexpected end of group")
)
