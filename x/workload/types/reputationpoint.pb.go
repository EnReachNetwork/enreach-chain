// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: enreach/workload/reputationpoint.proto

package types

import (
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ReputationPointChangeRawData struct {
	NodeID     string `protobuf:"bytes,1,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	DeltaPoint int64  `protobuf:"varint,2,opt,name=deltaPoint,proto3" json:"deltaPoint,omitempty"`
}

func (m *ReputationPointChangeRawData) Reset()         { *m = ReputationPointChangeRawData{} }
func (m *ReputationPointChangeRawData) String() string { return proto.CompactTextString(m) }
func (*ReputationPointChangeRawData) ProtoMessage()    {}
func (*ReputationPointChangeRawData) Descriptor() ([]byte, []int) {
	return fileDescriptor_27871e22bb1ba124, []int{0}
}
func (m *ReputationPointChangeRawData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReputationPointChangeRawData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReputationPointChangeRawData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReputationPointChangeRawData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReputationPointChangeRawData.Merge(m, src)
}
func (m *ReputationPointChangeRawData) XXX_Size() int {
	return m.Size()
}
func (m *ReputationPointChangeRawData) XXX_DiscardUnknown() {
	xxx_messageInfo_ReputationPointChangeRawData.DiscardUnknown(m)
}

var xxx_messageInfo_ReputationPointChangeRawData proto.InternalMessageInfo

func (m *ReputationPointChangeRawData) GetNodeID() string {
	if m != nil {
		return m.NodeID
	}
	return ""
}

func (m *ReputationPointChangeRawData) GetDeltaPoint() int64 {
	if m != nil {
		return m.DeltaPoint
	}
	return 0
}

type ReputationPointChangeRawDataDB struct {
	DeltaPoint int64  `protobuf:"varint,1,opt,name=deltaPoint,proto3" json:"deltaPoint,omitempty"`
	CreateAt   uint64 `protobuf:"varint,2,opt,name=createAt,proto3" json:"createAt,omitempty"`
	UpdateAt   uint64 `protobuf:"varint,3,opt,name=updateAt,proto3" json:"updateAt,omitempty"`
}

func (m *ReputationPointChangeRawDataDB) Reset()         { *m = ReputationPointChangeRawDataDB{} }
func (m *ReputationPointChangeRawDataDB) String() string { return proto.CompactTextString(m) }
func (*ReputationPointChangeRawDataDB) ProtoMessage()    {}
func (*ReputationPointChangeRawDataDB) Descriptor() ([]byte, []int) {
	return fileDescriptor_27871e22bb1ba124, []int{1}
}
func (m *ReputationPointChangeRawDataDB) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReputationPointChangeRawDataDB) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReputationPointChangeRawDataDB.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReputationPointChangeRawDataDB) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReputationPointChangeRawDataDB.Merge(m, src)
}
func (m *ReputationPointChangeRawDataDB) XXX_Size() int {
	return m.Size()
}
func (m *ReputationPointChangeRawDataDB) XXX_DiscardUnknown() {
	xxx_messageInfo_ReputationPointChangeRawDataDB.DiscardUnknown(m)
}

var xxx_messageInfo_ReputationPointChangeRawDataDB proto.InternalMessageInfo

func (m *ReputationPointChangeRawDataDB) GetDeltaPoint() int64 {
	if m != nil {
		return m.DeltaPoint
	}
	return 0
}

func (m *ReputationPointChangeRawDataDB) GetCreateAt() uint64 {
	if m != nil {
		return m.CreateAt
	}
	return 0
}

func (m *ReputationPointChangeRawDataDB) GetUpdateAt() uint64 {
	if m != nil {
		return m.UpdateAt
	}
	return 0
}

type ReputationPointChangeRawDataMapDB struct {
	Data map[string]*ReputationPointChangeRawDataDB `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *ReputationPointChangeRawDataMapDB) Reset()         { *m = ReputationPointChangeRawDataMapDB{} }
func (m *ReputationPointChangeRawDataMapDB) String() string { return proto.CompactTextString(m) }
func (*ReputationPointChangeRawDataMapDB) ProtoMessage()    {}
func (*ReputationPointChangeRawDataMapDB) Descriptor() ([]byte, []int) {
	return fileDescriptor_27871e22bb1ba124, []int{2}
}
func (m *ReputationPointChangeRawDataMapDB) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReputationPointChangeRawDataMapDB) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReputationPointChangeRawDataMapDB.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReputationPointChangeRawDataMapDB) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReputationPointChangeRawDataMapDB.Merge(m, src)
}
func (m *ReputationPointChangeRawDataMapDB) XXX_Size() int {
	return m.Size()
}
func (m *ReputationPointChangeRawDataMapDB) XXX_DiscardUnknown() {
	xxx_messageInfo_ReputationPointChangeRawDataMapDB.DiscardUnknown(m)
}

var xxx_messageInfo_ReputationPointChangeRawDataMapDB proto.InternalMessageInfo

func (m *ReputationPointChangeRawDataMapDB) GetData() map[string]*ReputationPointChangeRawDataDB {
	if m != nil {
		return m.Data
	}
	return nil
}

type ReputationPointChangeData struct {
	Era    uint64                                     `protobuf:"varint,1,opt,name=era,proto3" json:"era,omitempty"`
	NodeID string                                     `protobuf:"bytes,2,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	Data   map[string]*ReputationPointChangeRawDataDB `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *ReputationPointChangeData) Reset()         { *m = ReputationPointChangeData{} }
func (m *ReputationPointChangeData) String() string { return proto.CompactTextString(m) }
func (*ReputationPointChangeData) ProtoMessage()    {}
func (*ReputationPointChangeData) Descriptor() ([]byte, []int) {
	return fileDescriptor_27871e22bb1ba124, []int{3}
}
func (m *ReputationPointChangeData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReputationPointChangeData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReputationPointChangeData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReputationPointChangeData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReputationPointChangeData.Merge(m, src)
}
func (m *ReputationPointChangeData) XXX_Size() int {
	return m.Size()
}
func (m *ReputationPointChangeData) XXX_DiscardUnknown() {
	xxx_messageInfo_ReputationPointChangeData.DiscardUnknown(m)
}

var xxx_messageInfo_ReputationPointChangeData proto.InternalMessageInfo

func (m *ReputationPointChangeData) GetEra() uint64 {
	if m != nil {
		return m.Era
	}
	return 0
}

func (m *ReputationPointChangeData) GetNodeID() string {
	if m != nil {
		return m.NodeID
	}
	return ""
}

func (m *ReputationPointChangeData) GetData() map[string]*ReputationPointChangeRawDataDB {
	if m != nil {
		return m.Data
	}
	return nil
}

type ReputationDeltaPoint struct {
	Era        uint64 `protobuf:"varint,1,opt,name=era,proto3" json:"era,omitempty"`
	NodeID     string `protobuf:"bytes,2,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	DeltaPoint int64  `protobuf:"varint,3,opt,name=deltaPoint,proto3" json:"deltaPoint,omitempty"`
	CreateAt   uint64 `protobuf:"varint,4,opt,name=createAt,proto3" json:"createAt,omitempty"`
}

func (m *ReputationDeltaPoint) Reset()         { *m = ReputationDeltaPoint{} }
func (m *ReputationDeltaPoint) String() string { return proto.CompactTextString(m) }
func (*ReputationDeltaPoint) ProtoMessage()    {}
func (*ReputationDeltaPoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_27871e22bb1ba124, []int{4}
}
func (m *ReputationDeltaPoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReputationDeltaPoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReputationDeltaPoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReputationDeltaPoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReputationDeltaPoint.Merge(m, src)
}
func (m *ReputationDeltaPoint) XXX_Size() int {
	return m.Size()
}
func (m *ReputationDeltaPoint) XXX_DiscardUnknown() {
	xxx_messageInfo_ReputationDeltaPoint.DiscardUnknown(m)
}

var xxx_messageInfo_ReputationDeltaPoint proto.InternalMessageInfo

func (m *ReputationDeltaPoint) GetEra() uint64 {
	if m != nil {
		return m.Era
	}
	return 0
}

func (m *ReputationDeltaPoint) GetNodeID() string {
	if m != nil {
		return m.NodeID
	}
	return ""
}

func (m *ReputationDeltaPoint) GetDeltaPoint() int64 {
	if m != nil {
		return m.DeltaPoint
	}
	return 0
}

func (m *ReputationDeltaPoint) GetCreateAt() uint64 {
	if m != nil {
		return m.CreateAt
	}
	return 0
}

type EraProcessData struct {
	Era                 uint64              `protobuf:"varint,1,opt,name=era,proto3" json:"era,omitempty"`
	TotalNodesCount     uint64              `protobuf:"varint,2,opt,name=totalNodesCount,proto3" json:"totalNodesCount,omitempty"`
	ProcessedNodesCount uint64              `protobuf:"varint,3,opt,name=processedNodesCount,proto3" json:"processedNodesCount,omitempty"`
	StartAt             uint64              `protobuf:"varint,4,opt,name=startAt,proto3" json:"startAt,omitempty"`
	UpdateAt            uint64              `protobuf:"varint,5,opt,name=updateAt,proto3" json:"updateAt,omitempty"`
	Status              string              `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	Pagination          *query.PageResponse `protobuf:"bytes,7,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *EraProcessData) Reset()         { *m = EraProcessData{} }
func (m *EraProcessData) String() string { return proto.CompactTextString(m) }
func (*EraProcessData) ProtoMessage()    {}
func (*EraProcessData) Descriptor() ([]byte, []int) {
	return fileDescriptor_27871e22bb1ba124, []int{5}
}
func (m *EraProcessData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EraProcessData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EraProcessData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EraProcessData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EraProcessData.Merge(m, src)
}
func (m *EraProcessData) XXX_Size() int {
	return m.Size()
}
func (m *EraProcessData) XXX_DiscardUnknown() {
	xxx_messageInfo_EraProcessData.DiscardUnknown(m)
}

var xxx_messageInfo_EraProcessData proto.InternalMessageInfo

func (m *EraProcessData) GetEra() uint64 {
	if m != nil {
		return m.Era
	}
	return 0
}

func (m *EraProcessData) GetTotalNodesCount() uint64 {
	if m != nil {
		return m.TotalNodesCount
	}
	return 0
}

func (m *EraProcessData) GetProcessedNodesCount() uint64 {
	if m != nil {
		return m.ProcessedNodesCount
	}
	return 0
}

func (m *EraProcessData) GetStartAt() uint64 {
	if m != nil {
		return m.StartAt
	}
	return 0
}

func (m *EraProcessData) GetUpdateAt() uint64 {
	if m != nil {
		return m.UpdateAt
	}
	return 0
}

func (m *EraProcessData) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *EraProcessData) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*ReputationPointChangeRawData)(nil), "enreach.workload.ReputationPointChangeRawData")
	proto.RegisterType((*ReputationPointChangeRawDataDB)(nil), "enreach.workload.ReputationPointChangeRawDataDB")
	proto.RegisterType((*ReputationPointChangeRawDataMapDB)(nil), "enreach.workload.ReputationPointChangeRawDataMapDB")
	proto.RegisterMapType((map[string]*ReputationPointChangeRawDataDB)(nil), "enreach.workload.ReputationPointChangeRawDataMapDB.DataEntry")
	proto.RegisterType((*ReputationPointChangeData)(nil), "enreach.workload.ReputationPointChangeData")
	proto.RegisterMapType((map[string]*ReputationPointChangeRawDataDB)(nil), "enreach.workload.ReputationPointChangeData.DataEntry")
	proto.RegisterType((*ReputationDeltaPoint)(nil), "enreach.workload.ReputationDeltaPoint")
	proto.RegisterType((*EraProcessData)(nil), "enreach.workload.EraProcessData")
}

func init() {
	proto.RegisterFile("enreach/workload/reputationpoint.proto", fileDescriptor_27871e22bb1ba124)
}

var fileDescriptor_27871e22bb1ba124 = []byte{
	// 516 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x54, 0xbd, 0x6e, 0x13, 0x41,
	0x10, 0xce, 0xfa, 0x1c, 0x87, 0x4c, 0x24, 0xb0, 0x0e, 0x84, 0x0e, 0x0b, 0x9d, 0x8c, 0x0b, 0xb0,
	0x28, 0xf6, 0x12, 0x23, 0x24, 0x84, 0x44, 0x81, 0x73, 0x01, 0xa5, 0x00, 0x99, 0x2d, 0x28, 0xe8,
	0xc6, 0xbe, 0x91, 0x63, 0xc5, 0xdc, 0x1e, 0xbb, 0x7b, 0x49, 0x2c, 0xf1, 0x10, 0x34, 0xbc, 0x13,
	0x65, 0x4a, 0x4a, 0xb0, 0x1f, 0x83, 0x06, 0xdd, 0xae, 0xff, 0x15, 0x4c, 0xa8, 0xe8, 0x76, 0x76,
	0x66, 0xbe, 0xd9, 0xf9, 0x66, 0xf6, 0x83, 0x87, 0x94, 0x2a, 0xc2, 0xde, 0x49, 0x74, 0x2e, 0xd5,
	0xe9, 0x50, 0x62, 0x12, 0x29, 0xca, 0x72, 0x83, 0x66, 0x20, 0xd3, 0x4c, 0x0e, 0x52, 0xc3, 0x33,
	0x25, 0x8d, 0xf4, 0xab, 0xd3, 0x38, 0x3e, 0x8b, 0xab, 0x3d, 0xee, 0x49, 0xfd, 0x51, 0xea, 0xa8,
	0x8b, 0x9a, 0xa2, 0x4f, 0x39, 0xa9, 0x51, 0x74, 0x76, 0xd0, 0x25, 0x83, 0x07, 0x51, 0x86, 0xfd,
	0x41, 0x6a, 0x21, 0x5c, 0x76, 0xe3, 0x3d, 0xdc, 0x17, 0x73, 0xd8, 0x4e, 0x01, 0x7b, 0x78, 0x82,
	0x69, 0x9f, 0x04, 0x9e, 0xc7, 0x68, 0xd0, 0xbf, 0x0b, 0x95, 0x54, 0x26, 0x74, 0x1c, 0x07, 0xac,
	0xce, 0x9a, 0xbb, 0x62, 0x6a, 0xf9, 0x21, 0x40, 0x42, 0x43, 0x83, 0x36, 0x25, 0x28, 0xd5, 0x59,
	0xd3, 0x13, 0x4b, 0x37, 0x8d, 0x0b, 0x08, 0x37, 0xe1, 0xc6, 0xed, 0x35, 0x04, 0xb6, 0x8e, 0xe0,
	0xd7, 0xe0, 0x46, 0x4f, 0x11, 0x1a, 0x7a, 0xe9, 0xf0, 0xcb, 0x62, 0x6e, 0x17, 0xbe, 0x3c, 0x4b,
	0x9c, 0xcf, 0x73, 0xbe, 0x99, 0xdd, 0xf8, 0xc9, 0xe0, 0xc1, 0xa6, 0xd2, 0x6f, 0x30, 0x8b, 0xdb,
	0xfe, 0x3b, 0x28, 0x27, 0x68, 0x30, 0x60, 0x75, 0xaf, 0xb9, 0xd7, 0x7a, 0xc1, 0xd7, 0x49, 0xe4,
	0x7f, 0x85, 0xe0, 0xc5, 0xe9, 0x28, 0x35, 0x6a, 0x24, 0x2c, 0x54, 0x6d, 0x00, 0xbb, 0xf3, 0x2b,
	0xbf, 0x0a, 0xde, 0x29, 0x8d, 0xa6, 0xa4, 0x15, 0x47, 0xff, 0x15, 0x6c, 0x9f, 0xe1, 0x30, 0x27,
	0xdb, 0xcc, 0x5e, 0x6b, 0xff, 0xdf, 0x4a, 0xc6, 0x6d, 0xe1, 0xd2, 0x9f, 0x97, 0x9e, 0xb1, 0xc6,
	0x2f, 0x06, 0xf7, 0xae, 0x8c, 0xb6, 0x33, 0xab, 0x82, 0x47, 0x0a, 0x6d, 0xed, 0xb2, 0x28, 0x8e,
	0x4b, 0x53, 0x2c, 0xad, 0x4c, 0xf1, 0x78, 0xca, 0x82, 0x67, 0x59, 0x78, 0x7a, 0xcd, 0x27, 0x15,
	0x45, 0xfe, 0x67, 0xf7, 0x9f, 0xe1, 0xce, 0x22, 0x38, 0x5e, 0x6c, 0xcc, 0xf5, 0xfb, 0x5e, 0xdd,
	0x3d, 0x6f, 0xe3, 0xee, 0x95, 0x57, 0x77, 0xaf, 0xf1, 0xb5, 0x04, 0x37, 0x8f, 0x14, 0x76, 0x94,
	0xec, 0x91, 0xd6, 0x7f, 0x20, 0xbc, 0x09, 0xb7, 0x8c, 0x34, 0x38, 0x7c, 0x2b, 0x13, 0xd2, 0x87,
	0x32, 0x4f, 0x67, 0x3b, 0xbc, 0x7e, 0xed, 0xef, 0xc3, 0xed, 0xcc, 0x41, 0x51, 0xb2, 0x14, 0xed,
	0xb6, 0xfa, 0x2a, 0x97, 0x1f, 0xc0, 0x8e, 0x36, 0xa8, 0xcc, 0xfc, 0x6d, 0x33, 0x73, 0xe5, 0x5b,
	0x6c, 0xaf, 0x7e, 0x8b, 0x82, 0x0a, 0x6d, 0xd0, 0xe4, 0x3a, 0xa8, 0x38, 0x2a, 0x9c, 0xe5, 0xbf,
	0x06, 0x58, 0x88, 0x42, 0xb0, 0x63, 0xa7, 0xf3, 0x88, 0x3b, 0x05, 0xe1, 0x85, 0x82, 0x70, 0xab,
	0x20, 0x7c, 0xaa, 0x20, 0xbc, 0x83, 0x7d, 0x12, 0xa4, 0x33, 0x99, 0x6a, 0x12, 0x4b, 0xa9, 0xed,
	0xd6, 0xb7, 0x71, 0xc8, 0x2e, 0xc7, 0x21, 0xfb, 0x31, 0x0e, 0xd9, 0x97, 0x49, 0xb8, 0x75, 0x39,
	0x09, 0xb7, 0xbe, 0x4f, 0xc2, 0xad, 0x0f, 0xc1, 0x4c, 0xc9, 0x2e, 0x16, 0x5a, 0x66, 0x46, 0x19,
	0xe9, 0x6e, 0xc5, 0x8a, 0xd0, 0x93, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x1a, 0xb9, 0x02, 0xf5,
	0xec, 0x04, 0x00, 0x00,
}

func (m *ReputationPointChangeRawData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReputationPointChangeRawData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReputationPointChangeRawData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DeltaPoint != 0 {
		i = encodeVarintReputationpoint(dAtA, i, uint64(m.DeltaPoint))
		i--
		dAtA[i] = 0x10
	}
	if len(m.NodeID) > 0 {
		i -= len(m.NodeID)
		copy(dAtA[i:], m.NodeID)
		i = encodeVarintReputationpoint(dAtA, i, uint64(len(m.NodeID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReputationPointChangeRawDataDB) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReputationPointChangeRawDataDB) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReputationPointChangeRawDataDB) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdateAt != 0 {
		i = encodeVarintReputationpoint(dAtA, i, uint64(m.UpdateAt))
		i--
		dAtA[i] = 0x18
	}
	if m.CreateAt != 0 {
		i = encodeVarintReputationpoint(dAtA, i, uint64(m.CreateAt))
		i--
		dAtA[i] = 0x10
	}
	if m.DeltaPoint != 0 {
		i = encodeVarintReputationpoint(dAtA, i, uint64(m.DeltaPoint))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReputationPointChangeRawDataMapDB) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReputationPointChangeRawDataMapDB) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReputationPointChangeRawDataMapDB) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for k := range m.Data {
			v := m.Data[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintReputationpoint(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintReputationpoint(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintReputationpoint(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReputationPointChangeData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReputationPointChangeData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReputationPointChangeData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for k := range m.Data {
			v := m.Data[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintReputationpoint(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintReputationpoint(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintReputationpoint(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.NodeID) > 0 {
		i -= len(m.NodeID)
		copy(dAtA[i:], m.NodeID)
		i = encodeVarintReputationpoint(dAtA, i, uint64(len(m.NodeID)))
		i--
		dAtA[i] = 0x12
	}
	if m.Era != 0 {
		i = encodeVarintReputationpoint(dAtA, i, uint64(m.Era))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReputationDeltaPoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReputationDeltaPoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReputationDeltaPoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreateAt != 0 {
		i = encodeVarintReputationpoint(dAtA, i, uint64(m.CreateAt))
		i--
		dAtA[i] = 0x20
	}
	if m.DeltaPoint != 0 {
		i = encodeVarintReputationpoint(dAtA, i, uint64(m.DeltaPoint))
		i--
		dAtA[i] = 0x18
	}
	if len(m.NodeID) > 0 {
		i -= len(m.NodeID)
		copy(dAtA[i:], m.NodeID)
		i = encodeVarintReputationpoint(dAtA, i, uint64(len(m.NodeID)))
		i--
		dAtA[i] = 0x12
	}
	if m.Era != 0 {
		i = encodeVarintReputationpoint(dAtA, i, uint64(m.Era))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EraProcessData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EraProcessData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EraProcessData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReputationpoint(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintReputationpoint(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x32
	}
	if m.UpdateAt != 0 {
		i = encodeVarintReputationpoint(dAtA, i, uint64(m.UpdateAt))
		i--
		dAtA[i] = 0x28
	}
	if m.StartAt != 0 {
		i = encodeVarintReputationpoint(dAtA, i, uint64(m.StartAt))
		i--
		dAtA[i] = 0x20
	}
	if m.ProcessedNodesCount != 0 {
		i = encodeVarintReputationpoint(dAtA, i, uint64(m.ProcessedNodesCount))
		i--
		dAtA[i] = 0x18
	}
	if m.TotalNodesCount != 0 {
		i = encodeVarintReputationpoint(dAtA, i, uint64(m.TotalNodesCount))
		i--
		dAtA[i] = 0x10
	}
	if m.Era != 0 {
		i = encodeVarintReputationpoint(dAtA, i, uint64(m.Era))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintReputationpoint(dAtA []byte, offset int, v uint64) int {
	offset -= sovReputationpoint(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ReputationPointChangeRawData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeID)
	if l > 0 {
		n += 1 + l + sovReputationpoint(uint64(l))
	}
	if m.DeltaPoint != 0 {
		n += 1 + sovReputationpoint(uint64(m.DeltaPoint))
	}
	return n
}

func (m *ReputationPointChangeRawDataDB) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeltaPoint != 0 {
		n += 1 + sovReputationpoint(uint64(m.DeltaPoint))
	}
	if m.CreateAt != 0 {
		n += 1 + sovReputationpoint(uint64(m.CreateAt))
	}
	if m.UpdateAt != 0 {
		n += 1 + sovReputationpoint(uint64(m.UpdateAt))
	}
	return n
}

func (m *ReputationPointChangeRawDataMapDB) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for k, v := range m.Data {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovReputationpoint(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovReputationpoint(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovReputationpoint(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ReputationPointChangeData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Era != 0 {
		n += 1 + sovReputationpoint(uint64(m.Era))
	}
	l = len(m.NodeID)
	if l > 0 {
		n += 1 + l + sovReputationpoint(uint64(l))
	}
	if len(m.Data) > 0 {
		for k, v := range m.Data {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovReputationpoint(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovReputationpoint(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovReputationpoint(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ReputationDeltaPoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Era != 0 {
		n += 1 + sovReputationpoint(uint64(m.Era))
	}
	l = len(m.NodeID)
	if l > 0 {
		n += 1 + l + sovReputationpoint(uint64(l))
	}
	if m.DeltaPoint != 0 {
		n += 1 + sovReputationpoint(uint64(m.DeltaPoint))
	}
	if m.CreateAt != 0 {
		n += 1 + sovReputationpoint(uint64(m.CreateAt))
	}
	return n
}

func (m *EraProcessData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Era != 0 {
		n += 1 + sovReputationpoint(uint64(m.Era))
	}
	if m.TotalNodesCount != 0 {
		n += 1 + sovReputationpoint(uint64(m.TotalNodesCount))
	}
	if m.ProcessedNodesCount != 0 {
		n += 1 + sovReputationpoint(uint64(m.ProcessedNodesCount))
	}
	if m.StartAt != 0 {
		n += 1 + sovReputationpoint(uint64(m.StartAt))
	}
	if m.UpdateAt != 0 {
		n += 1 + sovReputationpoint(uint64(m.UpdateAt))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovReputationpoint(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovReputationpoint(uint64(l))
	}
	return n
}

func sovReputationpoint(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozReputationpoint(x uint64) (n int) {
	return sovReputationpoint(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ReputationPointChangeRawData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReputationpoint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReputationPointChangeRawData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReputationPointChangeRawData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReputationpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReputationpoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReputationpoint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeltaPoint", wireType)
			}
			m.DeltaPoint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReputationpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeltaPoint |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReputationpoint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReputationpoint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReputationPointChangeRawDataDB) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReputationpoint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReputationPointChangeRawDataDB: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReputationPointChangeRawDataDB: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeltaPoint", wireType)
			}
			m.DeltaPoint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReputationpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeltaPoint |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			m.CreateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReputationpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateAt", wireType)
			}
			m.UpdateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReputationpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReputationpoint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReputationpoint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReputationPointChangeRawDataMapDB) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReputationpoint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReputationPointChangeRawDataMapDB: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReputationPointChangeRawDataMapDB: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReputationpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReputationpoint
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReputationpoint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = make(map[string]*ReputationPointChangeRawDataDB)
			}
			var mapkey string
			var mapvalue *ReputationPointChangeRawDataDB
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowReputationpoint
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowReputationpoint
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthReputationpoint
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthReputationpoint
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowReputationpoint
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthReputationpoint
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthReputationpoint
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ReputationPointChangeRawDataDB{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipReputationpoint(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthReputationpoint
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Data[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReputationpoint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReputationpoint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReputationPointChangeData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReputationpoint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReputationPointChangeData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReputationPointChangeData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Era", wireType)
			}
			m.Era = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReputationpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Era |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReputationpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReputationpoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReputationpoint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReputationpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReputationpoint
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReputationpoint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = make(map[string]*ReputationPointChangeRawDataDB)
			}
			var mapkey string
			var mapvalue *ReputationPointChangeRawDataDB
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowReputationpoint
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowReputationpoint
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthReputationpoint
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthReputationpoint
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowReputationpoint
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthReputationpoint
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthReputationpoint
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ReputationPointChangeRawDataDB{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipReputationpoint(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthReputationpoint
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Data[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReputationpoint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReputationpoint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReputationDeltaPoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReputationpoint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReputationDeltaPoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReputationDeltaPoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Era", wireType)
			}
			m.Era = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReputationpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Era |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReputationpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReputationpoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReputationpoint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeltaPoint", wireType)
			}
			m.DeltaPoint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReputationpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeltaPoint |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			m.CreateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReputationpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReputationpoint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReputationpoint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EraProcessData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReputationpoint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EraProcessData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EraProcessData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Era", wireType)
			}
			m.Era = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReputationpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Era |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalNodesCount", wireType)
			}
			m.TotalNodesCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReputationpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalNodesCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessedNodesCount", wireType)
			}
			m.ProcessedNodesCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReputationpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProcessedNodesCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartAt", wireType)
			}
			m.StartAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReputationpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateAt", wireType)
			}
			m.UpdateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReputationpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReputationpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReputationpoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReputationpoint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReputationpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReputationpoint
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReputationpoint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReputationpoint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReputationpoint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipReputationpoint(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowReputationpoint
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReputationpoint
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReputationpoint
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthReputationpoint
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupReputationpoint
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthReputationpoint
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthReputationpoint        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowReputationpoint          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupReputationpoint = fmt.Errorf("proto: unexpected end of group")
)
