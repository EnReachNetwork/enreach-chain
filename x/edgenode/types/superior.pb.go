// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: enreach/edgenode/superior.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Superior struct {
	Account  string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Creator  string `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	CreateAt uint64 `protobuf:"varint,3,opt,name=createAt,proto3" json:"createAt,omitempty"`
	Updator  string `protobuf:"bytes,4,opt,name=updator,proto3" json:"updator,omitempty"`
	UpdateAt uint64 `protobuf:"varint,5,opt,name=updateAt,proto3" json:"updateAt,omitempty"`
}

func (m *Superior) Reset()         { *m = Superior{} }
func (m *Superior) String() string { return proto.CompactTextString(m) }
func (*Superior) ProtoMessage()    {}
func (*Superior) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd068a9b2cd3dba7, []int{0}
}
func (m *Superior) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Superior) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Superior.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Superior) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Superior.Merge(m, src)
}
func (m *Superior) XXX_Size() int {
	return m.Size()
}
func (m *Superior) XXX_DiscardUnknown() {
	xxx_messageInfo_Superior.DiscardUnknown(m)
}

var xxx_messageInfo_Superior proto.InternalMessageInfo

func (m *Superior) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *Superior) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Superior) GetCreateAt() uint64 {
	if m != nil {
		return m.CreateAt
	}
	return 0
}

func (m *Superior) GetUpdator() string {
	if m != nil {
		return m.Updator
	}
	return ""
}

func (m *Superior) GetUpdateAt() uint64 {
	if m != nil {
		return m.UpdateAt
	}
	return 0
}

func init() {
	proto.RegisterType((*Superior)(nil), "enreach.edgenode.Superior")
}

func init() { proto.RegisterFile("enreach/edgenode/superior.proto", fileDescriptor_fd068a9b2cd3dba7) }

var fileDescriptor_fd068a9b2cd3dba7 = []byte{
	// 191 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4f, 0xcd, 0x2b, 0x4a,
	0x4d, 0x4c, 0xce, 0xd0, 0x4f, 0x4d, 0x49, 0x4f, 0xcd, 0xcb, 0x4f, 0x49, 0xd5, 0x2f, 0x2e, 0x2d,
	0x48, 0x2d, 0xca, 0xcc, 0x2f, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x80, 0x2a, 0xd0,
	0x83, 0x29, 0x50, 0x9a, 0xc0, 0xc8, 0xc5, 0x11, 0x0c, 0x55, 0x24, 0x24, 0xc1, 0xc5, 0x9e, 0x98,
	0x9c, 0x9c, 0x5f, 0x9a, 0x57, 0x22, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x19, 0x04, 0xe3, 0x82, 0x64,
	0x92, 0x8b, 0x52, 0x13, 0x4b, 0xf2, 0x8b, 0x24, 0x98, 0x20, 0x32, 0x50, 0xae, 0x90, 0x14, 0x17,
	0x07, 0x98, 0x99, 0xea, 0x58, 0x22, 0xc1, 0xac, 0xc0, 0xa8, 0xc1, 0x12, 0x04, 0xe7, 0x83, 0x74,
	0x95, 0x16, 0xa4, 0x80, 0x75, 0xb1, 0x40, 0x74, 0x41, 0xb9, 0x20, 0x5d, 0x60, 0x26, 0x48, 0x17,
	0x2b, 0x44, 0x17, 0x8c, 0xef, 0x64, 0x74, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f,
	0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c, 0xc3, 0x8d, 0xc7, 0x72, 0x0c,
	0x51, 0x12, 0x30, 0xff, 0x55, 0x20, 0x7c, 0x58, 0x52, 0x59, 0x90, 0x5a, 0x9c, 0xc4, 0x06, 0xf6,
	0x9f, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x57, 0xb5, 0x0c, 0x99, 0x02, 0x01, 0x00, 0x00,
}

func (m *Superior) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Superior) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Superior) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdateAt != 0 {
		i = encodeVarintSuperior(dAtA, i, uint64(m.UpdateAt))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Updator) > 0 {
		i -= len(m.Updator)
		copy(dAtA[i:], m.Updator)
		i = encodeVarintSuperior(dAtA, i, uint64(len(m.Updator)))
		i--
		dAtA[i] = 0x22
	}
	if m.CreateAt != 0 {
		i = encodeVarintSuperior(dAtA, i, uint64(m.CreateAt))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintSuperior(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintSuperior(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSuperior(dAtA []byte, offset int, v uint64) int {
	offset -= sovSuperior(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Superior) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovSuperior(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovSuperior(uint64(l))
	}
	if m.CreateAt != 0 {
		n += 1 + sovSuperior(uint64(m.CreateAt))
	}
	l = len(m.Updator)
	if l > 0 {
		n += 1 + l + sovSuperior(uint64(l))
	}
	if m.UpdateAt != 0 {
		n += 1 + sovSuperior(uint64(m.UpdateAt))
	}
	return n
}

func sovSuperior(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSuperior(x uint64) (n int) {
	return sovSuperior(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Superior) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSuperior
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Superior: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Superior: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSuperior
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSuperior
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSuperior
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSuperior
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSuperior
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSuperior
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			m.CreateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSuperior
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSuperior
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSuperior
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSuperior
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Updator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateAt", wireType)
			}
			m.UpdateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSuperior
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSuperior(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSuperior
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSuperior(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSuperior
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSuperior
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSuperior
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSuperior
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSuperior
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSuperior
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSuperior        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSuperior          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSuperior = fmt.Errorf("proto: unexpected end of group")
)
