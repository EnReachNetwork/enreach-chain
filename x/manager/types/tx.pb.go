// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: enreach/manager/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgUpdateParams is the Msg/UpdateParams request type.
type MsgUpdateParams struct {
	// authority is the address that controls the module (defaults to x/gov unless overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// NOTE: All parameters must be supplied.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcc14c1aef031a60, []int{0}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcc14c1aef031a60, []int{1}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

type MsgCreateOperator struct {
	OperatorAccount string `protobuf:"bytes,1,opt,name=operatorAccount,proto3" json:"operatorAccount,omitempty"`
	Name            string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description     string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	WebsiteUrl      string `protobuf:"bytes,4,opt,name=websiteUrl,proto3" json:"websiteUrl,omitempty"`
}

func (m *MsgCreateOperator) Reset()         { *m = MsgCreateOperator{} }
func (m *MsgCreateOperator) String() string { return proto.CompactTextString(m) }
func (*MsgCreateOperator) ProtoMessage()    {}
func (*MsgCreateOperator) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcc14c1aef031a60, []int{2}
}
func (m *MsgCreateOperator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateOperator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateOperator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateOperator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateOperator.Merge(m, src)
}
func (m *MsgCreateOperator) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateOperator) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateOperator.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateOperator proto.InternalMessageInfo

func (m *MsgCreateOperator) GetOperatorAccount() string {
	if m != nil {
		return m.OperatorAccount
	}
	return ""
}

func (m *MsgCreateOperator) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgCreateOperator) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MsgCreateOperator) GetWebsiteUrl() string {
	if m != nil {
		return m.WebsiteUrl
	}
	return ""
}

type MsgCreateOperatorResponse struct {
}

func (m *MsgCreateOperatorResponse) Reset()         { *m = MsgCreateOperatorResponse{} }
func (m *MsgCreateOperatorResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateOperatorResponse) ProtoMessage()    {}
func (*MsgCreateOperatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcc14c1aef031a60, []int{3}
}
func (m *MsgCreateOperatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateOperatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateOperatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateOperatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateOperatorResponse.Merge(m, src)
}
func (m *MsgCreateOperatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateOperatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateOperatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateOperatorResponse proto.InternalMessageInfo

type MsgBindOperatorManagerAccount struct {
	OperatorAccount  string `protobuf:"bytes,1,opt,name=operatorAccount,proto3" json:"operatorAccount,omitempty"`
	ManagerAccount   string `protobuf:"bytes,2,opt,name=managerAccount,proto3" json:"managerAccount,omitempty"`
	ManagerSignature []byte `protobuf:"bytes,3,opt,name=managerSignature,proto3" json:"managerSignature,omitempty"`
	ForceUnbind      bool   `protobuf:"varint,4,opt,name=forceUnbind,proto3" json:"forceUnbind,omitempty"`
}

func (m *MsgBindOperatorManagerAccount) Reset()         { *m = MsgBindOperatorManagerAccount{} }
func (m *MsgBindOperatorManagerAccount) String() string { return proto.CompactTextString(m) }
func (*MsgBindOperatorManagerAccount) ProtoMessage()    {}
func (*MsgBindOperatorManagerAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcc14c1aef031a60, []int{4}
}
func (m *MsgBindOperatorManagerAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBindOperatorManagerAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBindOperatorManagerAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBindOperatorManagerAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBindOperatorManagerAccount.Merge(m, src)
}
func (m *MsgBindOperatorManagerAccount) XXX_Size() int {
	return m.Size()
}
func (m *MsgBindOperatorManagerAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBindOperatorManagerAccount.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBindOperatorManagerAccount proto.InternalMessageInfo

func (m *MsgBindOperatorManagerAccount) GetOperatorAccount() string {
	if m != nil {
		return m.OperatorAccount
	}
	return ""
}

func (m *MsgBindOperatorManagerAccount) GetManagerAccount() string {
	if m != nil {
		return m.ManagerAccount
	}
	return ""
}

func (m *MsgBindOperatorManagerAccount) GetManagerSignature() []byte {
	if m != nil {
		return m.ManagerSignature
	}
	return nil
}

func (m *MsgBindOperatorManagerAccount) GetForceUnbind() bool {
	if m != nil {
		return m.ForceUnbind
	}
	return false
}

type MsgBindOperatorManagerAccountResponse struct {
}

func (m *MsgBindOperatorManagerAccountResponse) Reset()         { *m = MsgBindOperatorManagerAccountResponse{} }
func (m *MsgBindOperatorManagerAccountResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBindOperatorManagerAccountResponse) ProtoMessage()    {}
func (*MsgBindOperatorManagerAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcc14c1aef031a60, []int{5}
}
func (m *MsgBindOperatorManagerAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBindOperatorManagerAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBindOperatorManagerAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBindOperatorManagerAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBindOperatorManagerAccountResponse.Merge(m, src)
}
func (m *MsgBindOperatorManagerAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBindOperatorManagerAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBindOperatorManagerAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBindOperatorManagerAccountResponse proto.InternalMessageInfo

type MsgSetManagerRegion struct {
	OperatorAccount string `protobuf:"bytes,1,opt,name=operatorAccount,proto3" json:"operatorAccount,omitempty"`
	RegionCode      string `protobuf:"bytes,2,opt,name=regionCode,proto3" json:"regionCode,omitempty"`
}

func (m *MsgSetManagerRegion) Reset()         { *m = MsgSetManagerRegion{} }
func (m *MsgSetManagerRegion) String() string { return proto.CompactTextString(m) }
func (*MsgSetManagerRegion) ProtoMessage()    {}
func (*MsgSetManagerRegion) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcc14c1aef031a60, []int{6}
}
func (m *MsgSetManagerRegion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetManagerRegion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetManagerRegion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetManagerRegion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetManagerRegion.Merge(m, src)
}
func (m *MsgSetManagerRegion) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetManagerRegion) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetManagerRegion.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetManagerRegion proto.InternalMessageInfo

func (m *MsgSetManagerRegion) GetOperatorAccount() string {
	if m != nil {
		return m.OperatorAccount
	}
	return ""
}

func (m *MsgSetManagerRegion) GetRegionCode() string {
	if m != nil {
		return m.RegionCode
	}
	return ""
}

type MsgSetManagerRegionResponse struct {
}

func (m *MsgSetManagerRegionResponse) Reset()         { *m = MsgSetManagerRegionResponse{} }
func (m *MsgSetManagerRegionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetManagerRegionResponse) ProtoMessage()    {}
func (*MsgSetManagerRegionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcc14c1aef031a60, []int{7}
}
func (m *MsgSetManagerRegionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetManagerRegionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetManagerRegionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetManagerRegionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetManagerRegionResponse.Merge(m, src)
}
func (m *MsgSetManagerRegionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetManagerRegionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetManagerRegionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetManagerRegionResponse proto.InternalMessageInfo

type MsgUpdateManagerConnParams struct {
	OperatorAccount string `protobuf:"bytes,1,opt,name=operatorAccount,proto3" json:"operatorAccount,omitempty"`
	HostAddress     string `protobuf:"bytes,2,opt,name=hostAddress,proto3" json:"hostAddress,omitempty"`
	ManagerPort     uint32 `protobuf:"varint,3,opt,name=managerPort,proto3" json:"managerPort,omitempty"`
	TrackerPort     uint32 `protobuf:"varint,4,opt,name=trackerPort,proto3" json:"trackerPort,omitempty"`
	ChainAPIPort    uint32 `protobuf:"varint,5,opt,name=chainAPIPort,proto3" json:"chainAPIPort,omitempty"`
	ChainRPCPort    uint32 `protobuf:"varint,6,opt,name=chainRPCPort,proto3" json:"chainRPCPort,omitempty"`
}

func (m *MsgUpdateManagerConnParams) Reset()         { *m = MsgUpdateManagerConnParams{} }
func (m *MsgUpdateManagerConnParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateManagerConnParams) ProtoMessage()    {}
func (*MsgUpdateManagerConnParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcc14c1aef031a60, []int{8}
}
func (m *MsgUpdateManagerConnParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateManagerConnParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateManagerConnParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateManagerConnParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateManagerConnParams.Merge(m, src)
}
func (m *MsgUpdateManagerConnParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateManagerConnParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateManagerConnParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateManagerConnParams proto.InternalMessageInfo

func (m *MsgUpdateManagerConnParams) GetOperatorAccount() string {
	if m != nil {
		return m.OperatorAccount
	}
	return ""
}

func (m *MsgUpdateManagerConnParams) GetHostAddress() string {
	if m != nil {
		return m.HostAddress
	}
	return ""
}

func (m *MsgUpdateManagerConnParams) GetManagerPort() uint32 {
	if m != nil {
		return m.ManagerPort
	}
	return 0
}

func (m *MsgUpdateManagerConnParams) GetTrackerPort() uint32 {
	if m != nil {
		return m.TrackerPort
	}
	return 0
}

func (m *MsgUpdateManagerConnParams) GetChainAPIPort() uint32 {
	if m != nil {
		return m.ChainAPIPort
	}
	return 0
}

func (m *MsgUpdateManagerConnParams) GetChainRPCPort() uint32 {
	if m != nil {
		return m.ChainRPCPort
	}
	return 0
}

type MsgUpdateManagerConnParamsResponse struct {
}

func (m *MsgUpdateManagerConnParamsResponse) Reset()         { *m = MsgUpdateManagerConnParamsResponse{} }
func (m *MsgUpdateManagerConnParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateManagerConnParamsResponse) ProtoMessage()    {}
func (*MsgUpdateManagerConnParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcc14c1aef031a60, []int{9}
}
func (m *MsgUpdateManagerConnParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateManagerConnParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateManagerConnParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateManagerConnParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateManagerConnParamsResponse.Merge(m, src)
}
func (m *MsgUpdateManagerConnParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateManagerConnParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateManagerConnParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateManagerConnParamsResponse proto.InternalMessageInfo

type MsgActivateManager struct {
	OperatorAccount string `protobuf:"bytes,1,opt,name=operatorAccount,proto3" json:"operatorAccount,omitempty"`
	License         string `protobuf:"bytes,2,opt,name=license,proto3" json:"license,omitempty"`
}

func (m *MsgActivateManager) Reset()         { *m = MsgActivateManager{} }
func (m *MsgActivateManager) String() string { return proto.CompactTextString(m) }
func (*MsgActivateManager) ProtoMessage()    {}
func (*MsgActivateManager) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcc14c1aef031a60, []int{10}
}
func (m *MsgActivateManager) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgActivateManager) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgActivateManager.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgActivateManager) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgActivateManager.Merge(m, src)
}
func (m *MsgActivateManager) XXX_Size() int {
	return m.Size()
}
func (m *MsgActivateManager) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgActivateManager.DiscardUnknown(m)
}

var xxx_messageInfo_MsgActivateManager proto.InternalMessageInfo

func (m *MsgActivateManager) GetOperatorAccount() string {
	if m != nil {
		return m.OperatorAccount
	}
	return ""
}

func (m *MsgActivateManager) GetLicense() string {
	if m != nil {
		return m.License
	}
	return ""
}

type MsgActivateManagerResponse struct {
}

func (m *MsgActivateManagerResponse) Reset()         { *m = MsgActivateManagerResponse{} }
func (m *MsgActivateManagerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgActivateManagerResponse) ProtoMessage()    {}
func (*MsgActivateManagerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcc14c1aef031a60, []int{11}
}
func (m *MsgActivateManagerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgActivateManagerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgActivateManagerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgActivateManagerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgActivateManagerResponse.Merge(m, src)
}
func (m *MsgActivateManagerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgActivateManagerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgActivateManagerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgActivateManagerResponse proto.InternalMessageInfo

type MsgBindOperatorEVMAccount struct {
	OperatorAccount string `protobuf:"bytes,1,opt,name=operatorAccount,proto3" json:"operatorAccount,omitempty"`
	EvmAccount      string `protobuf:"bytes,2,opt,name=evmAccount,proto3" json:"evmAccount,omitempty"`
	EvmSignature    []byte `protobuf:"bytes,3,opt,name=evmSignature,proto3" json:"evmSignature,omitempty"`
}

func (m *MsgBindOperatorEVMAccount) Reset()         { *m = MsgBindOperatorEVMAccount{} }
func (m *MsgBindOperatorEVMAccount) String() string { return proto.CompactTextString(m) }
func (*MsgBindOperatorEVMAccount) ProtoMessage()    {}
func (*MsgBindOperatorEVMAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcc14c1aef031a60, []int{12}
}
func (m *MsgBindOperatorEVMAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBindOperatorEVMAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBindOperatorEVMAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBindOperatorEVMAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBindOperatorEVMAccount.Merge(m, src)
}
func (m *MsgBindOperatorEVMAccount) XXX_Size() int {
	return m.Size()
}
func (m *MsgBindOperatorEVMAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBindOperatorEVMAccount.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBindOperatorEVMAccount proto.InternalMessageInfo

func (m *MsgBindOperatorEVMAccount) GetOperatorAccount() string {
	if m != nil {
		return m.OperatorAccount
	}
	return ""
}

func (m *MsgBindOperatorEVMAccount) GetEvmAccount() string {
	if m != nil {
		return m.EvmAccount
	}
	return ""
}

func (m *MsgBindOperatorEVMAccount) GetEvmSignature() []byte {
	if m != nil {
		return m.EvmSignature
	}
	return nil
}

type MsgBindOperatorEVMAccountResponse struct {
}

func (m *MsgBindOperatorEVMAccountResponse) Reset()         { *m = MsgBindOperatorEVMAccountResponse{} }
func (m *MsgBindOperatorEVMAccountResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBindOperatorEVMAccountResponse) ProtoMessage()    {}
func (*MsgBindOperatorEVMAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcc14c1aef031a60, []int{13}
}
func (m *MsgBindOperatorEVMAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBindOperatorEVMAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBindOperatorEVMAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBindOperatorEVMAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBindOperatorEVMAccountResponse.Merge(m, src)
}
func (m *MsgBindOperatorEVMAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBindOperatorEVMAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBindOperatorEVMAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBindOperatorEVMAccountResponse proto.InternalMessageInfo

type MsgUpdateOperatorBasicInfo struct {
	OperatorAccount string `protobuf:"bytes,1,opt,name=operatorAccount,proto3" json:"operatorAccount,omitempty"`
	Name            string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description     string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	WebsiteUrl      string `protobuf:"bytes,4,opt,name=websiteUrl,proto3" json:"websiteUrl,omitempty"`
}

func (m *MsgUpdateOperatorBasicInfo) Reset()         { *m = MsgUpdateOperatorBasicInfo{} }
func (m *MsgUpdateOperatorBasicInfo) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateOperatorBasicInfo) ProtoMessage()    {}
func (*MsgUpdateOperatorBasicInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcc14c1aef031a60, []int{14}
}
func (m *MsgUpdateOperatorBasicInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateOperatorBasicInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateOperatorBasicInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateOperatorBasicInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateOperatorBasicInfo.Merge(m, src)
}
func (m *MsgUpdateOperatorBasicInfo) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateOperatorBasicInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateOperatorBasicInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateOperatorBasicInfo proto.InternalMessageInfo

func (m *MsgUpdateOperatorBasicInfo) GetOperatorAccount() string {
	if m != nil {
		return m.OperatorAccount
	}
	return ""
}

func (m *MsgUpdateOperatorBasicInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgUpdateOperatorBasicInfo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MsgUpdateOperatorBasicInfo) GetWebsiteUrl() string {
	if m != nil {
		return m.WebsiteUrl
	}
	return ""
}

type MsgUpdateOperatorBasicInfoResponse struct {
}

func (m *MsgUpdateOperatorBasicInfoResponse) Reset()         { *m = MsgUpdateOperatorBasicInfoResponse{} }
func (m *MsgUpdateOperatorBasicInfoResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateOperatorBasicInfoResponse) ProtoMessage()    {}
func (*MsgUpdateOperatorBasicInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcc14c1aef031a60, []int{15}
}
func (m *MsgUpdateOperatorBasicInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateOperatorBasicInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateOperatorBasicInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateOperatorBasicInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateOperatorBasicInfoResponse.Merge(m, src)
}
func (m *MsgUpdateOperatorBasicInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateOperatorBasicInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateOperatorBasicInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateOperatorBasicInfoResponse proto.InternalMessageInfo

type MsgRegisterManager struct {
	ManagerAccount string `protobuf:"bytes,1,opt,name=managerAccount,proto3" json:"managerAccount,omitempty"`
	HostAddress    string `protobuf:"bytes,2,opt,name=hostAddress,proto3" json:"hostAddress,omitempty"`
	ManagerPort    uint32 `protobuf:"varint,3,opt,name=managerPort,proto3" json:"managerPort,omitempty"`
	TrackerPort    uint32 `protobuf:"varint,4,opt,name=trackerPort,proto3" json:"trackerPort,omitempty"`
	ChainAPIPort   uint32 `protobuf:"varint,5,opt,name=chainAPIPort,proto3" json:"chainAPIPort,omitempty"`
	ChainRPCPort   uint32 `protobuf:"varint,6,opt,name=chainRPCPort,proto3" json:"chainRPCPort,omitempty"`
}

func (m *MsgRegisterManager) Reset()         { *m = MsgRegisterManager{} }
func (m *MsgRegisterManager) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterManager) ProtoMessage()    {}
func (*MsgRegisterManager) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcc14c1aef031a60, []int{16}
}
func (m *MsgRegisterManager) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterManager) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterManager.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterManager) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterManager.Merge(m, src)
}
func (m *MsgRegisterManager) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterManager) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterManager.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterManager proto.InternalMessageInfo

func (m *MsgRegisterManager) GetManagerAccount() string {
	if m != nil {
		return m.ManagerAccount
	}
	return ""
}

func (m *MsgRegisterManager) GetHostAddress() string {
	if m != nil {
		return m.HostAddress
	}
	return ""
}

func (m *MsgRegisterManager) GetManagerPort() uint32 {
	if m != nil {
		return m.ManagerPort
	}
	return 0
}

func (m *MsgRegisterManager) GetTrackerPort() uint32 {
	if m != nil {
		return m.TrackerPort
	}
	return 0
}

func (m *MsgRegisterManager) GetChainAPIPort() uint32 {
	if m != nil {
		return m.ChainAPIPort
	}
	return 0
}

func (m *MsgRegisterManager) GetChainRPCPort() uint32 {
	if m != nil {
		return m.ChainRPCPort
	}
	return 0
}

type MsgRegisterManagerResponse struct {
}

func (m *MsgRegisterManagerResponse) Reset()         { *m = MsgRegisterManagerResponse{} }
func (m *MsgRegisterManagerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterManagerResponse) ProtoMessage()    {}
func (*MsgRegisterManagerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcc14c1aef031a60, []int{17}
}
func (m *MsgRegisterManagerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterManagerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterManagerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterManagerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterManagerResponse.Merge(m, src)
}
func (m *MsgRegisterManagerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterManagerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterManagerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterManagerResponse proto.InternalMessageInfo

type MsgGoWorking struct {
	ManagerAccount string `protobuf:"bytes,1,opt,name=managerAccount,proto3" json:"managerAccount,omitempty"`
}

func (m *MsgGoWorking) Reset()         { *m = MsgGoWorking{} }
func (m *MsgGoWorking) String() string { return proto.CompactTextString(m) }
func (*MsgGoWorking) ProtoMessage()    {}
func (*MsgGoWorking) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcc14c1aef031a60, []int{18}
}
func (m *MsgGoWorking) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGoWorking) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGoWorking.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGoWorking) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGoWorking.Merge(m, src)
}
func (m *MsgGoWorking) XXX_Size() int {
	return m.Size()
}
func (m *MsgGoWorking) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGoWorking.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGoWorking proto.InternalMessageInfo

func (m *MsgGoWorking) GetManagerAccount() string {
	if m != nil {
		return m.ManagerAccount
	}
	return ""
}

type MsgGoWorkingResponse struct {
}

func (m *MsgGoWorkingResponse) Reset()         { *m = MsgGoWorkingResponse{} }
func (m *MsgGoWorkingResponse) String() string { return proto.CompactTextString(m) }
func (*MsgGoWorkingResponse) ProtoMessage()    {}
func (*MsgGoWorkingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcc14c1aef031a60, []int{19}
}
func (m *MsgGoWorkingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGoWorkingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGoWorkingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGoWorkingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGoWorkingResponse.Merge(m, src)
}
func (m *MsgGoWorkingResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgGoWorkingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGoWorkingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGoWorkingResponse proto.InternalMessageInfo

type MsgCreateSuperior struct {
	Signer  string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	Account string `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
}

func (m *MsgCreateSuperior) Reset()         { *m = MsgCreateSuperior{} }
func (m *MsgCreateSuperior) String() string { return proto.CompactTextString(m) }
func (*MsgCreateSuperior) ProtoMessage()    {}
func (*MsgCreateSuperior) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcc14c1aef031a60, []int{20}
}
func (m *MsgCreateSuperior) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateSuperior) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateSuperior.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateSuperior) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateSuperior.Merge(m, src)
}
func (m *MsgCreateSuperior) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateSuperior) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateSuperior.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateSuperior proto.InternalMessageInfo

func (m *MsgCreateSuperior) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgCreateSuperior) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

type MsgCreateSuperiorResponse struct {
}

func (m *MsgCreateSuperiorResponse) Reset()         { *m = MsgCreateSuperiorResponse{} }
func (m *MsgCreateSuperiorResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateSuperiorResponse) ProtoMessage()    {}
func (*MsgCreateSuperiorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcc14c1aef031a60, []int{21}
}
func (m *MsgCreateSuperiorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateSuperiorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateSuperiorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateSuperiorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateSuperiorResponse.Merge(m, src)
}
func (m *MsgCreateSuperiorResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateSuperiorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateSuperiorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateSuperiorResponse proto.InternalMessageInfo

type MsgUpdateSuperior struct {
	Signer  string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	Account string `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
}

func (m *MsgUpdateSuperior) Reset()         { *m = MsgUpdateSuperior{} }
func (m *MsgUpdateSuperior) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateSuperior) ProtoMessage()    {}
func (*MsgUpdateSuperior) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcc14c1aef031a60, []int{22}
}
func (m *MsgUpdateSuperior) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateSuperior) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateSuperior.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateSuperior) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateSuperior.Merge(m, src)
}
func (m *MsgUpdateSuperior) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateSuperior) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateSuperior.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateSuperior proto.InternalMessageInfo

func (m *MsgUpdateSuperior) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgUpdateSuperior) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

type MsgUpdateSuperiorResponse struct {
}

func (m *MsgUpdateSuperiorResponse) Reset()         { *m = MsgUpdateSuperiorResponse{} }
func (m *MsgUpdateSuperiorResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateSuperiorResponse) ProtoMessage()    {}
func (*MsgUpdateSuperiorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcc14c1aef031a60, []int{23}
}
func (m *MsgUpdateSuperiorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateSuperiorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateSuperiorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateSuperiorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateSuperiorResponse.Merge(m, src)
}
func (m *MsgUpdateSuperiorResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateSuperiorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateSuperiorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateSuperiorResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgUpdateParams)(nil), "enreach.manager.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "enreach.manager.MsgUpdateParamsResponse")
	proto.RegisterType((*MsgCreateOperator)(nil), "enreach.manager.MsgCreateOperator")
	proto.RegisterType((*MsgCreateOperatorResponse)(nil), "enreach.manager.MsgCreateOperatorResponse")
	proto.RegisterType((*MsgBindOperatorManagerAccount)(nil), "enreach.manager.MsgBindOperatorManagerAccount")
	proto.RegisterType((*MsgBindOperatorManagerAccountResponse)(nil), "enreach.manager.MsgBindOperatorManagerAccountResponse")
	proto.RegisterType((*MsgSetManagerRegion)(nil), "enreach.manager.MsgSetManagerRegion")
	proto.RegisterType((*MsgSetManagerRegionResponse)(nil), "enreach.manager.MsgSetManagerRegionResponse")
	proto.RegisterType((*MsgUpdateManagerConnParams)(nil), "enreach.manager.MsgUpdateManagerConnParams")
	proto.RegisterType((*MsgUpdateManagerConnParamsResponse)(nil), "enreach.manager.MsgUpdateManagerConnParamsResponse")
	proto.RegisterType((*MsgActivateManager)(nil), "enreach.manager.MsgActivateManager")
	proto.RegisterType((*MsgActivateManagerResponse)(nil), "enreach.manager.MsgActivateManagerResponse")
	proto.RegisterType((*MsgBindOperatorEVMAccount)(nil), "enreach.manager.MsgBindOperatorEVMAccount")
	proto.RegisterType((*MsgBindOperatorEVMAccountResponse)(nil), "enreach.manager.MsgBindOperatorEVMAccountResponse")
	proto.RegisterType((*MsgUpdateOperatorBasicInfo)(nil), "enreach.manager.MsgUpdateOperatorBasicInfo")
	proto.RegisterType((*MsgUpdateOperatorBasicInfoResponse)(nil), "enreach.manager.MsgUpdateOperatorBasicInfoResponse")
	proto.RegisterType((*MsgRegisterManager)(nil), "enreach.manager.MsgRegisterManager")
	proto.RegisterType((*MsgRegisterManagerResponse)(nil), "enreach.manager.MsgRegisterManagerResponse")
	proto.RegisterType((*MsgGoWorking)(nil), "enreach.manager.MsgGoWorking")
	proto.RegisterType((*MsgGoWorkingResponse)(nil), "enreach.manager.MsgGoWorkingResponse")
	proto.RegisterType((*MsgCreateSuperior)(nil), "enreach.manager.MsgCreateSuperior")
	proto.RegisterType((*MsgCreateSuperiorResponse)(nil), "enreach.manager.MsgCreateSuperiorResponse")
	proto.RegisterType((*MsgUpdateSuperior)(nil), "enreach.manager.MsgUpdateSuperior")
	proto.RegisterType((*MsgUpdateSuperiorResponse)(nil), "enreach.manager.MsgUpdateSuperiorResponse")
}

func init() { proto.RegisterFile("enreach/manager/tx.proto", fileDescriptor_fcc14c1aef031a60) }

var fileDescriptor_fcc14c1aef031a60 = []byte{
	// 1030 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x57, 0x4f, 0x6f, 0xdc, 0x44,
	0x14, 0x8f, 0xdb, 0x34, 0xb0, 0x2f, 0xa1, 0x69, 0xdd, 0x28, 0xbb, 0x71, 0x1b, 0xb3, 0xdd, 0xb6,
	0x10, 0x6d, 0x61, 0x57, 0x4d, 0x51, 0x0f, 0xb9, 0x65, 0x23, 0x84, 0x2a, 0x64, 0x11, 0x1c, 0x05,
	0xa4, 0x5e, 0xc0, 0xf1, 0x4e, 0x1c, 0xab, 0xf5, 0xcc, 0x6a, 0x66, 0x36, 0xa4, 0xe2, 0x82, 0x10,
	0xa7, 0x1e, 0x10, 0xdf, 0x80, 0x2b, 0xdc, 0x22, 0xc4, 0x8d, 0x2f, 0xd0, 0x63, 0x85, 0x84, 0xc4,
	0x09, 0xa1, 0xe4, 0x90, 0x8f, 0x01, 0xf2, 0x78, 0x3c, 0x6b, 0x8f, 0xff, 0x64, 0x23, 0x71, 0xa0,
	0x97, 0x64, 0xe7, 0xbd, 0xdf, 0xcc, 0xef, 0xbd, 0xdf, 0xcc, 0x7b, 0x33, 0x86, 0x16, 0xc2, 0x14,
	0x79, 0xfe, 0x41, 0x3f, 0xf2, 0xb0, 0x17, 0x20, 0xda, 0xe7, 0x47, 0xbd, 0x11, 0x25, 0x9c, 0x98,
	0x8b, 0xd2, 0xd3, 0x93, 0x1e, 0xeb, 0xba, 0x17, 0x85, 0x98, 0xf4, 0xc5, 0xdf, 0x04, 0x63, 0x35,
	0x7d, 0xc2, 0x22, 0xc2, 0xfa, 0x11, 0x0b, 0xfa, 0x87, 0x0f, 0xe2, 0x7f, 0xd2, 0xb1, 0x92, 0x38,
	0xbe, 0x10, 0xa3, 0x7e, 0x32, 0x90, 0xae, 0xa5, 0x80, 0x04, 0x24, 0xb1, 0xc7, 0xbf, 0xa4, 0xf5,
	0x96, 0x1e, 0xc7, 0xc8, 0xa3, 0x5e, 0x94, 0xce, 0x59, 0xd5, 0xbd, 0xf2, 0xbf, 0x74, 0xdb, 0xba,
	0x9b, 0x8c, 0x10, 0xf5, 0x38, 0xa9, 0xf4, 0xb3, 0xf1, 0x08, 0xd1, 0x30, 0xf5, 0x77, 0x7e, 0x33,
	0x60, 0xd1, 0x61, 0xc1, 0xee, 0x68, 0xe8, 0x71, 0xb4, 0x2d, 0x88, 0xcd, 0x47, 0xd0, 0xf0, 0xc6,
	0xfc, 0x80, 0xd0, 0x90, 0x3f, 0x6f, 0x19, 0x6d, 0x63, 0xad, 0x31, 0x68, 0xfd, 0xfe, 0xeb, 0xfb,
	0x4b, 0x32, 0x97, 0xcd, 0xe1, 0x90, 0x22, 0xc6, 0x76, 0x38, 0x0d, 0x71, 0xe0, 0x4e, 0xa0, 0xe6,
	0x06, 0xcc, 0x25, 0xa1, 0xb7, 0x2e, 0xb5, 0x8d, 0xb5, 0xf9, 0xf5, 0x66, 0x4f, 0xd3, 0xb1, 0x97,
	0x10, 0x0c, 0x1a, 0x2f, 0xff, 0x7a, 0x7b, 0xe6, 0xa7, 0xb3, 0xe3, 0xae, 0xe1, 0xca, 0x19, 0x1b,
	0x1f, 0x7c, 0x7b, 0x76, 0xdc, 0x9d, 0xac, 0xf5, 0xe2, 0xec, 0xb8, 0x7b, 0x3b, 0x0d, 0xfd, 0x48,
	0x05, 0xaf, 0x45, 0xda, 0x59, 0x81, 0xa6, 0x66, 0x72, 0x11, 0x1b, 0x11, 0xcc, 0x50, 0xe7, 0x67,
	0x03, 0xae, 0x3b, 0x2c, 0xd8, 0xa2, 0xc8, 0xe3, 0xe8, 0x13, 0x29, 0x8a, 0xb9, 0x06, 0x8b, 0xa9,
	0x40, 0x9b, 0xbe, 0x4f, 0xc6, 0x98, 0x27, 0x09, 0xba, 0xba, 0xd9, 0x34, 0x61, 0x16, 0x7b, 0x11,
	0x12, 0xa9, 0x34, 0x5c, 0xf1, 0xdb, 0x6c, 0xc3, 0xfc, 0x10, 0x31, 0x9f, 0x86, 0x23, 0x1e, 0x12,
	0xdc, 0xba, 0x2c, 0x5c, 0x59, 0x93, 0x69, 0x03, 0x7c, 0x85, 0xf6, 0x58, 0xc8, 0xd1, 0x2e, 0x7d,
	0xd6, 0x9a, 0x15, 0x80, 0x8c, 0x65, 0x63, 0x29, 0x4e, 0x53, 0xe7, 0xea, 0xdc, 0x84, 0x95, 0x42,
	0xa8, 0x2a, 0x91, 0x3f, 0x0c, 0x58, 0x75, 0x58, 0x30, 0x08, 0xf1, 0x30, 0xf5, 0x39, 0x89, 0x1c,
	0x69, 0xa8, 0xd3, 0x27, 0xf5, 0x0e, 0x5c, 0x8d, 0x72, 0x73, 0x65, 0x7a, 0x9a, 0xd5, 0xec, 0xc2,
	0x35, 0x69, 0xd9, 0x09, 0x03, 0xec, 0xf1, 0x31, 0x45, 0x22, 0xdb, 0x05, 0xb7, 0x60, 0x8f, 0x45,
	0xd9, 0x27, 0xd4, 0x47, 0xbb, 0x78, 0x2f, 0xc4, 0x43, 0x91, 0xf3, 0x9b, 0x6e, 0xd6, 0x54, 0x91,
	0xf4, 0xbb, 0x70, 0xaf, 0x36, 0x2d, 0x25, 0xc0, 0x18, 0x6e, 0x38, 0x2c, 0xd8, 0x41, 0x5c, 0xfa,
	0x5d, 0x14, 0xc4, 0x52, 0x4f, 0x9f, 0xb5, 0x0d, 0x40, 0xc5, 0x9c, 0x2d, 0x32, 0x4c, 0x37, 0x34,
	0x63, 0xa9, 0x88, 0x6f, 0x15, 0x6e, 0x96, 0xd0, 0xaa, 0xa8, 0x5e, 0x5c, 0x02, 0x4b, 0x9d, 0x3d,
	0x09, 0xd9, 0x22, 0x18, 0xcb, 0x1a, 0x9a, 0x3e, 0xba, 0x36, 0xcc, 0x1f, 0x10, 0xc6, 0x65, 0x55,
	0xc9, 0xf0, 0xb2, 0xa6, 0x18, 0x21, 0x55, 0xdf, 0x26, 0x94, 0x8b, 0x8d, 0x78, 0xcb, 0xcd, 0x9a,
	0x62, 0x04, 0xa7, 0x9e, 0xff, 0x54, 0x22, 0x66, 0x13, 0x44, 0xc6, 0x64, 0x76, 0x60, 0xc1, 0x3f,
	0xf0, 0x42, 0xbc, 0xb9, 0xfd, 0x58, 0x40, 0xae, 0x08, 0x48, 0xce, 0xa6, 0x30, 0xee, 0xf6, 0x96,
	0xc0, 0xcc, 0x65, 0x30, 0xd2, 0x56, 0xa1, 0xd5, 0x5d, 0xe8, 0x54, 0x6b, 0xa1, 0x24, 0xc3, 0x60,
	0x3a, 0x2c, 0xd8, 0xf4, 0x79, 0x78, 0x38, 0xc1, 0x5d, 0x40, 0xa9, 0x16, 0xbc, 0xf1, 0x2c, 0xf4,
	0x11, 0x66, 0xe9, 0x26, 0xa6, 0xc3, 0x8a, 0xa8, 0x6e, 0x89, 0x1d, 0xd2, 0xf8, 0x54, 0x34, 0x3f,
	0x1a, 0xa2, 0xea, 0xb2, 0x07, 0xf0, 0xc3, 0xcf, 0x9c, 0x8b, 0xd7, 0x94, 0x0d, 0x80, 0x0e, 0xa3,
	0x7c, 0x3d, 0x65, 0x2c, 0xb1, 0xaa, 0xe8, 0x30, 0xd2, 0xeb, 0x28, 0x67, 0xab, 0x88, 0xff, 0x0e,
	0xdc, 0xae, 0x0c, 0x50, 0xa5, 0xf1, 0x8b, 0x91, 0x39, 0x87, 0x29, 0x6e, 0xe0, 0xb1, 0xd0, 0x7f,
	0x8c, 0xf7, 0xc9, 0xff, 0xb4, 0xe1, 0x65, 0xcf, 0x4b, 0x21, 0x66, 0x95, 0xda, 0x3f, 0x86, 0x38,
	0x30, 0x71, 0xe1, 0x31, 0x8e, 0xd2, 0xf6, 0x50, 0xd2, 0xc4, 0x8c, 0xd2, 0x26, 0xf6, 0x7a, 0x15,
	0xd6, 0x8d, 0x58, 0x28, 0x2d, 0x05, 0x79, 0x82, 0x35, 0x01, 0x94, 0x3e, 0x1f, 0xc3, 0x82, 0xc3,
	0x82, 0x8f, 0xc8, 0xe7, 0x84, 0x3e, 0x0d, 0x71, 0x30, 0xad, 0x30, 0xe5, 0x54, 0xcb, 0xb0, 0x94,
	0x5d, 0x4c, 0x91, 0xb8, 0x99, 0x6b, 0x74, 0x47, 0xbe, 0x1d, 0xcc, 0x65, 0x98, 0x63, 0x61, 0x80,
	0x11, 0x95, 0x0c, 0x72, 0x14, 0x57, 0xa8, 0x97, 0x2b, 0x84, 0x74, 0xb8, 0x31, 0x1f, 0x73, 0x4a,
	0x58, 0xee, 0xbe, 0x4b, 0xd7, 0xd4, 0x08, 0x93, 0xb3, 0xf1, 0xdf, 0x12, 0xe6, 0xd7, 0x4c, 0x09,
	0xd7, 0xbf, 0x07, 0xb8, 0xec, 0xb0, 0xc0, 0x7c, 0x02, 0x0b, 0xb9, 0x67, 0x50, 0xbb, 0xf0, 0x7c,
	0xd1, 0xde, 0x1a, 0xd6, 0xda, 0x79, 0x88, 0x94, 0xc3, 0xfc, 0x12, 0xae, 0x6a, 0x2f, 0x91, 0x4e,
	0xd9, 0xdc, 0x3c, 0xc6, 0xea, 0x9e, 0x8f, 0x51, 0x0c, 0xdf, 0x19, 0x60, 0xd5, 0xbc, 0x11, 0x7a,
	0x65, 0x4b, 0x55, 0xe3, 0xad, 0x47, 0x17, 0xc3, 0xab, 0x30, 0xf6, 0xe1, 0x5a, 0xe1, 0xa6, 0xbe,
	0x5b, 0xb6, 0x96, 0x8e, 0xb2, 0xde, 0x9b, 0x06, 0xa5, 0x78, 0xbe, 0x86, 0x66, 0xd5, 0xd5, 0x7b,
	0xbf, 0x7a, 0x57, 0x0a, 0x60, 0xeb, 0xe1, 0x05, 0xc0, 0x8a, 0xdc, 0x87, 0x45, 0xfd, 0x16, 0xbb,
	0x53, 0xb6, 0x8e, 0x06, 0xb2, 0xee, 0x4f, 0x01, 0x52, 0x24, 0x47, 0xb0, 0x5c, 0x71, 0x37, 0x75,
	0xcf, 0xdb, 0x9b, 0x09, 0xd6, 0x5a, 0x9f, 0x1e, 0x5b, 0xd4, 0xb6, 0x78, 0x9d, 0xd4, 0x68, 0x5b,
	0x00, 0xd7, 0x69, 0x5b, 0xd9, 0xf4, 0x63, 0x6d, 0xf5, 0x86, 0x5f, 0xaa, 0xad, 0x06, 0x2a, 0xd7,
	0xb6, 0xa2, 0x73, 0x9a, 0x9f, 0x42, 0x63, 0xd2, 0x36, 0x57, 0xcb, 0x66, 0x2a, 0xb7, 0x75, 0xaf,
	0xd6, 0x5d, 0xac, 0x70, 0xd5, 0xb3, 0x6a, 0x2a, 0x3c, 0xc5, 0xd4, 0x55, 0xb8, 0xde, 0xa7, 0x62,
	0x06, 0xad, 0x2b, 0x76, 0xaa, 0x05, 0xae, 0x67, 0x28, 0xef, 0x84, 0xd6, 0x95, 0x6f, 0xe2, 0x6f,
	0xb2, 0xc1, 0x83, 0x97, 0x27, 0xb6, 0xf1, 0xea, 0xc4, 0x36, 0xfe, 0x3e, 0xb1, 0x8d, 0x1f, 0x4e,
	0xed, 0x99, 0x57, 0xa7, 0xf6, 0xcc, 0x9f, 0xa7, 0xf6, 0xcc, 0x93, 0x66, 0xf1, 0x93, 0x8c, 0x3f,
	0x1f, 0x21, 0xb6, 0x37, 0x27, 0xbe, 0x26, 0x1f, 0xfe, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x97, 0xc5,
	0x6f, 0x7a, 0x54, 0x0f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	CreateOperator(ctx context.Context, in *MsgCreateOperator, opts ...grpc.CallOption) (*MsgCreateOperatorResponse, error)
	BindOperatorManagerAccount(ctx context.Context, in *MsgBindOperatorManagerAccount, opts ...grpc.CallOption) (*MsgBindOperatorManagerAccountResponse, error)
	SetManagerRegion(ctx context.Context, in *MsgSetManagerRegion, opts ...grpc.CallOption) (*MsgSetManagerRegionResponse, error)
	UpdateManagerConnParams(ctx context.Context, in *MsgUpdateManagerConnParams, opts ...grpc.CallOption) (*MsgUpdateManagerConnParamsResponse, error)
	ActivateManager(ctx context.Context, in *MsgActivateManager, opts ...grpc.CallOption) (*MsgActivateManagerResponse, error)
	BindOperatorEVMAccount(ctx context.Context, in *MsgBindOperatorEVMAccount, opts ...grpc.CallOption) (*MsgBindOperatorEVMAccountResponse, error)
	UpdateOperatorBasicInfo(ctx context.Context, in *MsgUpdateOperatorBasicInfo, opts ...grpc.CallOption) (*MsgUpdateOperatorBasicInfoResponse, error)
	RegisterManager(ctx context.Context, in *MsgRegisterManager, opts ...grpc.CallOption) (*MsgRegisterManagerResponse, error)
	GoWorking(ctx context.Context, in *MsgGoWorking, opts ...grpc.CallOption) (*MsgGoWorkingResponse, error)
	CreateSuperior(ctx context.Context, in *MsgCreateSuperior, opts ...grpc.CallOption) (*MsgCreateSuperiorResponse, error)
	UpdateSuperior(ctx context.Context, in *MsgUpdateSuperior, opts ...grpc.CallOption) (*MsgUpdateSuperiorResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/enreach.manager.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateOperator(ctx context.Context, in *MsgCreateOperator, opts ...grpc.CallOption) (*MsgCreateOperatorResponse, error) {
	out := new(MsgCreateOperatorResponse)
	err := c.cc.Invoke(ctx, "/enreach.manager.Msg/CreateOperator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BindOperatorManagerAccount(ctx context.Context, in *MsgBindOperatorManagerAccount, opts ...grpc.CallOption) (*MsgBindOperatorManagerAccountResponse, error) {
	out := new(MsgBindOperatorManagerAccountResponse)
	err := c.cc.Invoke(ctx, "/enreach.manager.Msg/BindOperatorManagerAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetManagerRegion(ctx context.Context, in *MsgSetManagerRegion, opts ...grpc.CallOption) (*MsgSetManagerRegionResponse, error) {
	out := new(MsgSetManagerRegionResponse)
	err := c.cc.Invoke(ctx, "/enreach.manager.Msg/SetManagerRegion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateManagerConnParams(ctx context.Context, in *MsgUpdateManagerConnParams, opts ...grpc.CallOption) (*MsgUpdateManagerConnParamsResponse, error) {
	out := new(MsgUpdateManagerConnParamsResponse)
	err := c.cc.Invoke(ctx, "/enreach.manager.Msg/UpdateManagerConnParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ActivateManager(ctx context.Context, in *MsgActivateManager, opts ...grpc.CallOption) (*MsgActivateManagerResponse, error) {
	out := new(MsgActivateManagerResponse)
	err := c.cc.Invoke(ctx, "/enreach.manager.Msg/ActivateManager", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BindOperatorEVMAccount(ctx context.Context, in *MsgBindOperatorEVMAccount, opts ...grpc.CallOption) (*MsgBindOperatorEVMAccountResponse, error) {
	out := new(MsgBindOperatorEVMAccountResponse)
	err := c.cc.Invoke(ctx, "/enreach.manager.Msg/BindOperatorEVMAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateOperatorBasicInfo(ctx context.Context, in *MsgUpdateOperatorBasicInfo, opts ...grpc.CallOption) (*MsgUpdateOperatorBasicInfoResponse, error) {
	out := new(MsgUpdateOperatorBasicInfoResponse)
	err := c.cc.Invoke(ctx, "/enreach.manager.Msg/UpdateOperatorBasicInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RegisterManager(ctx context.Context, in *MsgRegisterManager, opts ...grpc.CallOption) (*MsgRegisterManagerResponse, error) {
	out := new(MsgRegisterManagerResponse)
	err := c.cc.Invoke(ctx, "/enreach.manager.Msg/RegisterManager", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GoWorking(ctx context.Context, in *MsgGoWorking, opts ...grpc.CallOption) (*MsgGoWorkingResponse, error) {
	out := new(MsgGoWorkingResponse)
	err := c.cc.Invoke(ctx, "/enreach.manager.Msg/GoWorking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateSuperior(ctx context.Context, in *MsgCreateSuperior, opts ...grpc.CallOption) (*MsgCreateSuperiorResponse, error) {
	out := new(MsgCreateSuperiorResponse)
	err := c.cc.Invoke(ctx, "/enreach.manager.Msg/CreateSuperior", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateSuperior(ctx context.Context, in *MsgUpdateSuperior, opts ...grpc.CallOption) (*MsgUpdateSuperiorResponse, error) {
	out := new(MsgUpdateSuperiorResponse)
	err := c.cc.Invoke(ctx, "/enreach.manager.Msg/UpdateSuperior", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	CreateOperator(context.Context, *MsgCreateOperator) (*MsgCreateOperatorResponse, error)
	BindOperatorManagerAccount(context.Context, *MsgBindOperatorManagerAccount) (*MsgBindOperatorManagerAccountResponse, error)
	SetManagerRegion(context.Context, *MsgSetManagerRegion) (*MsgSetManagerRegionResponse, error)
	UpdateManagerConnParams(context.Context, *MsgUpdateManagerConnParams) (*MsgUpdateManagerConnParamsResponse, error)
	ActivateManager(context.Context, *MsgActivateManager) (*MsgActivateManagerResponse, error)
	BindOperatorEVMAccount(context.Context, *MsgBindOperatorEVMAccount) (*MsgBindOperatorEVMAccountResponse, error)
	UpdateOperatorBasicInfo(context.Context, *MsgUpdateOperatorBasicInfo) (*MsgUpdateOperatorBasicInfoResponse, error)
	RegisterManager(context.Context, *MsgRegisterManager) (*MsgRegisterManagerResponse, error)
	GoWorking(context.Context, *MsgGoWorking) (*MsgGoWorkingResponse, error)
	CreateSuperior(context.Context, *MsgCreateSuperior) (*MsgCreateSuperiorResponse, error)
	UpdateSuperior(context.Context, *MsgUpdateSuperior) (*MsgUpdateSuperiorResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (*UnimplementedMsgServer) CreateOperator(ctx context.Context, req *MsgCreateOperator) (*MsgCreateOperatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOperator not implemented")
}
func (*UnimplementedMsgServer) BindOperatorManagerAccount(ctx context.Context, req *MsgBindOperatorManagerAccount) (*MsgBindOperatorManagerAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindOperatorManagerAccount not implemented")
}
func (*UnimplementedMsgServer) SetManagerRegion(ctx context.Context, req *MsgSetManagerRegion) (*MsgSetManagerRegionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetManagerRegion not implemented")
}
func (*UnimplementedMsgServer) UpdateManagerConnParams(ctx context.Context, req *MsgUpdateManagerConnParams) (*MsgUpdateManagerConnParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateManagerConnParams not implemented")
}
func (*UnimplementedMsgServer) ActivateManager(ctx context.Context, req *MsgActivateManager) (*MsgActivateManagerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateManager not implemented")
}
func (*UnimplementedMsgServer) BindOperatorEVMAccount(ctx context.Context, req *MsgBindOperatorEVMAccount) (*MsgBindOperatorEVMAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindOperatorEVMAccount not implemented")
}
func (*UnimplementedMsgServer) UpdateOperatorBasicInfo(ctx context.Context, req *MsgUpdateOperatorBasicInfo) (*MsgUpdateOperatorBasicInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOperatorBasicInfo not implemented")
}
func (*UnimplementedMsgServer) RegisterManager(ctx context.Context, req *MsgRegisterManager) (*MsgRegisterManagerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterManager not implemented")
}
func (*UnimplementedMsgServer) GoWorking(ctx context.Context, req *MsgGoWorking) (*MsgGoWorkingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GoWorking not implemented")
}
func (*UnimplementedMsgServer) CreateSuperior(ctx context.Context, req *MsgCreateSuperior) (*MsgCreateSuperiorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSuperior not implemented")
}
func (*UnimplementedMsgServer) UpdateSuperior(ctx context.Context, req *MsgUpdateSuperior) (*MsgUpdateSuperiorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSuperior not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.manager.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateOperator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.manager.Msg/CreateOperator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateOperator(ctx, req.(*MsgCreateOperator))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BindOperatorManagerAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBindOperatorManagerAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BindOperatorManagerAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.manager.Msg/BindOperatorManagerAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BindOperatorManagerAccount(ctx, req.(*MsgBindOperatorManagerAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetManagerRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetManagerRegion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetManagerRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.manager.Msg/SetManagerRegion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetManagerRegion(ctx, req.(*MsgSetManagerRegion))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateManagerConnParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateManagerConnParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateManagerConnParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.manager.Msg/UpdateManagerConnParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateManagerConnParams(ctx, req.(*MsgUpdateManagerConnParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ActivateManager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgActivateManager)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ActivateManager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.manager.Msg/ActivateManager",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ActivateManager(ctx, req.(*MsgActivateManager))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BindOperatorEVMAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBindOperatorEVMAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BindOperatorEVMAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.manager.Msg/BindOperatorEVMAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BindOperatorEVMAccount(ctx, req.(*MsgBindOperatorEVMAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateOperatorBasicInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateOperatorBasicInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateOperatorBasicInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.manager.Msg/UpdateOperatorBasicInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateOperatorBasicInfo(ctx, req.(*MsgUpdateOperatorBasicInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RegisterManager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterManager)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterManager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.manager.Msg/RegisterManager",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterManager(ctx, req.(*MsgRegisterManager))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GoWorking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGoWorking)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GoWorking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.manager.Msg/GoWorking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GoWorking(ctx, req.(*MsgGoWorking))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateSuperior_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateSuperior)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateSuperior(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.manager.Msg/CreateSuperior",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateSuperior(ctx, req.(*MsgCreateSuperior))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateSuperior_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateSuperior)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateSuperior(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.manager.Msg/UpdateSuperior",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateSuperior(ctx, req.(*MsgUpdateSuperior))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "enreach.manager.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "CreateOperator",
			Handler:    _Msg_CreateOperator_Handler,
		},
		{
			MethodName: "BindOperatorManagerAccount",
			Handler:    _Msg_BindOperatorManagerAccount_Handler,
		},
		{
			MethodName: "SetManagerRegion",
			Handler:    _Msg_SetManagerRegion_Handler,
		},
		{
			MethodName: "UpdateManagerConnParams",
			Handler:    _Msg_UpdateManagerConnParams_Handler,
		},
		{
			MethodName: "ActivateManager",
			Handler:    _Msg_ActivateManager_Handler,
		},
		{
			MethodName: "BindOperatorEVMAccount",
			Handler:    _Msg_BindOperatorEVMAccount_Handler,
		},
		{
			MethodName: "UpdateOperatorBasicInfo",
			Handler:    _Msg_UpdateOperatorBasicInfo_Handler,
		},
		{
			MethodName: "RegisterManager",
			Handler:    _Msg_RegisterManager_Handler,
		},
		{
			MethodName: "GoWorking",
			Handler:    _Msg_GoWorking_Handler,
		},
		{
			MethodName: "CreateSuperior",
			Handler:    _Msg_CreateSuperior_Handler,
		},
		{
			MethodName: "UpdateSuperior",
			Handler:    _Msg_UpdateSuperior_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "enreach/manager/tx.proto",
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateOperator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateOperator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateOperator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WebsiteUrl) > 0 {
		i -= len(m.WebsiteUrl)
		copy(dAtA[i:], m.WebsiteUrl)
		i = encodeVarintTx(dAtA, i, uint64(len(m.WebsiteUrl)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OperatorAccount) > 0 {
		i -= len(m.OperatorAccount)
		copy(dAtA[i:], m.OperatorAccount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OperatorAccount)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateOperatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateOperatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateOperatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgBindOperatorManagerAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBindOperatorManagerAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBindOperatorManagerAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ForceUnbind {
		i--
		if m.ForceUnbind {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.ManagerSignature) > 0 {
		i -= len(m.ManagerSignature)
		copy(dAtA[i:], m.ManagerSignature)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ManagerSignature)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ManagerAccount) > 0 {
		i -= len(m.ManagerAccount)
		copy(dAtA[i:], m.ManagerAccount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ManagerAccount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OperatorAccount) > 0 {
		i -= len(m.OperatorAccount)
		copy(dAtA[i:], m.OperatorAccount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OperatorAccount)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBindOperatorManagerAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBindOperatorManagerAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBindOperatorManagerAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetManagerRegion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetManagerRegion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetManagerRegion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RegionCode) > 0 {
		i -= len(m.RegionCode)
		copy(dAtA[i:], m.RegionCode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RegionCode)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OperatorAccount) > 0 {
		i -= len(m.OperatorAccount)
		copy(dAtA[i:], m.OperatorAccount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OperatorAccount)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetManagerRegionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetManagerRegionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetManagerRegionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateManagerConnParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateManagerConnParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateManagerConnParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainRPCPort != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChainRPCPort))
		i--
		dAtA[i] = 0x30
	}
	if m.ChainAPIPort != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChainAPIPort))
		i--
		dAtA[i] = 0x28
	}
	if m.TrackerPort != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TrackerPort))
		i--
		dAtA[i] = 0x20
	}
	if m.ManagerPort != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ManagerPort))
		i--
		dAtA[i] = 0x18
	}
	if len(m.HostAddress) > 0 {
		i -= len(m.HostAddress)
		copy(dAtA[i:], m.HostAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.HostAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OperatorAccount) > 0 {
		i -= len(m.OperatorAccount)
		copy(dAtA[i:], m.OperatorAccount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OperatorAccount)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateManagerConnParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateManagerConnParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateManagerConnParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgActivateManager) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgActivateManager) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgActivateManager) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.License) > 0 {
		i -= len(m.License)
		copy(dAtA[i:], m.License)
		i = encodeVarintTx(dAtA, i, uint64(len(m.License)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OperatorAccount) > 0 {
		i -= len(m.OperatorAccount)
		copy(dAtA[i:], m.OperatorAccount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OperatorAccount)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgActivateManagerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgActivateManagerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgActivateManagerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgBindOperatorEVMAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBindOperatorEVMAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBindOperatorEVMAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EvmSignature) > 0 {
		i -= len(m.EvmSignature)
		copy(dAtA[i:], m.EvmSignature)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EvmSignature)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EvmAccount) > 0 {
		i -= len(m.EvmAccount)
		copy(dAtA[i:], m.EvmAccount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EvmAccount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OperatorAccount) > 0 {
		i -= len(m.OperatorAccount)
		copy(dAtA[i:], m.OperatorAccount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OperatorAccount)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBindOperatorEVMAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBindOperatorEVMAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBindOperatorEVMAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateOperatorBasicInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateOperatorBasicInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateOperatorBasicInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WebsiteUrl) > 0 {
		i -= len(m.WebsiteUrl)
		copy(dAtA[i:], m.WebsiteUrl)
		i = encodeVarintTx(dAtA, i, uint64(len(m.WebsiteUrl)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OperatorAccount) > 0 {
		i -= len(m.OperatorAccount)
		copy(dAtA[i:], m.OperatorAccount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OperatorAccount)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateOperatorBasicInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateOperatorBasicInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateOperatorBasicInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRegisterManager) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterManager) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterManager) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainRPCPort != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChainRPCPort))
		i--
		dAtA[i] = 0x30
	}
	if m.ChainAPIPort != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChainAPIPort))
		i--
		dAtA[i] = 0x28
	}
	if m.TrackerPort != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TrackerPort))
		i--
		dAtA[i] = 0x20
	}
	if m.ManagerPort != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ManagerPort))
		i--
		dAtA[i] = 0x18
	}
	if len(m.HostAddress) > 0 {
		i -= len(m.HostAddress)
		copy(dAtA[i:], m.HostAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.HostAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ManagerAccount) > 0 {
		i -= len(m.ManagerAccount)
		copy(dAtA[i:], m.ManagerAccount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ManagerAccount)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterManagerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterManagerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterManagerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgGoWorking) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGoWorking) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGoWorking) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ManagerAccount) > 0 {
		i -= len(m.ManagerAccount)
		copy(dAtA[i:], m.ManagerAccount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ManagerAccount)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgGoWorkingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGoWorkingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGoWorkingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateSuperior) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateSuperior) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateSuperior) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateSuperiorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateSuperiorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateSuperiorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateSuperior) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateSuperior) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateSuperior) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateSuperiorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateSuperiorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateSuperiorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateOperator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorAccount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.WebsiteUrl)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateOperatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgBindOperatorManagerAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorAccount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ManagerAccount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ManagerSignature)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ForceUnbind {
		n += 2
	}
	return n
}

func (m *MsgBindOperatorManagerAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetManagerRegion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorAccount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RegionCode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetManagerRegionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateManagerConnParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorAccount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.HostAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ManagerPort != 0 {
		n += 1 + sovTx(uint64(m.ManagerPort))
	}
	if m.TrackerPort != 0 {
		n += 1 + sovTx(uint64(m.TrackerPort))
	}
	if m.ChainAPIPort != 0 {
		n += 1 + sovTx(uint64(m.ChainAPIPort))
	}
	if m.ChainRPCPort != 0 {
		n += 1 + sovTx(uint64(m.ChainRPCPort))
	}
	return n
}

func (m *MsgUpdateManagerConnParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgActivateManager) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorAccount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.License)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgActivateManagerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgBindOperatorEVMAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorAccount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.EvmAccount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.EvmSignature)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgBindOperatorEVMAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateOperatorBasicInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorAccount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.WebsiteUrl)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateOperatorBasicInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRegisterManager) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ManagerAccount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.HostAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ManagerPort != 0 {
		n += 1 + sovTx(uint64(m.ManagerPort))
	}
	if m.TrackerPort != 0 {
		n += 1 + sovTx(uint64(m.TrackerPort))
	}
	if m.ChainAPIPort != 0 {
		n += 1 + sovTx(uint64(m.ChainAPIPort))
	}
	if m.ChainRPCPort != 0 {
		n += 1 + sovTx(uint64(m.ChainRPCPort))
	}
	return n
}

func (m *MsgRegisterManagerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgGoWorking) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ManagerAccount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgGoWorkingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateSuperior) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateSuperiorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateSuperior) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateSuperiorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateOperator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateOperator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateOperator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebsiteUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WebsiteUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateOperatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateOperatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateOperatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBindOperatorManagerAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBindOperatorManagerAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBindOperatorManagerAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagerAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ManagerAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagerSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ManagerSignature = append(m.ManagerSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.ManagerSignature == nil {
				m.ManagerSignature = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForceUnbind", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ForceUnbind = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBindOperatorManagerAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBindOperatorManagerAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBindOperatorManagerAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetManagerRegion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetManagerRegion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetManagerRegion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegionCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetManagerRegionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetManagerRegionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetManagerRegionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateManagerConnParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateManagerConnParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateManagerConnParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagerPort", wireType)
			}
			m.ManagerPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ManagerPort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrackerPort", wireType)
			}
			m.TrackerPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TrackerPort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainAPIPort", wireType)
			}
			m.ChainAPIPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainAPIPort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainRPCPort", wireType)
			}
			m.ChainRPCPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainRPCPort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateManagerConnParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateManagerConnParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateManagerConnParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgActivateManager) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgActivateManager: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgActivateManager: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field License", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.License = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgActivateManagerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgActivateManagerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgActivateManagerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBindOperatorEVMAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBindOperatorEVMAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBindOperatorEVMAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvmAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EvmAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvmSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EvmSignature = append(m.EvmSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.EvmSignature == nil {
				m.EvmSignature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBindOperatorEVMAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBindOperatorEVMAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBindOperatorEVMAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateOperatorBasicInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateOperatorBasicInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateOperatorBasicInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebsiteUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WebsiteUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateOperatorBasicInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateOperatorBasicInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateOperatorBasicInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterManager) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterManager: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterManager: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagerAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ManagerAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagerPort", wireType)
			}
			m.ManagerPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ManagerPort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrackerPort", wireType)
			}
			m.TrackerPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TrackerPort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainAPIPort", wireType)
			}
			m.ChainAPIPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainAPIPort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainRPCPort", wireType)
			}
			m.ChainRPCPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainRPCPort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterManagerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterManagerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterManagerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGoWorking) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGoWorking: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGoWorking: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagerAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ManagerAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGoWorkingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGoWorkingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGoWorkingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateSuperior) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateSuperior: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateSuperior: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateSuperiorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateSuperiorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateSuperiorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateSuperior) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateSuperior: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateSuperior: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateSuperiorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateSuperiorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateSuperiorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
