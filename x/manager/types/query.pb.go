// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: enreach/manager/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_44fc79fc26ee07f8, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_44fc79fc26ee07f8, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetOperatorRequest struct {
	OperatorAccount string `protobuf:"bytes,1,opt,name=operatorAccount,proto3" json:"operatorAccount,omitempty"`
}

func (m *QueryGetOperatorRequest) Reset()         { *m = QueryGetOperatorRequest{} }
func (m *QueryGetOperatorRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetOperatorRequest) ProtoMessage()    {}
func (*QueryGetOperatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_44fc79fc26ee07f8, []int{2}
}
func (m *QueryGetOperatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetOperatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetOperatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetOperatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetOperatorRequest.Merge(m, src)
}
func (m *QueryGetOperatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetOperatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetOperatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetOperatorRequest proto.InternalMessageInfo

func (m *QueryGetOperatorRequest) GetOperatorAccount() string {
	if m != nil {
		return m.OperatorAccount
	}
	return ""
}

type QueryGetOperatorResponse struct {
	Operator Operator `protobuf:"bytes,1,opt,name=Operator,proto3" json:"Operator"`
}

func (m *QueryGetOperatorResponse) Reset()         { *m = QueryGetOperatorResponse{} }
func (m *QueryGetOperatorResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetOperatorResponse) ProtoMessage()    {}
func (*QueryGetOperatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_44fc79fc26ee07f8, []int{3}
}
func (m *QueryGetOperatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetOperatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetOperatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetOperatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetOperatorResponse.Merge(m, src)
}
func (m *QueryGetOperatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetOperatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetOperatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetOperatorResponse proto.InternalMessageInfo

func (m *QueryGetOperatorResponse) GetOperator() Operator {
	if m != nil {
		return m.Operator
	}
	return Operator{}
}

type QueryAllOperatorRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllOperatorRequest) Reset()         { *m = QueryAllOperatorRequest{} }
func (m *QueryAllOperatorRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllOperatorRequest) ProtoMessage()    {}
func (*QueryAllOperatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_44fc79fc26ee07f8, []int{4}
}
func (m *QueryAllOperatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllOperatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllOperatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllOperatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllOperatorRequest.Merge(m, src)
}
func (m *QueryAllOperatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllOperatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllOperatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllOperatorRequest proto.InternalMessageInfo

func (m *QueryAllOperatorRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllOperatorResponse struct {
	Operator   []Operator          `protobuf:"bytes,1,rep,name=Operator,proto3" json:"Operator"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllOperatorResponse) Reset()         { *m = QueryAllOperatorResponse{} }
func (m *QueryAllOperatorResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllOperatorResponse) ProtoMessage()    {}
func (*QueryAllOperatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_44fc79fc26ee07f8, []int{5}
}
func (m *QueryAllOperatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllOperatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllOperatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllOperatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllOperatorResponse.Merge(m, src)
}
func (m *QueryAllOperatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllOperatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllOperatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllOperatorResponse proto.InternalMessageInfo

func (m *QueryAllOperatorResponse) GetOperator() []Operator {
	if m != nil {
		return m.Operator
	}
	return nil
}

func (m *QueryAllOperatorResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetManagerRequest struct {
	ManagerAccount string `protobuf:"bytes,1,opt,name=managerAccount,proto3" json:"managerAccount,omitempty"`
}

func (m *QueryGetManagerRequest) Reset()         { *m = QueryGetManagerRequest{} }
func (m *QueryGetManagerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetManagerRequest) ProtoMessage()    {}
func (*QueryGetManagerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_44fc79fc26ee07f8, []int{6}
}
func (m *QueryGetManagerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetManagerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetManagerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetManagerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetManagerRequest.Merge(m, src)
}
func (m *QueryGetManagerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetManagerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetManagerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetManagerRequest proto.InternalMessageInfo

func (m *QueryGetManagerRequest) GetManagerAccount() string {
	if m != nil {
		return m.ManagerAccount
	}
	return ""
}

type QueryGetManagerResponse struct {
	Manager Manager `protobuf:"bytes,1,opt,name=Manager,proto3" json:"Manager"`
}

func (m *QueryGetManagerResponse) Reset()         { *m = QueryGetManagerResponse{} }
func (m *QueryGetManagerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetManagerResponse) ProtoMessage()    {}
func (*QueryGetManagerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_44fc79fc26ee07f8, []int{7}
}
func (m *QueryGetManagerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetManagerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetManagerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetManagerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetManagerResponse.Merge(m, src)
}
func (m *QueryGetManagerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetManagerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetManagerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetManagerResponse proto.InternalMessageInfo

func (m *QueryGetManagerResponse) GetManager() Manager {
	if m != nil {
		return m.Manager
	}
	return Manager{}
}

type QueryAllManagerRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllManagerRequest) Reset()         { *m = QueryAllManagerRequest{} }
func (m *QueryAllManagerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllManagerRequest) ProtoMessage()    {}
func (*QueryAllManagerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_44fc79fc26ee07f8, []int{8}
}
func (m *QueryAllManagerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllManagerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllManagerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllManagerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllManagerRequest.Merge(m, src)
}
func (m *QueryAllManagerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllManagerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllManagerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllManagerRequest proto.InternalMessageInfo

func (m *QueryAllManagerRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllManagerResponse struct {
	Manager    []Manager           `protobuf:"bytes,1,rep,name=Manager,proto3" json:"Manager"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllManagerResponse) Reset()         { *m = QueryAllManagerResponse{} }
func (m *QueryAllManagerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllManagerResponse) ProtoMessage()    {}
func (*QueryAllManagerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_44fc79fc26ee07f8, []int{9}
}
func (m *QueryAllManagerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllManagerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllManagerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllManagerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllManagerResponse.Merge(m, src)
}
func (m *QueryAllManagerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllManagerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllManagerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllManagerResponse proto.InternalMessageInfo

func (m *QueryAllManagerResponse) GetManager() []Manager {
	if m != nil {
		return m.Manager
	}
	return nil
}

func (m *QueryAllManagerResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetManagerByRegionRequest struct {
	RegionCode string `protobuf:"bytes,1,opt,name=regionCode,proto3" json:"regionCode,omitempty"`
}

func (m *QueryGetManagerByRegionRequest) Reset()         { *m = QueryGetManagerByRegionRequest{} }
func (m *QueryGetManagerByRegionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetManagerByRegionRequest) ProtoMessage()    {}
func (*QueryGetManagerByRegionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_44fc79fc26ee07f8, []int{10}
}
func (m *QueryGetManagerByRegionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetManagerByRegionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetManagerByRegionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetManagerByRegionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetManagerByRegionRequest.Merge(m, src)
}
func (m *QueryGetManagerByRegionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetManagerByRegionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetManagerByRegionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetManagerByRegionRequest proto.InternalMessageInfo

func (m *QueryGetManagerByRegionRequest) GetRegionCode() string {
	if m != nil {
		return m.RegionCode
	}
	return ""
}

type QueryGetManagerByRegionResponse struct {
	Managers []Manager `protobuf:"bytes,1,rep,name=managers,proto3" json:"managers"`
}

func (m *QueryGetManagerByRegionResponse) Reset()         { *m = QueryGetManagerByRegionResponse{} }
func (m *QueryGetManagerByRegionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetManagerByRegionResponse) ProtoMessage()    {}
func (*QueryGetManagerByRegionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_44fc79fc26ee07f8, []int{11}
}
func (m *QueryGetManagerByRegionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetManagerByRegionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetManagerByRegionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetManagerByRegionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetManagerByRegionResponse.Merge(m, src)
}
func (m *QueryGetManagerByRegionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetManagerByRegionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetManagerByRegionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetManagerByRegionResponse proto.InternalMessageInfo

func (m *QueryGetManagerByRegionResponse) GetManagers() []Manager {
	if m != nil {
		return m.Managers
	}
	return nil
}

type QueryGetEpochLengthRequest struct {
}

func (m *QueryGetEpochLengthRequest) Reset()         { *m = QueryGetEpochLengthRequest{} }
func (m *QueryGetEpochLengthRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetEpochLengthRequest) ProtoMessage()    {}
func (*QueryGetEpochLengthRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_44fc79fc26ee07f8, []int{12}
}
func (m *QueryGetEpochLengthRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEpochLengthRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEpochLengthRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEpochLengthRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEpochLengthRequest.Merge(m, src)
}
func (m *QueryGetEpochLengthRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEpochLengthRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEpochLengthRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEpochLengthRequest proto.InternalMessageInfo

type QueryGetEpochLengthResponse struct {
	EpochLength uint64 `protobuf:"varint,1,opt,name=epochLength,proto3" json:"epochLength,omitempty"`
}

func (m *QueryGetEpochLengthResponse) Reset()         { *m = QueryGetEpochLengthResponse{} }
func (m *QueryGetEpochLengthResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetEpochLengthResponse) ProtoMessage()    {}
func (*QueryGetEpochLengthResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_44fc79fc26ee07f8, []int{13}
}
func (m *QueryGetEpochLengthResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEpochLengthResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEpochLengthResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEpochLengthResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEpochLengthResponse.Merge(m, src)
}
func (m *QueryGetEpochLengthResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEpochLengthResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEpochLengthResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEpochLengthResponse proto.InternalMessageInfo

func (m *QueryGetEpochLengthResponse) GetEpochLength() uint64 {
	if m != nil {
		return m.EpochLength
	}
	return 0
}

type QueryGetCurrentEpochRequest struct {
}

func (m *QueryGetCurrentEpochRequest) Reset()         { *m = QueryGetCurrentEpochRequest{} }
func (m *QueryGetCurrentEpochRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCurrentEpochRequest) ProtoMessage()    {}
func (*QueryGetCurrentEpochRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_44fc79fc26ee07f8, []int{14}
}
func (m *QueryGetCurrentEpochRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCurrentEpochRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCurrentEpochRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCurrentEpochRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCurrentEpochRequest.Merge(m, src)
}
func (m *QueryGetCurrentEpochRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCurrentEpochRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCurrentEpochRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCurrentEpochRequest proto.InternalMessageInfo

type QueryGetCurrentEpochResponse struct {
	CurrentEpoch uint64 `protobuf:"varint,1,opt,name=currentEpoch,proto3" json:"currentEpoch,omitempty"`
}

func (m *QueryGetCurrentEpochResponse) Reset()         { *m = QueryGetCurrentEpochResponse{} }
func (m *QueryGetCurrentEpochResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCurrentEpochResponse) ProtoMessage()    {}
func (*QueryGetCurrentEpochResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_44fc79fc26ee07f8, []int{15}
}
func (m *QueryGetCurrentEpochResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCurrentEpochResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCurrentEpochResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCurrentEpochResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCurrentEpochResponse.Merge(m, src)
}
func (m *QueryGetCurrentEpochResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCurrentEpochResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCurrentEpochResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCurrentEpochResponse proto.InternalMessageInfo

func (m *QueryGetCurrentEpochResponse) GetCurrentEpoch() uint64 {
	if m != nil {
		return m.CurrentEpoch
	}
	return 0
}

type QueryGetSuperiorRequest struct {
}

func (m *QueryGetSuperiorRequest) Reset()         { *m = QueryGetSuperiorRequest{} }
func (m *QueryGetSuperiorRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSuperiorRequest) ProtoMessage()    {}
func (*QueryGetSuperiorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_44fc79fc26ee07f8, []int{16}
}
func (m *QueryGetSuperiorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSuperiorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSuperiorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSuperiorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSuperiorRequest.Merge(m, src)
}
func (m *QueryGetSuperiorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSuperiorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSuperiorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSuperiorRequest proto.InternalMessageInfo

type QueryGetSuperiorResponse struct {
	Superior Superior `protobuf:"bytes,1,opt,name=Superior,proto3" json:"Superior"`
}

func (m *QueryGetSuperiorResponse) Reset()         { *m = QueryGetSuperiorResponse{} }
func (m *QueryGetSuperiorResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSuperiorResponse) ProtoMessage()    {}
func (*QueryGetSuperiorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_44fc79fc26ee07f8, []int{17}
}
func (m *QueryGetSuperiorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSuperiorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSuperiorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSuperiorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSuperiorResponse.Merge(m, src)
}
func (m *QueryGetSuperiorResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSuperiorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSuperiorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSuperiorResponse proto.InternalMessageInfo

func (m *QueryGetSuperiorResponse) GetSuperior() Superior {
	if m != nil {
		return m.Superior
	}
	return Superior{}
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "enreach.manager.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "enreach.manager.QueryParamsResponse")
	proto.RegisterType((*QueryGetOperatorRequest)(nil), "enreach.manager.QueryGetOperatorRequest")
	proto.RegisterType((*QueryGetOperatorResponse)(nil), "enreach.manager.QueryGetOperatorResponse")
	proto.RegisterType((*QueryAllOperatorRequest)(nil), "enreach.manager.QueryAllOperatorRequest")
	proto.RegisterType((*QueryAllOperatorResponse)(nil), "enreach.manager.QueryAllOperatorResponse")
	proto.RegisterType((*QueryGetManagerRequest)(nil), "enreach.manager.QueryGetManagerRequest")
	proto.RegisterType((*QueryGetManagerResponse)(nil), "enreach.manager.QueryGetManagerResponse")
	proto.RegisterType((*QueryAllManagerRequest)(nil), "enreach.manager.QueryAllManagerRequest")
	proto.RegisterType((*QueryAllManagerResponse)(nil), "enreach.manager.QueryAllManagerResponse")
	proto.RegisterType((*QueryGetManagerByRegionRequest)(nil), "enreach.manager.QueryGetManagerByRegionRequest")
	proto.RegisterType((*QueryGetManagerByRegionResponse)(nil), "enreach.manager.QueryGetManagerByRegionResponse")
	proto.RegisterType((*QueryGetEpochLengthRequest)(nil), "enreach.manager.QueryGetEpochLengthRequest")
	proto.RegisterType((*QueryGetEpochLengthResponse)(nil), "enreach.manager.QueryGetEpochLengthResponse")
	proto.RegisterType((*QueryGetCurrentEpochRequest)(nil), "enreach.manager.QueryGetCurrentEpochRequest")
	proto.RegisterType((*QueryGetCurrentEpochResponse)(nil), "enreach.manager.QueryGetCurrentEpochResponse")
	proto.RegisterType((*QueryGetSuperiorRequest)(nil), "enreach.manager.QueryGetSuperiorRequest")
	proto.RegisterType((*QueryGetSuperiorResponse)(nil), "enreach.manager.QueryGetSuperiorResponse")
}

func init() { proto.RegisterFile("enreach/manager/query.proto", fileDescriptor_44fc79fc26ee07f8) }

var fileDescriptor_44fc79fc26ee07f8 = []byte{
	// 896 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x96, 0x41, 0x4f, 0xe3, 0x46,
	0x14, 0xc7, 0x63, 0xa0, 0x14, 0x86, 0x0a, 0xd4, 0x29, 0x6a, 0x88, 0x09, 0x0e, 0x1d, 0x0a, 0x04,
	0x52, 0x3c, 0x0d, 0xa8, 0x52, 0x55, 0x0e, 0x6d, 0x82, 0x5a, 0x2e, 0xad, 0x0a, 0xe1, 0x50, 0xa9,
	0x52, 0x45, 0x9d, 0x74, 0x64, 0x22, 0x39, 0x1e, 0x63, 0x3b, 0x55, 0x23, 0xc4, 0x85, 0x43, 0xaf,
	0xad, 0x76, 0xf7, 0xb6, 0x7b, 0x58, 0x69, 0x2f, 0x7b, 0xdc, 0xc3, 0x7e, 0x08, 0x8e, 0x48, 0x7b,
	0xd9, 0xd3, 0x6a, 0x05, 0x2b, 0xed, 0xd7, 0x58, 0x65, 0xfc, 0x26, 0x8e, 0xed, 0x38, 0x04, 0x89,
	0x0b, 0x38, 0xef, 0xbd, 0xf9, 0xbf, 0xdf, 0xcc, 0xb3, 0xff, 0x36, 0x5a, 0x64, 0xb6, 0xcb, 0x8c,
	0xc6, 0x09, 0x6d, 0x19, 0xb6, 0x61, 0x32, 0x97, 0x9e, 0xb6, 0x99, 0xdb, 0xd1, 0x1d, 0x97, 0xfb,
	0x1c, 0xcf, 0x41, 0x52, 0x87, 0xa4, 0xfa, 0xa9, 0xd1, 0x6a, 0xda, 0x9c, 0x8a, 0xbf, 0x41, 0x8d,
	0x3a, 0x6f, 0x72, 0x93, 0x8b, 0x4b, 0xda, 0xbd, 0x82, 0x68, 0xde, 0xe4, 0xdc, 0xb4, 0x18, 0x35,
	0x9c, 0x26, 0x35, 0x6c, 0x9b, 0xfb, 0x86, 0xdf, 0xe4, 0xb6, 0x07, 0xd9, 0xcd, 0x06, 0xf7, 0x5a,
	0xdc, 0xa3, 0x75, 0xc3, 0x63, 0x41, 0x43, 0xfa, 0x77, 0xb9, 0xce, 0x7c, 0xa3, 0x4c, 0x1d, 0xc3,
	0x6c, 0xda, 0xa2, 0x58, 0x2a, 0xc5, 0x01, 0x1d, 0xc3, 0x35, 0x5a, 0x52, 0x69, 0x29, 0x9e, 0x85,
	0xff, 0x90, 0xd6, 0xe2, 0x69, 0xee, 0x30, 0xd7, 0xf0, 0x79, 0x6a, 0xde, 0x6b, 0x3b, 0xcc, 0x6d,
	0xca, 0x3c, 0x99, 0x47, 0xf8, 0xb0, 0x8b, 0x77, 0x20, 0x7a, 0xd6, 0xd8, 0x69, 0x9b, 0x79, 0x3e,
	0x39, 0x44, 0x9f, 0x45, 0xa2, 0x9e, 0xc3, 0x6d, 0x8f, 0xe1, 0xef, 0xd0, 0x64, 0xc0, 0xb6, 0xa0,
	0x2c, 0x2b, 0xc5, 0x99, 0xed, 0xac, 0x1e, 0x3b, 0x3e, 0x3d, 0x58, 0x50, 0x9d, 0xbe, 0x7c, 0x53,
	0xc8, 0x3c, 0x7f, 0xff, 0x62, 0x53, 0xa9, 0xc1, 0x0a, 0xb2, 0x87, 0xb2, 0x42, 0x72, 0x9f, 0xf9,
	0xbf, 0x02, 0x22, 0x74, 0xc3, 0x45, 0x34, 0x27, 0xa9, 0x2b, 0x8d, 0x06, 0x6f, 0xdb, 0xbe, 0xd0,
	0x9f, 0xae, 0xc5, 0xc3, 0xe4, 0x37, 0xb4, 0x90, 0x14, 0x01, 0xb8, 0x5d, 0x34, 0x25, 0x63, 0x80,
	0x97, 0x4b, 0xe0, 0xc9, 0x82, 0xea, 0x44, 0x17, 0xb0, 0xd6, 0x5b, 0x40, 0x0c, 0xa0, 0xab, 0x58,
	0x56, 0x9c, 0xee, 0x27, 0x84, 0xc2, 0x91, 0x81, 0xf2, 0x9a, 0x1e, 0xcc, 0x57, 0xef, 0xce, 0x57,
	0x0f, 0x6e, 0x28, 0x98, 0xaf, 0x7e, 0x60, 0x98, 0x0c, 0xd6, 0xd6, 0xfa, 0x56, 0x92, 0xa7, 0x0a,
	0xc0, 0x47, 0x7a, 0x0c, 0x84, 0x1f, 0xbf, 0x13, 0x3c, 0xde, 0x8f, 0x10, 0x8e, 0x09, 0xc2, 0xf5,
	0x5b, 0x09, 0x83, 0xce, 0x11, 0xc4, 0x1f, 0xd0, 0xe7, 0xf2, 0x78, 0x7f, 0x09, 0x9a, 0xca, 0x43,
	0x58, 0x43, 0xb3, 0x80, 0x11, 0x9d, 0x50, 0x2c, 0x4a, 0x8e, 0xc2, 0x29, 0xf7, 0x14, 0x60, 0x8b,
	0xdf, 0xa2, 0x8f, 0x21, 0x04, 0x87, 0xb8, 0x90, 0xd8, 0x21, 0xe4, 0x61, 0x83, 0xb2, 0x9c, 0xfc,
	0x09, 0x58, 0x15, 0xcb, 0x8a, 0x61, 0xdd, 0xd7, 0x6c, 0x9e, 0x28, 0xe1, 0xfc, 0x87, 0x72, 0x8f,
	0xdf, 0x81, 0xfb, 0x3e, 0xe7, 0xa2, 0xc5, 0x4e, 0xb5, 0xda, 0xa9, 0x31, 0xb3, 0xc9, 0x6d, 0x79,
	0x10, 0x1a, 0x42, 0xae, 0x08, 0xec, 0xf1, 0xbf, 0x18, 0xcc, 0xa6, 0x2f, 0x42, 0xfe, 0x40, 0x85,
	0x54, 0x85, 0xde, 0xc3, 0x3d, 0x05, 0xfb, 0xf1, 0x46, 0xdc, 0x68, 0xaf, 0x9e, 0xe4, 0x91, 0x2a,
	0xe5, 0x7f, 0x74, 0x78, 0xe3, 0xe4, 0x67, 0x66, 0x9b, 0xfe, 0x89, 0x74, 0x93, 0xef, 0xd1, 0xe2,
	0xc0, 0x2c, 0x34, 0x5e, 0x46, 0x33, 0x2c, 0x0c, 0x0b, 0xf8, 0x89, 0x5a, 0x7f, 0x88, 0x2c, 0x85,
	0x02, 0x7b, 0x6d, 0xd7, 0x65, 0x76, 0xa0, 0x23, 0xf5, 0xab, 0x28, 0x3f, 0x38, 0x0d, 0x0d, 0x08,
	0xfa, 0xa4, 0xd1, 0x17, 0x87, 0x0e, 0x91, 0x18, 0xc9, 0x85, 0x37, 0xee, 0x11, 0x38, 0xa4, 0x94,
	0xef, 0x33, 0x9d, 0x30, 0x15, 0x3e, 0xb7, 0x32, 0x96, 0x6a, 0x3a, 0xb2, 0x40, 0x9e, 0x9a, 0xfc,
	0xbd, 0xfd, 0x0c, 0xa1, 0x8f, 0x84, 0x32, 0xf6, 0xd1, 0x64, 0xe0, 0x9c, 0x78, 0x25, 0xb1, 0x3c,
	0x69, 0xcf, 0xea, 0x97, 0xc3, 0x8b, 0x02, 0x36, 0x52, 0xb8, 0x78, 0xf5, 0xee, 0xe1, 0x58, 0x0e,
	0x67, 0xe9, 0xe0, 0x17, 0x0c, 0x7e, 0xa4, 0x84, 0xae, 0x83, 0x8b, 0x83, 0x35, 0x93, 0x76, 0xad,
	0x6e, 0x8c, 0x50, 0x09, 0x08, 0x3b, 0x02, 0x61, 0x0b, 0x97, 0x68, 0xda, 0x6b, 0x8a, 0x9e, 0xc5,
	0x3c, 0xfe, 0x1c, 0xff, 0xab, 0xa0, 0x19, 0xa9, 0x54, 0xb1, 0xac, 0x34, 0xb2, 0xa4, 0x55, 0xa7,
	0x91, 0x0d, 0x30, 0x5c, 0x42, 0x04, 0x59, 0x1e, 0xab, 0xa9, 0x64, 0x1e, 0xfe, 0x4f, 0xe9, 0x3d,
	0xfa, 0x78, 0x3d, 0x75, 0xd3, 0x51, 0x4b, 0x52, 0x8b, 0xb7, 0x17, 0x02, 0x42, 0x59, 0x20, 0x94,
	0xf0, 0x06, 0x4d, 0x79, 0xc5, 0xd3, 0xb3, 0xa8, 0xbb, 0x9e, 0xe3, 0x0b, 0x05, 0x21, 0x90, 0xe9,
	0x9e, 0xcc, 0x7a, 0xea, 0x7e, 0x47, 0x83, 0x4a, 0xba, 0x1d, 0xf9, 0x42, 0x40, 0x2d, 0xe2, 0x5c,
	0x1a, 0x94, 0x87, 0x5f, 0x2a, 0x08, 0x27, 0x7d, 0x04, 0xd3, 0xdb, 0x36, 0x1e, 0xf3, 0x2c, 0xf5,
	0xeb, 0xd1, 0x17, 0x00, 0xdc, 0xae, 0x80, 0xfb, 0x06, 0xef, 0x24, 0xe0, 0x4c, 0xe6, 0x1f, 0xc3,
	0xf5, 0x71, 0xbd, 0x73, 0x1c, 0x38, 0x1f, 0x3d, 0x0b, 0x1d, 0xf0, 0x1c, 0x3f, 0x50, 0xd0, 0x6c,
	0xd4, 0x81, 0x70, 0x29, 0x95, 0x20, 0xe9, 0x62, 0xea, 0x57, 0xa3, 0x15, 0x03, 0xea, 0xaa, 0x40,
	0x2d, 0xe0, 0xa5, 0x04, 0xaa, 0x30, 0x36, 0x6a, 0x05, 0x04, 0x8f, 0x15, 0x34, 0x17, 0xb3, 0x2d,
	0x9c, 0xde, 0x68, 0x80, 0xf9, 0xa9, 0x5b, 0x23, 0x56, 0x03, 0x57, 0x49, 0x70, 0xad, 0xe2, 0x95,
	0x14, 0x2e, 0x30, 0x45, 0xf1, 0xa3, 0x7b, 0xbb, 0xf5, 0xdc, 0x6a, 0x88, 0x41, 0xc4, 0x0c, 0x73,
	0x88, 0x41, 0xc4, 0xfd, 0x73, 0xc8, 0xed, 0x26, 0xbf, 0x53, 0xab, 0xe5, 0xcb, 0x6b, 0x4d, 0xb9,
	0xba, 0xd6, 0x94, 0xb7, 0xd7, 0x9a, 0xf2, 0xff, 0x8d, 0x96, 0xb9, 0xba, 0xd1, 0x32, 0xaf, 0x6f,
	0xb4, 0xcc, 0xef, 0x59, 0xb9, 0xe6, 0x9f, 0xde, 0x2a, 0xbf, 0xe3, 0x30, 0xaf, 0x3e, 0x29, 0xbe,
	0x6d, 0x77, 0x3e, 0x04, 0x00, 0x00, 0xff, 0xff, 0xf6, 0x79, 0xeb, 0xf3, 0xfb, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of Operator items.
	Operator(ctx context.Context, in *QueryGetOperatorRequest, opts ...grpc.CallOption) (*QueryGetOperatorResponse, error)
	OperatorAll(ctx context.Context, in *QueryAllOperatorRequest, opts ...grpc.CallOption) (*QueryAllOperatorResponse, error)
	// Queries a list of Manager items.
	Manager(ctx context.Context, in *QueryGetManagerRequest, opts ...grpc.CallOption) (*QueryGetManagerResponse, error)
	ManagerAll(ctx context.Context, in *QueryAllManagerRequest, opts ...grpc.CallOption) (*QueryAllManagerResponse, error)
	// Queries a list of GetManagerByRegion items.
	GetManagerByRegion(ctx context.Context, in *QueryGetManagerByRegionRequest, opts ...grpc.CallOption) (*QueryGetManagerByRegionResponse, error)
	// Queries epoch
	GetEpochLength(ctx context.Context, in *QueryGetEpochLengthRequest, opts ...grpc.CallOption) (*QueryGetEpochLengthResponse, error)
	GetCurrentEpoch(ctx context.Context, in *QueryGetCurrentEpochRequest, opts ...grpc.CallOption) (*QueryGetCurrentEpochResponse, error)
	// Queries a Superior by index.
	Superior(ctx context.Context, in *QueryGetSuperiorRequest, opts ...grpc.CallOption) (*QueryGetSuperiorResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/enreach.manager.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Operator(ctx context.Context, in *QueryGetOperatorRequest, opts ...grpc.CallOption) (*QueryGetOperatorResponse, error) {
	out := new(QueryGetOperatorResponse)
	err := c.cc.Invoke(ctx, "/enreach.manager.Query/Operator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OperatorAll(ctx context.Context, in *QueryAllOperatorRequest, opts ...grpc.CallOption) (*QueryAllOperatorResponse, error) {
	out := new(QueryAllOperatorResponse)
	err := c.cc.Invoke(ctx, "/enreach.manager.Query/OperatorAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Manager(ctx context.Context, in *QueryGetManagerRequest, opts ...grpc.CallOption) (*QueryGetManagerResponse, error) {
	out := new(QueryGetManagerResponse)
	err := c.cc.Invoke(ctx, "/enreach.manager.Query/Manager", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ManagerAll(ctx context.Context, in *QueryAllManagerRequest, opts ...grpc.CallOption) (*QueryAllManagerResponse, error) {
	out := new(QueryAllManagerResponse)
	err := c.cc.Invoke(ctx, "/enreach.manager.Query/ManagerAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetManagerByRegion(ctx context.Context, in *QueryGetManagerByRegionRequest, opts ...grpc.CallOption) (*QueryGetManagerByRegionResponse, error) {
	out := new(QueryGetManagerByRegionResponse)
	err := c.cc.Invoke(ctx, "/enreach.manager.Query/GetManagerByRegion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetEpochLength(ctx context.Context, in *QueryGetEpochLengthRequest, opts ...grpc.CallOption) (*QueryGetEpochLengthResponse, error) {
	out := new(QueryGetEpochLengthResponse)
	err := c.cc.Invoke(ctx, "/enreach.manager.Query/GetEpochLength", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetCurrentEpoch(ctx context.Context, in *QueryGetCurrentEpochRequest, opts ...grpc.CallOption) (*QueryGetCurrentEpochResponse, error) {
	out := new(QueryGetCurrentEpochResponse)
	err := c.cc.Invoke(ctx, "/enreach.manager.Query/GetCurrentEpoch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Superior(ctx context.Context, in *QueryGetSuperiorRequest, opts ...grpc.CallOption) (*QueryGetSuperiorResponse, error) {
	out := new(QueryGetSuperiorResponse)
	err := c.cc.Invoke(ctx, "/enreach.manager.Query/Superior", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of Operator items.
	Operator(context.Context, *QueryGetOperatorRequest) (*QueryGetOperatorResponse, error)
	OperatorAll(context.Context, *QueryAllOperatorRequest) (*QueryAllOperatorResponse, error)
	// Queries a list of Manager items.
	Manager(context.Context, *QueryGetManagerRequest) (*QueryGetManagerResponse, error)
	ManagerAll(context.Context, *QueryAllManagerRequest) (*QueryAllManagerResponse, error)
	// Queries a list of GetManagerByRegion items.
	GetManagerByRegion(context.Context, *QueryGetManagerByRegionRequest) (*QueryGetManagerByRegionResponse, error)
	// Queries epoch
	GetEpochLength(context.Context, *QueryGetEpochLengthRequest) (*QueryGetEpochLengthResponse, error)
	GetCurrentEpoch(context.Context, *QueryGetCurrentEpochRequest) (*QueryGetCurrentEpochResponse, error)
	// Queries a Superior by index.
	Superior(context.Context, *QueryGetSuperiorRequest) (*QueryGetSuperiorResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Operator(ctx context.Context, req *QueryGetOperatorRequest) (*QueryGetOperatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Operator not implemented")
}
func (*UnimplementedQueryServer) OperatorAll(ctx context.Context, req *QueryAllOperatorRequest) (*QueryAllOperatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperatorAll not implemented")
}
func (*UnimplementedQueryServer) Manager(ctx context.Context, req *QueryGetManagerRequest) (*QueryGetManagerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Manager not implemented")
}
func (*UnimplementedQueryServer) ManagerAll(ctx context.Context, req *QueryAllManagerRequest) (*QueryAllManagerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManagerAll not implemented")
}
func (*UnimplementedQueryServer) GetManagerByRegion(ctx context.Context, req *QueryGetManagerByRegionRequest) (*QueryGetManagerByRegionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetManagerByRegion not implemented")
}
func (*UnimplementedQueryServer) GetEpochLength(ctx context.Context, req *QueryGetEpochLengthRequest) (*QueryGetEpochLengthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEpochLength not implemented")
}
func (*UnimplementedQueryServer) GetCurrentEpoch(ctx context.Context, req *QueryGetCurrentEpochRequest) (*QueryGetCurrentEpochResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentEpoch not implemented")
}
func (*UnimplementedQueryServer) Superior(ctx context.Context, req *QueryGetSuperiorRequest) (*QueryGetSuperiorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Superior not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.manager.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Operator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetOperatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Operator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.manager.Query/Operator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Operator(ctx, req.(*QueryGetOperatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OperatorAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllOperatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OperatorAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.manager.Query/OperatorAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OperatorAll(ctx, req.(*QueryAllOperatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Manager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetManagerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Manager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.manager.Query/Manager",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Manager(ctx, req.(*QueryGetManagerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ManagerAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllManagerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ManagerAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.manager.Query/ManagerAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ManagerAll(ctx, req.(*QueryAllManagerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetManagerByRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetManagerByRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetManagerByRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.manager.Query/GetManagerByRegion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetManagerByRegion(ctx, req.(*QueryGetManagerByRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetEpochLength_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetEpochLengthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetEpochLength(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.manager.Query/GetEpochLength",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetEpochLength(ctx, req.(*QueryGetEpochLengthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetCurrentEpoch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCurrentEpochRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetCurrentEpoch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.manager.Query/GetCurrentEpoch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetCurrentEpoch(ctx, req.(*QueryGetCurrentEpochRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Superior_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSuperiorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Superior(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enreach.manager.Query/Superior",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Superior(ctx, req.(*QueryGetSuperiorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "enreach.manager.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Operator",
			Handler:    _Query_Operator_Handler,
		},
		{
			MethodName: "OperatorAll",
			Handler:    _Query_OperatorAll_Handler,
		},
		{
			MethodName: "Manager",
			Handler:    _Query_Manager_Handler,
		},
		{
			MethodName: "ManagerAll",
			Handler:    _Query_ManagerAll_Handler,
		},
		{
			MethodName: "GetManagerByRegion",
			Handler:    _Query_GetManagerByRegion_Handler,
		},
		{
			MethodName: "GetEpochLength",
			Handler:    _Query_GetEpochLength_Handler,
		},
		{
			MethodName: "GetCurrentEpoch",
			Handler:    _Query_GetCurrentEpoch_Handler,
		},
		{
			MethodName: "Superior",
			Handler:    _Query_Superior_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "enreach/manager/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetOperatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetOperatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetOperatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OperatorAccount) > 0 {
		i -= len(m.OperatorAccount)
		copy(dAtA[i:], m.OperatorAccount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OperatorAccount)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetOperatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetOperatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetOperatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Operator.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllOperatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllOperatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllOperatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllOperatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllOperatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllOperatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Operator) > 0 {
		for iNdEx := len(m.Operator) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Operator[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetManagerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetManagerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetManagerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ManagerAccount) > 0 {
		i -= len(m.ManagerAccount)
		copy(dAtA[i:], m.ManagerAccount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ManagerAccount)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetManagerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetManagerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetManagerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Manager.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllManagerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllManagerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllManagerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllManagerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllManagerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllManagerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Manager) > 0 {
		for iNdEx := len(m.Manager) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Manager[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetManagerByRegionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetManagerByRegionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetManagerByRegionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RegionCode) > 0 {
		i -= len(m.RegionCode)
		copy(dAtA[i:], m.RegionCode)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RegionCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetManagerByRegionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetManagerByRegionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetManagerByRegionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Managers) > 0 {
		for iNdEx := len(m.Managers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Managers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEpochLengthRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEpochLengthRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEpochLengthRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetEpochLengthResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEpochLengthResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEpochLengthResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EpochLength != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EpochLength))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCurrentEpochRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCurrentEpochRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCurrentEpochRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetCurrentEpochResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCurrentEpochResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCurrentEpochResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CurrentEpoch != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CurrentEpoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSuperiorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSuperiorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSuperiorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetSuperiorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSuperiorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSuperiorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Superior.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetOperatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorAccount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetOperatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Operator.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllOperatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllOperatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Operator) > 0 {
		for _, e := range m.Operator {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetManagerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ManagerAccount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetManagerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Manager.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllManagerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllManagerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Manager) > 0 {
		for _, e := range m.Manager {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetManagerByRegionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RegionCode)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetManagerByRegionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Managers) > 0 {
		for _, e := range m.Managers {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetEpochLengthRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetEpochLengthResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochLength != 0 {
		n += 1 + sovQuery(uint64(m.EpochLength))
	}
	return n
}

func (m *QueryGetCurrentEpochRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetCurrentEpochResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentEpoch != 0 {
		n += 1 + sovQuery(uint64(m.CurrentEpoch))
	}
	return n
}

func (m *QueryGetSuperiorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetSuperiorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Superior.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetOperatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetOperatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetOperatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetOperatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetOperatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetOperatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Operator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllOperatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllOperatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllOperatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllOperatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllOperatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllOperatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = append(m.Operator, Operator{})
			if err := m.Operator[len(m.Operator)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetManagerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetManagerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetManagerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagerAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ManagerAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetManagerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetManagerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetManagerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Manager", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Manager.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllManagerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllManagerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllManagerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllManagerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllManagerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllManagerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Manager", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Manager = append(m.Manager, Manager{})
			if err := m.Manager[len(m.Manager)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetManagerByRegionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetManagerByRegionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetManagerByRegionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegionCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetManagerByRegionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetManagerByRegionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetManagerByRegionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Managers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Managers = append(m.Managers, Manager{})
			if err := m.Managers[len(m.Managers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEpochLengthRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEpochLengthRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEpochLengthRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEpochLengthResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEpochLengthResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEpochLengthResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochLength", wireType)
			}
			m.EpochLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochLength |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCurrentEpochRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCurrentEpochRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCurrentEpochRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCurrentEpochResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCurrentEpochResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCurrentEpochResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentEpoch", wireType)
			}
			m.CurrentEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentEpoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSuperiorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSuperiorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSuperiorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSuperiorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSuperiorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSuperiorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Superior", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Superior.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
