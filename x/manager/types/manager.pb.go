// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: enreach/manager/manager.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Manager struct {
	ManagerAccount  string `protobuf:"bytes,1,opt,name=managerAccount,proto3" json:"managerAccount,omitempty"`
	OperatorAccount string `protobuf:"bytes,2,opt,name=operatorAccount,proto3" json:"operatorAccount,omitempty"`
	HostAddress     string `protobuf:"bytes,3,opt,name=hostAddress,proto3" json:"hostAddress,omitempty"`
	ManagerHTTPPort uint32 `protobuf:"varint,4,opt,name=managerHTTPPort,proto3" json:"managerHTTPPort,omitempty"`
	ManagerWSPort   uint32 `protobuf:"varint,5,opt,name=managerWSPort,proto3" json:"managerWSPort,omitempty"`
	TrackerPort     uint32 `protobuf:"varint,6,opt,name=trackerPort,proto3" json:"trackerPort,omitempty"`
	ChainAPIPort    uint32 `protobuf:"varint,7,opt,name=chainAPIPort,proto3" json:"chainAPIPort,omitempty"`
	ChainRPCPort    uint32 `protobuf:"varint,8,opt,name=chainRPCPort,proto3" json:"chainRPCPort,omitempty"`
	RegionCode      string `protobuf:"bytes,9,opt,name=regionCode,proto3" json:"regionCode,omitempty"`
	RegisterStatus  string `protobuf:"bytes,10,opt,name=registerStatus,proto3" json:"registerStatus,omitempty"`
	WorkingStatus   string `protobuf:"bytes,11,opt,name=workingStatus,proto3" json:"workingStatus,omitempty"`
	Creator         string `protobuf:"bytes,12,opt,name=creator,proto3" json:"creator,omitempty"`
	CreateAt        uint64 `protobuf:"varint,13,opt,name=createAt,proto3" json:"createAt,omitempty"`
	Updator         string `protobuf:"bytes,14,opt,name=updator,proto3" json:"updator,omitempty"`
	UpdateAt        uint64 `protobuf:"varint,15,opt,name=updateAt,proto3" json:"updateAt,omitempty"`
}

func (m *Manager) Reset()         { *m = Manager{} }
func (m *Manager) String() string { return proto.CompactTextString(m) }
func (*Manager) ProtoMessage()    {}
func (*Manager) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe2e849f6a07a0ae, []int{0}
}
func (m *Manager) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Manager) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Manager.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Manager) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Manager.Merge(m, src)
}
func (m *Manager) XXX_Size() int {
	return m.Size()
}
func (m *Manager) XXX_DiscardUnknown() {
	xxx_messageInfo_Manager.DiscardUnknown(m)
}

var xxx_messageInfo_Manager proto.InternalMessageInfo

func (m *Manager) GetManagerAccount() string {
	if m != nil {
		return m.ManagerAccount
	}
	return ""
}

func (m *Manager) GetOperatorAccount() string {
	if m != nil {
		return m.OperatorAccount
	}
	return ""
}

func (m *Manager) GetHostAddress() string {
	if m != nil {
		return m.HostAddress
	}
	return ""
}

func (m *Manager) GetManagerHTTPPort() uint32 {
	if m != nil {
		return m.ManagerHTTPPort
	}
	return 0
}

func (m *Manager) GetManagerWSPort() uint32 {
	if m != nil {
		return m.ManagerWSPort
	}
	return 0
}

func (m *Manager) GetTrackerPort() uint32 {
	if m != nil {
		return m.TrackerPort
	}
	return 0
}

func (m *Manager) GetChainAPIPort() uint32 {
	if m != nil {
		return m.ChainAPIPort
	}
	return 0
}

func (m *Manager) GetChainRPCPort() uint32 {
	if m != nil {
		return m.ChainRPCPort
	}
	return 0
}

func (m *Manager) GetRegionCode() string {
	if m != nil {
		return m.RegionCode
	}
	return ""
}

func (m *Manager) GetRegisterStatus() string {
	if m != nil {
		return m.RegisterStatus
	}
	return ""
}

func (m *Manager) GetWorkingStatus() string {
	if m != nil {
		return m.WorkingStatus
	}
	return ""
}

func (m *Manager) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Manager) GetCreateAt() uint64 {
	if m != nil {
		return m.CreateAt
	}
	return 0
}

func (m *Manager) GetUpdator() string {
	if m != nil {
		return m.Updator
	}
	return ""
}

func (m *Manager) GetUpdateAt() uint64 {
	if m != nil {
		return m.UpdateAt
	}
	return 0
}

func init() {
	proto.RegisterType((*Manager)(nil), "enreach.manager.Manager")
}

func init() { proto.RegisterFile("enreach/manager/manager.proto", fileDescriptor_fe2e849f6a07a0ae) }

var fileDescriptor_fe2e849f6a07a0ae = []byte{
	// 345 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x92, 0x4d, 0x4b, 0xc3, 0x30,
	0x18, 0xc7, 0x17, 0x9d, 0x7b, 0xc9, 0xde, 0x20, 0x17, 0x83, 0x60, 0x28, 0x43, 0xa4, 0xa7, 0x89,
	0xf8, 0x09, 0xea, 0x2e, 0x7a, 0x10, 0x4a, 0x37, 0x10, 0xbc, 0xc5, 0x36, 0x6c, 0x63, 0xd8, 0x94,
	0x24, 0x43, 0xfd, 0x16, 0xfa, 0xad, 0x3c, 0xee, 0xe8, 0x51, 0xb6, 0x2f, 0x22, 0x79, 0x9a, 0x96,
	0xb6, 0xa7, 0x3e, 0xcf, 0x2f, 0xbf, 0x7f, 0x4a, 0x1e, 0x1e, 0x7c, 0x29, 0x52, 0x25, 0x78, 0xbc,
	0xbe, 0x79, 0xe3, 0x29, 0x5f, 0x09, 0x55, 0x7c, 0x67, 0x99, 0x92, 0x46, 0x92, 0x89, 0x3b, 0x9e,
	0x39, 0x3c, 0xfd, 0x6e, 0xe3, 0xee, 0x53, 0x5e, 0x93, 0x6b, 0x3c, 0x76, 0x38, 0x88, 0x63, 0xb9,
	0x4b, 0x0d, 0x45, 0x1e, 0xf2, 0xfb, 0x51, 0x83, 0x12, 0x1f, 0x4f, 0x64, 0x26, 0x14, 0x37, 0xb2,
	0x14, 0x4f, 0x40, 0x6c, 0x62, 0xe2, 0xe1, 0xc1, 0x5a, 0x6a, 0x13, 0x24, 0x89, 0x12, 0x5a, 0xd3,
	0x53, 0xb0, 0xaa, 0xc8, 0xde, 0xe5, 0x6e, 0x7f, 0x58, 0x2e, 0xc3, 0x50, 0x2a, 0x43, 0xdb, 0x1e,
	0xf2, 0x47, 0x51, 0x13, 0x93, 0x2b, 0x3c, 0x72, 0xe8, 0x79, 0x01, 0xde, 0x19, 0x78, 0x75, 0x68,
	0xff, 0x68, 0x14, 0x8f, 0xb7, 0x42, 0x81, 0xd3, 0x01, 0xa7, 0x8a, 0xc8, 0x14, 0x0f, 0xe3, 0x35,
	0xdf, 0xa4, 0x41, 0xf8, 0x08, 0x4a, 0x17, 0x94, 0x1a, 0x2b, 0x9d, 0x28, 0x9c, 0x83, 0xd3, 0xab,
	0x38, 0x8e, 0x11, 0x86, 0xb1, 0x12, 0xab, 0x8d, 0x4c, 0xe7, 0x32, 0x11, 0xb4, 0x0f, 0x4f, 0xab,
	0x10, 0x3b, 0x4d, 0xdb, 0x69, 0x23, 0xd4, 0xc2, 0x70, 0xb3, 0xd3, 0x14, 0xe7, 0xd3, 0xac, 0x53,
	0xfb, 0xae, 0x77, 0xa9, 0xb6, 0x9b, 0x74, 0xe5, 0xb4, 0x01, 0x68, 0x75, 0x48, 0x28, 0xee, 0xc6,
	0x4a, 0xd8, 0xd9, 0xd2, 0x21, 0x9c, 0x17, 0x2d, 0xb9, 0xc0, 0x3d, 0x28, 0x45, 0x60, 0xe8, 0xc8,
	0x43, 0x7e, 0x3b, 0x2a, 0x7b, 0x9b, 0xda, 0x65, 0x09, 0xa4, 0xc6, 0x79, 0xca, 0xb5, 0x36, 0x05,
	0xa5, 0x4d, 0x4d, 0xf2, 0x54, 0xd1, 0xdf, 0xdf, 0xfe, 0x1c, 0x18, 0xda, 0x1f, 0x18, 0xfa, 0x3b,
	0x30, 0xf4, 0x75, 0x64, 0xad, 0xfd, 0x91, 0xb5, 0x7e, 0x8f, 0xac, 0xf5, 0x72, 0x5e, 0x6c, 0xd7,
	0x47, 0xb9, 0x5f, 0xe6, 0x33, 0x13, 0xfa, 0xb5, 0x03, 0xeb, 0x75, 0xf7, 0x1f, 0x00, 0x00, 0xff,
	0xff, 0x77, 0x26, 0x19, 0x88, 0x7f, 0x02, 0x00, 0x00,
}

func (m *Manager) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Manager) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Manager) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdateAt != 0 {
		i = encodeVarintManager(dAtA, i, uint64(m.UpdateAt))
		i--
		dAtA[i] = 0x78
	}
	if len(m.Updator) > 0 {
		i -= len(m.Updator)
		copy(dAtA[i:], m.Updator)
		i = encodeVarintManager(dAtA, i, uint64(len(m.Updator)))
		i--
		dAtA[i] = 0x72
	}
	if m.CreateAt != 0 {
		i = encodeVarintManager(dAtA, i, uint64(m.CreateAt))
		i--
		dAtA[i] = 0x68
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintManager(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.WorkingStatus) > 0 {
		i -= len(m.WorkingStatus)
		copy(dAtA[i:], m.WorkingStatus)
		i = encodeVarintManager(dAtA, i, uint64(len(m.WorkingStatus)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.RegisterStatus) > 0 {
		i -= len(m.RegisterStatus)
		copy(dAtA[i:], m.RegisterStatus)
		i = encodeVarintManager(dAtA, i, uint64(len(m.RegisterStatus)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.RegionCode) > 0 {
		i -= len(m.RegionCode)
		copy(dAtA[i:], m.RegionCode)
		i = encodeVarintManager(dAtA, i, uint64(len(m.RegionCode)))
		i--
		dAtA[i] = 0x4a
	}
	if m.ChainRPCPort != 0 {
		i = encodeVarintManager(dAtA, i, uint64(m.ChainRPCPort))
		i--
		dAtA[i] = 0x40
	}
	if m.ChainAPIPort != 0 {
		i = encodeVarintManager(dAtA, i, uint64(m.ChainAPIPort))
		i--
		dAtA[i] = 0x38
	}
	if m.TrackerPort != 0 {
		i = encodeVarintManager(dAtA, i, uint64(m.TrackerPort))
		i--
		dAtA[i] = 0x30
	}
	if m.ManagerWSPort != 0 {
		i = encodeVarintManager(dAtA, i, uint64(m.ManagerWSPort))
		i--
		dAtA[i] = 0x28
	}
	if m.ManagerHTTPPort != 0 {
		i = encodeVarintManager(dAtA, i, uint64(m.ManagerHTTPPort))
		i--
		dAtA[i] = 0x20
	}
	if len(m.HostAddress) > 0 {
		i -= len(m.HostAddress)
		copy(dAtA[i:], m.HostAddress)
		i = encodeVarintManager(dAtA, i, uint64(len(m.HostAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OperatorAccount) > 0 {
		i -= len(m.OperatorAccount)
		copy(dAtA[i:], m.OperatorAccount)
		i = encodeVarintManager(dAtA, i, uint64(len(m.OperatorAccount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ManagerAccount) > 0 {
		i -= len(m.ManagerAccount)
		copy(dAtA[i:], m.ManagerAccount)
		i = encodeVarintManager(dAtA, i, uint64(len(m.ManagerAccount)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintManager(dAtA []byte, offset int, v uint64) int {
	offset -= sovManager(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Manager) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ManagerAccount)
	if l > 0 {
		n += 1 + l + sovManager(uint64(l))
	}
	l = len(m.OperatorAccount)
	if l > 0 {
		n += 1 + l + sovManager(uint64(l))
	}
	l = len(m.HostAddress)
	if l > 0 {
		n += 1 + l + sovManager(uint64(l))
	}
	if m.ManagerHTTPPort != 0 {
		n += 1 + sovManager(uint64(m.ManagerHTTPPort))
	}
	if m.ManagerWSPort != 0 {
		n += 1 + sovManager(uint64(m.ManagerWSPort))
	}
	if m.TrackerPort != 0 {
		n += 1 + sovManager(uint64(m.TrackerPort))
	}
	if m.ChainAPIPort != 0 {
		n += 1 + sovManager(uint64(m.ChainAPIPort))
	}
	if m.ChainRPCPort != 0 {
		n += 1 + sovManager(uint64(m.ChainRPCPort))
	}
	l = len(m.RegionCode)
	if l > 0 {
		n += 1 + l + sovManager(uint64(l))
	}
	l = len(m.RegisterStatus)
	if l > 0 {
		n += 1 + l + sovManager(uint64(l))
	}
	l = len(m.WorkingStatus)
	if l > 0 {
		n += 1 + l + sovManager(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovManager(uint64(l))
	}
	if m.CreateAt != 0 {
		n += 1 + sovManager(uint64(m.CreateAt))
	}
	l = len(m.Updator)
	if l > 0 {
		n += 1 + l + sovManager(uint64(l))
	}
	if m.UpdateAt != 0 {
		n += 1 + sovManager(uint64(m.UpdateAt))
	}
	return n
}

func sovManager(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozManager(x uint64) (n int) {
	return sovManager(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Manager) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Manager: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Manager: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagerAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ManagerAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagerHTTPPort", wireType)
			}
			m.ManagerHTTPPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ManagerHTTPPort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagerWSPort", wireType)
			}
			m.ManagerWSPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ManagerWSPort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrackerPort", wireType)
			}
			m.TrackerPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TrackerPort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainAPIPort", wireType)
			}
			m.ChainAPIPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainAPIPort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainRPCPort", wireType)
			}
			m.ChainRPCPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainRPCPort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegionCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegisterStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkingStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkingStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			m.CreateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthManager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Updator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateAt", wireType)
			}
			m.UpdateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipManager(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowManager
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowManager
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowManager
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthManager
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupManager
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthManager
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthManager        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowManager          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupManager = fmt.Errorf("proto: unexpected end of group")
)
