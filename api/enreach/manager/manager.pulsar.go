// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package manager

import (
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_Manager                 protoreflect.MessageDescriptor
	fd_Manager_managerAccount  protoreflect.FieldDescriptor
	fd_Manager_operatorAccount protoreflect.FieldDescriptor
	fd_Manager_hostAddress     protoreflect.FieldDescriptor
	fd_Manager_managerHTTPPort protoreflect.FieldDescriptor
	fd_Manager_managerWSPort   protoreflect.FieldDescriptor
	fd_Manager_trackerPort     protoreflect.FieldDescriptor
	fd_Manager_chainAPIPort    protoreflect.FieldDescriptor
	fd_Manager_chainRPCPort    protoreflect.FieldDescriptor
	fd_Manager_regionCode      protoreflect.FieldDescriptor
	fd_Manager_registerStatus  protoreflect.FieldDescriptor
	fd_Manager_workingStatus   protoreflect.FieldDescriptor
	fd_Manager_creator         protoreflect.FieldDescriptor
	fd_Manager_createAt        protoreflect.FieldDescriptor
	fd_Manager_updator         protoreflect.FieldDescriptor
	fd_Manager_updateAt        protoreflect.FieldDescriptor
)

func init() {
	file_enreach_manager_manager_proto_init()
	md_Manager = File_enreach_manager_manager_proto.Messages().ByName("Manager")
	fd_Manager_managerAccount = md_Manager.Fields().ByName("managerAccount")
	fd_Manager_operatorAccount = md_Manager.Fields().ByName("operatorAccount")
	fd_Manager_hostAddress = md_Manager.Fields().ByName("hostAddress")
	fd_Manager_managerHTTPPort = md_Manager.Fields().ByName("managerHTTPPort")
	fd_Manager_managerWSPort = md_Manager.Fields().ByName("managerWSPort")
	fd_Manager_trackerPort = md_Manager.Fields().ByName("trackerPort")
	fd_Manager_chainAPIPort = md_Manager.Fields().ByName("chainAPIPort")
	fd_Manager_chainRPCPort = md_Manager.Fields().ByName("chainRPCPort")
	fd_Manager_regionCode = md_Manager.Fields().ByName("regionCode")
	fd_Manager_registerStatus = md_Manager.Fields().ByName("registerStatus")
	fd_Manager_workingStatus = md_Manager.Fields().ByName("workingStatus")
	fd_Manager_creator = md_Manager.Fields().ByName("creator")
	fd_Manager_createAt = md_Manager.Fields().ByName("createAt")
	fd_Manager_updator = md_Manager.Fields().ByName("updator")
	fd_Manager_updateAt = md_Manager.Fields().ByName("updateAt")
}

var _ protoreflect.Message = (*fastReflection_Manager)(nil)

type fastReflection_Manager Manager

func (x *Manager) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Manager)(x)
}

func (x *Manager) slowProtoReflect() protoreflect.Message {
	mi := &file_enreach_manager_manager_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Manager_messageType fastReflection_Manager_messageType
var _ protoreflect.MessageType = fastReflection_Manager_messageType{}

type fastReflection_Manager_messageType struct{}

func (x fastReflection_Manager_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Manager)(nil)
}
func (x fastReflection_Manager_messageType) New() protoreflect.Message {
	return new(fastReflection_Manager)
}
func (x fastReflection_Manager_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Manager
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Manager) Descriptor() protoreflect.MessageDescriptor {
	return md_Manager
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Manager) Type() protoreflect.MessageType {
	return _fastReflection_Manager_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Manager) New() protoreflect.Message {
	return new(fastReflection_Manager)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Manager) Interface() protoreflect.ProtoMessage {
	return (*Manager)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Manager) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.ManagerAccount != "" {
		value := protoreflect.ValueOfString(x.ManagerAccount)
		if !f(fd_Manager_managerAccount, value) {
			return
		}
	}
	if x.OperatorAccount != "" {
		value := protoreflect.ValueOfString(x.OperatorAccount)
		if !f(fd_Manager_operatorAccount, value) {
			return
		}
	}
	if x.HostAddress != "" {
		value := protoreflect.ValueOfString(x.HostAddress)
		if !f(fd_Manager_hostAddress, value) {
			return
		}
	}
	if x.ManagerHTTPPort != uint32(0) {
		value := protoreflect.ValueOfUint32(x.ManagerHTTPPort)
		if !f(fd_Manager_managerHTTPPort, value) {
			return
		}
	}
	if x.ManagerWSPort != uint32(0) {
		value := protoreflect.ValueOfUint32(x.ManagerWSPort)
		if !f(fd_Manager_managerWSPort, value) {
			return
		}
	}
	if x.TrackerPort != uint32(0) {
		value := protoreflect.ValueOfUint32(x.TrackerPort)
		if !f(fd_Manager_trackerPort, value) {
			return
		}
	}
	if x.ChainAPIPort != uint32(0) {
		value := protoreflect.ValueOfUint32(x.ChainAPIPort)
		if !f(fd_Manager_chainAPIPort, value) {
			return
		}
	}
	if x.ChainRPCPort != uint32(0) {
		value := protoreflect.ValueOfUint32(x.ChainRPCPort)
		if !f(fd_Manager_chainRPCPort, value) {
			return
		}
	}
	if x.RegionCode != "" {
		value := protoreflect.ValueOfString(x.RegionCode)
		if !f(fd_Manager_regionCode, value) {
			return
		}
	}
	if x.RegisterStatus != "" {
		value := protoreflect.ValueOfString(x.RegisterStatus)
		if !f(fd_Manager_registerStatus, value) {
			return
		}
	}
	if x.WorkingStatus != "" {
		value := protoreflect.ValueOfString(x.WorkingStatus)
		if !f(fd_Manager_workingStatus, value) {
			return
		}
	}
	if x.Creator != "" {
		value := protoreflect.ValueOfString(x.Creator)
		if !f(fd_Manager_creator, value) {
			return
		}
	}
	if x.CreateAt != uint64(0) {
		value := protoreflect.ValueOfUint64(x.CreateAt)
		if !f(fd_Manager_createAt, value) {
			return
		}
	}
	if x.Updator != "" {
		value := protoreflect.ValueOfString(x.Updator)
		if !f(fd_Manager_updator, value) {
			return
		}
	}
	if x.UpdateAt != uint64(0) {
		value := protoreflect.ValueOfUint64(x.UpdateAt)
		if !f(fd_Manager_updateAt, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Manager) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "enreach.manager.Manager.managerAccount":
		return x.ManagerAccount != ""
	case "enreach.manager.Manager.operatorAccount":
		return x.OperatorAccount != ""
	case "enreach.manager.Manager.hostAddress":
		return x.HostAddress != ""
	case "enreach.manager.Manager.managerHTTPPort":
		return x.ManagerHTTPPort != uint32(0)
	case "enreach.manager.Manager.managerWSPort":
		return x.ManagerWSPort != uint32(0)
	case "enreach.manager.Manager.trackerPort":
		return x.TrackerPort != uint32(0)
	case "enreach.manager.Manager.chainAPIPort":
		return x.ChainAPIPort != uint32(0)
	case "enreach.manager.Manager.chainRPCPort":
		return x.ChainRPCPort != uint32(0)
	case "enreach.manager.Manager.regionCode":
		return x.RegionCode != ""
	case "enreach.manager.Manager.registerStatus":
		return x.RegisterStatus != ""
	case "enreach.manager.Manager.workingStatus":
		return x.WorkingStatus != ""
	case "enreach.manager.Manager.creator":
		return x.Creator != ""
	case "enreach.manager.Manager.createAt":
		return x.CreateAt != uint64(0)
	case "enreach.manager.Manager.updator":
		return x.Updator != ""
	case "enreach.manager.Manager.updateAt":
		return x.UpdateAt != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: enreach.manager.Manager"))
		}
		panic(fmt.Errorf("message enreach.manager.Manager does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Manager) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "enreach.manager.Manager.managerAccount":
		x.ManagerAccount = ""
	case "enreach.manager.Manager.operatorAccount":
		x.OperatorAccount = ""
	case "enreach.manager.Manager.hostAddress":
		x.HostAddress = ""
	case "enreach.manager.Manager.managerHTTPPort":
		x.ManagerHTTPPort = uint32(0)
	case "enreach.manager.Manager.managerWSPort":
		x.ManagerWSPort = uint32(0)
	case "enreach.manager.Manager.trackerPort":
		x.TrackerPort = uint32(0)
	case "enreach.manager.Manager.chainAPIPort":
		x.ChainAPIPort = uint32(0)
	case "enreach.manager.Manager.chainRPCPort":
		x.ChainRPCPort = uint32(0)
	case "enreach.manager.Manager.regionCode":
		x.RegionCode = ""
	case "enreach.manager.Manager.registerStatus":
		x.RegisterStatus = ""
	case "enreach.manager.Manager.workingStatus":
		x.WorkingStatus = ""
	case "enreach.manager.Manager.creator":
		x.Creator = ""
	case "enreach.manager.Manager.createAt":
		x.CreateAt = uint64(0)
	case "enreach.manager.Manager.updator":
		x.Updator = ""
	case "enreach.manager.Manager.updateAt":
		x.UpdateAt = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: enreach.manager.Manager"))
		}
		panic(fmt.Errorf("message enreach.manager.Manager does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Manager) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "enreach.manager.Manager.managerAccount":
		value := x.ManagerAccount
		return protoreflect.ValueOfString(value)
	case "enreach.manager.Manager.operatorAccount":
		value := x.OperatorAccount
		return protoreflect.ValueOfString(value)
	case "enreach.manager.Manager.hostAddress":
		value := x.HostAddress
		return protoreflect.ValueOfString(value)
	case "enreach.manager.Manager.managerHTTPPort":
		value := x.ManagerHTTPPort
		return protoreflect.ValueOfUint32(value)
	case "enreach.manager.Manager.managerWSPort":
		value := x.ManagerWSPort
		return protoreflect.ValueOfUint32(value)
	case "enreach.manager.Manager.trackerPort":
		value := x.TrackerPort
		return protoreflect.ValueOfUint32(value)
	case "enreach.manager.Manager.chainAPIPort":
		value := x.ChainAPIPort
		return protoreflect.ValueOfUint32(value)
	case "enreach.manager.Manager.chainRPCPort":
		value := x.ChainRPCPort
		return protoreflect.ValueOfUint32(value)
	case "enreach.manager.Manager.regionCode":
		value := x.RegionCode
		return protoreflect.ValueOfString(value)
	case "enreach.manager.Manager.registerStatus":
		value := x.RegisterStatus
		return protoreflect.ValueOfString(value)
	case "enreach.manager.Manager.workingStatus":
		value := x.WorkingStatus
		return protoreflect.ValueOfString(value)
	case "enreach.manager.Manager.creator":
		value := x.Creator
		return protoreflect.ValueOfString(value)
	case "enreach.manager.Manager.createAt":
		value := x.CreateAt
		return protoreflect.ValueOfUint64(value)
	case "enreach.manager.Manager.updator":
		value := x.Updator
		return protoreflect.ValueOfString(value)
	case "enreach.manager.Manager.updateAt":
		value := x.UpdateAt
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: enreach.manager.Manager"))
		}
		panic(fmt.Errorf("message enreach.manager.Manager does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Manager) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "enreach.manager.Manager.managerAccount":
		x.ManagerAccount = value.Interface().(string)
	case "enreach.manager.Manager.operatorAccount":
		x.OperatorAccount = value.Interface().(string)
	case "enreach.manager.Manager.hostAddress":
		x.HostAddress = value.Interface().(string)
	case "enreach.manager.Manager.managerHTTPPort":
		x.ManagerHTTPPort = uint32(value.Uint())
	case "enreach.manager.Manager.managerWSPort":
		x.ManagerWSPort = uint32(value.Uint())
	case "enreach.manager.Manager.trackerPort":
		x.TrackerPort = uint32(value.Uint())
	case "enreach.manager.Manager.chainAPIPort":
		x.ChainAPIPort = uint32(value.Uint())
	case "enreach.manager.Manager.chainRPCPort":
		x.ChainRPCPort = uint32(value.Uint())
	case "enreach.manager.Manager.regionCode":
		x.RegionCode = value.Interface().(string)
	case "enreach.manager.Manager.registerStatus":
		x.RegisterStatus = value.Interface().(string)
	case "enreach.manager.Manager.workingStatus":
		x.WorkingStatus = value.Interface().(string)
	case "enreach.manager.Manager.creator":
		x.Creator = value.Interface().(string)
	case "enreach.manager.Manager.createAt":
		x.CreateAt = value.Uint()
	case "enreach.manager.Manager.updator":
		x.Updator = value.Interface().(string)
	case "enreach.manager.Manager.updateAt":
		x.UpdateAt = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: enreach.manager.Manager"))
		}
		panic(fmt.Errorf("message enreach.manager.Manager does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Manager) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "enreach.manager.Manager.managerAccount":
		panic(fmt.Errorf("field managerAccount of message enreach.manager.Manager is not mutable"))
	case "enreach.manager.Manager.operatorAccount":
		panic(fmt.Errorf("field operatorAccount of message enreach.manager.Manager is not mutable"))
	case "enreach.manager.Manager.hostAddress":
		panic(fmt.Errorf("field hostAddress of message enreach.manager.Manager is not mutable"))
	case "enreach.manager.Manager.managerHTTPPort":
		panic(fmt.Errorf("field managerHTTPPort of message enreach.manager.Manager is not mutable"))
	case "enreach.manager.Manager.managerWSPort":
		panic(fmt.Errorf("field managerWSPort of message enreach.manager.Manager is not mutable"))
	case "enreach.manager.Manager.trackerPort":
		panic(fmt.Errorf("field trackerPort of message enreach.manager.Manager is not mutable"))
	case "enreach.manager.Manager.chainAPIPort":
		panic(fmt.Errorf("field chainAPIPort of message enreach.manager.Manager is not mutable"))
	case "enreach.manager.Manager.chainRPCPort":
		panic(fmt.Errorf("field chainRPCPort of message enreach.manager.Manager is not mutable"))
	case "enreach.manager.Manager.regionCode":
		panic(fmt.Errorf("field regionCode of message enreach.manager.Manager is not mutable"))
	case "enreach.manager.Manager.registerStatus":
		panic(fmt.Errorf("field registerStatus of message enreach.manager.Manager is not mutable"))
	case "enreach.manager.Manager.workingStatus":
		panic(fmt.Errorf("field workingStatus of message enreach.manager.Manager is not mutable"))
	case "enreach.manager.Manager.creator":
		panic(fmt.Errorf("field creator of message enreach.manager.Manager is not mutable"))
	case "enreach.manager.Manager.createAt":
		panic(fmt.Errorf("field createAt of message enreach.manager.Manager is not mutable"))
	case "enreach.manager.Manager.updator":
		panic(fmt.Errorf("field updator of message enreach.manager.Manager is not mutable"))
	case "enreach.manager.Manager.updateAt":
		panic(fmt.Errorf("field updateAt of message enreach.manager.Manager is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: enreach.manager.Manager"))
		}
		panic(fmt.Errorf("message enreach.manager.Manager does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Manager) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "enreach.manager.Manager.managerAccount":
		return protoreflect.ValueOfString("")
	case "enreach.manager.Manager.operatorAccount":
		return protoreflect.ValueOfString("")
	case "enreach.manager.Manager.hostAddress":
		return protoreflect.ValueOfString("")
	case "enreach.manager.Manager.managerHTTPPort":
		return protoreflect.ValueOfUint32(uint32(0))
	case "enreach.manager.Manager.managerWSPort":
		return protoreflect.ValueOfUint32(uint32(0))
	case "enreach.manager.Manager.trackerPort":
		return protoreflect.ValueOfUint32(uint32(0))
	case "enreach.manager.Manager.chainAPIPort":
		return protoreflect.ValueOfUint32(uint32(0))
	case "enreach.manager.Manager.chainRPCPort":
		return protoreflect.ValueOfUint32(uint32(0))
	case "enreach.manager.Manager.regionCode":
		return protoreflect.ValueOfString("")
	case "enreach.manager.Manager.registerStatus":
		return protoreflect.ValueOfString("")
	case "enreach.manager.Manager.workingStatus":
		return protoreflect.ValueOfString("")
	case "enreach.manager.Manager.creator":
		return protoreflect.ValueOfString("")
	case "enreach.manager.Manager.createAt":
		return protoreflect.ValueOfUint64(uint64(0))
	case "enreach.manager.Manager.updator":
		return protoreflect.ValueOfString("")
	case "enreach.manager.Manager.updateAt":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: enreach.manager.Manager"))
		}
		panic(fmt.Errorf("message enreach.manager.Manager does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Manager) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in enreach.manager.Manager", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Manager) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Manager) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Manager) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Manager) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Manager)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.ManagerAccount)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.OperatorAccount)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.HostAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.ManagerHTTPPort != 0 {
			n += 1 + runtime.Sov(uint64(x.ManagerHTTPPort))
		}
		if x.ManagerWSPort != 0 {
			n += 1 + runtime.Sov(uint64(x.ManagerWSPort))
		}
		if x.TrackerPort != 0 {
			n += 1 + runtime.Sov(uint64(x.TrackerPort))
		}
		if x.ChainAPIPort != 0 {
			n += 1 + runtime.Sov(uint64(x.ChainAPIPort))
		}
		if x.ChainRPCPort != 0 {
			n += 1 + runtime.Sov(uint64(x.ChainRPCPort))
		}
		l = len(x.RegionCode)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.RegisterStatus)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.WorkingStatus)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Creator)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.CreateAt != 0 {
			n += 1 + runtime.Sov(uint64(x.CreateAt))
		}
		l = len(x.Updator)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.UpdateAt != 0 {
			n += 1 + runtime.Sov(uint64(x.UpdateAt))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Manager)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.UpdateAt != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.UpdateAt))
			i--
			dAtA[i] = 0x78
		}
		if len(x.Updator) > 0 {
			i -= len(x.Updator)
			copy(dAtA[i:], x.Updator)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Updator)))
			i--
			dAtA[i] = 0x72
		}
		if x.CreateAt != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.CreateAt))
			i--
			dAtA[i] = 0x68
		}
		if len(x.Creator) > 0 {
			i -= len(x.Creator)
			copy(dAtA[i:], x.Creator)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Creator)))
			i--
			dAtA[i] = 0x62
		}
		if len(x.WorkingStatus) > 0 {
			i -= len(x.WorkingStatus)
			copy(dAtA[i:], x.WorkingStatus)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.WorkingStatus)))
			i--
			dAtA[i] = 0x5a
		}
		if len(x.RegisterStatus) > 0 {
			i -= len(x.RegisterStatus)
			copy(dAtA[i:], x.RegisterStatus)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RegisterStatus)))
			i--
			dAtA[i] = 0x52
		}
		if len(x.RegionCode) > 0 {
			i -= len(x.RegionCode)
			copy(dAtA[i:], x.RegionCode)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RegionCode)))
			i--
			dAtA[i] = 0x4a
		}
		if x.ChainRPCPort != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ChainRPCPort))
			i--
			dAtA[i] = 0x40
		}
		if x.ChainAPIPort != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ChainAPIPort))
			i--
			dAtA[i] = 0x38
		}
		if x.TrackerPort != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TrackerPort))
			i--
			dAtA[i] = 0x30
		}
		if x.ManagerWSPort != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ManagerWSPort))
			i--
			dAtA[i] = 0x28
		}
		if x.ManagerHTTPPort != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ManagerHTTPPort))
			i--
			dAtA[i] = 0x20
		}
		if len(x.HostAddress) > 0 {
			i -= len(x.HostAddress)
			copy(dAtA[i:], x.HostAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.HostAddress)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.OperatorAccount) > 0 {
			i -= len(x.OperatorAccount)
			copy(dAtA[i:], x.OperatorAccount)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.OperatorAccount)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.ManagerAccount) > 0 {
			i -= len(x.ManagerAccount)
			copy(dAtA[i:], x.ManagerAccount)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ManagerAccount)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Manager)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Manager: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Manager: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ManagerAccount", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ManagerAccount = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OperatorAccount", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.OperatorAccount = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field HostAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.HostAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ManagerHTTPPort", wireType)
				}
				x.ManagerHTTPPort = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ManagerHTTPPort |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ManagerWSPort", wireType)
				}
				x.ManagerWSPort = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ManagerWSPort |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TrackerPort", wireType)
				}
				x.TrackerPort = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TrackerPort |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ChainAPIPort", wireType)
				}
				x.ChainAPIPort = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ChainAPIPort |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 8:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ChainRPCPort", wireType)
				}
				x.ChainRPCPort = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ChainRPCPort |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RegionCode", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RegionCode = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RegisterStatus", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RegisterStatus = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 11:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field WorkingStatus", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.WorkingStatus = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 12:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Creator = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 13:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
				}
				x.CreateAt = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.CreateAt |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 14:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Updator", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Updator = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 15:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field UpdateAt", wireType)
				}
				x.UpdateAt = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.UpdateAt |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: enreach/manager/manager.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Manager struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerAccount  string `protobuf:"bytes,1,opt,name=managerAccount,proto3" json:"managerAccount,omitempty"`
	OperatorAccount string `protobuf:"bytes,2,opt,name=operatorAccount,proto3" json:"operatorAccount,omitempty"`
	HostAddress     string `protobuf:"bytes,3,opt,name=hostAddress,proto3" json:"hostAddress,omitempty"`
	ManagerHTTPPort uint32 `protobuf:"varint,4,opt,name=managerHTTPPort,proto3" json:"managerHTTPPort,omitempty"`
	ManagerWSPort   uint32 `protobuf:"varint,5,opt,name=managerWSPort,proto3" json:"managerWSPort,omitempty"`
	TrackerPort     uint32 `protobuf:"varint,6,opt,name=trackerPort,proto3" json:"trackerPort,omitempty"`
	ChainAPIPort    uint32 `protobuf:"varint,7,opt,name=chainAPIPort,proto3" json:"chainAPIPort,omitempty"`
	ChainRPCPort    uint32 `protobuf:"varint,8,opt,name=chainRPCPort,proto3" json:"chainRPCPort,omitempty"`
	RegionCode      string `protobuf:"bytes,9,opt,name=regionCode,proto3" json:"regionCode,omitempty"`
	RegisterStatus  string `protobuf:"bytes,10,opt,name=registerStatus,proto3" json:"registerStatus,omitempty"`
	WorkingStatus   string `protobuf:"bytes,11,opt,name=workingStatus,proto3" json:"workingStatus,omitempty"`
	Creator         string `protobuf:"bytes,12,opt,name=creator,proto3" json:"creator,omitempty"`
	CreateAt        uint64 `protobuf:"varint,13,opt,name=createAt,proto3" json:"createAt,omitempty"`
	Updator         string `protobuf:"bytes,14,opt,name=updator,proto3" json:"updator,omitempty"`
	UpdateAt        uint64 `protobuf:"varint,15,opt,name=updateAt,proto3" json:"updateAt,omitempty"`
}

func (x *Manager) Reset() {
	*x = Manager{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enreach_manager_manager_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Manager) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Manager) ProtoMessage() {}

// Deprecated: Use Manager.ProtoReflect.Descriptor instead.
func (*Manager) Descriptor() ([]byte, []int) {
	return file_enreach_manager_manager_proto_rawDescGZIP(), []int{0}
}

func (x *Manager) GetManagerAccount() string {
	if x != nil {
		return x.ManagerAccount
	}
	return ""
}

func (x *Manager) GetOperatorAccount() string {
	if x != nil {
		return x.OperatorAccount
	}
	return ""
}

func (x *Manager) GetHostAddress() string {
	if x != nil {
		return x.HostAddress
	}
	return ""
}

func (x *Manager) GetManagerHTTPPort() uint32 {
	if x != nil {
		return x.ManagerHTTPPort
	}
	return 0
}

func (x *Manager) GetManagerWSPort() uint32 {
	if x != nil {
		return x.ManagerWSPort
	}
	return 0
}

func (x *Manager) GetTrackerPort() uint32 {
	if x != nil {
		return x.TrackerPort
	}
	return 0
}

func (x *Manager) GetChainAPIPort() uint32 {
	if x != nil {
		return x.ChainAPIPort
	}
	return 0
}

func (x *Manager) GetChainRPCPort() uint32 {
	if x != nil {
		return x.ChainRPCPort
	}
	return 0
}

func (x *Manager) GetRegionCode() string {
	if x != nil {
		return x.RegionCode
	}
	return ""
}

func (x *Manager) GetRegisterStatus() string {
	if x != nil {
		return x.RegisterStatus
	}
	return ""
}

func (x *Manager) GetWorkingStatus() string {
	if x != nil {
		return x.WorkingStatus
	}
	return ""
}

func (x *Manager) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *Manager) GetCreateAt() uint64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *Manager) GetUpdator() string {
	if x != nil {
		return x.Updator
	}
	return ""
}

func (x *Manager) GetUpdateAt() uint64 {
	if x != nil {
		return x.UpdateAt
	}
	return 0
}

var File_enreach_manager_manager_proto protoreflect.FileDescriptor

var file_enreach_manager_manager_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x65, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0f, 0x65, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x22, 0x91, 0x04, 0x0a, 0x07, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x48, 0x54, 0x54, 0x50, 0x50,
	0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x48, 0x54, 0x54, 0x50, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x57, 0x53, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x57, 0x53, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x6f,
	0x72, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x50, 0x49, 0x50, 0x6f,
	0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x41,
	0x50, 0x49, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x52,
	0x50, 0x43, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x52, 0x50, 0x43, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x74, 0x42, 0xa2, 0x01, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6e, 0x72,
	0x65, 0x61, 0x63, 0x68, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x42, 0x0c, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x20, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65,
	0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0xa2, 0x02,
	0x03, 0x45, 0x4d, 0x58, 0xaa, 0x02, 0x0f, 0x45, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0xca, 0x02, 0x0f, 0x45, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68,
	0x5c, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0xe2, 0x02, 0x1b, 0x45, 0x6e, 0x72, 0x65, 0x61,
	0x63, 0x68, 0x5c, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x10, 0x45, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68,
	0x3a, 0x3a, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_enreach_manager_manager_proto_rawDescOnce sync.Once
	file_enreach_manager_manager_proto_rawDescData = file_enreach_manager_manager_proto_rawDesc
)

func file_enreach_manager_manager_proto_rawDescGZIP() []byte {
	file_enreach_manager_manager_proto_rawDescOnce.Do(func() {
		file_enreach_manager_manager_proto_rawDescData = protoimpl.X.CompressGZIP(file_enreach_manager_manager_proto_rawDescData)
	})
	return file_enreach_manager_manager_proto_rawDescData
}

var file_enreach_manager_manager_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_enreach_manager_manager_proto_goTypes = []interface{}{
	(*Manager)(nil), // 0: enreach.manager.Manager
}
var file_enreach_manager_manager_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_enreach_manager_manager_proto_init() }
func file_enreach_manager_manager_proto_init() {
	if File_enreach_manager_manager_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_enreach_manager_manager_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Manager); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_enreach_manager_manager_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_enreach_manager_manager_proto_goTypes,
		DependencyIndexes: file_enreach_manager_manager_proto_depIdxs,
		MessageInfos:      file_enreach_manager_manager_proto_msgTypes,
	}.Build()
	File_enreach_manager_manager_proto = out.File
	file_enreach_manager_manager_proto_rawDesc = nil
	file_enreach_manager_manager_proto_goTypes = nil
	file_enreach_manager_manager_proto_depIdxs = nil
}
