// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: enreach/edgenode/query.proto

package edgenode

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName   = "/enreach.edgenode.Query/Params"
	Query_User_FullMethodName     = "/enreach.edgenode.Query/User"
	Query_UserAll_FullMethodName  = "/enreach.edgenode.Query/UserAll"
	Query_Node_FullMethodName     = "/enreach.edgenode.Query/Node"
	Query_NodeAll_FullMethodName  = "/enreach.edgenode.Query/NodeAll"
	Query_Superior_FullMethodName = "/enreach.edgenode.Query/Superior"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of User items.
	User(ctx context.Context, in *QueryGetUserRequest, opts ...grpc.CallOption) (*QueryGetUserResponse, error)
	UserAll(ctx context.Context, in *QueryAllUserRequest, opts ...grpc.CallOption) (*QueryAllUserResponse, error)
	// Queries a list of Node items.
	Node(ctx context.Context, in *QueryGetNodeRequest, opts ...grpc.CallOption) (*QueryGetNodeResponse, error)
	NodeAll(ctx context.Context, in *QueryAllNodeRequest, opts ...grpc.CallOption) (*QueryAllNodeResponse, error)
	// Queries a Superior by index.
	Superior(ctx context.Context, in *QueryGetSuperiorRequest, opts ...grpc.CallOption) (*QueryGetSuperiorResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) User(ctx context.Context, in *QueryGetUserRequest, opts ...grpc.CallOption) (*QueryGetUserResponse, error) {
	out := new(QueryGetUserResponse)
	err := c.cc.Invoke(ctx, Query_User_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserAll(ctx context.Context, in *QueryAllUserRequest, opts ...grpc.CallOption) (*QueryAllUserResponse, error) {
	out := new(QueryAllUserResponse)
	err := c.cc.Invoke(ctx, Query_UserAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Node(ctx context.Context, in *QueryGetNodeRequest, opts ...grpc.CallOption) (*QueryGetNodeResponse, error) {
	out := new(QueryGetNodeResponse)
	err := c.cc.Invoke(ctx, Query_Node_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NodeAll(ctx context.Context, in *QueryAllNodeRequest, opts ...grpc.CallOption) (*QueryAllNodeResponse, error) {
	out := new(QueryAllNodeResponse)
	err := c.cc.Invoke(ctx, Query_NodeAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Superior(ctx context.Context, in *QueryGetSuperiorRequest, opts ...grpc.CallOption) (*QueryGetSuperiorResponse, error) {
	out := new(QueryGetSuperiorResponse)
	err := c.cc.Invoke(ctx, Query_Superior_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of User items.
	User(context.Context, *QueryGetUserRequest) (*QueryGetUserResponse, error)
	UserAll(context.Context, *QueryAllUserRequest) (*QueryAllUserResponse, error)
	// Queries a list of Node items.
	Node(context.Context, *QueryGetNodeRequest) (*QueryGetNodeResponse, error)
	NodeAll(context.Context, *QueryAllNodeRequest) (*QueryAllNodeResponse, error)
	// Queries a Superior by index.
	Superior(context.Context, *QueryGetSuperiorRequest) (*QueryGetSuperiorResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) User(context.Context, *QueryGetUserRequest) (*QueryGetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method User not implemented")
}
func (UnimplementedQueryServer) UserAll(context.Context, *QueryAllUserRequest) (*QueryAllUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAll not implemented")
}
func (UnimplementedQueryServer) Node(context.Context, *QueryGetNodeRequest) (*QueryGetNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Node not implemented")
}
func (UnimplementedQueryServer) NodeAll(context.Context, *QueryAllNodeRequest) (*QueryAllNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeAll not implemented")
}
func (UnimplementedQueryServer) Superior(context.Context, *QueryGetSuperiorRequest) (*QueryGetSuperiorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Superior not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_User_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).User(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_User_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).User(ctx, req.(*QueryGetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_UserAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserAll(ctx, req.(*QueryAllUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Node_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Node(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Node_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Node(ctx, req.(*QueryGetNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NodeAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NodeAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_NodeAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NodeAll(ctx, req.(*QueryAllNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Superior_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSuperiorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Superior(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Superior_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Superior(ctx, req.(*QueryGetSuperiorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "enreach.edgenode.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "User",
			Handler:    _Query_User_Handler,
		},
		{
			MethodName: "UserAll",
			Handler:    _Query_UserAll_Handler,
		},
		{
			MethodName: "Node",
			Handler:    _Query_Node_Handler,
		},
		{
			MethodName: "NodeAll",
			Handler:    _Query_NodeAll_Handler,
		},
		{
			MethodName: "Superior",
			Handler:    _Query_Superior_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "enreach/edgenode/query.proto",
}
