// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package workload

import (
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_NodeWorkload          protoreflect.MessageDescriptor
	fd_NodeWorkload_epoch    protoreflect.FieldDescriptor
	fd_NodeWorkload_nodeID   protoreflect.FieldDescriptor
	fd_NodeWorkload_score    protoreflect.FieldDescriptor
	fd_NodeWorkload_createAt protoreflect.FieldDescriptor
)

func init() {
	file_enreach_workload_workload_proto_init()
	md_NodeWorkload = File_enreach_workload_workload_proto.Messages().ByName("NodeWorkload")
	fd_NodeWorkload_epoch = md_NodeWorkload.Fields().ByName("epoch")
	fd_NodeWorkload_nodeID = md_NodeWorkload.Fields().ByName("nodeID")
	fd_NodeWorkload_score = md_NodeWorkload.Fields().ByName("score")
	fd_NodeWorkload_createAt = md_NodeWorkload.Fields().ByName("createAt")
}

var _ protoreflect.Message = (*fastReflection_NodeWorkload)(nil)

type fastReflection_NodeWorkload NodeWorkload

func (x *NodeWorkload) ProtoReflect() protoreflect.Message {
	return (*fastReflection_NodeWorkload)(x)
}

func (x *NodeWorkload) slowProtoReflect() protoreflect.Message {
	mi := &file_enreach_workload_workload_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_NodeWorkload_messageType fastReflection_NodeWorkload_messageType
var _ protoreflect.MessageType = fastReflection_NodeWorkload_messageType{}

type fastReflection_NodeWorkload_messageType struct{}

func (x fastReflection_NodeWorkload_messageType) Zero() protoreflect.Message {
	return (*fastReflection_NodeWorkload)(nil)
}
func (x fastReflection_NodeWorkload_messageType) New() protoreflect.Message {
	return new(fastReflection_NodeWorkload)
}
func (x fastReflection_NodeWorkload_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_NodeWorkload
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_NodeWorkload) Descriptor() protoreflect.MessageDescriptor {
	return md_NodeWorkload
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_NodeWorkload) Type() protoreflect.MessageType {
	return _fastReflection_NodeWorkload_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_NodeWorkload) New() protoreflect.Message {
	return new(fastReflection_NodeWorkload)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_NodeWorkload) Interface() protoreflect.ProtoMessage {
	return (*NodeWorkload)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_NodeWorkload) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Epoch != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Epoch)
		if !f(fd_NodeWorkload_epoch, value) {
			return
		}
	}
	if x.NodeID != "" {
		value := protoreflect.ValueOfString(x.NodeID)
		if !f(fd_NodeWorkload_nodeID, value) {
			return
		}
	}
	if x.Score != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Score)
		if !f(fd_NodeWorkload_score, value) {
			return
		}
	}
	if x.CreateAt != uint64(0) {
		value := protoreflect.ValueOfUint64(x.CreateAt)
		if !f(fd_NodeWorkload_createAt, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_NodeWorkload) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "enreach.workload.NodeWorkload.epoch":
		return x.Epoch != uint64(0)
	case "enreach.workload.NodeWorkload.nodeID":
		return x.NodeID != ""
	case "enreach.workload.NodeWorkload.score":
		return x.Score != uint64(0)
	case "enreach.workload.NodeWorkload.createAt":
		return x.CreateAt != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: enreach.workload.NodeWorkload"))
		}
		panic(fmt.Errorf("message enreach.workload.NodeWorkload does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_NodeWorkload) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "enreach.workload.NodeWorkload.epoch":
		x.Epoch = uint64(0)
	case "enreach.workload.NodeWorkload.nodeID":
		x.NodeID = ""
	case "enreach.workload.NodeWorkload.score":
		x.Score = uint64(0)
	case "enreach.workload.NodeWorkload.createAt":
		x.CreateAt = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: enreach.workload.NodeWorkload"))
		}
		panic(fmt.Errorf("message enreach.workload.NodeWorkload does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_NodeWorkload) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "enreach.workload.NodeWorkload.epoch":
		value := x.Epoch
		return protoreflect.ValueOfUint64(value)
	case "enreach.workload.NodeWorkload.nodeID":
		value := x.NodeID
		return protoreflect.ValueOfString(value)
	case "enreach.workload.NodeWorkload.score":
		value := x.Score
		return protoreflect.ValueOfUint64(value)
	case "enreach.workload.NodeWorkload.createAt":
		value := x.CreateAt
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: enreach.workload.NodeWorkload"))
		}
		panic(fmt.Errorf("message enreach.workload.NodeWorkload does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_NodeWorkload) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "enreach.workload.NodeWorkload.epoch":
		x.Epoch = value.Uint()
	case "enreach.workload.NodeWorkload.nodeID":
		x.NodeID = value.Interface().(string)
	case "enreach.workload.NodeWorkload.score":
		x.Score = value.Uint()
	case "enreach.workload.NodeWorkload.createAt":
		x.CreateAt = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: enreach.workload.NodeWorkload"))
		}
		panic(fmt.Errorf("message enreach.workload.NodeWorkload does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_NodeWorkload) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "enreach.workload.NodeWorkload.epoch":
		panic(fmt.Errorf("field epoch of message enreach.workload.NodeWorkload is not mutable"))
	case "enreach.workload.NodeWorkload.nodeID":
		panic(fmt.Errorf("field nodeID of message enreach.workload.NodeWorkload is not mutable"))
	case "enreach.workload.NodeWorkload.score":
		panic(fmt.Errorf("field score of message enreach.workload.NodeWorkload is not mutable"))
	case "enreach.workload.NodeWorkload.createAt":
		panic(fmt.Errorf("field createAt of message enreach.workload.NodeWorkload is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: enreach.workload.NodeWorkload"))
		}
		panic(fmt.Errorf("message enreach.workload.NodeWorkload does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_NodeWorkload) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "enreach.workload.NodeWorkload.epoch":
		return protoreflect.ValueOfUint64(uint64(0))
	case "enreach.workload.NodeWorkload.nodeID":
		return protoreflect.ValueOfString("")
	case "enreach.workload.NodeWorkload.score":
		return protoreflect.ValueOfUint64(uint64(0))
	case "enreach.workload.NodeWorkload.createAt":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: enreach.workload.NodeWorkload"))
		}
		panic(fmt.Errorf("message enreach.workload.NodeWorkload does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_NodeWorkload) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in enreach.workload.NodeWorkload", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_NodeWorkload) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_NodeWorkload) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_NodeWorkload) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_NodeWorkload) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*NodeWorkload)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Epoch != 0 {
			n += 1 + runtime.Sov(uint64(x.Epoch))
		}
		l = len(x.NodeID)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Score != 0 {
			n += 1 + runtime.Sov(uint64(x.Score))
		}
		if x.CreateAt != 0 {
			n += 1 + runtime.Sov(uint64(x.CreateAt))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*NodeWorkload)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.CreateAt != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.CreateAt))
			i--
			dAtA[i] = 0x20
		}
		if x.Score != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Score))
			i--
			dAtA[i] = 0x18
		}
		if len(x.NodeID) > 0 {
			i -= len(x.NodeID)
			copy(dAtA[i:], x.NodeID)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.NodeID)))
			i--
			dAtA[i] = 0x12
		}
		if x.Epoch != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Epoch))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*NodeWorkload)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: NodeWorkload: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: NodeWorkload: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
				}
				x.Epoch = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Epoch |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.NodeID = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
				}
				x.Score = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Score |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
				}
				x.CreateAt = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.CreateAt |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_ManagerWRWorkload                    protoreflect.MessageDescriptor
	fd_ManagerWRWorkload_epoch              protoreflect.FieldDescriptor
	fd_ManagerWRWorkload_managerAccount     protoreflect.FieldDescriptor
	fd_ManagerWRWorkload_reportedNodesCount protoreflect.FieldDescriptor
	fd_ManagerWRWorkload_score              protoreflect.FieldDescriptor
	fd_ManagerWRWorkload_createAt           protoreflect.FieldDescriptor
	fd_ManagerWRWorkload_updateAt           protoreflect.FieldDescriptor
)

func init() {
	file_enreach_workload_workload_proto_init()
	md_ManagerWRWorkload = File_enreach_workload_workload_proto.Messages().ByName("ManagerWRWorkload")
	fd_ManagerWRWorkload_epoch = md_ManagerWRWorkload.Fields().ByName("epoch")
	fd_ManagerWRWorkload_managerAccount = md_ManagerWRWorkload.Fields().ByName("managerAccount")
	fd_ManagerWRWorkload_reportedNodesCount = md_ManagerWRWorkload.Fields().ByName("reportedNodesCount")
	fd_ManagerWRWorkload_score = md_ManagerWRWorkload.Fields().ByName("score")
	fd_ManagerWRWorkload_createAt = md_ManagerWRWorkload.Fields().ByName("createAt")
	fd_ManagerWRWorkload_updateAt = md_ManagerWRWorkload.Fields().ByName("updateAt")
}

var _ protoreflect.Message = (*fastReflection_ManagerWRWorkload)(nil)

type fastReflection_ManagerWRWorkload ManagerWRWorkload

func (x *ManagerWRWorkload) ProtoReflect() protoreflect.Message {
	return (*fastReflection_ManagerWRWorkload)(x)
}

func (x *ManagerWRWorkload) slowProtoReflect() protoreflect.Message {
	mi := &file_enreach_workload_workload_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_ManagerWRWorkload_messageType fastReflection_ManagerWRWorkload_messageType
var _ protoreflect.MessageType = fastReflection_ManagerWRWorkload_messageType{}

type fastReflection_ManagerWRWorkload_messageType struct{}

func (x fastReflection_ManagerWRWorkload_messageType) Zero() protoreflect.Message {
	return (*fastReflection_ManagerWRWorkload)(nil)
}
func (x fastReflection_ManagerWRWorkload_messageType) New() protoreflect.Message {
	return new(fastReflection_ManagerWRWorkload)
}
func (x fastReflection_ManagerWRWorkload_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_ManagerWRWorkload
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_ManagerWRWorkload) Descriptor() protoreflect.MessageDescriptor {
	return md_ManagerWRWorkload
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_ManagerWRWorkload) Type() protoreflect.MessageType {
	return _fastReflection_ManagerWRWorkload_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_ManagerWRWorkload) New() protoreflect.Message {
	return new(fastReflection_ManagerWRWorkload)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_ManagerWRWorkload) Interface() protoreflect.ProtoMessage {
	return (*ManagerWRWorkload)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_ManagerWRWorkload) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Epoch != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Epoch)
		if !f(fd_ManagerWRWorkload_epoch, value) {
			return
		}
	}
	if x.ManagerAccount != "" {
		value := protoreflect.ValueOfString(x.ManagerAccount)
		if !f(fd_ManagerWRWorkload_managerAccount, value) {
			return
		}
	}
	if x.ReportedNodesCount != uint64(0) {
		value := protoreflect.ValueOfUint64(x.ReportedNodesCount)
		if !f(fd_ManagerWRWorkload_reportedNodesCount, value) {
			return
		}
	}
	if x.Score != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Score)
		if !f(fd_ManagerWRWorkload_score, value) {
			return
		}
	}
	if x.CreateAt != uint64(0) {
		value := protoreflect.ValueOfUint64(x.CreateAt)
		if !f(fd_ManagerWRWorkload_createAt, value) {
			return
		}
	}
	if x.UpdateAt != uint64(0) {
		value := protoreflect.ValueOfUint64(x.UpdateAt)
		if !f(fd_ManagerWRWorkload_updateAt, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_ManagerWRWorkload) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "enreach.workload.ManagerWRWorkload.epoch":
		return x.Epoch != uint64(0)
	case "enreach.workload.ManagerWRWorkload.managerAccount":
		return x.ManagerAccount != ""
	case "enreach.workload.ManagerWRWorkload.reportedNodesCount":
		return x.ReportedNodesCount != uint64(0)
	case "enreach.workload.ManagerWRWorkload.score":
		return x.Score != uint64(0)
	case "enreach.workload.ManagerWRWorkload.createAt":
		return x.CreateAt != uint64(0)
	case "enreach.workload.ManagerWRWorkload.updateAt":
		return x.UpdateAt != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: enreach.workload.ManagerWRWorkload"))
		}
		panic(fmt.Errorf("message enreach.workload.ManagerWRWorkload does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ManagerWRWorkload) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "enreach.workload.ManagerWRWorkload.epoch":
		x.Epoch = uint64(0)
	case "enreach.workload.ManagerWRWorkload.managerAccount":
		x.ManagerAccount = ""
	case "enreach.workload.ManagerWRWorkload.reportedNodesCount":
		x.ReportedNodesCount = uint64(0)
	case "enreach.workload.ManagerWRWorkload.score":
		x.Score = uint64(0)
	case "enreach.workload.ManagerWRWorkload.createAt":
		x.CreateAt = uint64(0)
	case "enreach.workload.ManagerWRWorkload.updateAt":
		x.UpdateAt = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: enreach.workload.ManagerWRWorkload"))
		}
		panic(fmt.Errorf("message enreach.workload.ManagerWRWorkload does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_ManagerWRWorkload) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "enreach.workload.ManagerWRWorkload.epoch":
		value := x.Epoch
		return protoreflect.ValueOfUint64(value)
	case "enreach.workload.ManagerWRWorkload.managerAccount":
		value := x.ManagerAccount
		return protoreflect.ValueOfString(value)
	case "enreach.workload.ManagerWRWorkload.reportedNodesCount":
		value := x.ReportedNodesCount
		return protoreflect.ValueOfUint64(value)
	case "enreach.workload.ManagerWRWorkload.score":
		value := x.Score
		return protoreflect.ValueOfUint64(value)
	case "enreach.workload.ManagerWRWorkload.createAt":
		value := x.CreateAt
		return protoreflect.ValueOfUint64(value)
	case "enreach.workload.ManagerWRWorkload.updateAt":
		value := x.UpdateAt
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: enreach.workload.ManagerWRWorkload"))
		}
		panic(fmt.Errorf("message enreach.workload.ManagerWRWorkload does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ManagerWRWorkload) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "enreach.workload.ManagerWRWorkload.epoch":
		x.Epoch = value.Uint()
	case "enreach.workload.ManagerWRWorkload.managerAccount":
		x.ManagerAccount = value.Interface().(string)
	case "enreach.workload.ManagerWRWorkload.reportedNodesCount":
		x.ReportedNodesCount = value.Uint()
	case "enreach.workload.ManagerWRWorkload.score":
		x.Score = value.Uint()
	case "enreach.workload.ManagerWRWorkload.createAt":
		x.CreateAt = value.Uint()
	case "enreach.workload.ManagerWRWorkload.updateAt":
		x.UpdateAt = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: enreach.workload.ManagerWRWorkload"))
		}
		panic(fmt.Errorf("message enreach.workload.ManagerWRWorkload does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ManagerWRWorkload) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "enreach.workload.ManagerWRWorkload.epoch":
		panic(fmt.Errorf("field epoch of message enreach.workload.ManagerWRWorkload is not mutable"))
	case "enreach.workload.ManagerWRWorkload.managerAccount":
		panic(fmt.Errorf("field managerAccount of message enreach.workload.ManagerWRWorkload is not mutable"))
	case "enreach.workload.ManagerWRWorkload.reportedNodesCount":
		panic(fmt.Errorf("field reportedNodesCount of message enreach.workload.ManagerWRWorkload is not mutable"))
	case "enreach.workload.ManagerWRWorkload.score":
		panic(fmt.Errorf("field score of message enreach.workload.ManagerWRWorkload is not mutable"))
	case "enreach.workload.ManagerWRWorkload.createAt":
		panic(fmt.Errorf("field createAt of message enreach.workload.ManagerWRWorkload is not mutable"))
	case "enreach.workload.ManagerWRWorkload.updateAt":
		panic(fmt.Errorf("field updateAt of message enreach.workload.ManagerWRWorkload is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: enreach.workload.ManagerWRWorkload"))
		}
		panic(fmt.Errorf("message enreach.workload.ManagerWRWorkload does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_ManagerWRWorkload) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "enreach.workload.ManagerWRWorkload.epoch":
		return protoreflect.ValueOfUint64(uint64(0))
	case "enreach.workload.ManagerWRWorkload.managerAccount":
		return protoreflect.ValueOfString("")
	case "enreach.workload.ManagerWRWorkload.reportedNodesCount":
		return protoreflect.ValueOfUint64(uint64(0))
	case "enreach.workload.ManagerWRWorkload.score":
		return protoreflect.ValueOfUint64(uint64(0))
	case "enreach.workload.ManagerWRWorkload.createAt":
		return protoreflect.ValueOfUint64(uint64(0))
	case "enreach.workload.ManagerWRWorkload.updateAt":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: enreach.workload.ManagerWRWorkload"))
		}
		panic(fmt.Errorf("message enreach.workload.ManagerWRWorkload does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_ManagerWRWorkload) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in enreach.workload.ManagerWRWorkload", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_ManagerWRWorkload) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ManagerWRWorkload) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_ManagerWRWorkload) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_ManagerWRWorkload) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*ManagerWRWorkload)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Epoch != 0 {
			n += 1 + runtime.Sov(uint64(x.Epoch))
		}
		l = len(x.ManagerAccount)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.ReportedNodesCount != 0 {
			n += 1 + runtime.Sov(uint64(x.ReportedNodesCount))
		}
		if x.Score != 0 {
			n += 1 + runtime.Sov(uint64(x.Score))
		}
		if x.CreateAt != 0 {
			n += 1 + runtime.Sov(uint64(x.CreateAt))
		}
		if x.UpdateAt != 0 {
			n += 1 + runtime.Sov(uint64(x.UpdateAt))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*ManagerWRWorkload)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.UpdateAt != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.UpdateAt))
			i--
			dAtA[i] = 0x30
		}
		if x.CreateAt != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.CreateAt))
			i--
			dAtA[i] = 0x28
		}
		if x.Score != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Score))
			i--
			dAtA[i] = 0x20
		}
		if x.ReportedNodesCount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ReportedNodesCount))
			i--
			dAtA[i] = 0x18
		}
		if len(x.ManagerAccount) > 0 {
			i -= len(x.ManagerAccount)
			copy(dAtA[i:], x.ManagerAccount)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ManagerAccount)))
			i--
			dAtA[i] = 0x12
		}
		if x.Epoch != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Epoch))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*ManagerWRWorkload)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ManagerWRWorkload: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ManagerWRWorkload: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
				}
				x.Epoch = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Epoch |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ManagerAccount", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ManagerAccount = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ReportedNodesCount", wireType)
				}
				x.ReportedNodesCount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ReportedNodesCount |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
				}
				x.Score = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Score |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
				}
				x.CreateAt = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.CreateAt |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field UpdateAt", wireType)
				}
				x.UpdateAt = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.UpdateAt |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_ManagerRPWorkload                    protoreflect.MessageDescriptor
	fd_ManagerRPWorkload_era                protoreflect.FieldDescriptor
	fd_ManagerRPWorkload_managerAccount     protoreflect.FieldDescriptor
	fd_ManagerRPWorkload_reportedNodesCount protoreflect.FieldDescriptor
	fd_ManagerRPWorkload_score              protoreflect.FieldDescriptor
	fd_ManagerRPWorkload_createAt           protoreflect.FieldDescriptor
	fd_ManagerRPWorkload_updateAt           protoreflect.FieldDescriptor
)

func init() {
	file_enreach_workload_workload_proto_init()
	md_ManagerRPWorkload = File_enreach_workload_workload_proto.Messages().ByName("ManagerRPWorkload")
	fd_ManagerRPWorkload_era = md_ManagerRPWorkload.Fields().ByName("era")
	fd_ManagerRPWorkload_managerAccount = md_ManagerRPWorkload.Fields().ByName("managerAccount")
	fd_ManagerRPWorkload_reportedNodesCount = md_ManagerRPWorkload.Fields().ByName("reportedNodesCount")
	fd_ManagerRPWorkload_score = md_ManagerRPWorkload.Fields().ByName("score")
	fd_ManagerRPWorkload_createAt = md_ManagerRPWorkload.Fields().ByName("createAt")
	fd_ManagerRPWorkload_updateAt = md_ManagerRPWorkload.Fields().ByName("updateAt")
}

var _ protoreflect.Message = (*fastReflection_ManagerRPWorkload)(nil)

type fastReflection_ManagerRPWorkload ManagerRPWorkload

func (x *ManagerRPWorkload) ProtoReflect() protoreflect.Message {
	return (*fastReflection_ManagerRPWorkload)(x)
}

func (x *ManagerRPWorkload) slowProtoReflect() protoreflect.Message {
	mi := &file_enreach_workload_workload_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_ManagerRPWorkload_messageType fastReflection_ManagerRPWorkload_messageType
var _ protoreflect.MessageType = fastReflection_ManagerRPWorkload_messageType{}

type fastReflection_ManagerRPWorkload_messageType struct{}

func (x fastReflection_ManagerRPWorkload_messageType) Zero() protoreflect.Message {
	return (*fastReflection_ManagerRPWorkload)(nil)
}
func (x fastReflection_ManagerRPWorkload_messageType) New() protoreflect.Message {
	return new(fastReflection_ManagerRPWorkload)
}
func (x fastReflection_ManagerRPWorkload_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_ManagerRPWorkload
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_ManagerRPWorkload) Descriptor() protoreflect.MessageDescriptor {
	return md_ManagerRPWorkload
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_ManagerRPWorkload) Type() protoreflect.MessageType {
	return _fastReflection_ManagerRPWorkload_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_ManagerRPWorkload) New() protoreflect.Message {
	return new(fastReflection_ManagerRPWorkload)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_ManagerRPWorkload) Interface() protoreflect.ProtoMessage {
	return (*ManagerRPWorkload)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_ManagerRPWorkload) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Era != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Era)
		if !f(fd_ManagerRPWorkload_era, value) {
			return
		}
	}
	if x.ManagerAccount != "" {
		value := protoreflect.ValueOfString(x.ManagerAccount)
		if !f(fd_ManagerRPWorkload_managerAccount, value) {
			return
		}
	}
	if x.ReportedNodesCount != uint64(0) {
		value := protoreflect.ValueOfUint64(x.ReportedNodesCount)
		if !f(fd_ManagerRPWorkload_reportedNodesCount, value) {
			return
		}
	}
	if x.Score != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Score)
		if !f(fd_ManagerRPWorkload_score, value) {
			return
		}
	}
	if x.CreateAt != uint64(0) {
		value := protoreflect.ValueOfUint64(x.CreateAt)
		if !f(fd_ManagerRPWorkload_createAt, value) {
			return
		}
	}
	if x.UpdateAt != uint64(0) {
		value := protoreflect.ValueOfUint64(x.UpdateAt)
		if !f(fd_ManagerRPWorkload_updateAt, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_ManagerRPWorkload) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "enreach.workload.ManagerRPWorkload.era":
		return x.Era != uint64(0)
	case "enreach.workload.ManagerRPWorkload.managerAccount":
		return x.ManagerAccount != ""
	case "enreach.workload.ManagerRPWorkload.reportedNodesCount":
		return x.ReportedNodesCount != uint64(0)
	case "enreach.workload.ManagerRPWorkload.score":
		return x.Score != uint64(0)
	case "enreach.workload.ManagerRPWorkload.createAt":
		return x.CreateAt != uint64(0)
	case "enreach.workload.ManagerRPWorkload.updateAt":
		return x.UpdateAt != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: enreach.workload.ManagerRPWorkload"))
		}
		panic(fmt.Errorf("message enreach.workload.ManagerRPWorkload does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ManagerRPWorkload) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "enreach.workload.ManagerRPWorkload.era":
		x.Era = uint64(0)
	case "enreach.workload.ManagerRPWorkload.managerAccount":
		x.ManagerAccount = ""
	case "enreach.workload.ManagerRPWorkload.reportedNodesCount":
		x.ReportedNodesCount = uint64(0)
	case "enreach.workload.ManagerRPWorkload.score":
		x.Score = uint64(0)
	case "enreach.workload.ManagerRPWorkload.createAt":
		x.CreateAt = uint64(0)
	case "enreach.workload.ManagerRPWorkload.updateAt":
		x.UpdateAt = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: enreach.workload.ManagerRPWorkload"))
		}
		panic(fmt.Errorf("message enreach.workload.ManagerRPWorkload does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_ManagerRPWorkload) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "enreach.workload.ManagerRPWorkload.era":
		value := x.Era
		return protoreflect.ValueOfUint64(value)
	case "enreach.workload.ManagerRPWorkload.managerAccount":
		value := x.ManagerAccount
		return protoreflect.ValueOfString(value)
	case "enreach.workload.ManagerRPWorkload.reportedNodesCount":
		value := x.ReportedNodesCount
		return protoreflect.ValueOfUint64(value)
	case "enreach.workload.ManagerRPWorkload.score":
		value := x.Score
		return protoreflect.ValueOfUint64(value)
	case "enreach.workload.ManagerRPWorkload.createAt":
		value := x.CreateAt
		return protoreflect.ValueOfUint64(value)
	case "enreach.workload.ManagerRPWorkload.updateAt":
		value := x.UpdateAt
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: enreach.workload.ManagerRPWorkload"))
		}
		panic(fmt.Errorf("message enreach.workload.ManagerRPWorkload does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ManagerRPWorkload) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "enreach.workload.ManagerRPWorkload.era":
		x.Era = value.Uint()
	case "enreach.workload.ManagerRPWorkload.managerAccount":
		x.ManagerAccount = value.Interface().(string)
	case "enreach.workload.ManagerRPWorkload.reportedNodesCount":
		x.ReportedNodesCount = value.Uint()
	case "enreach.workload.ManagerRPWorkload.score":
		x.Score = value.Uint()
	case "enreach.workload.ManagerRPWorkload.createAt":
		x.CreateAt = value.Uint()
	case "enreach.workload.ManagerRPWorkload.updateAt":
		x.UpdateAt = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: enreach.workload.ManagerRPWorkload"))
		}
		panic(fmt.Errorf("message enreach.workload.ManagerRPWorkload does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ManagerRPWorkload) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "enreach.workload.ManagerRPWorkload.era":
		panic(fmt.Errorf("field era of message enreach.workload.ManagerRPWorkload is not mutable"))
	case "enreach.workload.ManagerRPWorkload.managerAccount":
		panic(fmt.Errorf("field managerAccount of message enreach.workload.ManagerRPWorkload is not mutable"))
	case "enreach.workload.ManagerRPWorkload.reportedNodesCount":
		panic(fmt.Errorf("field reportedNodesCount of message enreach.workload.ManagerRPWorkload is not mutable"))
	case "enreach.workload.ManagerRPWorkload.score":
		panic(fmt.Errorf("field score of message enreach.workload.ManagerRPWorkload is not mutable"))
	case "enreach.workload.ManagerRPWorkload.createAt":
		panic(fmt.Errorf("field createAt of message enreach.workload.ManagerRPWorkload is not mutable"))
	case "enreach.workload.ManagerRPWorkload.updateAt":
		panic(fmt.Errorf("field updateAt of message enreach.workload.ManagerRPWorkload is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: enreach.workload.ManagerRPWorkload"))
		}
		panic(fmt.Errorf("message enreach.workload.ManagerRPWorkload does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_ManagerRPWorkload) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "enreach.workload.ManagerRPWorkload.era":
		return protoreflect.ValueOfUint64(uint64(0))
	case "enreach.workload.ManagerRPWorkload.managerAccount":
		return protoreflect.ValueOfString("")
	case "enreach.workload.ManagerRPWorkload.reportedNodesCount":
		return protoreflect.ValueOfUint64(uint64(0))
	case "enreach.workload.ManagerRPWorkload.score":
		return protoreflect.ValueOfUint64(uint64(0))
	case "enreach.workload.ManagerRPWorkload.createAt":
		return protoreflect.ValueOfUint64(uint64(0))
	case "enreach.workload.ManagerRPWorkload.updateAt":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: enreach.workload.ManagerRPWorkload"))
		}
		panic(fmt.Errorf("message enreach.workload.ManagerRPWorkload does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_ManagerRPWorkload) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in enreach.workload.ManagerRPWorkload", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_ManagerRPWorkload) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ManagerRPWorkload) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_ManagerRPWorkload) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_ManagerRPWorkload) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*ManagerRPWorkload)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Era != 0 {
			n += 1 + runtime.Sov(uint64(x.Era))
		}
		l = len(x.ManagerAccount)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.ReportedNodesCount != 0 {
			n += 1 + runtime.Sov(uint64(x.ReportedNodesCount))
		}
		if x.Score != 0 {
			n += 1 + runtime.Sov(uint64(x.Score))
		}
		if x.CreateAt != 0 {
			n += 1 + runtime.Sov(uint64(x.CreateAt))
		}
		if x.UpdateAt != 0 {
			n += 1 + runtime.Sov(uint64(x.UpdateAt))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*ManagerRPWorkload)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.UpdateAt != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.UpdateAt))
			i--
			dAtA[i] = 0x30
		}
		if x.CreateAt != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.CreateAt))
			i--
			dAtA[i] = 0x28
		}
		if x.Score != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Score))
			i--
			dAtA[i] = 0x20
		}
		if x.ReportedNodesCount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ReportedNodesCount))
			i--
			dAtA[i] = 0x18
		}
		if len(x.ManagerAccount) > 0 {
			i -= len(x.ManagerAccount)
			copy(dAtA[i:], x.ManagerAccount)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ManagerAccount)))
			i--
			dAtA[i] = 0x12
		}
		if x.Era != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Era))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*ManagerRPWorkload)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ManagerRPWorkload: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ManagerRPWorkload: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Era", wireType)
				}
				x.Era = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Era |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ManagerAccount", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ManagerAccount = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ReportedNodesCount", wireType)
				}
				x.ReportedNodesCount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ReportedNodesCount |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
				}
				x.Score = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Score |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
				}
				x.CreateAt = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.CreateAt |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field UpdateAt", wireType)
				}
				x.UpdateAt = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.UpdateAt |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_ManagerCSWorkload                    protoreflect.MessageDescriptor
	fd_ManagerCSWorkload_era                protoreflect.FieldDescriptor
	fd_ManagerCSWorkload_managerAccount     protoreflect.FieldDescriptor
	fd_ManagerCSWorkload_reportedNodesCount protoreflect.FieldDescriptor
	fd_ManagerCSWorkload_score              protoreflect.FieldDescriptor
	fd_ManagerCSWorkload_createAt           protoreflect.FieldDescriptor
	fd_ManagerCSWorkload_updateAt           protoreflect.FieldDescriptor
)

func init() {
	file_enreach_workload_workload_proto_init()
	md_ManagerCSWorkload = File_enreach_workload_workload_proto.Messages().ByName("ManagerCSWorkload")
	fd_ManagerCSWorkload_era = md_ManagerCSWorkload.Fields().ByName("era")
	fd_ManagerCSWorkload_managerAccount = md_ManagerCSWorkload.Fields().ByName("managerAccount")
	fd_ManagerCSWorkload_reportedNodesCount = md_ManagerCSWorkload.Fields().ByName("reportedNodesCount")
	fd_ManagerCSWorkload_score = md_ManagerCSWorkload.Fields().ByName("score")
	fd_ManagerCSWorkload_createAt = md_ManagerCSWorkload.Fields().ByName("createAt")
	fd_ManagerCSWorkload_updateAt = md_ManagerCSWorkload.Fields().ByName("updateAt")
}

var _ protoreflect.Message = (*fastReflection_ManagerCSWorkload)(nil)

type fastReflection_ManagerCSWorkload ManagerCSWorkload

func (x *ManagerCSWorkload) ProtoReflect() protoreflect.Message {
	return (*fastReflection_ManagerCSWorkload)(x)
}

func (x *ManagerCSWorkload) slowProtoReflect() protoreflect.Message {
	mi := &file_enreach_workload_workload_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_ManagerCSWorkload_messageType fastReflection_ManagerCSWorkload_messageType
var _ protoreflect.MessageType = fastReflection_ManagerCSWorkload_messageType{}

type fastReflection_ManagerCSWorkload_messageType struct{}

func (x fastReflection_ManagerCSWorkload_messageType) Zero() protoreflect.Message {
	return (*fastReflection_ManagerCSWorkload)(nil)
}
func (x fastReflection_ManagerCSWorkload_messageType) New() protoreflect.Message {
	return new(fastReflection_ManagerCSWorkload)
}
func (x fastReflection_ManagerCSWorkload_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_ManagerCSWorkload
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_ManagerCSWorkload) Descriptor() protoreflect.MessageDescriptor {
	return md_ManagerCSWorkload
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_ManagerCSWorkload) Type() protoreflect.MessageType {
	return _fastReflection_ManagerCSWorkload_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_ManagerCSWorkload) New() protoreflect.Message {
	return new(fastReflection_ManagerCSWorkload)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_ManagerCSWorkload) Interface() protoreflect.ProtoMessage {
	return (*ManagerCSWorkload)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_ManagerCSWorkload) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Era != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Era)
		if !f(fd_ManagerCSWorkload_era, value) {
			return
		}
	}
	if x.ManagerAccount != "" {
		value := protoreflect.ValueOfString(x.ManagerAccount)
		if !f(fd_ManagerCSWorkload_managerAccount, value) {
			return
		}
	}
	if x.ReportedNodesCount != uint64(0) {
		value := protoreflect.ValueOfUint64(x.ReportedNodesCount)
		if !f(fd_ManagerCSWorkload_reportedNodesCount, value) {
			return
		}
	}
	if x.Score != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Score)
		if !f(fd_ManagerCSWorkload_score, value) {
			return
		}
	}
	if x.CreateAt != uint64(0) {
		value := protoreflect.ValueOfUint64(x.CreateAt)
		if !f(fd_ManagerCSWorkload_createAt, value) {
			return
		}
	}
	if x.UpdateAt != uint64(0) {
		value := protoreflect.ValueOfUint64(x.UpdateAt)
		if !f(fd_ManagerCSWorkload_updateAt, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_ManagerCSWorkload) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "enreach.workload.ManagerCSWorkload.era":
		return x.Era != uint64(0)
	case "enreach.workload.ManagerCSWorkload.managerAccount":
		return x.ManagerAccount != ""
	case "enreach.workload.ManagerCSWorkload.reportedNodesCount":
		return x.ReportedNodesCount != uint64(0)
	case "enreach.workload.ManagerCSWorkload.score":
		return x.Score != uint64(0)
	case "enreach.workload.ManagerCSWorkload.createAt":
		return x.CreateAt != uint64(0)
	case "enreach.workload.ManagerCSWorkload.updateAt":
		return x.UpdateAt != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: enreach.workload.ManagerCSWorkload"))
		}
		panic(fmt.Errorf("message enreach.workload.ManagerCSWorkload does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ManagerCSWorkload) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "enreach.workload.ManagerCSWorkload.era":
		x.Era = uint64(0)
	case "enreach.workload.ManagerCSWorkload.managerAccount":
		x.ManagerAccount = ""
	case "enreach.workload.ManagerCSWorkload.reportedNodesCount":
		x.ReportedNodesCount = uint64(0)
	case "enreach.workload.ManagerCSWorkload.score":
		x.Score = uint64(0)
	case "enreach.workload.ManagerCSWorkload.createAt":
		x.CreateAt = uint64(0)
	case "enreach.workload.ManagerCSWorkload.updateAt":
		x.UpdateAt = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: enreach.workload.ManagerCSWorkload"))
		}
		panic(fmt.Errorf("message enreach.workload.ManagerCSWorkload does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_ManagerCSWorkload) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "enreach.workload.ManagerCSWorkload.era":
		value := x.Era
		return protoreflect.ValueOfUint64(value)
	case "enreach.workload.ManagerCSWorkload.managerAccount":
		value := x.ManagerAccount
		return protoreflect.ValueOfString(value)
	case "enreach.workload.ManagerCSWorkload.reportedNodesCount":
		value := x.ReportedNodesCount
		return protoreflect.ValueOfUint64(value)
	case "enreach.workload.ManagerCSWorkload.score":
		value := x.Score
		return protoreflect.ValueOfUint64(value)
	case "enreach.workload.ManagerCSWorkload.createAt":
		value := x.CreateAt
		return protoreflect.ValueOfUint64(value)
	case "enreach.workload.ManagerCSWorkload.updateAt":
		value := x.UpdateAt
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: enreach.workload.ManagerCSWorkload"))
		}
		panic(fmt.Errorf("message enreach.workload.ManagerCSWorkload does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ManagerCSWorkload) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "enreach.workload.ManagerCSWorkload.era":
		x.Era = value.Uint()
	case "enreach.workload.ManagerCSWorkload.managerAccount":
		x.ManagerAccount = value.Interface().(string)
	case "enreach.workload.ManagerCSWorkload.reportedNodesCount":
		x.ReportedNodesCount = value.Uint()
	case "enreach.workload.ManagerCSWorkload.score":
		x.Score = value.Uint()
	case "enreach.workload.ManagerCSWorkload.createAt":
		x.CreateAt = value.Uint()
	case "enreach.workload.ManagerCSWorkload.updateAt":
		x.UpdateAt = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: enreach.workload.ManagerCSWorkload"))
		}
		panic(fmt.Errorf("message enreach.workload.ManagerCSWorkload does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ManagerCSWorkload) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "enreach.workload.ManagerCSWorkload.era":
		panic(fmt.Errorf("field era of message enreach.workload.ManagerCSWorkload is not mutable"))
	case "enreach.workload.ManagerCSWorkload.managerAccount":
		panic(fmt.Errorf("field managerAccount of message enreach.workload.ManagerCSWorkload is not mutable"))
	case "enreach.workload.ManagerCSWorkload.reportedNodesCount":
		panic(fmt.Errorf("field reportedNodesCount of message enreach.workload.ManagerCSWorkload is not mutable"))
	case "enreach.workload.ManagerCSWorkload.score":
		panic(fmt.Errorf("field score of message enreach.workload.ManagerCSWorkload is not mutable"))
	case "enreach.workload.ManagerCSWorkload.createAt":
		panic(fmt.Errorf("field createAt of message enreach.workload.ManagerCSWorkload is not mutable"))
	case "enreach.workload.ManagerCSWorkload.updateAt":
		panic(fmt.Errorf("field updateAt of message enreach.workload.ManagerCSWorkload is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: enreach.workload.ManagerCSWorkload"))
		}
		panic(fmt.Errorf("message enreach.workload.ManagerCSWorkload does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_ManagerCSWorkload) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "enreach.workload.ManagerCSWorkload.era":
		return protoreflect.ValueOfUint64(uint64(0))
	case "enreach.workload.ManagerCSWorkload.managerAccount":
		return protoreflect.ValueOfString("")
	case "enreach.workload.ManagerCSWorkload.reportedNodesCount":
		return protoreflect.ValueOfUint64(uint64(0))
	case "enreach.workload.ManagerCSWorkload.score":
		return protoreflect.ValueOfUint64(uint64(0))
	case "enreach.workload.ManagerCSWorkload.createAt":
		return protoreflect.ValueOfUint64(uint64(0))
	case "enreach.workload.ManagerCSWorkload.updateAt":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: enreach.workload.ManagerCSWorkload"))
		}
		panic(fmt.Errorf("message enreach.workload.ManagerCSWorkload does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_ManagerCSWorkload) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in enreach.workload.ManagerCSWorkload", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_ManagerCSWorkload) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ManagerCSWorkload) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_ManagerCSWorkload) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_ManagerCSWorkload) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*ManagerCSWorkload)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Era != 0 {
			n += 1 + runtime.Sov(uint64(x.Era))
		}
		l = len(x.ManagerAccount)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.ReportedNodesCount != 0 {
			n += 1 + runtime.Sov(uint64(x.ReportedNodesCount))
		}
		if x.Score != 0 {
			n += 1 + runtime.Sov(uint64(x.Score))
		}
		if x.CreateAt != 0 {
			n += 1 + runtime.Sov(uint64(x.CreateAt))
		}
		if x.UpdateAt != 0 {
			n += 1 + runtime.Sov(uint64(x.UpdateAt))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*ManagerCSWorkload)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.UpdateAt != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.UpdateAt))
			i--
			dAtA[i] = 0x30
		}
		if x.CreateAt != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.CreateAt))
			i--
			dAtA[i] = 0x28
		}
		if x.Score != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Score))
			i--
			dAtA[i] = 0x20
		}
		if x.ReportedNodesCount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ReportedNodesCount))
			i--
			dAtA[i] = 0x18
		}
		if len(x.ManagerAccount) > 0 {
			i -= len(x.ManagerAccount)
			copy(dAtA[i:], x.ManagerAccount)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ManagerAccount)))
			i--
			dAtA[i] = 0x12
		}
		if x.Era != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Era))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*ManagerCSWorkload)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ManagerCSWorkload: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ManagerCSWorkload: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Era", wireType)
				}
				x.Era = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Era |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ManagerAccount", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ManagerAccount = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ReportedNodesCount", wireType)
				}
				x.ReportedNodesCount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ReportedNodesCount |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
				}
				x.Score = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Score |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
				}
				x.CreateAt = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.CreateAt |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field UpdateAt", wireType)
				}
				x.UpdateAt = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.UpdateAt |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: enreach/workload/workload.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NodeWorkload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch    uint64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	NodeID   string `protobuf:"bytes,2,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	Score    uint64 `protobuf:"varint,3,opt,name=score,proto3" json:"score,omitempty"`
	CreateAt uint64 `protobuf:"varint,4,opt,name=createAt,proto3" json:"createAt,omitempty"`
}

func (x *NodeWorkload) Reset() {
	*x = NodeWorkload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enreach_workload_workload_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeWorkload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeWorkload) ProtoMessage() {}

// Deprecated: Use NodeWorkload.ProtoReflect.Descriptor instead.
func (*NodeWorkload) Descriptor() ([]byte, []int) {
	return file_enreach_workload_workload_proto_rawDescGZIP(), []int{0}
}

func (x *NodeWorkload) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *NodeWorkload) GetNodeID() string {
	if x != nil {
		return x.NodeID
	}
	return ""
}

func (x *NodeWorkload) GetScore() uint64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *NodeWorkload) GetCreateAt() uint64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

// Manager Workreport Process Workload
type ManagerWRWorkload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch              uint64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	ManagerAccount     string `protobuf:"bytes,2,opt,name=managerAccount,proto3" json:"managerAccount,omitempty"`
	ReportedNodesCount uint64 `protobuf:"varint,3,opt,name=reportedNodesCount,proto3" json:"reportedNodesCount,omitempty"`
	Score              uint64 `protobuf:"varint,4,opt,name=score,proto3" json:"score,omitempty"`
	CreateAt           uint64 `protobuf:"varint,5,opt,name=createAt,proto3" json:"createAt,omitempty"`
	UpdateAt           uint64 `protobuf:"varint,6,opt,name=updateAt,proto3" json:"updateAt,omitempty"`
}

func (x *ManagerWRWorkload) Reset() {
	*x = ManagerWRWorkload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enreach_workload_workload_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagerWRWorkload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagerWRWorkload) ProtoMessage() {}

// Deprecated: Use ManagerWRWorkload.ProtoReflect.Descriptor instead.
func (*ManagerWRWorkload) Descriptor() ([]byte, []int) {
	return file_enreach_workload_workload_proto_rawDescGZIP(), []int{1}
}

func (x *ManagerWRWorkload) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *ManagerWRWorkload) GetManagerAccount() string {
	if x != nil {
		return x.ManagerAccount
	}
	return ""
}

func (x *ManagerWRWorkload) GetReportedNodesCount() uint64 {
	if x != nil {
		return x.ReportedNodesCount
	}
	return 0
}

func (x *ManagerWRWorkload) GetScore() uint64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *ManagerWRWorkload) GetCreateAt() uint64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *ManagerWRWorkload) GetUpdateAt() uint64 {
	if x != nil {
		return x.UpdateAt
	}
	return 0
}

// Manager ReputationPoint Process Workload
type ManagerRPWorkload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Era                uint64 `protobuf:"varint,1,opt,name=era,proto3" json:"era,omitempty"`
	ManagerAccount     string `protobuf:"bytes,2,opt,name=managerAccount,proto3" json:"managerAccount,omitempty"`
	ReportedNodesCount uint64 `protobuf:"varint,3,opt,name=reportedNodesCount,proto3" json:"reportedNodesCount,omitempty"`
	Score              uint64 `protobuf:"varint,4,opt,name=score,proto3" json:"score,omitempty"`
	CreateAt           uint64 `protobuf:"varint,5,opt,name=createAt,proto3" json:"createAt,omitempty"`
	UpdateAt           uint64 `protobuf:"varint,6,opt,name=updateAt,proto3" json:"updateAt,omitempty"`
}

func (x *ManagerRPWorkload) Reset() {
	*x = ManagerRPWorkload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enreach_workload_workload_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagerRPWorkload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagerRPWorkload) ProtoMessage() {}

// Deprecated: Use ManagerRPWorkload.ProtoReflect.Descriptor instead.
func (*ManagerRPWorkload) Descriptor() ([]byte, []int) {
	return file_enreach_workload_workload_proto_rawDescGZIP(), []int{2}
}

func (x *ManagerRPWorkload) GetEra() uint64 {
	if x != nil {
		return x.Era
	}
	return 0
}

func (x *ManagerRPWorkload) GetManagerAccount() string {
	if x != nil {
		return x.ManagerAccount
	}
	return ""
}

func (x *ManagerRPWorkload) GetReportedNodesCount() uint64 {
	if x != nil {
		return x.ReportedNodesCount
	}
	return 0
}

func (x *ManagerRPWorkload) GetScore() uint64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *ManagerRPWorkload) GetCreateAt() uint64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *ManagerRPWorkload) GetUpdateAt() uint64 {
	if x != nil {
		return x.UpdateAt
	}
	return 0
}

// Manager CheatStatus Process Workload
type ManagerCSWorkload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Era                uint64 `protobuf:"varint,1,opt,name=era,proto3" json:"era,omitempty"`
	ManagerAccount     string `protobuf:"bytes,2,opt,name=managerAccount,proto3" json:"managerAccount,omitempty"`
	ReportedNodesCount uint64 `protobuf:"varint,3,opt,name=reportedNodesCount,proto3" json:"reportedNodesCount,omitempty"`
	Score              uint64 `protobuf:"varint,4,opt,name=score,proto3" json:"score,omitempty"`
	CreateAt           uint64 `protobuf:"varint,5,opt,name=createAt,proto3" json:"createAt,omitempty"`
	UpdateAt           uint64 `protobuf:"varint,6,opt,name=updateAt,proto3" json:"updateAt,omitempty"`
}

func (x *ManagerCSWorkload) Reset() {
	*x = ManagerCSWorkload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enreach_workload_workload_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagerCSWorkload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagerCSWorkload) ProtoMessage() {}

// Deprecated: Use ManagerCSWorkload.ProtoReflect.Descriptor instead.
func (*ManagerCSWorkload) Descriptor() ([]byte, []int) {
	return file_enreach_workload_workload_proto_rawDescGZIP(), []int{3}
}

func (x *ManagerCSWorkload) GetEra() uint64 {
	if x != nil {
		return x.Era
	}
	return 0
}

func (x *ManagerCSWorkload) GetManagerAccount() string {
	if x != nil {
		return x.ManagerAccount
	}
	return ""
}

func (x *ManagerCSWorkload) GetReportedNodesCount() uint64 {
	if x != nil {
		return x.ReportedNodesCount
	}
	return 0
}

func (x *ManagerCSWorkload) GetScore() uint64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *ManagerCSWorkload) GetCreateAt() uint64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *ManagerCSWorkload) GetUpdateAt() uint64 {
	if x != nil {
		return x.UpdateAt
	}
	return 0
}

var File_enreach_workload_workload_proto protoreflect.FileDescriptor

var file_enreach_workload_workload_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x65, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x10, 0x65, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x22, 0x6e, 0x0a, 0x0c, 0x4e, 0x6f, 0x64, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64,
	0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49,
	0x44, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x74, 0x22, 0xcf, 0x01, 0x0a, 0x11, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x57,
	0x52, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12,
	0x26, 0x0a, 0x0e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x74, 0x22, 0xcb, 0x01, 0x0a, 0x11, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x52, 0x50, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x65,
	0x72, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x65, 0x72, 0x61, 0x12, 0x26, 0x0a,
	0x0e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x74, 0x22, 0xcb, 0x01, 0x0a, 0x11, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x43,
	0x53, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x65, 0x72, 0x61, 0x12, 0x26, 0x0a, 0x0e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x12, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x74, 0x42, 0xa9, 0x01, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6e, 0x72, 0x65, 0x61, 0x63,
	0x68, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x0d, 0x57, 0x6f, 0x72, 0x6b,
	0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x21, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x6e,
	0x72, 0x65, 0x61, 0x63, 0x68, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0xa2, 0x02,
	0x03, 0x45, 0x57, 0x58, 0xaa, 0x02, 0x10, 0x45, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0xca, 0x02, 0x10, 0x45, 0x6e, 0x72, 0x65, 0x61, 0x63,
	0x68, 0x5c, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0xe2, 0x02, 0x1c, 0x45, 0x6e, 0x72,
	0x65, 0x61, 0x63, 0x68, 0x5c, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x11, 0x45, 0x6e, 0x72, 0x65,
	0x61, 0x63, 0x68, 0x3a, 0x3a, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_enreach_workload_workload_proto_rawDescOnce sync.Once
	file_enreach_workload_workload_proto_rawDescData = file_enreach_workload_workload_proto_rawDesc
)

func file_enreach_workload_workload_proto_rawDescGZIP() []byte {
	file_enreach_workload_workload_proto_rawDescOnce.Do(func() {
		file_enreach_workload_workload_proto_rawDescData = protoimpl.X.CompressGZIP(file_enreach_workload_workload_proto_rawDescData)
	})
	return file_enreach_workload_workload_proto_rawDescData
}

var file_enreach_workload_workload_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_enreach_workload_workload_proto_goTypes = []interface{}{
	(*NodeWorkload)(nil),      // 0: enreach.workload.NodeWorkload
	(*ManagerWRWorkload)(nil), // 1: enreach.workload.ManagerWRWorkload
	(*ManagerRPWorkload)(nil), // 2: enreach.workload.ManagerRPWorkload
	(*ManagerCSWorkload)(nil), // 3: enreach.workload.ManagerCSWorkload
}
var file_enreach_workload_workload_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_enreach_workload_workload_proto_init() }
func file_enreach_workload_workload_proto_init() {
	if File_enreach_workload_workload_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_enreach_workload_workload_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeWorkload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enreach_workload_workload_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagerWRWorkload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enreach_workload_workload_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagerRPWorkload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enreach_workload_workload_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagerCSWorkload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_enreach_workload_workload_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_enreach_workload_workload_proto_goTypes,
		DependencyIndexes: file_enreach_workload_workload_proto_depIdxs,
		MessageInfos:      file_enreach_workload_workload_proto_msgTypes,
	}.Build()
	File_enreach_workload_workload_proto = out.File
	file_enreach_workload_workload_proto_rawDesc = nil
	file_enreach_workload_workload_proto_goTypes = nil
	file_enreach_workload_workload_proto_depIdxs = nil
}
