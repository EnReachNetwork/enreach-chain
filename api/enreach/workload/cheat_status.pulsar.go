// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package workload

import (
	v1beta1 "cosmossdk.io/api/cosmos/base/query/v1beta1"
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sort "sort"
	sync "sync"
)

var (
	md_CheatStatusCR             protoreflect.MessageDescriptor
	fd_CheatStatusCR_nodeID      protoreflect.FieldDescriptor
	fd_CheatStatusCR_cheatStatus protoreflect.FieldDescriptor
)

func init() {
	file_enreach_workload_cheat_status_proto_init()
	md_CheatStatusCR = File_enreach_workload_cheat_status_proto.Messages().ByName("CheatStatusCR")
	fd_CheatStatusCR_nodeID = md_CheatStatusCR.Fields().ByName("nodeID")
	fd_CheatStatusCR_cheatStatus = md_CheatStatusCR.Fields().ByName("cheatStatus")
}

var _ protoreflect.Message = (*fastReflection_CheatStatusCR)(nil)

type fastReflection_CheatStatusCR CheatStatusCR

func (x *CheatStatusCR) ProtoReflect() protoreflect.Message {
	return (*fastReflection_CheatStatusCR)(x)
}

func (x *CheatStatusCR) slowProtoReflect() protoreflect.Message {
	mi := &file_enreach_workload_cheat_status_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_CheatStatusCR_messageType fastReflection_CheatStatusCR_messageType
var _ protoreflect.MessageType = fastReflection_CheatStatusCR_messageType{}

type fastReflection_CheatStatusCR_messageType struct{}

func (x fastReflection_CheatStatusCR_messageType) Zero() protoreflect.Message {
	return (*fastReflection_CheatStatusCR)(nil)
}
func (x fastReflection_CheatStatusCR_messageType) New() protoreflect.Message {
	return new(fastReflection_CheatStatusCR)
}
func (x fastReflection_CheatStatusCR_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_CheatStatusCR
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_CheatStatusCR) Descriptor() protoreflect.MessageDescriptor {
	return md_CheatStatusCR
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_CheatStatusCR) Type() protoreflect.MessageType {
	return _fastReflection_CheatStatusCR_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_CheatStatusCR) New() protoreflect.Message {
	return new(fastReflection_CheatStatusCR)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_CheatStatusCR) Interface() protoreflect.ProtoMessage {
	return (*CheatStatusCR)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_CheatStatusCR) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.NodeID != "" {
		value := protoreflect.ValueOfString(x.NodeID)
		if !f(fd_CheatStatusCR_nodeID, value) {
			return
		}
	}
	if x.CheatStatus != "" {
		value := protoreflect.ValueOfString(x.CheatStatus)
		if !f(fd_CheatStatusCR_cheatStatus, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_CheatStatusCR) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "enreach.workload.CheatStatusCR.nodeID":
		return x.NodeID != ""
	case "enreach.workload.CheatStatusCR.cheatStatus":
		return x.CheatStatus != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: enreach.workload.CheatStatusCR"))
		}
		panic(fmt.Errorf("message enreach.workload.CheatStatusCR does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CheatStatusCR) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "enreach.workload.CheatStatusCR.nodeID":
		x.NodeID = ""
	case "enreach.workload.CheatStatusCR.cheatStatus":
		x.CheatStatus = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: enreach.workload.CheatStatusCR"))
		}
		panic(fmt.Errorf("message enreach.workload.CheatStatusCR does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_CheatStatusCR) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "enreach.workload.CheatStatusCR.nodeID":
		value := x.NodeID
		return protoreflect.ValueOfString(value)
	case "enreach.workload.CheatStatusCR.cheatStatus":
		value := x.CheatStatus
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: enreach.workload.CheatStatusCR"))
		}
		panic(fmt.Errorf("message enreach.workload.CheatStatusCR does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CheatStatusCR) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "enreach.workload.CheatStatusCR.nodeID":
		x.NodeID = value.Interface().(string)
	case "enreach.workload.CheatStatusCR.cheatStatus":
		x.CheatStatus = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: enreach.workload.CheatStatusCR"))
		}
		panic(fmt.Errorf("message enreach.workload.CheatStatusCR does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CheatStatusCR) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "enreach.workload.CheatStatusCR.nodeID":
		panic(fmt.Errorf("field nodeID of message enreach.workload.CheatStatusCR is not mutable"))
	case "enreach.workload.CheatStatusCR.cheatStatus":
		panic(fmt.Errorf("field cheatStatus of message enreach.workload.CheatStatusCR is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: enreach.workload.CheatStatusCR"))
		}
		panic(fmt.Errorf("message enreach.workload.CheatStatusCR does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_CheatStatusCR) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "enreach.workload.CheatStatusCR.nodeID":
		return protoreflect.ValueOfString("")
	case "enreach.workload.CheatStatusCR.cheatStatus":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: enreach.workload.CheatStatusCR"))
		}
		panic(fmt.Errorf("message enreach.workload.CheatStatusCR does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_CheatStatusCR) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in enreach.workload.CheatStatusCR", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_CheatStatusCR) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CheatStatusCR) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_CheatStatusCR) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_CheatStatusCR) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*CheatStatusCR)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.NodeID)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.CheatStatus)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*CheatStatusCR)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.CheatStatus) > 0 {
			i -= len(x.CheatStatus)
			copy(dAtA[i:], x.CheatStatus)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.CheatStatus)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.NodeID) > 0 {
			i -= len(x.NodeID)
			copy(dAtA[i:], x.NodeID)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.NodeID)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*CheatStatusCR)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CheatStatusCR: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CheatStatusCR: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.NodeID = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CheatStatus", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CheatStatus = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_CheatStatusCRDB             protoreflect.MessageDescriptor
	fd_CheatStatusCRDB_cheatStatus protoreflect.FieldDescriptor
	fd_CheatStatusCRDB_createAt    protoreflect.FieldDescriptor
	fd_CheatStatusCRDB_updateAt    protoreflect.FieldDescriptor
)

func init() {
	file_enreach_workload_cheat_status_proto_init()
	md_CheatStatusCRDB = File_enreach_workload_cheat_status_proto.Messages().ByName("CheatStatusCRDB")
	fd_CheatStatusCRDB_cheatStatus = md_CheatStatusCRDB.Fields().ByName("cheatStatus")
	fd_CheatStatusCRDB_createAt = md_CheatStatusCRDB.Fields().ByName("createAt")
	fd_CheatStatusCRDB_updateAt = md_CheatStatusCRDB.Fields().ByName("updateAt")
}

var _ protoreflect.Message = (*fastReflection_CheatStatusCRDB)(nil)

type fastReflection_CheatStatusCRDB CheatStatusCRDB

func (x *CheatStatusCRDB) ProtoReflect() protoreflect.Message {
	return (*fastReflection_CheatStatusCRDB)(x)
}

func (x *CheatStatusCRDB) slowProtoReflect() protoreflect.Message {
	mi := &file_enreach_workload_cheat_status_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_CheatStatusCRDB_messageType fastReflection_CheatStatusCRDB_messageType
var _ protoreflect.MessageType = fastReflection_CheatStatusCRDB_messageType{}

type fastReflection_CheatStatusCRDB_messageType struct{}

func (x fastReflection_CheatStatusCRDB_messageType) Zero() protoreflect.Message {
	return (*fastReflection_CheatStatusCRDB)(nil)
}
func (x fastReflection_CheatStatusCRDB_messageType) New() protoreflect.Message {
	return new(fastReflection_CheatStatusCRDB)
}
func (x fastReflection_CheatStatusCRDB_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_CheatStatusCRDB
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_CheatStatusCRDB) Descriptor() protoreflect.MessageDescriptor {
	return md_CheatStatusCRDB
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_CheatStatusCRDB) Type() protoreflect.MessageType {
	return _fastReflection_CheatStatusCRDB_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_CheatStatusCRDB) New() protoreflect.Message {
	return new(fastReflection_CheatStatusCRDB)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_CheatStatusCRDB) Interface() protoreflect.ProtoMessage {
	return (*CheatStatusCRDB)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_CheatStatusCRDB) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.CheatStatus != "" {
		value := protoreflect.ValueOfString(x.CheatStatus)
		if !f(fd_CheatStatusCRDB_cheatStatus, value) {
			return
		}
	}
	if x.CreateAt != uint64(0) {
		value := protoreflect.ValueOfUint64(x.CreateAt)
		if !f(fd_CheatStatusCRDB_createAt, value) {
			return
		}
	}
	if x.UpdateAt != uint64(0) {
		value := protoreflect.ValueOfUint64(x.UpdateAt)
		if !f(fd_CheatStatusCRDB_updateAt, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_CheatStatusCRDB) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "enreach.workload.CheatStatusCRDB.cheatStatus":
		return x.CheatStatus != ""
	case "enreach.workload.CheatStatusCRDB.createAt":
		return x.CreateAt != uint64(0)
	case "enreach.workload.CheatStatusCRDB.updateAt":
		return x.UpdateAt != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: enreach.workload.CheatStatusCRDB"))
		}
		panic(fmt.Errorf("message enreach.workload.CheatStatusCRDB does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CheatStatusCRDB) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "enreach.workload.CheatStatusCRDB.cheatStatus":
		x.CheatStatus = ""
	case "enreach.workload.CheatStatusCRDB.createAt":
		x.CreateAt = uint64(0)
	case "enreach.workload.CheatStatusCRDB.updateAt":
		x.UpdateAt = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: enreach.workload.CheatStatusCRDB"))
		}
		panic(fmt.Errorf("message enreach.workload.CheatStatusCRDB does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_CheatStatusCRDB) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "enreach.workload.CheatStatusCRDB.cheatStatus":
		value := x.CheatStatus
		return protoreflect.ValueOfString(value)
	case "enreach.workload.CheatStatusCRDB.createAt":
		value := x.CreateAt
		return protoreflect.ValueOfUint64(value)
	case "enreach.workload.CheatStatusCRDB.updateAt":
		value := x.UpdateAt
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: enreach.workload.CheatStatusCRDB"))
		}
		panic(fmt.Errorf("message enreach.workload.CheatStatusCRDB does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CheatStatusCRDB) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "enreach.workload.CheatStatusCRDB.cheatStatus":
		x.CheatStatus = value.Interface().(string)
	case "enreach.workload.CheatStatusCRDB.createAt":
		x.CreateAt = value.Uint()
	case "enreach.workload.CheatStatusCRDB.updateAt":
		x.UpdateAt = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: enreach.workload.CheatStatusCRDB"))
		}
		panic(fmt.Errorf("message enreach.workload.CheatStatusCRDB does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CheatStatusCRDB) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "enreach.workload.CheatStatusCRDB.cheatStatus":
		panic(fmt.Errorf("field cheatStatus of message enreach.workload.CheatStatusCRDB is not mutable"))
	case "enreach.workload.CheatStatusCRDB.createAt":
		panic(fmt.Errorf("field createAt of message enreach.workload.CheatStatusCRDB is not mutable"))
	case "enreach.workload.CheatStatusCRDB.updateAt":
		panic(fmt.Errorf("field updateAt of message enreach.workload.CheatStatusCRDB is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: enreach.workload.CheatStatusCRDB"))
		}
		panic(fmt.Errorf("message enreach.workload.CheatStatusCRDB does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_CheatStatusCRDB) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "enreach.workload.CheatStatusCRDB.cheatStatus":
		return protoreflect.ValueOfString("")
	case "enreach.workload.CheatStatusCRDB.createAt":
		return protoreflect.ValueOfUint64(uint64(0))
	case "enreach.workload.CheatStatusCRDB.updateAt":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: enreach.workload.CheatStatusCRDB"))
		}
		panic(fmt.Errorf("message enreach.workload.CheatStatusCRDB does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_CheatStatusCRDB) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in enreach.workload.CheatStatusCRDB", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_CheatStatusCRDB) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CheatStatusCRDB) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_CheatStatusCRDB) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_CheatStatusCRDB) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*CheatStatusCRDB)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.CheatStatus)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.CreateAt != 0 {
			n += 1 + runtime.Sov(uint64(x.CreateAt))
		}
		if x.UpdateAt != 0 {
			n += 1 + runtime.Sov(uint64(x.UpdateAt))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*CheatStatusCRDB)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.UpdateAt != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.UpdateAt))
			i--
			dAtA[i] = 0x18
		}
		if x.CreateAt != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.CreateAt))
			i--
			dAtA[i] = 0x10
		}
		if len(x.CheatStatus) > 0 {
			i -= len(x.CheatStatus)
			copy(dAtA[i:], x.CheatStatus)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.CheatStatus)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*CheatStatusCRDB)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CheatStatusCRDB: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CheatStatusCRDB: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CheatStatus", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CheatStatus = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
				}
				x.CreateAt = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.CreateAt |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field UpdateAt", wireType)
				}
				x.UpdateAt = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.UpdateAt |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.Map = (*_CheatStatusCRMapDB_1_map)(nil)

type _CheatStatusCRMapDB_1_map struct {
	m *map[string]*CheatStatusCRDB
}

func (x *_CheatStatusCRMapDB_1_map) Len() int {
	if x.m == nil {
		return 0
	}
	return len(*x.m)
}

func (x *_CheatStatusCRMapDB_1_map) Range(f func(protoreflect.MapKey, protoreflect.Value) bool) {
	if x.m == nil {
		return
	}
	for k, v := range *x.m {
		mapKey := (protoreflect.MapKey)(protoreflect.ValueOfString(k))
		mapValue := protoreflect.ValueOfMessage(v.ProtoReflect())
		if !f(mapKey, mapValue) {
			break
		}
	}
}

func (x *_CheatStatusCRMapDB_1_map) Has(key protoreflect.MapKey) bool {
	if x.m == nil {
		return false
	}
	keyUnwrapped := key.String()
	concreteValue := keyUnwrapped
	_, ok := (*x.m)[concreteValue]
	return ok
}

func (x *_CheatStatusCRMapDB_1_map) Clear(key protoreflect.MapKey) {
	if x.m == nil {
		return
	}
	keyUnwrapped := key.String()
	concreteKey := keyUnwrapped
	delete(*x.m, concreteKey)
}

func (x *_CheatStatusCRMapDB_1_map) Get(key protoreflect.MapKey) protoreflect.Value {
	if x.m == nil {
		return protoreflect.Value{}
	}
	keyUnwrapped := key.String()
	concreteKey := keyUnwrapped
	v, ok := (*x.m)[concreteKey]
	if !ok {
		return protoreflect.Value{}
	}
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_CheatStatusCRMapDB_1_map) Set(key protoreflect.MapKey, value protoreflect.Value) {
	if !key.IsValid() || !value.IsValid() {
		panic("invalid key or value provided")
	}
	keyUnwrapped := key.String()
	concreteKey := keyUnwrapped
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*CheatStatusCRDB)
	(*x.m)[concreteKey] = concreteValue
}

func (x *_CheatStatusCRMapDB_1_map) Mutable(key protoreflect.MapKey) protoreflect.Value {
	keyUnwrapped := key.String()
	concreteKey := keyUnwrapped
	v, ok := (*x.m)[concreteKey]
	if ok {
		return protoreflect.ValueOfMessage(v.ProtoReflect())
	}
	newValue := new(CheatStatusCRDB)
	(*x.m)[concreteKey] = newValue
	return protoreflect.ValueOfMessage(newValue.ProtoReflect())
}

func (x *_CheatStatusCRMapDB_1_map) NewValue() protoreflect.Value {
	v := new(CheatStatusCRDB)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_CheatStatusCRMapDB_1_map) IsValid() bool {
	return x.m != nil
}

var (
	md_CheatStatusCRMapDB      protoreflect.MessageDescriptor
	fd_CheatStatusCRMapDB_data protoreflect.FieldDescriptor
)

func init() {
	file_enreach_workload_cheat_status_proto_init()
	md_CheatStatusCRMapDB = File_enreach_workload_cheat_status_proto.Messages().ByName("CheatStatusCRMapDB")
	fd_CheatStatusCRMapDB_data = md_CheatStatusCRMapDB.Fields().ByName("data")
}

var _ protoreflect.Message = (*fastReflection_CheatStatusCRMapDB)(nil)

type fastReflection_CheatStatusCRMapDB CheatStatusCRMapDB

func (x *CheatStatusCRMapDB) ProtoReflect() protoreflect.Message {
	return (*fastReflection_CheatStatusCRMapDB)(x)
}

func (x *CheatStatusCRMapDB) slowProtoReflect() protoreflect.Message {
	mi := &file_enreach_workload_cheat_status_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_CheatStatusCRMapDB_messageType fastReflection_CheatStatusCRMapDB_messageType
var _ protoreflect.MessageType = fastReflection_CheatStatusCRMapDB_messageType{}

type fastReflection_CheatStatusCRMapDB_messageType struct{}

func (x fastReflection_CheatStatusCRMapDB_messageType) Zero() protoreflect.Message {
	return (*fastReflection_CheatStatusCRMapDB)(nil)
}
func (x fastReflection_CheatStatusCRMapDB_messageType) New() protoreflect.Message {
	return new(fastReflection_CheatStatusCRMapDB)
}
func (x fastReflection_CheatStatusCRMapDB_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_CheatStatusCRMapDB
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_CheatStatusCRMapDB) Descriptor() protoreflect.MessageDescriptor {
	return md_CheatStatusCRMapDB
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_CheatStatusCRMapDB) Type() protoreflect.MessageType {
	return _fastReflection_CheatStatusCRMapDB_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_CheatStatusCRMapDB) New() protoreflect.Message {
	return new(fastReflection_CheatStatusCRMapDB)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_CheatStatusCRMapDB) Interface() protoreflect.ProtoMessage {
	return (*CheatStatusCRMapDB)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_CheatStatusCRMapDB) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.Data) != 0 {
		value := protoreflect.ValueOfMap(&_CheatStatusCRMapDB_1_map{m: &x.Data})
		if !f(fd_CheatStatusCRMapDB_data, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_CheatStatusCRMapDB) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "enreach.workload.CheatStatusCRMapDB.data":
		return len(x.Data) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: enreach.workload.CheatStatusCRMapDB"))
		}
		panic(fmt.Errorf("message enreach.workload.CheatStatusCRMapDB does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CheatStatusCRMapDB) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "enreach.workload.CheatStatusCRMapDB.data":
		x.Data = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: enreach.workload.CheatStatusCRMapDB"))
		}
		panic(fmt.Errorf("message enreach.workload.CheatStatusCRMapDB does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_CheatStatusCRMapDB) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "enreach.workload.CheatStatusCRMapDB.data":
		if len(x.Data) == 0 {
			return protoreflect.ValueOfMap(&_CheatStatusCRMapDB_1_map{})
		}
		mapValue := &_CheatStatusCRMapDB_1_map{m: &x.Data}
		return protoreflect.ValueOfMap(mapValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: enreach.workload.CheatStatusCRMapDB"))
		}
		panic(fmt.Errorf("message enreach.workload.CheatStatusCRMapDB does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CheatStatusCRMapDB) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "enreach.workload.CheatStatusCRMapDB.data":
		mv := value.Map()
		cmv := mv.(*_CheatStatusCRMapDB_1_map)
		x.Data = *cmv.m
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: enreach.workload.CheatStatusCRMapDB"))
		}
		panic(fmt.Errorf("message enreach.workload.CheatStatusCRMapDB does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CheatStatusCRMapDB) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "enreach.workload.CheatStatusCRMapDB.data":
		if x.Data == nil {
			x.Data = make(map[string]*CheatStatusCRDB)
		}
		value := &_CheatStatusCRMapDB_1_map{m: &x.Data}
		return protoreflect.ValueOfMap(value)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: enreach.workload.CheatStatusCRMapDB"))
		}
		panic(fmt.Errorf("message enreach.workload.CheatStatusCRMapDB does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_CheatStatusCRMapDB) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "enreach.workload.CheatStatusCRMapDB.data":
		m := make(map[string]*CheatStatusCRDB)
		return protoreflect.ValueOfMap(&_CheatStatusCRMapDB_1_map{m: &m})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: enreach.workload.CheatStatusCRMapDB"))
		}
		panic(fmt.Errorf("message enreach.workload.CheatStatusCRMapDB does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_CheatStatusCRMapDB) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in enreach.workload.CheatStatusCRMapDB", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_CheatStatusCRMapDB) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CheatStatusCRMapDB) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_CheatStatusCRMapDB) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_CheatStatusCRMapDB) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*CheatStatusCRMapDB)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if len(x.Data) > 0 {
			SiZeMaP := func(k string, v *CheatStatusCRDB) {
				l := 0
				if v != nil {
					l = options.Size(v)
				}
				l += 1 + runtime.Sov(uint64(l))
				mapEntrySize := 1 + len(k) + runtime.Sov(uint64(len(k))) + l
				n += mapEntrySize + 1 + runtime.Sov(uint64(mapEntrySize))
			}
			if options.Deterministic {
				sortme := make([]string, 0, len(x.Data))
				for k := range x.Data {
					sortme = append(sortme, k)
				}
				sort.Strings(sortme)
				for _, k := range sortme {
					v := x.Data[k]
					SiZeMaP(k, v)
				}
			} else {
				for k, v := range x.Data {
					SiZeMaP(k, v)
				}
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*CheatStatusCRMapDB)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Data) > 0 {
			MaRsHaLmAp := func(k string, v *CheatStatusCRDB) (protoiface.MarshalOutput, error) {
				baseI := i
				encoded, err := options.Marshal(v)
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x12
				i -= len(k)
				copy(dAtA[i:], k)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(k)))
				i--
				dAtA[i] = 0xa
				i = runtime.EncodeVarint(dAtA, i, uint64(baseI-i))
				i--
				dAtA[i] = 0xa
				return protoiface.MarshalOutput{}, nil
			}
			if options.Deterministic {
				keysForData := make([]string, 0, len(x.Data))
				for k := range x.Data {
					keysForData = append(keysForData, string(k))
				}
				sort.Slice(keysForData, func(i, j int) bool {
					return keysForData[i] < keysForData[j]
				})
				for iNdEx := len(keysForData) - 1; iNdEx >= 0; iNdEx-- {
					v := x.Data[string(keysForData[iNdEx])]
					out, err := MaRsHaLmAp(keysForData[iNdEx], v)
					if err != nil {
						return out, err
					}
				}
			} else {
				for k := range x.Data {
					v := x.Data[k]
					out, err := MaRsHaLmAp(k, v)
					if err != nil {
						return out, err
					}
				}
			}
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*CheatStatusCRMapDB)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CheatStatusCRMapDB: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CheatStatusCRMapDB: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Data == nil {
					x.Data = make(map[string]*CheatStatusCRDB)
				}
				var mapkey string
				var mapvalue *CheatStatusCRDB
				for iNdEx < postIndex {
					entryPreIndex := iNdEx
					var wire uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						wire |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					fieldNum := int32(wire >> 3)
					if fieldNum == 1 {
						var stringLenmapkey uint64
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							stringLenmapkey |= uint64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						intStringLenmapkey := int(stringLenmapkey)
						if intStringLenmapkey < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						postStringIndexmapkey := iNdEx + intStringLenmapkey
						if postStringIndexmapkey < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						if postStringIndexmapkey > l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
						iNdEx = postStringIndexmapkey
					} else if fieldNum == 2 {
						var mapmsglen int
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							mapmsglen |= int(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						if mapmsglen < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						postmsgIndex := iNdEx + mapmsglen
						if postmsgIndex < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						if postmsgIndex > l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						mapvalue = &CheatStatusCRDB{}
						if err := options.Unmarshal(dAtA[iNdEx:postmsgIndex], mapvalue); err != nil {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
						}
						iNdEx = postmsgIndex
					} else {
						iNdEx = entryPreIndex
						skippy, err := runtime.Skip(dAtA[iNdEx:])
						if err != nil {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
						}
						if (skippy < 0) || (iNdEx+skippy) < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						if (iNdEx + skippy) > postIndex {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						iNdEx += skippy
					}
				}
				x.Data[mapkey] = mapvalue
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.Map = (*_CheatStatusCRData_3_map)(nil)

type _CheatStatusCRData_3_map struct {
	m *map[string]*CheatStatusCRDB
}

func (x *_CheatStatusCRData_3_map) Len() int {
	if x.m == nil {
		return 0
	}
	return len(*x.m)
}

func (x *_CheatStatusCRData_3_map) Range(f func(protoreflect.MapKey, protoreflect.Value) bool) {
	if x.m == nil {
		return
	}
	for k, v := range *x.m {
		mapKey := (protoreflect.MapKey)(protoreflect.ValueOfString(k))
		mapValue := protoreflect.ValueOfMessage(v.ProtoReflect())
		if !f(mapKey, mapValue) {
			break
		}
	}
}

func (x *_CheatStatusCRData_3_map) Has(key protoreflect.MapKey) bool {
	if x.m == nil {
		return false
	}
	keyUnwrapped := key.String()
	concreteValue := keyUnwrapped
	_, ok := (*x.m)[concreteValue]
	return ok
}

func (x *_CheatStatusCRData_3_map) Clear(key protoreflect.MapKey) {
	if x.m == nil {
		return
	}
	keyUnwrapped := key.String()
	concreteKey := keyUnwrapped
	delete(*x.m, concreteKey)
}

func (x *_CheatStatusCRData_3_map) Get(key protoreflect.MapKey) protoreflect.Value {
	if x.m == nil {
		return protoreflect.Value{}
	}
	keyUnwrapped := key.String()
	concreteKey := keyUnwrapped
	v, ok := (*x.m)[concreteKey]
	if !ok {
		return protoreflect.Value{}
	}
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_CheatStatusCRData_3_map) Set(key protoreflect.MapKey, value protoreflect.Value) {
	if !key.IsValid() || !value.IsValid() {
		panic("invalid key or value provided")
	}
	keyUnwrapped := key.String()
	concreteKey := keyUnwrapped
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*CheatStatusCRDB)
	(*x.m)[concreteKey] = concreteValue
}

func (x *_CheatStatusCRData_3_map) Mutable(key protoreflect.MapKey) protoreflect.Value {
	keyUnwrapped := key.String()
	concreteKey := keyUnwrapped
	v, ok := (*x.m)[concreteKey]
	if ok {
		return protoreflect.ValueOfMessage(v.ProtoReflect())
	}
	newValue := new(CheatStatusCRDB)
	(*x.m)[concreteKey] = newValue
	return protoreflect.ValueOfMessage(newValue.ProtoReflect())
}

func (x *_CheatStatusCRData_3_map) NewValue() protoreflect.Value {
	v := new(CheatStatusCRDB)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_CheatStatusCRData_3_map) IsValid() bool {
	return x.m != nil
}

var (
	md_CheatStatusCRData        protoreflect.MessageDescriptor
	fd_CheatStatusCRData_era    protoreflect.FieldDescriptor
	fd_CheatStatusCRData_nodeID protoreflect.FieldDescriptor
	fd_CheatStatusCRData_data   protoreflect.FieldDescriptor
)

func init() {
	file_enreach_workload_cheat_status_proto_init()
	md_CheatStatusCRData = File_enreach_workload_cheat_status_proto.Messages().ByName("CheatStatusCRData")
	fd_CheatStatusCRData_era = md_CheatStatusCRData.Fields().ByName("era")
	fd_CheatStatusCRData_nodeID = md_CheatStatusCRData.Fields().ByName("nodeID")
	fd_CheatStatusCRData_data = md_CheatStatusCRData.Fields().ByName("data")
}

var _ protoreflect.Message = (*fastReflection_CheatStatusCRData)(nil)

type fastReflection_CheatStatusCRData CheatStatusCRData

func (x *CheatStatusCRData) ProtoReflect() protoreflect.Message {
	return (*fastReflection_CheatStatusCRData)(x)
}

func (x *CheatStatusCRData) slowProtoReflect() protoreflect.Message {
	mi := &file_enreach_workload_cheat_status_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_CheatStatusCRData_messageType fastReflection_CheatStatusCRData_messageType
var _ protoreflect.MessageType = fastReflection_CheatStatusCRData_messageType{}

type fastReflection_CheatStatusCRData_messageType struct{}

func (x fastReflection_CheatStatusCRData_messageType) Zero() protoreflect.Message {
	return (*fastReflection_CheatStatusCRData)(nil)
}
func (x fastReflection_CheatStatusCRData_messageType) New() protoreflect.Message {
	return new(fastReflection_CheatStatusCRData)
}
func (x fastReflection_CheatStatusCRData_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_CheatStatusCRData
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_CheatStatusCRData) Descriptor() protoreflect.MessageDescriptor {
	return md_CheatStatusCRData
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_CheatStatusCRData) Type() protoreflect.MessageType {
	return _fastReflection_CheatStatusCRData_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_CheatStatusCRData) New() protoreflect.Message {
	return new(fastReflection_CheatStatusCRData)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_CheatStatusCRData) Interface() protoreflect.ProtoMessage {
	return (*CheatStatusCRData)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_CheatStatusCRData) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Era != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Era)
		if !f(fd_CheatStatusCRData_era, value) {
			return
		}
	}
	if x.NodeID != "" {
		value := protoreflect.ValueOfString(x.NodeID)
		if !f(fd_CheatStatusCRData_nodeID, value) {
			return
		}
	}
	if len(x.Data) != 0 {
		value := protoreflect.ValueOfMap(&_CheatStatusCRData_3_map{m: &x.Data})
		if !f(fd_CheatStatusCRData_data, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_CheatStatusCRData) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "enreach.workload.CheatStatusCRData.era":
		return x.Era != uint64(0)
	case "enreach.workload.CheatStatusCRData.nodeID":
		return x.NodeID != ""
	case "enreach.workload.CheatStatusCRData.data":
		return len(x.Data) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: enreach.workload.CheatStatusCRData"))
		}
		panic(fmt.Errorf("message enreach.workload.CheatStatusCRData does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CheatStatusCRData) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "enreach.workload.CheatStatusCRData.era":
		x.Era = uint64(0)
	case "enreach.workload.CheatStatusCRData.nodeID":
		x.NodeID = ""
	case "enreach.workload.CheatStatusCRData.data":
		x.Data = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: enreach.workload.CheatStatusCRData"))
		}
		panic(fmt.Errorf("message enreach.workload.CheatStatusCRData does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_CheatStatusCRData) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "enreach.workload.CheatStatusCRData.era":
		value := x.Era
		return protoreflect.ValueOfUint64(value)
	case "enreach.workload.CheatStatusCRData.nodeID":
		value := x.NodeID
		return protoreflect.ValueOfString(value)
	case "enreach.workload.CheatStatusCRData.data":
		if len(x.Data) == 0 {
			return protoreflect.ValueOfMap(&_CheatStatusCRData_3_map{})
		}
		mapValue := &_CheatStatusCRData_3_map{m: &x.Data}
		return protoreflect.ValueOfMap(mapValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: enreach.workload.CheatStatusCRData"))
		}
		panic(fmt.Errorf("message enreach.workload.CheatStatusCRData does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CheatStatusCRData) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "enreach.workload.CheatStatusCRData.era":
		x.Era = value.Uint()
	case "enreach.workload.CheatStatusCRData.nodeID":
		x.NodeID = value.Interface().(string)
	case "enreach.workload.CheatStatusCRData.data":
		mv := value.Map()
		cmv := mv.(*_CheatStatusCRData_3_map)
		x.Data = *cmv.m
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: enreach.workload.CheatStatusCRData"))
		}
		panic(fmt.Errorf("message enreach.workload.CheatStatusCRData does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CheatStatusCRData) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "enreach.workload.CheatStatusCRData.data":
		if x.Data == nil {
			x.Data = make(map[string]*CheatStatusCRDB)
		}
		value := &_CheatStatusCRData_3_map{m: &x.Data}
		return protoreflect.ValueOfMap(value)
	case "enreach.workload.CheatStatusCRData.era":
		panic(fmt.Errorf("field era of message enreach.workload.CheatStatusCRData is not mutable"))
	case "enreach.workload.CheatStatusCRData.nodeID":
		panic(fmt.Errorf("field nodeID of message enreach.workload.CheatStatusCRData is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: enreach.workload.CheatStatusCRData"))
		}
		panic(fmt.Errorf("message enreach.workload.CheatStatusCRData does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_CheatStatusCRData) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "enreach.workload.CheatStatusCRData.era":
		return protoreflect.ValueOfUint64(uint64(0))
	case "enreach.workload.CheatStatusCRData.nodeID":
		return protoreflect.ValueOfString("")
	case "enreach.workload.CheatStatusCRData.data":
		m := make(map[string]*CheatStatusCRDB)
		return protoreflect.ValueOfMap(&_CheatStatusCRData_3_map{m: &m})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: enreach.workload.CheatStatusCRData"))
		}
		panic(fmt.Errorf("message enreach.workload.CheatStatusCRData does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_CheatStatusCRData) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in enreach.workload.CheatStatusCRData", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_CheatStatusCRData) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CheatStatusCRData) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_CheatStatusCRData) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_CheatStatusCRData) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*CheatStatusCRData)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Era != 0 {
			n += 1 + runtime.Sov(uint64(x.Era))
		}
		l = len(x.NodeID)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.Data) > 0 {
			SiZeMaP := func(k string, v *CheatStatusCRDB) {
				l := 0
				if v != nil {
					l = options.Size(v)
				}
				l += 1 + runtime.Sov(uint64(l))
				mapEntrySize := 1 + len(k) + runtime.Sov(uint64(len(k))) + l
				n += mapEntrySize + 1 + runtime.Sov(uint64(mapEntrySize))
			}
			if options.Deterministic {
				sortme := make([]string, 0, len(x.Data))
				for k := range x.Data {
					sortme = append(sortme, k)
				}
				sort.Strings(sortme)
				for _, k := range sortme {
					v := x.Data[k]
					SiZeMaP(k, v)
				}
			} else {
				for k, v := range x.Data {
					SiZeMaP(k, v)
				}
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*CheatStatusCRData)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Data) > 0 {
			MaRsHaLmAp := func(k string, v *CheatStatusCRDB) (protoiface.MarshalOutput, error) {
				baseI := i
				encoded, err := options.Marshal(v)
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x12
				i -= len(k)
				copy(dAtA[i:], k)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(k)))
				i--
				dAtA[i] = 0xa
				i = runtime.EncodeVarint(dAtA, i, uint64(baseI-i))
				i--
				dAtA[i] = 0x1a
				return protoiface.MarshalOutput{}, nil
			}
			if options.Deterministic {
				keysForData := make([]string, 0, len(x.Data))
				for k := range x.Data {
					keysForData = append(keysForData, string(k))
				}
				sort.Slice(keysForData, func(i, j int) bool {
					return keysForData[i] < keysForData[j]
				})
				for iNdEx := len(keysForData) - 1; iNdEx >= 0; iNdEx-- {
					v := x.Data[string(keysForData[iNdEx])]
					out, err := MaRsHaLmAp(keysForData[iNdEx], v)
					if err != nil {
						return out, err
					}
				}
			} else {
				for k := range x.Data {
					v := x.Data[k]
					out, err := MaRsHaLmAp(k, v)
					if err != nil {
						return out, err
					}
				}
			}
		}
		if len(x.NodeID) > 0 {
			i -= len(x.NodeID)
			copy(dAtA[i:], x.NodeID)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.NodeID)))
			i--
			dAtA[i] = 0x12
		}
		if x.Era != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Era))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*CheatStatusCRData)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CheatStatusCRData: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CheatStatusCRData: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Era", wireType)
				}
				x.Era = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Era |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.NodeID = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Data == nil {
					x.Data = make(map[string]*CheatStatusCRDB)
				}
				var mapkey string
				var mapvalue *CheatStatusCRDB
				for iNdEx < postIndex {
					entryPreIndex := iNdEx
					var wire uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						wire |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					fieldNum := int32(wire >> 3)
					if fieldNum == 1 {
						var stringLenmapkey uint64
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							stringLenmapkey |= uint64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						intStringLenmapkey := int(stringLenmapkey)
						if intStringLenmapkey < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						postStringIndexmapkey := iNdEx + intStringLenmapkey
						if postStringIndexmapkey < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						if postStringIndexmapkey > l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
						iNdEx = postStringIndexmapkey
					} else if fieldNum == 2 {
						var mapmsglen int
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							mapmsglen |= int(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						if mapmsglen < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						postmsgIndex := iNdEx + mapmsglen
						if postmsgIndex < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						if postmsgIndex > l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						mapvalue = &CheatStatusCRDB{}
						if err := options.Unmarshal(dAtA[iNdEx:postmsgIndex], mapvalue); err != nil {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
						}
						iNdEx = postmsgIndex
					} else {
						iNdEx = entryPreIndex
						skippy, err := runtime.Skip(dAtA[iNdEx:])
						if err != nil {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
						}
						if (skippy < 0) || (iNdEx+skippy) < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						if (iNdEx + skippy) > postIndex {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						iNdEx += skippy
					}
				}
				x.Data[mapkey] = mapvalue
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_EraCheatStatusProcessData                     protoreflect.MessageDescriptor
	fd_EraCheatStatusProcessData_era                 protoreflect.FieldDescriptor
	fd_EraCheatStatusProcessData_totalNodesCount     protoreflect.FieldDescriptor
	fd_EraCheatStatusProcessData_processedNodesCount protoreflect.FieldDescriptor
	fd_EraCheatStatusProcessData_startAt             protoreflect.FieldDescriptor
	fd_EraCheatStatusProcessData_updateAt            protoreflect.FieldDescriptor
	fd_EraCheatStatusProcessData_status              protoreflect.FieldDescriptor
	fd_EraCheatStatusProcessData_pagination          protoreflect.FieldDescriptor
)

func init() {
	file_enreach_workload_cheat_status_proto_init()
	md_EraCheatStatusProcessData = File_enreach_workload_cheat_status_proto.Messages().ByName("EraCheatStatusProcessData")
	fd_EraCheatStatusProcessData_era = md_EraCheatStatusProcessData.Fields().ByName("era")
	fd_EraCheatStatusProcessData_totalNodesCount = md_EraCheatStatusProcessData.Fields().ByName("totalNodesCount")
	fd_EraCheatStatusProcessData_processedNodesCount = md_EraCheatStatusProcessData.Fields().ByName("processedNodesCount")
	fd_EraCheatStatusProcessData_startAt = md_EraCheatStatusProcessData.Fields().ByName("startAt")
	fd_EraCheatStatusProcessData_updateAt = md_EraCheatStatusProcessData.Fields().ByName("updateAt")
	fd_EraCheatStatusProcessData_status = md_EraCheatStatusProcessData.Fields().ByName("status")
	fd_EraCheatStatusProcessData_pagination = md_EraCheatStatusProcessData.Fields().ByName("pagination")
}

var _ protoreflect.Message = (*fastReflection_EraCheatStatusProcessData)(nil)

type fastReflection_EraCheatStatusProcessData EraCheatStatusProcessData

func (x *EraCheatStatusProcessData) ProtoReflect() protoreflect.Message {
	return (*fastReflection_EraCheatStatusProcessData)(x)
}

func (x *EraCheatStatusProcessData) slowProtoReflect() protoreflect.Message {
	mi := &file_enreach_workload_cheat_status_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_EraCheatStatusProcessData_messageType fastReflection_EraCheatStatusProcessData_messageType
var _ protoreflect.MessageType = fastReflection_EraCheatStatusProcessData_messageType{}

type fastReflection_EraCheatStatusProcessData_messageType struct{}

func (x fastReflection_EraCheatStatusProcessData_messageType) Zero() protoreflect.Message {
	return (*fastReflection_EraCheatStatusProcessData)(nil)
}
func (x fastReflection_EraCheatStatusProcessData_messageType) New() protoreflect.Message {
	return new(fastReflection_EraCheatStatusProcessData)
}
func (x fastReflection_EraCheatStatusProcessData_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_EraCheatStatusProcessData
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_EraCheatStatusProcessData) Descriptor() protoreflect.MessageDescriptor {
	return md_EraCheatStatusProcessData
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_EraCheatStatusProcessData) Type() protoreflect.MessageType {
	return _fastReflection_EraCheatStatusProcessData_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_EraCheatStatusProcessData) New() protoreflect.Message {
	return new(fastReflection_EraCheatStatusProcessData)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_EraCheatStatusProcessData) Interface() protoreflect.ProtoMessage {
	return (*EraCheatStatusProcessData)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_EraCheatStatusProcessData) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Era != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Era)
		if !f(fd_EraCheatStatusProcessData_era, value) {
			return
		}
	}
	if x.TotalNodesCount != uint64(0) {
		value := protoreflect.ValueOfUint64(x.TotalNodesCount)
		if !f(fd_EraCheatStatusProcessData_totalNodesCount, value) {
			return
		}
	}
	if x.ProcessedNodesCount != uint64(0) {
		value := protoreflect.ValueOfUint64(x.ProcessedNodesCount)
		if !f(fd_EraCheatStatusProcessData_processedNodesCount, value) {
			return
		}
	}
	if x.StartAt != uint64(0) {
		value := protoreflect.ValueOfUint64(x.StartAt)
		if !f(fd_EraCheatStatusProcessData_startAt, value) {
			return
		}
	}
	if x.UpdateAt != uint64(0) {
		value := protoreflect.ValueOfUint64(x.UpdateAt)
		if !f(fd_EraCheatStatusProcessData_updateAt, value) {
			return
		}
	}
	if x.Status != "" {
		value := protoreflect.ValueOfString(x.Status)
		if !f(fd_EraCheatStatusProcessData_status, value) {
			return
		}
	}
	if x.Pagination != nil {
		value := protoreflect.ValueOfMessage(x.Pagination.ProtoReflect())
		if !f(fd_EraCheatStatusProcessData_pagination, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_EraCheatStatusProcessData) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "enreach.workload.EraCheatStatusProcessData.era":
		return x.Era != uint64(0)
	case "enreach.workload.EraCheatStatusProcessData.totalNodesCount":
		return x.TotalNodesCount != uint64(0)
	case "enreach.workload.EraCheatStatusProcessData.processedNodesCount":
		return x.ProcessedNodesCount != uint64(0)
	case "enreach.workload.EraCheatStatusProcessData.startAt":
		return x.StartAt != uint64(0)
	case "enreach.workload.EraCheatStatusProcessData.updateAt":
		return x.UpdateAt != uint64(0)
	case "enreach.workload.EraCheatStatusProcessData.status":
		return x.Status != ""
	case "enreach.workload.EraCheatStatusProcessData.pagination":
		return x.Pagination != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: enreach.workload.EraCheatStatusProcessData"))
		}
		panic(fmt.Errorf("message enreach.workload.EraCheatStatusProcessData does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EraCheatStatusProcessData) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "enreach.workload.EraCheatStatusProcessData.era":
		x.Era = uint64(0)
	case "enreach.workload.EraCheatStatusProcessData.totalNodesCount":
		x.TotalNodesCount = uint64(0)
	case "enreach.workload.EraCheatStatusProcessData.processedNodesCount":
		x.ProcessedNodesCount = uint64(0)
	case "enreach.workload.EraCheatStatusProcessData.startAt":
		x.StartAt = uint64(0)
	case "enreach.workload.EraCheatStatusProcessData.updateAt":
		x.UpdateAt = uint64(0)
	case "enreach.workload.EraCheatStatusProcessData.status":
		x.Status = ""
	case "enreach.workload.EraCheatStatusProcessData.pagination":
		x.Pagination = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: enreach.workload.EraCheatStatusProcessData"))
		}
		panic(fmt.Errorf("message enreach.workload.EraCheatStatusProcessData does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_EraCheatStatusProcessData) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "enreach.workload.EraCheatStatusProcessData.era":
		value := x.Era
		return protoreflect.ValueOfUint64(value)
	case "enreach.workload.EraCheatStatusProcessData.totalNodesCount":
		value := x.TotalNodesCount
		return protoreflect.ValueOfUint64(value)
	case "enreach.workload.EraCheatStatusProcessData.processedNodesCount":
		value := x.ProcessedNodesCount
		return protoreflect.ValueOfUint64(value)
	case "enreach.workload.EraCheatStatusProcessData.startAt":
		value := x.StartAt
		return protoreflect.ValueOfUint64(value)
	case "enreach.workload.EraCheatStatusProcessData.updateAt":
		value := x.UpdateAt
		return protoreflect.ValueOfUint64(value)
	case "enreach.workload.EraCheatStatusProcessData.status":
		value := x.Status
		return protoreflect.ValueOfString(value)
	case "enreach.workload.EraCheatStatusProcessData.pagination":
		value := x.Pagination
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: enreach.workload.EraCheatStatusProcessData"))
		}
		panic(fmt.Errorf("message enreach.workload.EraCheatStatusProcessData does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EraCheatStatusProcessData) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "enreach.workload.EraCheatStatusProcessData.era":
		x.Era = value.Uint()
	case "enreach.workload.EraCheatStatusProcessData.totalNodesCount":
		x.TotalNodesCount = value.Uint()
	case "enreach.workload.EraCheatStatusProcessData.processedNodesCount":
		x.ProcessedNodesCount = value.Uint()
	case "enreach.workload.EraCheatStatusProcessData.startAt":
		x.StartAt = value.Uint()
	case "enreach.workload.EraCheatStatusProcessData.updateAt":
		x.UpdateAt = value.Uint()
	case "enreach.workload.EraCheatStatusProcessData.status":
		x.Status = value.Interface().(string)
	case "enreach.workload.EraCheatStatusProcessData.pagination":
		x.Pagination = value.Message().Interface().(*v1beta1.PageResponse)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: enreach.workload.EraCheatStatusProcessData"))
		}
		panic(fmt.Errorf("message enreach.workload.EraCheatStatusProcessData does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EraCheatStatusProcessData) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "enreach.workload.EraCheatStatusProcessData.pagination":
		if x.Pagination == nil {
			x.Pagination = new(v1beta1.PageResponse)
		}
		return protoreflect.ValueOfMessage(x.Pagination.ProtoReflect())
	case "enreach.workload.EraCheatStatusProcessData.era":
		panic(fmt.Errorf("field era of message enreach.workload.EraCheatStatusProcessData is not mutable"))
	case "enreach.workload.EraCheatStatusProcessData.totalNodesCount":
		panic(fmt.Errorf("field totalNodesCount of message enreach.workload.EraCheatStatusProcessData is not mutable"))
	case "enreach.workload.EraCheatStatusProcessData.processedNodesCount":
		panic(fmt.Errorf("field processedNodesCount of message enreach.workload.EraCheatStatusProcessData is not mutable"))
	case "enreach.workload.EraCheatStatusProcessData.startAt":
		panic(fmt.Errorf("field startAt of message enreach.workload.EraCheatStatusProcessData is not mutable"))
	case "enreach.workload.EraCheatStatusProcessData.updateAt":
		panic(fmt.Errorf("field updateAt of message enreach.workload.EraCheatStatusProcessData is not mutable"))
	case "enreach.workload.EraCheatStatusProcessData.status":
		panic(fmt.Errorf("field status of message enreach.workload.EraCheatStatusProcessData is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: enreach.workload.EraCheatStatusProcessData"))
		}
		panic(fmt.Errorf("message enreach.workload.EraCheatStatusProcessData does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_EraCheatStatusProcessData) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "enreach.workload.EraCheatStatusProcessData.era":
		return protoreflect.ValueOfUint64(uint64(0))
	case "enreach.workload.EraCheatStatusProcessData.totalNodesCount":
		return protoreflect.ValueOfUint64(uint64(0))
	case "enreach.workload.EraCheatStatusProcessData.processedNodesCount":
		return protoreflect.ValueOfUint64(uint64(0))
	case "enreach.workload.EraCheatStatusProcessData.startAt":
		return protoreflect.ValueOfUint64(uint64(0))
	case "enreach.workload.EraCheatStatusProcessData.updateAt":
		return protoreflect.ValueOfUint64(uint64(0))
	case "enreach.workload.EraCheatStatusProcessData.status":
		return protoreflect.ValueOfString("")
	case "enreach.workload.EraCheatStatusProcessData.pagination":
		m := new(v1beta1.PageResponse)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: enreach.workload.EraCheatStatusProcessData"))
		}
		panic(fmt.Errorf("message enreach.workload.EraCheatStatusProcessData does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_EraCheatStatusProcessData) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in enreach.workload.EraCheatStatusProcessData", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_EraCheatStatusProcessData) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EraCheatStatusProcessData) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_EraCheatStatusProcessData) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_EraCheatStatusProcessData) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*EraCheatStatusProcessData)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Era != 0 {
			n += 1 + runtime.Sov(uint64(x.Era))
		}
		if x.TotalNodesCount != 0 {
			n += 1 + runtime.Sov(uint64(x.TotalNodesCount))
		}
		if x.ProcessedNodesCount != 0 {
			n += 1 + runtime.Sov(uint64(x.ProcessedNodesCount))
		}
		if x.StartAt != 0 {
			n += 1 + runtime.Sov(uint64(x.StartAt))
		}
		if x.UpdateAt != 0 {
			n += 1 + runtime.Sov(uint64(x.UpdateAt))
		}
		l = len(x.Status)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Pagination != nil {
			l = options.Size(x.Pagination)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*EraCheatStatusProcessData)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Pagination != nil {
			encoded, err := options.Marshal(x.Pagination)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x3a
		}
		if len(x.Status) > 0 {
			i -= len(x.Status)
			copy(dAtA[i:], x.Status)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Status)))
			i--
			dAtA[i] = 0x32
		}
		if x.UpdateAt != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.UpdateAt))
			i--
			dAtA[i] = 0x28
		}
		if x.StartAt != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.StartAt))
			i--
			dAtA[i] = 0x20
		}
		if x.ProcessedNodesCount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ProcessedNodesCount))
			i--
			dAtA[i] = 0x18
		}
		if x.TotalNodesCount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TotalNodesCount))
			i--
			dAtA[i] = 0x10
		}
		if x.Era != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Era))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*EraCheatStatusProcessData)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EraCheatStatusProcessData: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EraCheatStatusProcessData: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Era", wireType)
				}
				x.Era = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Era |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalNodesCount", wireType)
				}
				x.TotalNodesCount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TotalNodesCount |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ProcessedNodesCount", wireType)
				}
				x.ProcessedNodesCount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ProcessedNodesCount |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field StartAt", wireType)
				}
				x.StartAt = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.StartAt |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field UpdateAt", wireType)
				}
				x.UpdateAt = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.UpdateAt |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Status = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Pagination == nil {
					x.Pagination = &v1beta1.PageResponse{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Pagination); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: enreach/workload/cheat_status.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CR -> Change Request
type CheatStatusCR struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeID      string `protobuf:"bytes,1,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	CheatStatus string `protobuf:"bytes,2,opt,name=cheatStatus,proto3" json:"cheatStatus,omitempty"`
}

func (x *CheatStatusCR) Reset() {
	*x = CheatStatusCR{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enreach_workload_cheat_status_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheatStatusCR) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheatStatusCR) ProtoMessage() {}

// Deprecated: Use CheatStatusCR.ProtoReflect.Descriptor instead.
func (*CheatStatusCR) Descriptor() ([]byte, []int) {
	return file_enreach_workload_cheat_status_proto_rawDescGZIP(), []int{0}
}

func (x *CheatStatusCR) GetNodeID() string {
	if x != nil {
		return x.NodeID
	}
	return ""
}

func (x *CheatStatusCR) GetCheatStatus() string {
	if x != nil {
		return x.CheatStatus
	}
	return ""
}

type CheatStatusCRDB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CheatStatus string `protobuf:"bytes,1,opt,name=cheatStatus,proto3" json:"cheatStatus,omitempty"`
	CreateAt    uint64 `protobuf:"varint,2,opt,name=createAt,proto3" json:"createAt,omitempty"`
	UpdateAt    uint64 `protobuf:"varint,3,opt,name=updateAt,proto3" json:"updateAt,omitempty"`
}

func (x *CheatStatusCRDB) Reset() {
	*x = CheatStatusCRDB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enreach_workload_cheat_status_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheatStatusCRDB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheatStatusCRDB) ProtoMessage() {}

// Deprecated: Use CheatStatusCRDB.ProtoReflect.Descriptor instead.
func (*CheatStatusCRDB) Descriptor() ([]byte, []int) {
	return file_enreach_workload_cheat_status_proto_rawDescGZIP(), []int{1}
}

func (x *CheatStatusCRDB) GetCheatStatus() string {
	if x != nil {
		return x.CheatStatus
	}
	return ""
}

func (x *CheatStatusCRDB) GetCreateAt() uint64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *CheatStatusCRDB) GetUpdateAt() uint64 {
	if x != nil {
		return x.UpdateAt
	}
	return 0
}

type CheatStatusCRMapDB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data map[string]*CheatStatusCRDB `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // manager_account => cheating status
}

func (x *CheatStatusCRMapDB) Reset() {
	*x = CheatStatusCRMapDB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enreach_workload_cheat_status_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheatStatusCRMapDB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheatStatusCRMapDB) ProtoMessage() {}

// Deprecated: Use CheatStatusCRMapDB.ProtoReflect.Descriptor instead.
func (*CheatStatusCRMapDB) Descriptor() ([]byte, []int) {
	return file_enreach_workload_cheat_status_proto_rawDescGZIP(), []int{2}
}

func (x *CheatStatusCRMapDB) GetData() map[string]*CheatStatusCRDB {
	if x != nil {
		return x.Data
	}
	return nil
}

type CheatStatusCRData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Era    uint64                      `protobuf:"varint,1,opt,name=era,proto3" json:"era,omitempty"`
	NodeID string                      `protobuf:"bytes,2,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	Data   map[string]*CheatStatusCRDB `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CheatStatusCRData) Reset() {
	*x = CheatStatusCRData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enreach_workload_cheat_status_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheatStatusCRData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheatStatusCRData) ProtoMessage() {}

// Deprecated: Use CheatStatusCRData.ProtoReflect.Descriptor instead.
func (*CheatStatusCRData) Descriptor() ([]byte, []int) {
	return file_enreach_workload_cheat_status_proto_rawDescGZIP(), []int{3}
}

func (x *CheatStatusCRData) GetEra() uint64 {
	if x != nil {
		return x.Era
	}
	return 0
}

func (x *CheatStatusCRData) GetNodeID() string {
	if x != nil {
		return x.NodeID
	}
	return ""
}

func (x *CheatStatusCRData) GetData() map[string]*CheatStatusCRDB {
	if x != nil {
		return x.Data
	}
	return nil
}

type EraCheatStatusProcessData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Era                 uint64                `protobuf:"varint,1,opt,name=era,proto3" json:"era,omitempty"`
	TotalNodesCount     uint64                `protobuf:"varint,2,opt,name=totalNodesCount,proto3" json:"totalNodesCount,omitempty"`         // total nodes count need to be processed
	ProcessedNodesCount uint64                `protobuf:"varint,3,opt,name=processedNodesCount,proto3" json:"processedNodesCount,omitempty"` // accumulated processed nodes count
	StartAt             uint64                `protobuf:"varint,4,opt,name=startAt,proto3" json:"startAt,omitempty"`
	UpdateAt            uint64                `protobuf:"varint,5,opt,name=updateAt,proto3" json:"updateAt,omitempty"`
	Status              string                `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	Pagination          *v1beta1.PageResponse `protobuf:"bytes,7,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *EraCheatStatusProcessData) Reset() {
	*x = EraCheatStatusProcessData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_enreach_workload_cheat_status_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EraCheatStatusProcessData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EraCheatStatusProcessData) ProtoMessage() {}

// Deprecated: Use EraCheatStatusProcessData.ProtoReflect.Descriptor instead.
func (*EraCheatStatusProcessData) Descriptor() ([]byte, []int) {
	return file_enreach_workload_cheat_status_proto_rawDescGZIP(), []int{4}
}

func (x *EraCheatStatusProcessData) GetEra() uint64 {
	if x != nil {
		return x.Era
	}
	return 0
}

func (x *EraCheatStatusProcessData) GetTotalNodesCount() uint64 {
	if x != nil {
		return x.TotalNodesCount
	}
	return 0
}

func (x *EraCheatStatusProcessData) GetProcessedNodesCount() uint64 {
	if x != nil {
		return x.ProcessedNodesCount
	}
	return 0
}

func (x *EraCheatStatusProcessData) GetStartAt() uint64 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *EraCheatStatusProcessData) GetUpdateAt() uint64 {
	if x != nil {
		return x.UpdateAt
	}
	return 0
}

func (x *EraCheatStatusProcessData) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *EraCheatStatusProcessData) GetPagination() *v1beta1.PageResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

var File_enreach_workload_cheat_status_proto protoreflect.FileDescriptor

var file_enreach_workload_cheat_status_proto_rawDesc = []byte{
	0x0a, 0x23, 0x65, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x2f, 0x63, 0x68, 0x65, 0x61, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x65, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x2a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f,
	0x62, 0x61, 0x73, 0x65, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x49, 0x0a, 0x0d, 0x43, 0x68, 0x65, 0x61, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x52, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x68, 0x65, 0x61, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x68, 0x65, 0x61, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x6b,
	0x0a, 0x0f, 0x43, 0x68, 0x65, 0x61, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x52, 0x44,
	0x42, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x65, 0x61, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x65, 0x61, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x22, 0xb4, 0x01, 0x0a, 0x12,
	0x43, 0x68, 0x65, 0x61, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x52, 0x4d, 0x61, 0x70,
	0x44, 0x42, 0x12, 0x42, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x65, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x2e, 0x43, 0x68, 0x65, 0x61, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x52, 0x4d, 0x61, 0x70, 0x44, 0x42, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x5a, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x43, 0x68, 0x65, 0x61, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x52, 0x44, 0x42, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xdc, 0x01, 0x0a, 0x11, 0x43, 0x68, 0x65, 0x61, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x52, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x65, 0x72, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f,
	0x64, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x44, 0x12, 0x41, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x65, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x2e, 0x43, 0x68, 0x65, 0x61, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x52, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x5a, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x43, 0x68, 0x65, 0x61, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x52, 0x44, 0x42, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xa0, 0x02, 0x0a, 0x19, 0x45, 0x72, 0x61, 0x43, 0x68, 0x65, 0x61, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x10, 0x0a, 0x03, 0x65, 0x72, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x65, 0x72,
	0x61, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x47, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0xac, 0x01, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6e, 0x72,
	0x65, 0x61, 0x63, 0x68, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x10, 0x43,
	0x68, 0x65, 0x61, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x21, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x65, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x2f, 0x77, 0x6f, 0x72, 0x6b,
	0x6c, 0x6f, 0x61, 0x64, 0xa2, 0x02, 0x03, 0x45, 0x57, 0x58, 0xaa, 0x02, 0x10, 0x45, 0x6e, 0x72,
	0x65, 0x61, 0x63, 0x68, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0xca, 0x02, 0x10,
	0x45, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x5c, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64,
	0xe2, 0x02, 0x1c, 0x45, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x5c, 0x57, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x11, 0x45, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x3a, 0x3a, 0x57, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_enreach_workload_cheat_status_proto_rawDescOnce sync.Once
	file_enreach_workload_cheat_status_proto_rawDescData = file_enreach_workload_cheat_status_proto_rawDesc
)

func file_enreach_workload_cheat_status_proto_rawDescGZIP() []byte {
	file_enreach_workload_cheat_status_proto_rawDescOnce.Do(func() {
		file_enreach_workload_cheat_status_proto_rawDescData = protoimpl.X.CompressGZIP(file_enreach_workload_cheat_status_proto_rawDescData)
	})
	return file_enreach_workload_cheat_status_proto_rawDescData
}

var file_enreach_workload_cheat_status_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_enreach_workload_cheat_status_proto_goTypes = []interface{}{
	(*CheatStatusCR)(nil),             // 0: enreach.workload.CheatStatusCR
	(*CheatStatusCRDB)(nil),           // 1: enreach.workload.CheatStatusCRDB
	(*CheatStatusCRMapDB)(nil),        // 2: enreach.workload.CheatStatusCRMapDB
	(*CheatStatusCRData)(nil),         // 3: enreach.workload.CheatStatusCRData
	(*EraCheatStatusProcessData)(nil), // 4: enreach.workload.EraCheatStatusProcessData
	nil,                               // 5: enreach.workload.CheatStatusCRMapDB.DataEntry
	nil,                               // 6: enreach.workload.CheatStatusCRData.DataEntry
	(*v1beta1.PageResponse)(nil),      // 7: cosmos.base.query.v1beta1.PageResponse
}
var file_enreach_workload_cheat_status_proto_depIdxs = []int32{
	5, // 0: enreach.workload.CheatStatusCRMapDB.data:type_name -> enreach.workload.CheatStatusCRMapDB.DataEntry
	6, // 1: enreach.workload.CheatStatusCRData.data:type_name -> enreach.workload.CheatStatusCRData.DataEntry
	7, // 2: enreach.workload.EraCheatStatusProcessData.pagination:type_name -> cosmos.base.query.v1beta1.PageResponse
	1, // 3: enreach.workload.CheatStatusCRMapDB.DataEntry.value:type_name -> enreach.workload.CheatStatusCRDB
	1, // 4: enreach.workload.CheatStatusCRData.DataEntry.value:type_name -> enreach.workload.CheatStatusCRDB
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_enreach_workload_cheat_status_proto_init() }
func file_enreach_workload_cheat_status_proto_init() {
	if File_enreach_workload_cheat_status_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_enreach_workload_cheat_status_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheatStatusCR); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enreach_workload_cheat_status_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheatStatusCRDB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enreach_workload_cheat_status_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheatStatusCRMapDB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enreach_workload_cheat_status_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheatStatusCRData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_enreach_workload_cheat_status_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EraCheatStatusProcessData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_enreach_workload_cheat_status_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_enreach_workload_cheat_status_proto_goTypes,
		DependencyIndexes: file_enreach_workload_cheat_status_proto_depIdxs,
		MessageInfos:      file_enreach_workload_cheat_status_proto_msgTypes,
	}.Build()
	File_enreach_workload_cheat_status_proto = out.File
	file_enreach_workload_cheat_status_proto_rawDesc = nil
	file_enreach_workload_cheat_status_proto_goTypes = nil
	file_enreach_workload_cheat_status_proto_depIdxs = nil
}
