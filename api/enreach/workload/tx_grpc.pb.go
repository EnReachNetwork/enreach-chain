// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: enreach/workload/tx.proto

package workload

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_UpdateParam_FullMethodName                     = "/enreach.workload.Msg/UpdateParam"
	Msg_SubmitWorkreports_FullMethodName               = "/enreach.workload.Msg/SubmitWorkreports"
	Msg_CreateSuperior_FullMethodName                  = "/enreach.workload.Msg/CreateSuperior"
	Msg_UpdateSuperior_FullMethodName                  = "/enreach.workload.Msg/UpdateSuperior"
	Msg_SubmitReputationPointChangeData_FullMethodName = "/enreach.workload.Msg/SubmitReputationPointChangeData"
	Msg_SubmitCheatStatusCR_FullMethodName             = "/enreach.workload.Msg/SubmitCheatStatusCR"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParam(ctx context.Context, in *MsgUpdateParam, opts ...grpc.CallOption) (*MsgUpdateParamResponse, error)
	SubmitWorkreports(ctx context.Context, in *MsgSubmitWorkreports, opts ...grpc.CallOption) (*MsgSubmitWorkreportsResponse, error)
	CreateSuperior(ctx context.Context, in *MsgCreateSuperior, opts ...grpc.CallOption) (*MsgCreateSuperiorResponse, error)
	UpdateSuperior(ctx context.Context, in *MsgUpdateSuperior, opts ...grpc.CallOption) (*MsgUpdateSuperiorResponse, error)
	SubmitReputationPointChangeData(ctx context.Context, in *MsgSubmitReputationPointChangeData, opts ...grpc.CallOption) (*MsgSubmitReputationPointChangeDataResponse, error)
	SubmitCheatStatusCR(ctx context.Context, in *MsgSubmitCheatStatusCR, opts ...grpc.CallOption) (*MsgSubmitCheatStatusCRResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParam(ctx context.Context, in *MsgUpdateParam, opts ...grpc.CallOption) (*MsgUpdateParamResponse, error) {
	out := new(MsgUpdateParamResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateParam_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitWorkreports(ctx context.Context, in *MsgSubmitWorkreports, opts ...grpc.CallOption) (*MsgSubmitWorkreportsResponse, error) {
	out := new(MsgSubmitWorkreportsResponse)
	err := c.cc.Invoke(ctx, Msg_SubmitWorkreports_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateSuperior(ctx context.Context, in *MsgCreateSuperior, opts ...grpc.CallOption) (*MsgCreateSuperiorResponse, error) {
	out := new(MsgCreateSuperiorResponse)
	err := c.cc.Invoke(ctx, Msg_CreateSuperior_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateSuperior(ctx context.Context, in *MsgUpdateSuperior, opts ...grpc.CallOption) (*MsgUpdateSuperiorResponse, error) {
	out := new(MsgUpdateSuperiorResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateSuperior_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitReputationPointChangeData(ctx context.Context, in *MsgSubmitReputationPointChangeData, opts ...grpc.CallOption) (*MsgSubmitReputationPointChangeDataResponse, error) {
	out := new(MsgSubmitReputationPointChangeDataResponse)
	err := c.cc.Invoke(ctx, Msg_SubmitReputationPointChangeData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitCheatStatusCR(ctx context.Context, in *MsgSubmitCheatStatusCR, opts ...grpc.CallOption) (*MsgSubmitCheatStatusCRResponse, error) {
	out := new(MsgSubmitCheatStatusCRResponse)
	err := c.cc.Invoke(ctx, Msg_SubmitCheatStatusCR_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParam(context.Context, *MsgUpdateParam) (*MsgUpdateParamResponse, error)
	SubmitWorkreports(context.Context, *MsgSubmitWorkreports) (*MsgSubmitWorkreportsResponse, error)
	CreateSuperior(context.Context, *MsgCreateSuperior) (*MsgCreateSuperiorResponse, error)
	UpdateSuperior(context.Context, *MsgUpdateSuperior) (*MsgUpdateSuperiorResponse, error)
	SubmitReputationPointChangeData(context.Context, *MsgSubmitReputationPointChangeData) (*MsgSubmitReputationPointChangeDataResponse, error)
	SubmitCheatStatusCR(context.Context, *MsgSubmitCheatStatusCR) (*MsgSubmitCheatStatusCRResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) UpdateParam(context.Context, *MsgUpdateParam) (*MsgUpdateParamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParam not implemented")
}
func (UnimplementedMsgServer) SubmitWorkreports(context.Context, *MsgSubmitWorkreports) (*MsgSubmitWorkreportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitWorkreports not implemented")
}
func (UnimplementedMsgServer) CreateSuperior(context.Context, *MsgCreateSuperior) (*MsgCreateSuperiorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSuperior not implemented")
}
func (UnimplementedMsgServer) UpdateSuperior(context.Context, *MsgUpdateSuperior) (*MsgUpdateSuperiorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSuperior not implemented")
}
func (UnimplementedMsgServer) SubmitReputationPointChangeData(context.Context, *MsgSubmitReputationPointChangeData) (*MsgSubmitReputationPointChangeDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitReputationPointChangeData not implemented")
}
func (UnimplementedMsgServer) SubmitCheatStatusCR(context.Context, *MsgSubmitCheatStatusCR) (*MsgSubmitCheatStatusCRResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitCheatStatusCR not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_UpdateParam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateParam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParam(ctx, req.(*MsgUpdateParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitWorkreports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitWorkreports)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitWorkreports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SubmitWorkreports_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitWorkreports(ctx, req.(*MsgSubmitWorkreports))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateSuperior_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateSuperior)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateSuperior(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateSuperior_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateSuperior(ctx, req.(*MsgCreateSuperior))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateSuperior_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateSuperior)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateSuperior(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateSuperior_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateSuperior(ctx, req.(*MsgUpdateSuperior))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitReputationPointChangeData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitReputationPointChangeData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitReputationPointChangeData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SubmitReputationPointChangeData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitReputationPointChangeData(ctx, req.(*MsgSubmitReputationPointChangeData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitCheatStatusCR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitCheatStatusCR)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitCheatStatusCR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SubmitCheatStatusCR_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitCheatStatusCR(ctx, req.(*MsgSubmitCheatStatusCR))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "enreach.workload.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParam",
			Handler:    _Msg_UpdateParam_Handler,
		},
		{
			MethodName: "SubmitWorkreports",
			Handler:    _Msg_SubmitWorkreports_Handler,
		},
		{
			MethodName: "CreateSuperior",
			Handler:    _Msg_CreateSuperior_Handler,
		},
		{
			MethodName: "UpdateSuperior",
			Handler:    _Msg_UpdateSuperior_Handler,
		},
		{
			MethodName: "SubmitReputationPointChangeData",
			Handler:    _Msg_SubmitReputationPointChangeData_Handler,
		},
		{
			MethodName: "SubmitCheatStatusCR",
			Handler:    _Msg_SubmitCheatStatusCR_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "enreach/workload/tx.proto",
}
