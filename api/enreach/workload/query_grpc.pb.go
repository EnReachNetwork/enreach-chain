// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: enreach/workload/query.proto

package workload

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName                            = "/enreach.workload.Query/Params"
	Query_EpochLength_FullMethodName                       = "/enreach.workload.Query/EpochLength"
	Query_CurrentEpoch_FullMethodName                      = "/enreach.workload.Query/CurrentEpoch"
	Query_NodeWorkload_FullMethodName                      = "/enreach.workload.Query/NodeWorkload"
	Query_AllNodeWorkloadByEpoch_FullMethodName            = "/enreach.workload.Query/AllNodeWorkloadByEpoch"
	Query_ManagerWorkload_FullMethodName                   = "/enreach.workload.Query/ManagerWorkload"
	Query_AllManagerWorkloadByEpoch_FullMethodName         = "/enreach.workload.Query/AllManagerWorkloadByEpoch"
	Query_Workreport_FullMethodName                        = "/enreach.workload.Query/Workreport"
	Query_AllWorkreportByEpoch_FullMethodName              = "/enreach.workload.Query/AllWorkreportByEpoch"
	Query_WorkreportProcessBatchSize_FullMethodName        = "/enreach.workload.Query/WorkreportProcessBatchSize"
	Query_HistoryEpochDataDepth_FullMethodName             = "/enreach.workload.Query/HistoryEpochDataDepth"
	Query_EpochProcessData_FullMethodName                  = "/enreach.workload.Query/EpochProcessData"
	Query_AllEpochProcessData_FullMethodName               = "/enreach.workload.Query/AllEpochProcessData"
	Query_Superior_FullMethodName                          = "/enreach.workload.Query/Superior"
	Query_EraLength_FullMethodName                         = "/enreach.workload.Query/EraLength"
	Query_CurrentEra_FullMethodName                        = "/enreach.workload.Query/CurrentEra"
	Query_ReputationPointChangeData_FullMethodName         = "/enreach.workload.Query/ReputationPointChangeData"
	Query_AllReputationPointChangeDataByEra_FullMethodName = "/enreach.workload.Query/AllReputationPointChangeDataByEra"
	Query_ReputationPoint_FullMethodName                   = "/enreach.workload.Query/ReputationPoint"
	Query_LatestReputationPoint_FullMethodName             = "/enreach.workload.Query/LatestReputationPoint"
	Query_AllReputationPointByEra_FullMethodName           = "/enreach.workload.Query/AllReputationPointByEra"
	Query_EraProcessData_FullMethodName                    = "/enreach.workload.Query/EraProcessData"
	Query_AllEraProcessData_FullMethodName                 = "/enreach.workload.Query/AllEraProcessData"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries epoch
	EpochLength(ctx context.Context, in *QueryGetEpochLengthRequest, opts ...grpc.CallOption) (*QueryGetEpochLengthResponse, error)
	CurrentEpoch(ctx context.Context, in *QueryGetCurrentEpochRequest, opts ...grpc.CallOption) (*QueryGetCurrentEpochResponse, error)
	// Queries a list of Node Workload items.
	NodeWorkload(ctx context.Context, in *QueryGetNodeWorkloadRequest, opts ...grpc.CallOption) (*QueryGetNodeWorkloadResponse, error)
	AllNodeWorkloadByEpoch(ctx context.Context, in *QueryGetAllNodeWorkloadByEpochRequest, opts ...grpc.CallOption) (*QueryGetAllNodeWorkloadByEpochResponse, error)
	// Queries a list of Manager Workload items.
	ManagerWorkload(ctx context.Context, in *QueryGetManagerWorkloadRequest, opts ...grpc.CallOption) (*QueryGetManagerWorkloadResponse, error)
	AllManagerWorkloadByEpoch(ctx context.Context, in *QueryGetAllManagerWorkloadByEpochRequest, opts ...grpc.CallOption) (*QueryGetAllManagerWorkloadByEpochResponse, error)
	// Queries a list of Workreport items.
	Workreport(ctx context.Context, in *QueryGetWorkreportRequest, opts ...grpc.CallOption) (*QueryGetWorkreportResponse, error)
	AllWorkreportByEpoch(ctx context.Context, in *QueryGetAllWorkreportByEpochRequest, opts ...grpc.CallOption) (*QueryGetAllWorkreportByEpochResponse, error)
	// Queries some param settings
	WorkreportProcessBatchSize(ctx context.Context, in *QueryGetWorkreportProcessBatchSizeRequest, opts ...grpc.CallOption) (*QueryGetWorkreportProcessBatchSizeResponse, error)
	HistoryEpochDataDepth(ctx context.Context, in *QueryGetHistoryEpochDataDepthRequest, opts ...grpc.CallOption) (*QueryGetHistoryEpochDataDepthResponse, error)
	EpochProcessData(ctx context.Context, in *QueryGetEpochProcessDataRequest, opts ...grpc.CallOption) (*QueryGetEpochProcessDataResponse, error)
	AllEpochProcessData(ctx context.Context, in *QueryGetAllEpochProcessDataRequest, opts ...grpc.CallOption) (*QueryGetAllEpochProcessDataResponse, error)
	// Queries a Superior
	Superior(ctx context.Context, in *QueryGetSuperiorRequest, opts ...grpc.CallOption) (*QueryGetSuperiorResponse, error)
	// Queries era
	EraLength(ctx context.Context, in *QueryGetEraLengthRequest, opts ...grpc.CallOption) (*QueryGetEraLengthResponse, error)
	CurrentEra(ctx context.Context, in *QueryGetCurrentEraRequest, opts ...grpc.CallOption) (*QueryGetCurrentEraResponse, error)
	// Queries a list of ReputationPointChangeData items.
	ReputationPointChangeData(ctx context.Context, in *QueryGetReputationPointChangeDataRequest, opts ...grpc.CallOption) (*QueryGetReputationPointChangeDataResponse, error)
	AllReputationPointChangeDataByEra(ctx context.Context, in *QueryGetAllReputationPointChangeDataByEraRequest, opts ...grpc.CallOption) (*QueryGetAllReputationPointChangeDataByEraResponse, error)
	// Queries a list of ReputationPoint items.
	ReputationPoint(ctx context.Context, in *QueryGetReputationPointRequest, opts ...grpc.CallOption) (*QueryGetReputationPointResponse, error)
	LatestReputationPoint(ctx context.Context, in *QueryGetLatestReputationPointRequest, opts ...grpc.CallOption) (*QueryGetLatestReputationPointResponse, error)
	AllReputationPointByEra(ctx context.Context, in *QueryGetAllReputationPointByEraRequest, opts ...grpc.CallOption) (*QueryGetAllReputationPointByEraResponse, error)
	// Queries a list of EpochProcessData items.
	EraProcessData(ctx context.Context, in *QueryGetEraProcessDataRequest, opts ...grpc.CallOption) (*QueryGetEraProcessDataResponse, error)
	AllEraProcessData(ctx context.Context, in *QueryGetAllEraProcessDataRequest, opts ...grpc.CallOption) (*QueryGetAllEraProcessDataResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EpochLength(ctx context.Context, in *QueryGetEpochLengthRequest, opts ...grpc.CallOption) (*QueryGetEpochLengthResponse, error) {
	out := new(QueryGetEpochLengthResponse)
	err := c.cc.Invoke(ctx, Query_EpochLength_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CurrentEpoch(ctx context.Context, in *QueryGetCurrentEpochRequest, opts ...grpc.CallOption) (*QueryGetCurrentEpochResponse, error) {
	out := new(QueryGetCurrentEpochResponse)
	err := c.cc.Invoke(ctx, Query_CurrentEpoch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NodeWorkload(ctx context.Context, in *QueryGetNodeWorkloadRequest, opts ...grpc.CallOption) (*QueryGetNodeWorkloadResponse, error) {
	out := new(QueryGetNodeWorkloadResponse)
	err := c.cc.Invoke(ctx, Query_NodeWorkload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllNodeWorkloadByEpoch(ctx context.Context, in *QueryGetAllNodeWorkloadByEpochRequest, opts ...grpc.CallOption) (*QueryGetAllNodeWorkloadByEpochResponse, error) {
	out := new(QueryGetAllNodeWorkloadByEpochResponse)
	err := c.cc.Invoke(ctx, Query_AllNodeWorkloadByEpoch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ManagerWorkload(ctx context.Context, in *QueryGetManagerWorkloadRequest, opts ...grpc.CallOption) (*QueryGetManagerWorkloadResponse, error) {
	out := new(QueryGetManagerWorkloadResponse)
	err := c.cc.Invoke(ctx, Query_ManagerWorkload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllManagerWorkloadByEpoch(ctx context.Context, in *QueryGetAllManagerWorkloadByEpochRequest, opts ...grpc.CallOption) (*QueryGetAllManagerWorkloadByEpochResponse, error) {
	out := new(QueryGetAllManagerWorkloadByEpochResponse)
	err := c.cc.Invoke(ctx, Query_AllManagerWorkloadByEpoch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Workreport(ctx context.Context, in *QueryGetWorkreportRequest, opts ...grpc.CallOption) (*QueryGetWorkreportResponse, error) {
	out := new(QueryGetWorkreportResponse)
	err := c.cc.Invoke(ctx, Query_Workreport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllWorkreportByEpoch(ctx context.Context, in *QueryGetAllWorkreportByEpochRequest, opts ...grpc.CallOption) (*QueryGetAllWorkreportByEpochResponse, error) {
	out := new(QueryGetAllWorkreportByEpochResponse)
	err := c.cc.Invoke(ctx, Query_AllWorkreportByEpoch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) WorkreportProcessBatchSize(ctx context.Context, in *QueryGetWorkreportProcessBatchSizeRequest, opts ...grpc.CallOption) (*QueryGetWorkreportProcessBatchSizeResponse, error) {
	out := new(QueryGetWorkreportProcessBatchSizeResponse)
	err := c.cc.Invoke(ctx, Query_WorkreportProcessBatchSize_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HistoryEpochDataDepth(ctx context.Context, in *QueryGetHistoryEpochDataDepthRequest, opts ...grpc.CallOption) (*QueryGetHistoryEpochDataDepthResponse, error) {
	out := new(QueryGetHistoryEpochDataDepthResponse)
	err := c.cc.Invoke(ctx, Query_HistoryEpochDataDepth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EpochProcessData(ctx context.Context, in *QueryGetEpochProcessDataRequest, opts ...grpc.CallOption) (*QueryGetEpochProcessDataResponse, error) {
	out := new(QueryGetEpochProcessDataResponse)
	err := c.cc.Invoke(ctx, Query_EpochProcessData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllEpochProcessData(ctx context.Context, in *QueryGetAllEpochProcessDataRequest, opts ...grpc.CallOption) (*QueryGetAllEpochProcessDataResponse, error) {
	out := new(QueryGetAllEpochProcessDataResponse)
	err := c.cc.Invoke(ctx, Query_AllEpochProcessData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Superior(ctx context.Context, in *QueryGetSuperiorRequest, opts ...grpc.CallOption) (*QueryGetSuperiorResponse, error) {
	out := new(QueryGetSuperiorResponse)
	err := c.cc.Invoke(ctx, Query_Superior_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EraLength(ctx context.Context, in *QueryGetEraLengthRequest, opts ...grpc.CallOption) (*QueryGetEraLengthResponse, error) {
	out := new(QueryGetEraLengthResponse)
	err := c.cc.Invoke(ctx, Query_EraLength_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CurrentEra(ctx context.Context, in *QueryGetCurrentEraRequest, opts ...grpc.CallOption) (*QueryGetCurrentEraResponse, error) {
	out := new(QueryGetCurrentEraResponse)
	err := c.cc.Invoke(ctx, Query_CurrentEra_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ReputationPointChangeData(ctx context.Context, in *QueryGetReputationPointChangeDataRequest, opts ...grpc.CallOption) (*QueryGetReputationPointChangeDataResponse, error) {
	out := new(QueryGetReputationPointChangeDataResponse)
	err := c.cc.Invoke(ctx, Query_ReputationPointChangeData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllReputationPointChangeDataByEra(ctx context.Context, in *QueryGetAllReputationPointChangeDataByEraRequest, opts ...grpc.CallOption) (*QueryGetAllReputationPointChangeDataByEraResponse, error) {
	out := new(QueryGetAllReputationPointChangeDataByEraResponse)
	err := c.cc.Invoke(ctx, Query_AllReputationPointChangeDataByEra_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ReputationPoint(ctx context.Context, in *QueryGetReputationPointRequest, opts ...grpc.CallOption) (*QueryGetReputationPointResponse, error) {
	out := new(QueryGetReputationPointResponse)
	err := c.cc.Invoke(ctx, Query_ReputationPoint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LatestReputationPoint(ctx context.Context, in *QueryGetLatestReputationPointRequest, opts ...grpc.CallOption) (*QueryGetLatestReputationPointResponse, error) {
	out := new(QueryGetLatestReputationPointResponse)
	err := c.cc.Invoke(ctx, Query_LatestReputationPoint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllReputationPointByEra(ctx context.Context, in *QueryGetAllReputationPointByEraRequest, opts ...grpc.CallOption) (*QueryGetAllReputationPointByEraResponse, error) {
	out := new(QueryGetAllReputationPointByEraResponse)
	err := c.cc.Invoke(ctx, Query_AllReputationPointByEra_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EraProcessData(ctx context.Context, in *QueryGetEraProcessDataRequest, opts ...grpc.CallOption) (*QueryGetEraProcessDataResponse, error) {
	out := new(QueryGetEraProcessDataResponse)
	err := c.cc.Invoke(ctx, Query_EraProcessData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllEraProcessData(ctx context.Context, in *QueryGetAllEraProcessDataRequest, opts ...grpc.CallOption) (*QueryGetAllEraProcessDataResponse, error) {
	out := new(QueryGetAllEraProcessDataResponse)
	err := c.cc.Invoke(ctx, Query_AllEraProcessData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries epoch
	EpochLength(context.Context, *QueryGetEpochLengthRequest) (*QueryGetEpochLengthResponse, error)
	CurrentEpoch(context.Context, *QueryGetCurrentEpochRequest) (*QueryGetCurrentEpochResponse, error)
	// Queries a list of Node Workload items.
	NodeWorkload(context.Context, *QueryGetNodeWorkloadRequest) (*QueryGetNodeWorkloadResponse, error)
	AllNodeWorkloadByEpoch(context.Context, *QueryGetAllNodeWorkloadByEpochRequest) (*QueryGetAllNodeWorkloadByEpochResponse, error)
	// Queries a list of Manager Workload items.
	ManagerWorkload(context.Context, *QueryGetManagerWorkloadRequest) (*QueryGetManagerWorkloadResponse, error)
	AllManagerWorkloadByEpoch(context.Context, *QueryGetAllManagerWorkloadByEpochRequest) (*QueryGetAllManagerWorkloadByEpochResponse, error)
	// Queries a list of Workreport items.
	Workreport(context.Context, *QueryGetWorkreportRequest) (*QueryGetWorkreportResponse, error)
	AllWorkreportByEpoch(context.Context, *QueryGetAllWorkreportByEpochRequest) (*QueryGetAllWorkreportByEpochResponse, error)
	// Queries some param settings
	WorkreportProcessBatchSize(context.Context, *QueryGetWorkreportProcessBatchSizeRequest) (*QueryGetWorkreportProcessBatchSizeResponse, error)
	HistoryEpochDataDepth(context.Context, *QueryGetHistoryEpochDataDepthRequest) (*QueryGetHistoryEpochDataDepthResponse, error)
	EpochProcessData(context.Context, *QueryGetEpochProcessDataRequest) (*QueryGetEpochProcessDataResponse, error)
	AllEpochProcessData(context.Context, *QueryGetAllEpochProcessDataRequest) (*QueryGetAllEpochProcessDataResponse, error)
	// Queries a Superior
	Superior(context.Context, *QueryGetSuperiorRequest) (*QueryGetSuperiorResponse, error)
	// Queries era
	EraLength(context.Context, *QueryGetEraLengthRequest) (*QueryGetEraLengthResponse, error)
	CurrentEra(context.Context, *QueryGetCurrentEraRequest) (*QueryGetCurrentEraResponse, error)
	// Queries a list of ReputationPointChangeData items.
	ReputationPointChangeData(context.Context, *QueryGetReputationPointChangeDataRequest) (*QueryGetReputationPointChangeDataResponse, error)
	AllReputationPointChangeDataByEra(context.Context, *QueryGetAllReputationPointChangeDataByEraRequest) (*QueryGetAllReputationPointChangeDataByEraResponse, error)
	// Queries a list of ReputationPoint items.
	ReputationPoint(context.Context, *QueryGetReputationPointRequest) (*QueryGetReputationPointResponse, error)
	LatestReputationPoint(context.Context, *QueryGetLatestReputationPointRequest) (*QueryGetLatestReputationPointResponse, error)
	AllReputationPointByEra(context.Context, *QueryGetAllReputationPointByEraRequest) (*QueryGetAllReputationPointByEraResponse, error)
	// Queries a list of EpochProcessData items.
	EraProcessData(context.Context, *QueryGetEraProcessDataRequest) (*QueryGetEraProcessDataResponse, error)
	AllEraProcessData(context.Context, *QueryGetAllEraProcessDataRequest) (*QueryGetAllEraProcessDataResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) EpochLength(context.Context, *QueryGetEpochLengthRequest) (*QueryGetEpochLengthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EpochLength not implemented")
}
func (UnimplementedQueryServer) CurrentEpoch(context.Context, *QueryGetCurrentEpochRequest) (*QueryGetCurrentEpochResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentEpoch not implemented")
}
func (UnimplementedQueryServer) NodeWorkload(context.Context, *QueryGetNodeWorkloadRequest) (*QueryGetNodeWorkloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeWorkload not implemented")
}
func (UnimplementedQueryServer) AllNodeWorkloadByEpoch(context.Context, *QueryGetAllNodeWorkloadByEpochRequest) (*QueryGetAllNodeWorkloadByEpochResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllNodeWorkloadByEpoch not implemented")
}
func (UnimplementedQueryServer) ManagerWorkload(context.Context, *QueryGetManagerWorkloadRequest) (*QueryGetManagerWorkloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManagerWorkload not implemented")
}
func (UnimplementedQueryServer) AllManagerWorkloadByEpoch(context.Context, *QueryGetAllManagerWorkloadByEpochRequest) (*QueryGetAllManagerWorkloadByEpochResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllManagerWorkloadByEpoch not implemented")
}
func (UnimplementedQueryServer) Workreport(context.Context, *QueryGetWorkreportRequest) (*QueryGetWorkreportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Workreport not implemented")
}
func (UnimplementedQueryServer) AllWorkreportByEpoch(context.Context, *QueryGetAllWorkreportByEpochRequest) (*QueryGetAllWorkreportByEpochResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllWorkreportByEpoch not implemented")
}
func (UnimplementedQueryServer) WorkreportProcessBatchSize(context.Context, *QueryGetWorkreportProcessBatchSizeRequest) (*QueryGetWorkreportProcessBatchSizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorkreportProcessBatchSize not implemented")
}
func (UnimplementedQueryServer) HistoryEpochDataDepth(context.Context, *QueryGetHistoryEpochDataDepthRequest) (*QueryGetHistoryEpochDataDepthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HistoryEpochDataDepth not implemented")
}
func (UnimplementedQueryServer) EpochProcessData(context.Context, *QueryGetEpochProcessDataRequest) (*QueryGetEpochProcessDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EpochProcessData not implemented")
}
func (UnimplementedQueryServer) AllEpochProcessData(context.Context, *QueryGetAllEpochProcessDataRequest) (*QueryGetAllEpochProcessDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllEpochProcessData not implemented")
}
func (UnimplementedQueryServer) Superior(context.Context, *QueryGetSuperiorRequest) (*QueryGetSuperiorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Superior not implemented")
}
func (UnimplementedQueryServer) EraLength(context.Context, *QueryGetEraLengthRequest) (*QueryGetEraLengthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EraLength not implemented")
}
func (UnimplementedQueryServer) CurrentEra(context.Context, *QueryGetCurrentEraRequest) (*QueryGetCurrentEraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentEra not implemented")
}
func (UnimplementedQueryServer) ReputationPointChangeData(context.Context, *QueryGetReputationPointChangeDataRequest) (*QueryGetReputationPointChangeDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReputationPointChangeData not implemented")
}
func (UnimplementedQueryServer) AllReputationPointChangeDataByEra(context.Context, *QueryGetAllReputationPointChangeDataByEraRequest) (*QueryGetAllReputationPointChangeDataByEraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllReputationPointChangeDataByEra not implemented")
}
func (UnimplementedQueryServer) ReputationPoint(context.Context, *QueryGetReputationPointRequest) (*QueryGetReputationPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReputationPoint not implemented")
}
func (UnimplementedQueryServer) LatestReputationPoint(context.Context, *QueryGetLatestReputationPointRequest) (*QueryGetLatestReputationPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LatestReputationPoint not implemented")
}
func (UnimplementedQueryServer) AllReputationPointByEra(context.Context, *QueryGetAllReputationPointByEraRequest) (*QueryGetAllReputationPointByEraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllReputationPointByEra not implemented")
}
func (UnimplementedQueryServer) EraProcessData(context.Context, *QueryGetEraProcessDataRequest) (*QueryGetEraProcessDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EraProcessData not implemented")
}
func (UnimplementedQueryServer) AllEraProcessData(context.Context, *QueryGetAllEraProcessDataRequest) (*QueryGetAllEraProcessDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllEraProcessData not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EpochLength_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetEpochLengthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EpochLength(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_EpochLength_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EpochLength(ctx, req.(*QueryGetEpochLengthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CurrentEpoch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCurrentEpochRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CurrentEpoch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_CurrentEpoch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CurrentEpoch(ctx, req.(*QueryGetCurrentEpochRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NodeWorkload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetNodeWorkloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NodeWorkload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_NodeWorkload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NodeWorkload(ctx, req.(*QueryGetNodeWorkloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllNodeWorkloadByEpoch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAllNodeWorkloadByEpochRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllNodeWorkloadByEpoch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_AllNodeWorkloadByEpoch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllNodeWorkloadByEpoch(ctx, req.(*QueryGetAllNodeWorkloadByEpochRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ManagerWorkload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetManagerWorkloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ManagerWorkload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ManagerWorkload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ManagerWorkload(ctx, req.(*QueryGetManagerWorkloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllManagerWorkloadByEpoch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAllManagerWorkloadByEpochRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllManagerWorkloadByEpoch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_AllManagerWorkloadByEpoch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllManagerWorkloadByEpoch(ctx, req.(*QueryGetAllManagerWorkloadByEpochRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Workreport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetWorkreportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Workreport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Workreport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Workreport(ctx, req.(*QueryGetWorkreportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllWorkreportByEpoch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAllWorkreportByEpochRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllWorkreportByEpoch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_AllWorkreportByEpoch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllWorkreportByEpoch(ctx, req.(*QueryGetAllWorkreportByEpochRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_WorkreportProcessBatchSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetWorkreportProcessBatchSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).WorkreportProcessBatchSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_WorkreportProcessBatchSize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).WorkreportProcessBatchSize(ctx, req.(*QueryGetWorkreportProcessBatchSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HistoryEpochDataDepth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetHistoryEpochDataDepthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HistoryEpochDataDepth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_HistoryEpochDataDepth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HistoryEpochDataDepth(ctx, req.(*QueryGetHistoryEpochDataDepthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EpochProcessData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetEpochProcessDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EpochProcessData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_EpochProcessData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EpochProcessData(ctx, req.(*QueryGetEpochProcessDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllEpochProcessData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAllEpochProcessDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllEpochProcessData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_AllEpochProcessData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllEpochProcessData(ctx, req.(*QueryGetAllEpochProcessDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Superior_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSuperiorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Superior(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Superior_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Superior(ctx, req.(*QueryGetSuperiorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EraLength_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetEraLengthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EraLength(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_EraLength_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EraLength(ctx, req.(*QueryGetEraLengthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CurrentEra_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCurrentEraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CurrentEra(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_CurrentEra_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CurrentEra(ctx, req.(*QueryGetCurrentEraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ReputationPointChangeData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetReputationPointChangeDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ReputationPointChangeData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ReputationPointChangeData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ReputationPointChangeData(ctx, req.(*QueryGetReputationPointChangeDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllReputationPointChangeDataByEra_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAllReputationPointChangeDataByEraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllReputationPointChangeDataByEra(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_AllReputationPointChangeDataByEra_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllReputationPointChangeDataByEra(ctx, req.(*QueryGetAllReputationPointChangeDataByEraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ReputationPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetReputationPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ReputationPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ReputationPoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ReputationPoint(ctx, req.(*QueryGetReputationPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LatestReputationPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetLatestReputationPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LatestReputationPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_LatestReputationPoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LatestReputationPoint(ctx, req.(*QueryGetLatestReputationPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllReputationPointByEra_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAllReputationPointByEraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllReputationPointByEra(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_AllReputationPointByEra_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllReputationPointByEra(ctx, req.(*QueryGetAllReputationPointByEraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EraProcessData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetEraProcessDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EraProcessData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_EraProcessData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EraProcessData(ctx, req.(*QueryGetEraProcessDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllEraProcessData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAllEraProcessDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllEraProcessData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_AllEraProcessData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllEraProcessData(ctx, req.(*QueryGetAllEraProcessDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "enreach.workload.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "EpochLength",
			Handler:    _Query_EpochLength_Handler,
		},
		{
			MethodName: "CurrentEpoch",
			Handler:    _Query_CurrentEpoch_Handler,
		},
		{
			MethodName: "NodeWorkload",
			Handler:    _Query_NodeWorkload_Handler,
		},
		{
			MethodName: "AllNodeWorkloadByEpoch",
			Handler:    _Query_AllNodeWorkloadByEpoch_Handler,
		},
		{
			MethodName: "ManagerWorkload",
			Handler:    _Query_ManagerWorkload_Handler,
		},
		{
			MethodName: "AllManagerWorkloadByEpoch",
			Handler:    _Query_AllManagerWorkloadByEpoch_Handler,
		},
		{
			MethodName: "Workreport",
			Handler:    _Query_Workreport_Handler,
		},
		{
			MethodName: "AllWorkreportByEpoch",
			Handler:    _Query_AllWorkreportByEpoch_Handler,
		},
		{
			MethodName: "WorkreportProcessBatchSize",
			Handler:    _Query_WorkreportProcessBatchSize_Handler,
		},
		{
			MethodName: "HistoryEpochDataDepth",
			Handler:    _Query_HistoryEpochDataDepth_Handler,
		},
		{
			MethodName: "EpochProcessData",
			Handler:    _Query_EpochProcessData_Handler,
		},
		{
			MethodName: "AllEpochProcessData",
			Handler:    _Query_AllEpochProcessData_Handler,
		},
		{
			MethodName: "Superior",
			Handler:    _Query_Superior_Handler,
		},
		{
			MethodName: "EraLength",
			Handler:    _Query_EraLength_Handler,
		},
		{
			MethodName: "CurrentEra",
			Handler:    _Query_CurrentEra_Handler,
		},
		{
			MethodName: "ReputationPointChangeData",
			Handler:    _Query_ReputationPointChangeData_Handler,
		},
		{
			MethodName: "AllReputationPointChangeDataByEra",
			Handler:    _Query_AllReputationPointChangeDataByEra_Handler,
		},
		{
			MethodName: "ReputationPoint",
			Handler:    _Query_ReputationPoint_Handler,
		},
		{
			MethodName: "LatestReputationPoint",
			Handler:    _Query_LatestReputationPoint_Handler,
		},
		{
			MethodName: "AllReputationPointByEra",
			Handler:    _Query_AllReputationPointByEra_Handler,
		},
		{
			MethodName: "EraProcessData",
			Handler:    _Query_EraProcessData_Handler,
		},
		{
			MethodName: "AllEraProcessData",
			Handler:    _Query_AllEraProcessData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "enreach/workload/query.proto",
}
