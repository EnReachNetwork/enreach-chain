syntax = "proto3";

package enreach.workload;

import "amino/amino.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "enreach/workload/params.proto";
import "enreach/workload/workload.proto";
import "enreach/workload/workreport.proto";
import "enreach/workload/superior.proto";
import "enreach/workload/reputationpoint.proto";

option go_package = "enreach/x/workload/types";

// Query defines the gRPC querier service.
service Query {
  
  // Parameters queries the parameters of the module.
  rpc Params (QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/enreach/workload/params";
  
  }

  // Queries epoch
  rpc EpochLength  (QueryGetEpochLengthRequest ) returns (QueryGetEpochLengthResponse ) {
    option (google.api.http).get = "/enreach/workload/epoch/length";
  
  }
  rpc CurrentEpoch (QueryGetCurrentEpochRequest) returns (QueryGetCurrentEpochResponse) {
    option (google.api.http).get = "/enreach/workload/epoch/currentepoch";
  
  }
  
  // Queries a list of Node Workload items.
  rpc NodeWorkload    (QueryGetNodeWorkloadRequest) returns (QueryGetNodeWorkloadResponse) {
    option (google.api.http).get = "/enreach/workload/node_workload/{epoch}/{nodeID}";
  
  }
  rpc AllNodeWorkloadByEpoch (QueryGetAllNodeWorkloadByEpochRequest) returns (QueryGetAllNodeWorkloadByEpochResponse) {
    option (google.api.http).get = "/enreach/workload/node_workloads/{epoch}";
  
  }

  // Queries a list of Manager Workload items.
  rpc ManagerWorkload    (QueryGetManagerWorkloadRequest) returns (QueryGetManagerWorkloadResponse) {
    option (google.api.http).get = "/enreach/workload/manager_workload/{epoch}/{managerAccount}";
  
  }
  rpc AllManagerWorkloadByEpoch (QueryGetAllManagerWorkloadByEpochRequest) returns (QueryGetAllManagerWorkloadByEpochResponse) {
    option (google.api.http).get = "/enreach/workload/manager_workloads/{epoch}";
  
  }

  // Queries a list of Workreport items.
  rpc Workreport    (QueryGetWorkreportRequest) returns (QueryGetWorkreportResponse) {
    option (google.api.http).get = "/enreach/workload/workreport/{epoch}/{nodeID}";
  
  }
  rpc AllWorkreportByEpoch (QueryGetAllWorkreportByEpochRequest) returns (QueryGetAllWorkreportByEpochResponse) {
    option (google.api.http).get = "/enreach/workload/workreports/{epoch}";
  
  }

  // Queries some param settings
  rpc WorkreportProcessBatchSize    (QueryGetWorkreportProcessBatchSizeRequest) returns (QueryGetWorkreportProcessBatchSizeResponse) {
    option (google.api.http).get = "/enreach/workload/workreport/process_batch_size";
  
  }
  rpc HistoryEpochDataDepth    (QueryGetHistoryEpochDataDepthRequest) returns (QueryGetHistoryEpochDataDepthResponse) {
    option (google.api.http).get = "/enreach/workload/workreport/history_epoch_data_depth";
  
  }
  rpc EpochProcessData    (QueryGetEpochProcessDataRequest) returns (QueryGetEpochProcessDataResponse) {
    option (google.api.http).get = "/enreach/workload/workreport/epoch_process_data/{epoch}";
  
  }
  rpc AllEpochProcessData    (QueryGetAllEpochProcessDataRequest) returns (QueryGetAllEpochProcessDataResponse) {
    option (google.api.http).get = "/enreach/workload/workreport/epoch_process_datas";
  
  }

  // Queries a Superior
  rpc Superior (QueryGetSuperiorRequest) returns (QueryGetSuperiorResponse) {
    option (google.api.http).get = "/enreach/workload/superior";
  
  }


  // Queries era
  rpc EraLength  (QueryGetEraLengthRequest ) returns (QueryGetEraLengthResponse ) {
    option (google.api.http).get = "/enreach/workload/era/length";
  
  }
  rpc CurrentEra (QueryGetCurrentEraRequest) returns (QueryGetCurrentEraResponse) {
    option (google.api.http).get = "/enreach/workload/era/currentera";
  
  }

  // Queries a list of ReputationPointChangeData items.
  rpc ReputationPointChangeData    (QueryGetReputationPointChangeDataRequest) returns (QueryGetReputationPointChangeDataResponse) {
    option (google.api.http).get = "/enreach/workload/reputation_point_change_data/{era}/{nodeID}";
  
  }
  rpc AllReputationPointChangeDataByEra (QueryGetAllReputationPointChangeDataByEraRequest) returns (QueryGetAllReputationPointChangeDataByEraResponse) {
    option (google.api.http).get = "/enreach/workload/reputation_point_change_datas/{era}";
  
  }
  // Queries a list of ReputationPoint items.
  rpc ReputationPoint    (QueryGetReputationPointRequest) returns (QueryGetReputationPointResponse) {
    option (google.api.http).get = "/enreach/workload/reputation_point/{era}/{nodeID}";
  
  }
  rpc LatestReputationPoint    (QueryGetLatestReputationPointRequest) returns (QueryGetLatestReputationPointResponse) {
    option (google.api.http).get = "/enreach/workload/latest_reputation_point/{nodeID}";
  
  }
  rpc AllReputationPointByEra (QueryGetAllReputationPointByEraRequest) returns (QueryGetAllReputationPointByEraResponse) {
    option (google.api.http).get = "/enreach/workload/reputation_points/{era}";
  
  }

  // Queries a list of EpochProcessData items.
  rpc EraProcessData    (QueryGetEraProcessDataRequest) returns (QueryGetEraProcessDataResponse) {
    option (google.api.http).get = "/enreach/workload/workreport/era_process_data/{era}";
  
  }
  rpc AllEraProcessData    (QueryGetAllEraProcessDataRequest) returns (QueryGetAllEraProcessDataResponse) {
    option (google.api.http).get = "/enreach/workload/workreport/era_process_datas";
  
  }
}
// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

message QueryGetEpochLengthRequest {}

message QueryGetEpochLengthResponse {
  uint64 epochLength = 1;
}

message QueryGetCurrentEpochRequest {}

message QueryGetCurrentEpochResponse {
  uint64 currentEpoch = 1;
}

message QueryGetNodeWorkloadRequest {
  uint64 epoch = 1;
  string nodeID = 2;
}

message QueryGetNodeWorkloadResponse {
  NodeWorkload NodeWorkload = 1 [(gogoproto.nullable) = false];
}

message QueryGetAllNodeWorkloadByEpochRequest {
  uint64 epoch = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryGetAllNodeWorkloadByEpochResponse {
  repeated NodeWorkload NodeWorkloads   = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetManagerWorkloadRequest {
  uint64 epoch = 1;
  string managerAccount = 2;
}

message QueryGetManagerWorkloadResponse {
  ManagerWorkload ManagerWorkload = 1 [(gogoproto.nullable) = false];
}

message QueryGetAllManagerWorkloadByEpochRequest {
  uint64 epoch = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryGetAllManagerWorkloadByEpochResponse {
  repeated ManagerWorkload ManagerWorkloads   = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetWorkreportRequest {
  uint64 epoch = 1;
  string nodeID = 2;
}

message QueryGetWorkreportResponse {
  Workreport Workreport = 1 [(gogoproto.nullable) = false];
}

message QueryGetAllWorkreportByEpochRequest {
  uint64 epoch = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryGetAllWorkreportByEpochResponse {
  repeated Workreport Workreports   = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetWorkreportProcessBatchSizeRequest {
}

message QueryGetWorkreportProcessBatchSizeResponse {
  uint64   batchSize = 1;
}

message QueryGetHistoryEpochDataDepthRequest {
}

message QueryGetHistoryEpochDataDepthResponse {
  uint64   depth = 1;
}

message QueryGetEpochProcessDataRequest {
  uint64   epoch = 1;
}

message QueryGetEpochProcessDataResponse {
  EpochProcessData EpochProcessData = 1 [(gogoproto.nullable) = false];
}

message QueryGetAllEpochProcessDataRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryGetAllEpochProcessDataResponse {
  repeated EpochProcessData EpochProcessDatas = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetSuperiorRequest {}

message QueryGetSuperiorResponse {
  Superior Superior = 1 [(gogoproto.nullable) = false];
}


message QueryGetEraLengthRequest {}

message QueryGetEraLengthResponse {
  uint64 eraLength = 1;
}

message QueryGetCurrentEraRequest {}

message QueryGetCurrentEraResponse {
  uint64 currentEra = 1;
}

message QueryGetReputationPointChangeDataRequest {
  uint64 era = 1;
  string nodeID = 2;
}

message QueryGetReputationPointChangeDataResponse {
  ReputationPointChangeData ReputationPointChangeData = 1 [(gogoproto.nullable) = false];
}

message QueryGetAllReputationPointChangeDataByEraRequest {
  uint64 era = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryGetAllReputationPointChangeDataByEraResponse {
  repeated ReputationPointChangeData ReputationPointChangeDatas   = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetReputationPointRequest {
  uint64 era = 1;
  string nodeID = 2;
}

message QueryGetReputationPointResponse {
  ReputationPoint ReputationPoint = 1 [(gogoproto.nullable) = false];
}

message QueryGetLatestReputationPointRequest {
  string nodeID = 1;
}

message QueryGetLatestReputationPointResponse {
  ReputationPoint ReputationPoint = 1 [(gogoproto.nullable) = false];
}

message QueryGetAllReputationPointByEraRequest {
  uint64 era = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryGetAllReputationPointByEraResponse {
  repeated ReputationPoint ReputationPoints   = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetEraProcessDataRequest {
  uint64   era = 1;
}

message QueryGetEraProcessDataResponse {
  EraProcessData EraProcessData = 1 [(gogoproto.nullable) = false];
}

message QueryGetAllEraProcessDataRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryGetAllEraProcessDataResponse {
  repeated EraProcessData EraProcessDatas = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}