syntax = "proto3";

package enreach.workload;

import "amino/amino.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "enreach/workload/params.proto";
import "enreach/workload/workload.proto";
import "enreach/workload/workreport.proto";
import "enreach/workload/superior.proto";

option go_package = "enreach/x/workload/types";

// Query defines the gRPC querier service.
service Query {
  
  // Parameters queries the parameters of the module.
  rpc Params (QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/enreach/workload/params";
  
  }

  // Queries epoch
  rpc EpochLength  (QueryGetEpochLengthRequest ) returns (QueryGetEpochLengthResponse ) {
    option (google.api.http).get = "/enreach/workload/epoch/length";
  
  }
  rpc CurrentEpoch (QueryGetCurrentEpochRequest) returns (QueryGetCurrentEpochResponse) {
    option (google.api.http).get = "/enreach/workload/epoch/currentepoch";
  
  }
  
  // Queries a list of Workload items.
  rpc Workload    (QueryGetWorkloadRequest) returns (QueryGetWorkloadResponse) {
    option (google.api.http).get = "/enreach/workload/workload/{id}";
  
  }
  rpc WorkloadAll (QueryAllWorkloadRequest) returns (QueryAllWorkloadResponse) {
    option (google.api.http).get = "/enreach/workload/workloads";
  
  }

  // Queries a list of Workreport items.
  rpc Workreport    (QueryGetWorkreportRequest) returns (QueryGetWorkreportResponse) {
    option (google.api.http).get = "/enreach/workload/workreport/{epoch}/{nodeID}";
  
  }
  rpc AllWorkreportByEpoch (QueryGetAllWorkreportByEpochRequest) returns (QueryGetAllWorkreportByEpochResponse) {
    option (google.api.http).get = "/enreach/workload/workreports/{epoch}";
  
  }

  // Queries some param settings
  rpc WorkreportProcessBatchSize    (QueryGetWorkreportProcessBatchSizeRequest) returns (QueryGetWorkreportProcessBatchSizeResponse) {
    option (google.api.http).get = "/enreach/workload/workreport/process_batch_size";
  
  }
  rpc HistoryEpochDataDepth    (QueryGetHistoryEpochDataDepthRequest) returns (QueryGetHistoryEpochDataDepthResponse) {
    option (google.api.http).get = "/enreach/workload/workreport/history_epoch_data_depth";
  
  }
  rpc EpochProcessData    (QueryGetEpochProcessDataRequest) returns (QueryGetEpochProcessDataResponse) {
    option (google.api.http).get = "/enreach/workload/workreport/epoch_process_data/{epoch}";
  
  }
  rpc AllEpochProcessData    (QueryGetAllEpochProcessDataRequest) returns (QueryGetAllEpochProcessDataResponse) {
    option (google.api.http).get = "/enreach/workload/workreport/epoch_process_datas";
  
  }

  // Queries a Superior
  rpc Superior (QueryGetSuperiorRequest) returns (QueryGetSuperiorResponse) {
    option (google.api.http).get = "/enreach/workload/superior";
  
  }
}
// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

message QueryGetEpochLengthRequest {}

message QueryGetEpochLengthResponse {
  uint64 epochLength = 1;
}

message QueryGetCurrentEpochRequest {}

message QueryGetCurrentEpochResponse {
  uint64 currentEpoch = 1;
}

message QueryGetWorkloadRequest {
  uint64 id = 1;
}

message QueryGetWorkloadResponse {
  Workload Workload = 1 [(gogoproto.nullable) = false];
}

message QueryAllWorkloadRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllWorkloadResponse {
  repeated Workload                               Workload   = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetWorkreportRequest {
  uint64 epoch = 1;
  string nodeID = 2;
}

message QueryGetWorkreportResponse {
  Workreport Workreport = 1 [(gogoproto.nullable) = false];
}

message QueryGetAllWorkreportByEpochRequest {
  uint64 epoch = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryGetAllWorkreportByEpochResponse {
  repeated Workreport                               Workreport   = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetWorkreportProcessBatchSizeRequest {
}

message QueryGetWorkreportProcessBatchSizeResponse {
  uint64   batchSize = 1;
}

message QueryGetHistoryEpochDataDepthRequest {
}

message QueryGetHistoryEpochDataDepthResponse {
  uint64   depth = 1;
}

message QueryGetEpochProcessDataRequest {
  uint64   epoch = 1;
}

message QueryGetEpochProcessDataResponse {
  EpochProcessData EpochProcessData = 1 [(gogoproto.nullable) = false];
}

message QueryGetAllEpochProcessDataRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryGetAllEpochProcessDataResponse {
  repeated EpochProcessData EpochProcessDatas = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetSuperiorRequest {}

message QueryGetSuperiorResponse {
  Superior Superior = 1 [(gogoproto.nullable) = false];
}
