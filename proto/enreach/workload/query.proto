syntax = "proto3";

package enreach.workload;

import "amino/amino.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "enreach/workload/params.proto";
import "enreach/workload/workload.proto";
import "enreach/workload/workreport.proto";

option go_package = "enreach/x/workload/types";

// Query defines the gRPC querier service.
service Query {
  
  // Parameters queries the parameters of the module.
  rpc Params (QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/enreach/workload/params";
  
  }

  // Queries epoch
  rpc GetEpochLength  (QueryGetEpochLengthRequest ) returns (QueryGetEpochLengthResponse ) {
    option (google.api.http).get = "/enreach/manager/epoch/length";
  
  }
  rpc GetCurrentEpoch (QueryGetCurrentEpochRequest) returns (QueryGetCurrentEpochResponse) {
    option (google.api.http).get = "/enreach/manager/epoch/currentepoch";
  
  }
  
  // Queries a list of Workload items.
  rpc Workload    (QueryGetWorkloadRequest) returns (QueryGetWorkloadResponse) {
    option (google.api.http).get = "/enreach/workload/workload/{id}";
  
  }
  rpc WorkloadAll (QueryAllWorkloadRequest) returns (QueryAllWorkloadResponse) {
    option (google.api.http).get = "/enreach/workload/workloads";
  
  }

  // Queries a list of Workreport items.
  rpc GetWorkreport    (QueryGetWorkreportRequest) returns (QueryGetWorkreportResponse) {
    option (google.api.http).get = "/enreach/workload/workreport/{epoch}/{nodeID}";
  
  }
  rpc GetAllWorkreportByEpoch (QueryGetAllWorkreportByEpochRequest) returns (QueryGetAllWorkreportByEpochResponse) {
    option (google.api.http).get = "/enreach/workload/workreports/{epoch}";
  
  }
}
// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

message QueryGetEpochLengthRequest {}

message QueryGetEpochLengthResponse {
  uint64 epochLength = 1;
}

message QueryGetCurrentEpochRequest {}

message QueryGetCurrentEpochResponse {
  uint64 currentEpoch = 1;
}

message QueryGetWorkloadRequest {
  uint64 id = 1;
}

message QueryGetWorkloadResponse {
  Workload Workload = 1 [(gogoproto.nullable) = false];
}

message QueryAllWorkloadRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllWorkloadResponse {
  repeated Workload                               Workload   = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetWorkreportRequest {
  uint64 epoch = 1;
  string nodeID = 2;
}

message QueryGetWorkreportResponse {
  Workreport Workreport = 1 [(gogoproto.nullable) = false];
}

message QueryGetAllWorkreportByEpochRequest {
  uint64 epoch = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryGetAllWorkreportByEpochResponse {
  repeated Workreport                               Workreport   = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination = 2;
}